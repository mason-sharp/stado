//
// Generated by JTB 1.2.2
//

options {
   IGNORE_CASE = true;
   STATIC = false;
   UNICODE_INPUT = true;
   CHOICE_AMBIGUITY_CHECK = 1;
   CACHE_TOKENS = true;
}

PARSER_BEGIN(CSQLParser)
package org.postgresql.stado.parser.core;

import java.io.PrintStream;
import org.postgresql.stado.parser.core.syntaxtree.*;
import java.util.Vector;


public class CSQLParser 
{
   public static void main(String[] args) throws ParseException,TokenMgrError
   {
      CSQLParser parser = new CSQLParser(System.in);
      process rootnode = parser.process(System.out);
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CSQLParser)

SKIP :
{
   " "
   | "\n"
   | "\r"
   | "\t"
}

SKIP :
{
   <COMMENT_LINE: "--" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

SKIP :
{
   <COMMENT_BLOCK: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <NOT_BITWISE_: "~">
   | <LESS_: "<">
   | <EQUALS_: "=">
   | <GREATER_: ">">
   | <OR_BITWISE_: "|">
   | <MINUS_: "-">
   | <SEMICOLON_: ";">
   | <FACTORIAL_: "!">
   | <DIVIDE_: "/">
   | <QUOTE: "\"">
   | <PARENTHESIS_START_: "(">
   | <PARENTHESIS_CLOSE_: ")">
   | <ABSOLUTE_: "@">
   | <STAR_: "*">
   | <AND_BITWISE_: "&">
   | <XOR_BITWISE_: "#">
   | <MODULO_: "%">
   | <PLUS_: "+">
   | <X_: "X">
   | <Y_: "Y">
   | <Z_: "Z">
   | <GIS_SAME_: "~=">
   | <REGEX_MATCHES_CASE_INSTV_: "~*">
   | <SHIFT_LEFT_BITWISE_: "<<">
   | <LESS_EQUALS_: "<=">
   | <NOT_EQUALS_2_: "<>">
   | <GREATER_EQUALS_: ">=">
   | <SHIFT_RIGHT_BITWISE_: ">>">
   | <CONCAT_: "||">
   | <SQUARE_ROOT_: "|/">
   | <REGEX_NOT_MATCHES_: "!~">
   | <NOT_EQUALS_: "!=">
   | <FACTORIAL_PREFIX_: "!!">
   | <GIS_OVERLAPS_LEFT_: "&<">
   | <GIS_OVERLAPS_RIGHT_: "&>">
   | <GIS_OVERLAPS_: "&&">
   | <AS_: "AS">
   | <IN_: "IN">
   | <IS_: "IS">
   | <LN_: "LN">
   | <NO_: "NO">
   | <ON_: "ON">
   | <OR_: "OR">
   | <PI_: "PI">
   | <TO_: "TO">
   | <CONTAINED_WITHIN_OR_EQUALS_: "<<=">
   | <GIS_STRICT_BELOW_: "<<|">
   | <CONTAINS_OR_EQUALS_: ">>=">
   | <GIS_STRICT_ABOVE_: "|>>">
   | <CUBE_ROOT_: "||/">
   | <GIS_OVERLAPS_ABOVE_: "|&>">
   | <REGEX_NOT_MATCHES_CASE_INSTV_: "!~*">
   | <LEFTOUTER_: "(+)">
   | <GIS_OVERLAPS_BELOW_: "&<|">
   | <ABS_: "ABS">
   | <ADD_: "ADD">
   | <AGE_: "AGE">
   | <ALL_: "ALL">
   | <AND_: "AND">
   | <ANY_: "ANY">
   | <ASC_: "ASC">
   | <AVERAGE_: "AVG">
   | <BIT_: "BIT">
   | <CHR_: "CHR">
   | <COS_: "COS">
   | <COT_: "COT">
   | <CSV_: "CSV">
   | <DAY_: "DAY">
   | <DBA_: "DBA">
   | <DEC_: "DEC">
   | <DIV_: "DIV">
   | <END_: "END">
   | <EXP_: "EXP">
   | <FOR_: "FOR">
   | <INT_: "INT">
   | <LOG_: "LOG">
   | <MAX_: "MAX">
   | <MD5_: "MD5">
   | <MIN_: "MIN">
   | <MOD_: "MOD">
   | <NOT_: "NOT">
   | <NOW_: "NOW">
   | <NUM_: "NUM">
   | <RAW_: "RAW">
   | <SET_: "SET">
   | <SIN_: "SIN">
   | <SUM_: "SUM">
   | <TAN_: "TAN">
   | <ACOS_: "ACOS">
   | <ASIN_: "ASIN">
   | <ATAN_: "ATAN">
   | <ATN2_: "ATN2">
   | <BLOB_: "BLOB">
   | <BOTH: "BOTH">
   | <BYTE_: "BYTE">
   | <CASE_: "CASE">
   | <CAST_: "CAST">
   | <CBRT_: "CBRT">
   | <CEIL_: "CEIL">
   | <CHAR_: "CHAR">
   | <CIDR_: "CIDR">
   | <CLOB_: "CLOB">
   | <COPY_: "COPY">
   | <CORR_: "CORR">
   | <COSH_: "COSH">
   | <DATE_: "DATE">
   | <DESC_: "DESC">
   | <DROP_: "DROP">
   | <ELSE_: "ELSE">
   | <FROM_: "FROM">
   | <FULL_: "FULL">
   | <HOST_: "HOST">
   | <HOUR_: "HOUR">
   | <INET_: "INET">
   | <INT2_: "INT2">
   | <INT4_: "INT4">
   | <INT8_: "INT8">
   | <INTO_: "INTO">
   | <JOIN_: "JOIN">
   | <KILL_: "KILL">
   | <LEFT_: "LEFT">
   | <LIKE_: "LIKE">
   | <LONG_: "LONG">
   | <LPAD_: "LPAD">
   | <NODE_: "NODE">
   | <NULL_: "NULL">
   | <OIDS_: "OIDS">
   | <PORT_: "PORT">
   | <REAL_: "REAL">
   | <RPAD_: "RPAD">
   | <SHOW_: "SHOW">
   | <SIGN_: "SIGN">
   | <SOME_: "SOME">
   | <SQRT_: "SQRT">
   | <SRID_: "SRID">
   | <ST_M_: "ST_M">
   | <ST_X_: "ST_X">
   | <ST_Y_: "ST_Y">
   | <ST_Z_: "ST_Z">
   | <TEMP_: "TEMP">
   | <TEXT_: "TEXT">
   | <THEN_: "THEN">
   | <TIME_: "TIME">
   | <TRAN_: "TRAN">
   | <TRIM_: "TRIM">
   | <TRUE_: "TRUE">
   | <TYPE_: "TYPE">
   | <USER_: "USER">
   | <VIEW_: "VIEW">
   | <WEEK_: "WEEK">
   | <WHEN_: "WHEN">
   | <WITH_: "WITH">
   | <WORK_: "WORK">
   | <YEAR_: "YEAR">
   | <AFTER_: "AFTER">
   | <ALTER_: "ALTER">
   | <ASCII_: "ASCII">
   | <ASKML_: "ASKML">
   | <ATAN2_: "ATAN2">
   | <BEGIN_: "BEGIN">
   | <BOX2D_: "BOX2D">
   | <BOX3D_: "BOX3D">
   | <BTRIM_: "BTRIM">
   | <BYTEA_: "BYTEA">
   | <CHECK_: "CHECK">
   | <CLOSE_: "CLOSE">
   | <COUNT_: "COUNT">
   | <CROSS_: "CROSS">
   | <EVERY_: "EVERY">
   | <FALSE_: "FALSE">
   | <FETCH_: "FETCH">
   | <FIRST_: "FIRST">
   | <FIXED_: "FIXED">
   | <FLOAT_: "FLOAT">
   | <FLOOR_: "FLOOR">
   | <FORCE_: "FORCE">
   | <GRANT_: "GRANT">
   | <ILIKE_: "ILIKE">
   | <IMAGE_: "IMAGE">
   | <INDEX_: "INDEX">
   | <INNER_: "INNER">
   | <INSTR_: "INSTR">
   | <LEAST_: "LEAST">
   | <LFILL_: "LFILL">
   | <LIMIT_: "LIMIT">
   | <LOCAL_: "LOCAL">
   | <LOG10_: "LOG10">
   | <LOWER_: "LOWER">
   | <LTRIM_: "LTRIM">
   | <MONEY_: "MONEY">
   | <MONTH_: "MONTH">
   | <MULTI_: "MULTI">
   | <NCHAR_: "NCHAR">
   | <NDIMS_: "NDIMS">
   | <NODES_: "NODES">
   | <OUTER_: "OUTER">
   | <OWNER_: "OWNER">
   | <POWER_: "POWER">
   | <QUOTE_STRING_: "QUOTE">
   | <RIGHT_: "RIGHT">
   | <ROUND_: "ROUND">
   | <RTRIM_: "RTRIM">
   | <SCALE_: "SCALE">
   | <STDIN_: "STDIN">
   | <TABLE_: "TABLE">
   | <TEMPDOT_: "TEMP.">
   | <TRUNC_: "TRUNC">
   | <UNION_: "UNION">
   | <UPPER_: "UPPER">
   | <USING_: "USING">
   | <VALUE_: "VALUE">
   | <WHERE_: "WHERE">
   | <ABBREV_: "ABBREV">
   | <AREA2D_: "AREA2D">
   | <ASEWKB_: "ASEWKB">
   | <ASEWKT_: "ASEWKT">
   | <ASTEXT_: "ASTEXT">
   | <BIGINT_: "BIGINT">
   | <BINARY_: "BINARY">
   | <BIT_OR_: "BIT_OR">
   | <COLUMN_: "COLUMN">
   | <COMMIT_: "COMMIT">
   | <CONCAT_WORD: "CONCAT">
   | <CREATE_: "CREATE">
   | <CURSOR_: "CURSOR">
   | <DECODE_: "DECODE">
   | <DELETE_: "DELETE">
   | <DIRECT_: "DIRECT">
   | <ENCODE_: "ENCODE">
   | <WORD_EQUALS_: "EQUALS">
   | <ESCAPE_: "ESCAPE">
   | <EXISTS_: "EXISTS">
   | <EXTENT_: "EXTENT">
   | <FAMILY_: "FAMILY">
   | <FLOAT4_: "FLOAT4">
   | <FLOAT8_: "FLOAT8">
   | <FREEZE_: "FREEZE">
   | <GLOBAL_: "GLOBAL">
   | <HAVING_: "HAVING">
   | <INSERT_: "INSERT">
   | <ISRING_: "ISRING">
   | <LENGTH_: "LENGTH">
   | <MANUAL_: "MANUAL">
   | <MINUTE_: "MINUTE">
   | <MODIFY_: "MODIFY">
   | <MODULE_: "MODULE">
   | <NRINGS_: "NRINGS">
   | <NULLIF_: "NULLIF">
   | <NUMBER_: "NUMBER">
   | <OFFSET_: "OFFSET">
   | <PARENT_: "PARENT">
   | <PUBLIC_: "PUBLIC">
   | <RANDOM_: "RANDOM">
   | <RENAME_: "RENAME">
   | <REPEAT_: "REPEAT">
   | <REVOKE_: "REVOKE">
   | <ROTATE_: "ROTATE">
   | <SECOND_: "SECOND">
   | <SELECT_: "SELECT">
   | <SERIAL_: "SERIAL">
   | <STDDEV_: "STDDEV">
   | <STDOUT_: "STDOUT">
   | <STRPOS_: "STRPOS">
   | <SUBSTR_: "SUBSTR">
   | <TO_HEX_: "TO_HEX">
   | <UNIQUE_: "UNIQUE">
   | <UPDATE_: "UPDATE">
   | <VACUUM_: "VACUUM">
   | <VARBIT_: "VARBIT">
   | <WITHIN_: "WITHIN">
   | <ZMFLAG_: "ZMFLAG">
   | <ADDDATE_: "ADDDATE">
   | <ADDTIME_: "ADDTIME">
   | <ANALYZE_: "ANALYZE">
   | <BETWEEN_: "BETWEEN">
   | <BIT_AND_: "BIT_AND">
   | <BOOL_OR_: "BOOL_OR">
   | <CEILING_: "CEILING">
   | <CLUSTER_: "CLUSTER">
   | <COLLECT_: "COLLECT">
   | <CONVERT_: "CONVERT">
   | <CURDATE_: "CURDATE">
   | <CURTIME_: "CURTIME">
   | <DAYNAME_: "DAYNAME">
   | <DECIMAL_: "DECIMAL">
   | <DECLARE_: "DECLARE">
   | <DEFAULT_: "DEFAULT">
   | <DEGREE_: "DEGREES">
   | <EXPLAIN_: "EXPLAIN">
   | <EXTRACT_: "EXTRACT">
   | <GET_BIT_: "GET_BIT">
   | <INHERIT_: "INHERIT">
   | <INITCAP_: "INITCAP">
   | <INTEGER_: "INTEGER">
   | <ISEMPTY_: "ISEMPTY">
   | <ISVALID_: "ISVALID">
   | <LEADING: "LEADING">
   | <MACADDR_: "MACADDR">
   | <MAPCHAR_: "MAPCHAR">
   | <MASKLEN_: "MASKLEN">
   | <NATURAL_: "NATURAL">
   | <NETMASK_: "NETMASK">
   | <NETWORK_: "NETWORK">
   | <NPOINTS_: "NPOINTS">
   | <NUMERIC_: "NUMERIC">
   | <OVERLAY_: "OVERLAY">
   | <PLACING_: "PLACING">
   | <PREPARE_: "PREPARE">
   | <PUBLICDOT_: "PUBLIC.">
   | <QUARTER_: "QUARTER">
   | <RADIANS_: "RADIANS">
   | <REGR_R2_: "REGR_R2">
   | <REPLACE_: "REPLACE">
   | <ROTATEX_: "ROTATEX">
   | <ROTATEY_: "ROTATEY">
   | <ROTATEZ_: "ROTATEZ">
   | <SET_BIT_: "SET_BIT">
   | <SETSEED_: "SETSEED">
   | <SETSRID_: "SETSRID">
   | <SOUNDEX_: "SOUNDEX">
   | <SPATIAL_: "SPATIAL">
   | <ST_AREA_: "ST_AREA">
   | <STORAGE_: "STORAGE">
   | <ST_SRID_: "ST_SRID">
   | <ST_TEXT_: "ST_TEXT">
   | <SUBDATE_: "SUBDATE">
   | <SUBTIME_: "SUBTIME">
   | <TINYINT_: "TINYINT">
   | <TO_CHAR_: "TO_CHAR">
   | <TO_DATE_: "TO_DATE">
   | <VARCHAR_: "VARCHAR">
   | <VAR_POP_: "VAR_POP">
   | <VARYING_: "VARYING">
   | <VERBOSE_: "VERBOSE">
   | <VERSION_: "VERSION">
   | <ADD_NODE_: "ADD NODE">
   | <ASBINARY_: "ASBINARY">
   | <BOOL_AND_: "BOOL_AND">
   | <COALESCE_: "COALESCE">
   | <CONTAINS_: "CONTAINS">
   | <DATABASE_: "DATABASE">
   | <DATEDIFF_: "DATEDIFF">
   | <DATETIME_: "DATETIME">
   | <DESCRIBE_: "DESCRIBE">
   | <DISJOINT_: "DISJOINT">
   | <DISTANCE_: "DISTANCE">
   | <DISTINCT_: "DISTINCT">
   | <DROPBBOX_: "DROPBBOX">
   | <ENDPOINT_: "ENDPOINT">
   | <ENVELOPE_: "ENVELOPE">
   | <EXTENT3D_: "EXTENT3D">
   | <FORCE_2D_: "FORCE_2D">
   | <FORCE_3D_: "FORCE_3D">
   | <FORCE_4D_: "FORCE_4D">
   | <GEOMETRY_: "GEOMETRY">
   | <GET_BYTE_: "GET_BYTE">
   | <GREATEST_: "GREATEST">
   | <HOSTMASK_: "HOSTMASK">
   | <INHERITS_: "INHERITS">
   | <INTERVAL_: "INTERVAL">
   | <ISCLOSED_: "ISCLOSED">
   | <ISFINITE_: "ISFINITE">
   | <ISSIMPLE_: "ISSIMPLE">
   | <LAST_DAY_: "LAST_DAY">
   | <LENGTH2D_: "LENGTH2D">
   | <LENGTH3D_: "LENGTH3D">
   | <LOCATION_: "LOCATION">
   | <LONG_RAW_: "LONG RAW">
   | <LONGTEXT_: "LONGTEXT">
   | <LVARCHAR_: "LVARCHAR">
   | <MEM_SIZE_: "MEM_SIZE">
   | <NATIONAL_: "NATIONAL">
   | <NEXT_DAY_: "NEXT_DAY">
   | <OVERLAPS_: "OVERLAPS">
   | <PASSWORD_: "PASSWORD">
   | <REGCLASS_: "REGCLASS">
   | <REGR_SXX_: "REGR_SXX">
   | <REGR_SXY_: "REGR_SXY">
   | <REGR_SYY_: "REGR_SYY">
   | <RESOURCE_: "RESOURCE">
   | <ROLLBACK_: "ROLLBACK">
   | <SET_BYTE_: "SET_BYTE">
   | <SETPOINT_: "SETPOINT">
   | <SHUT_DOWN_: "SHUTDOWN">
   | <SIMPLIFY_: "SIMPLIFY">
   | <SMALLINT_: "SMALLINT">
   | <STANDARD_: "STANDARD">
   | <ST_ASGML_: "ST_ASGML">
   | <ST_ASKML_: "ST_ASKML">
   | <ST_ASSVG_: "ST_ASSVG">
   | <ST_BOX2D_: "ST_BOX2D">
   | <ST_BOX3D_: "ST_BOX3D">
   | <ST_BYTEA_: "ST_BYTEA">
   | <ST_MULTI_: "ST_MULTI">
   | <ST_NDIMS_: "ST_NDIMS">
   | <ST_POINT_: "ST_POINT">
   | <ST_SCALE_: "ST_SCALE">
   | <ST_WIDTH_: "ST_WIDTH">
   | <TINYTEXT_: "TINYTEXT">
   | <TO_ASCII_: "TO_ASCII">
   | <TRAILING: "TRAILING">
   | <TRUNCATE_: "TRUNCATE">
   | <UNLISTEN_: "UNLISTEN">
   | <UNSIGNED_: "UNSIGNED">
   | <VARCHAR2_: "VARCHAR2">
   | <VARIANCE_: "VARIANCE">
   | <VAR_SAMP_: "VAR_SAMP">
   | <ZEROFILL_: "ZEROFILL">
   | <ASHEXEWKB_: "ASHEXEWKB">
   | <BIGSERIAL_: "BIGSERIAL">
   | <BROADCAST_: "BROADCAST">
   | <CHARACHTER_: "CHARACTER">
   | <COVAR_POP_: "COVAR_POP">
   | <DATEPART_: "DATE_PART">
   | <DAYOFWEEK_: "DAYOFWEEK">
   | <DAYOFYEAR_: "DAYOFYEAR">
   | <DELIMITER_: "DELIMITER">
   | <DIMENSION_: "DIMENSION">
   | <DROP_NODE_: "DROP NODE">
   | <FORCE_3DM_: "FORCE_3DM">
   | <FORCE_3DZ_: "FORCE_3DZ">
   | <GEOMETRYN_: "GEOMETRYN">
   | <LINEMERGE_: "LINEMERGE">
   | <LOCALTIME_: "LOCALTIME">
   | <MONTHNAME_: "MONTHNAME">
   | <QPUBLICDOT_: "\"PUBLIC\".">
   | <REGR_AVGX_: "REGR_AVGX">
   | <REGR_AVGY_: "REGR_AVGY">
   | <ST_AFFINE_: "ST_AFFINE">
   | <ST_AREA2D_: "ST_AREA2D">
   | <ST_ASEWKB_: "ST_ASEWKB">
   | <ST_ASEWKT_: "ST_ASEWKT">
   | <ST_ASTEXT_: "ST_ASTEXT">
   | <ST_BUFFER_: "ST_BUFFER">
   | <ST_COVERS_: "ST_COVERS">
   | <ST_EQUALS_: "ST_EQUALS">
   | <ST_EXTENT_: "ST_EXTENT">
   | <ST_FACTOR_: "ST_FACTOR">
   | <ST_HASARC_: "ST_HASARC">
   | <ST_HEIGHT_: "ST_HEIGHT">
   | <ST_ISRING_: "ST_ISRING">
   | <ST_LENGTH_: "ST_LENGTH">
   | <ST_NRINGS_: "ST_NRINGS">
   | <ST_POINTN_: "ST_POINTN">
   | <ST_RELATE_: "ST_RELATE">
   | <ST_ROTATE_: "ST_ROTATE">
   | <ST_WITHIN_: "ST_WITHIN">
   | <ST_ZMFLAG_: "ST_ZMFLAG">
   | <SUBSTRING_: "SUBSTRING">
   | <TEMPORARY_: "TEMPORARY">
   | <TIMEOFDAY_: "TIMEOFDAY">
   | <TIMESTAMP_: "TIMESTAMP">
   | <TO_NUMBER_: "TO_NUMBER">
   | <TRANSFORM_: "TRANSFORM">
   | <TRANSLATE_: "TRANSLATE">
   | <VARBINARY_: "VARBINARY">
   | <ADD_MONTHS_: "ADD_MONTHS">
   | <BIGINTEGER_: "BIGINTEGER">
   | <BIT_LENGTH_: "BIT_LENGTH">
   | <BITVARYING_: "BITVARYING">
   | <CONSTRAINT_: "CONSTRAINT">
   | <COVAR_SAMP_: "COVAR_SAMP">
   | <DATETRUNC_: "DATE_TRUNC">
   | <DAYOFMONTH_: "DAYOFMONTH">
   | <DEALLOCATE_: "DEALLOCATE">
   | <DIFFERENCE_: "DIFFERENCE">
   | <INTERSECTS_: "INTERSECTS">
   | <MEDIUMTEXT_: "MEDIUMTEXT">
   | <REFERENCES_: "REFERENCES">
   | <REGR_COUNT_: "REGR_COUNT">
   | <REGR_SLOPE_: "REGR_SLOPE">
   | <REPLICATED_: "REPLICATED">
   | <SEGMENTIZE_: "SEGMENTIZE">
   | <SMALLFLOAT_: "SMALLFLOAT">
   | <SMALLMONEY_: "SMALLMONEY">
   | <SNAPTOGRID_: "SNAPTOGRID">
   | <SPLIT_PART_: "SPLIT_PART">
   | <STARTPOINT_: "STARTPOINT">
   | <STATISTICS_: "STATISTICS">
   | <ST_AZIMUTH_: "ST_AZIMUTH">
   | <ST_CHIP_IN_: "ST_CHIP_IN">
   | <ST_COLLECT_: "ST_COLLECT">
   | <ST_CROSSES_: "ST_CROSSES">
   | <STDDEV_POP_: "STDDEV_POP">
   | <ST_DWITHIN_: "ST_DWITHIN">
   | <ST_GEOHASH_: "ST_GEOHASH">
   | <ST_ISEMPTY_: "ST_ISEMPTY">
   | <ST_ISVALID_: "ST_ISVALID">
   | <ST_NPOINTS_: "ST_NPOINTS">
   | <ST_POLYGON_: "ST_POLYGON">
   | <ST_REVERSE_: "ST_REVERSE">
   | <ST_ROTATEX_: "ST_ROTATEX">
   | <ST_ROTATEY_: "ST_ROTATEY">
   | <ST_ROTATEZ_: "ST_ROTATEZ">
   | <ST_SETSRID_: "ST_SETSRID">
   | <ST_SUMMARY_: "ST_SUMMARY">
   | <ST_TOUCHES_: "ST_TOUCHES">
   | <TABLESPACE_: "TABLESPACE">
   | <TRANSSCALE_: "TRANSSCALE">
   | <WEEKOFYEAR_: "WEEKOFYEAR">
   | <BOX3DEXTENT_: "BOX3DEXTENT">
   | <CHAR_LENGTH_: "CHAR_LENGTH">
   | <PERIMETER2D_: "PERIMETER2D">
   | <PERIMETER3D_: "PERIMETER3D">
   | <QUOTE_IDENT_: "QUOTE_IDENT">
   | <REMOVEPOINT_: "REMOVEPOINT">
   | <SET_MASKLEN_: "SET_MASKLEN">
   | <ST_ADDPOINT_: "ST_ADDPOINT">
   | <ST_ASBINARY_: "ST_ASBINARY">
   | <ST_BOUNDARY_: "ST_BOUNDARY">
   | <ST_CENTROID_: "ST_CENTROID">
   | <ST_CHIP_OUT_: "ST_CHIP_OUT">
   | <ST_CONTAINS_: "ST_CONTAINS">
   | <ST_COORDDIM_: "ST_COORDDIM">
   | <ST_DATATYPE_: "ST_DATATYPE">
   | <STDDEV_SAMP_: "STDDEV_SAMP">
   | <ST_DISJOINT_: "ST_DISJOINT">
   | <ST_DISTANCE_: "ST_DISTANCE">
   | <ST_ENDPOINT_: "ST_ENDPOINT">
   | <ST_ENVELOPE_: "ST_ENVELOPE">
   | <ST_EXTENT3D_: "ST_EXTENT3D">
   | <ST_FORCE_2D_: "ST_FORCE_2D">
   | <ST_FORCE_3D_: "ST_FORCE_3D">
   | <ST_FORCE_4D_: "ST_FORCE_4D">
   | <ST_FORCERHR_: "ST_FORCERHR">
   | <ST_GEOMETRY_: "ST_GEOMETRY">
   | <ST_GMLTOSQL_: "ST_GMLTOSQL">
   | <ST_ISCLOSED_: "ST_ISCLOSED">
   | <ST_ISSIMPLE_: "ST_ISSIMPLE">
   | <ST_LENGTH2D_: "ST_LENGTH2D">
   | <ST_LENGTH3D_: "ST_LENGTH3D">
   | <ST_MEM_SIZE_: "ST_MEM_SIZE">
   | <ST_OVERLAPS_: "ST_OVERLAPS">
   | <ST_SETPOINT_: "ST_SETPOINT">
   | <ST_SIMPLIFY_: "ST_SIMPLIFY">
   | <ST_WKBTOSQL_: "ST_WKBTOSQL">
   | <ST_WKTTOSQL_: "ST_WKTTOSQL">
   | <TRANSACTION_: "TRANSACTION">
   | <CURRENTDATE_: "CURRENT_DATE">
   | <CURRENT_TIME_: "CURRENT_TIME">
   | <CURRENT_USER_: "CURRENT_USER">
   | <EXTERIORRING_: "EXTERIORRING">
   | <GEOMETRYTYPE_: "GEOMETRYTYPE">
   | <GEOMFROMEWKT_: "GEOMFROMEWKT">
   | <GEOMFROMTEXT_: "GEOMFROMTEXT">
   | <INTERSECTION_: "INTERSECTION">
   | <JUSTIFY_DAYS_: "JUSTIFY_DAYS">
   | <LONG_VARCHAR_: "LONG VARCHAR">
   | <OCTET_LENGTH_: "OCTET_LENGTH">
   | <SERIALIZABLE_: "SERIALIZABLE">
   | <ST_ASGEOJSON_: "ST_ASGEOJSON">
   | <ST_ASHEXEWKB_: "ST_ASHEXEWKB">
   | <ST_BUILDAREA_: "ST_BUILDAREA">
   | <ST_COVEREDBY_: "ST_COVEREDBY">
   | <ST_DIMENSION_: "ST_DIMENSION">
   | <ST_FORCE_3DM_: "ST_FORCE_3DM">
   | <ST_FORCE_3DZ_: "ST_FORCE_3DZ">
   | <ST_GEOMETRYN_: "ST_GEOMETRYN">
   | <ST_LINEMERGE_: "ST_LINEMERGE">
   | <ST_MAKEPOINT_: "ST_MAKEPOINT">
   | <ST_NUMPOINTS_: "ST_NUMPOINTS">
   | <ST_PERIMETER_: "ST_PERIMETER">
   | <ST_SETFACTOR_: "ST_SETFACTOR">
   | <ST_TRANSFORM_: "ST_TRANSFORM">
   | <ST_TRANSLATE_: "ST_TRANSLATE">
   | <TO_TIMESTAMP_: "TO_TIMESTAMP">
   | <VARIANCE_POP_: "VARIANCE_POP">
   | <WIDTH_BUCKET_: "WIDTH_BUCKET">
   | <INTERIORRINGN_: "INTERIORRINGN">
   | <JUSTIFY_HOURS_: "JUSTIFY_HOURS">
   | <NUMGEOMETRIES_: "NUMGEOMETRIES">
   | <QUOTE_LITERAL_: "QUOTE_LITERAL">
   | <SAMLLDATETIME_: "SMALLDATETIME">
   | <ST_ADDMEASURE_: "ST_ADDMEASURE">
   | <ST_CONVEXHULL_: "ST_CONVEXHULL">
   | <ST_DIFFERENCE_: "ST_DIFFERENCE">
   | <ST_INTERSECTS_: "ST_INTERSECTS">
   | <ST_MAKEPOINTM_: "ST_MAKEPOINTM">
   | <ST_MEMCOLLECT_: "ST_MEMCOLLECT">
   | <ST_SEGMENTIZE_: "ST_SEGMENTIZE">
   | <ST_SNAPTOGRID_: "ST_SNAPTOGRID">
   | <ST_STARTPOINT_: "ST_STARTPOINT">
   | <ST_TRANSSCALE_: "ST_TRANSSCALE">
   | <SYMDIFFERENCE_: "SYMDIFFERENCE">
   | <VARIANCE_SAMP_: "VARIANCE_SAMP">
   | <CURRENT_SCHEMA_: "CURRENT_SCHEMA">
   | <LINE_SUBSTRING_: "LINE_SUBSTRING">
   | <LOCALTIMESTAMP_: "LOCALTIMESTAMP">
   | <MONTHS_BETWEEN_: "MONTHS_BETWEEN">
   | <REGEXP_REPLACE_: "REGEXP_REPLACE">
   | <REGR_INTERCEPT_: "REGR_INTERCEPT">
   | <ST_COMPRESSION_: "ST_COMPRESSION">
   | <ST_CURVETOLINE_: "ST_CURVETOLINE">
   | <ST_FIND_EXTENT_: "ST_FIND_EXTENT">
   | <ST_GEOGFROMWKB_: "ST_GEOGFROMWKB">
   | <ST_GEOMFROMGML_: "ST_GEOMFROMGML">
   | <ST_GEOMFROMKML_: "ST_GEOMFROMKML">
   | <ST_GEOMFROMWKB_: "ST_GEOMFROMWKB">
   | <ST_LINEFROMWKB_: "ST_LINEFROMWKB">
   | <ST_LINETOCURVE_: "ST_LINETOCURVE">
   | <ST_LONGESTLINE_: "ST_LONGESTLINE">
   | <ST_MAKEPOLYGON_: "ST_MAKEPOLYGON">
   | <ST_MAXDISTANCE_: "ST_MAXDISTANCE">
   | <ST_PERIMETER2D_: "ST_PERIMETER2D">
   | <ST_PERIMETER3D_: "ST_PERIMETER3D">
   | <ST_POLYFROMWKB_: "ST_POLYFROMWKB">
   | <ST_REMOVEPOINT_: "ST_REMOVEPOINT">
   | <CLOCK_TIMESTAMP_: "CLOCK_TIMESTAMP">
   | <ST_CLOSESTPOINT_: "ST_CLOSESTPOINT">
   | <ST_COMBINE_BBOX_: "ST_COMBINE_BBOX">
   | <ST_DFULLYWITHIN_: "ST_DFULLYWITHIN">
   | <ST_EXTERIORRING_: "ST_EXTERIORRING">
   | <ST_GEOGFROMTEXT_: "ST_GEOGFROMTEXT">
   | <ST_GEOMETRYTYPE_: "ST_GEOMETRYTYPE">
   | <ST_GEOMFROMEWKB_: "ST_GEOMFROMEWKB">
   | <ST_GEOMFROMEWKT_: "ST_GEOMFROMEWKT">
   | <ST_GEOMFROMTEXT_: "ST_GEOMFROMTEXT">
   | <ST_INTERSECTION_: "ST_INTERSECTION">
   | <ST_LINEFROMTEXT_: "ST_LINEFROMTEXT">
   | <ST_MAKEENVELOPE_: "ST_MAKEENVELOPE">
   | <ST_MLINEFROMWKB_: "ST_MLINEFROMWKB">
   | <ST_MPOLYFROMWKB_: "ST_MPOLYFROMWKB">
   | <ST_POINTFROMWKB_: "ST_POINTFROMWKB">
   | <ST_POLYFROMTEXT_: "ST_POLYFROMTEXT">
   | <ST_SHORTESTLINE_: "ST_SHORTESTLINE">
   | <CHARACTER_LENGTH_: "CHARACTER_LENGTH">
   | <CURRENT_DATABASE_: "CURRENT_DATABASE">
   | <FORCE_COLLECTION_: "FORCE_COLLECTION">
   | <JUSTIFY_INTERVAL_: "JUSTIFY_INTERVAL">
   | <NUMINTERIORRINGS_: "NUMINTERIORRINGS">
   | <POSTGIS_DROPBBOX_: "POSTGIS_DROPBBOX">
   | <ST_INTERIORRINGN_: "ST_INTERIORRINGN">
   | <ST_ISVALIDREASON_: "ST_ISVALIDREASON">
   | <ST_MLINEFROMTEXT_: "ST_MLINEFROMTEXT">
   | <ST_MPOINTFROMWKB_: "ST_MPOINTFROMWKB">
   | <ST_MPOLYFROMTEXT_: "ST_MPOLYFROMTEXT">
   | <ST_NUMGEOMETRIES_: "ST_NUMGEOMETRIES">
   | <ST_POINTFROMTEXT_: "ST_POINTFROMTEXT">
   | <ST_SYMDIFFERENCE_: "ST_SYMDIFFERENCE">
   | <ADDGEOMETRYCOLUMN_: "ADDGEOMETRYCOLUMN">
   | <CURRENT_TIMESTAMP_: "CURRENT_TIMESTAMP">
   | <LINE_LOCATE_POINT_: "LINE_LOCATE_POINT">
   | <ST_BDPOLYFROMTEXT_: "ST_BDPOLYFROMTEXT">
   | <ST_LINE_SUBSTRING_: "ST_LINE_SUBSTRING">
   | <ST_MPOINTFROMTEXT_: "ST_MPOINTFROMTEXT">
   | <ST_ORDERINGEQUALS_: "ST_ORDERINGEQUALS">
   | <ST_POINTONSURFACE_: "ST_POINTONSURFACE">
   | <ST_POLYGONFROMWKB_: "ST_POLYGONFROMWKB">
   | <PG_CLIENT_ENCODING_: "PG_CLIENT_ENCODING">
   | <ST_BDMPOLYFROMTEXT_: "ST_BDMPOLYFROMTEXT">
   | <ST_DISTANCE_SPHERE_: "ST_DISTANCE_SPHERE">
   | <ST_GEOMCOLLFROMWKB_: "ST_GEOMCOLLFROMWKB">
   | <ST_LENGTH_SPHEROID_: "ST_LENGTH_SPHEROID">
   | <ST_NUMINTERIORRING_: "ST_NUMINTERIORRING">
   | <ST_POLYGONFROMTEXT_: "ST_POLYGONFROMTEXT">
   | <ST_SHIFT_LONGITUDE_: "ST_SHIFT_LONGITUDE">
   | <STATEMENT_TIMESTAMP_: "STATEMENT_TIMESTAMP">
   | <ST_CONTAINSPROPERLY_: "ST_CONTAINSPROPERLY">
   | <ST_FORCE_COLLECTION_: "ST_FORCE_COLLECTION">
   | <ST_GEOMCOLLFROMTEXT_: "ST_GEOMCOLLFROMTEXT">
   | <ST_MULTILINEFROMWKB_: "ST_MULTILINEFROMWKB">
   | <ST_MULTIPOLYFROMWKB_: "ST_MULTIPOLYFROMWKB">
   | <ST_NUMINTERIORRINGS_: "ST_NUMINTERIORRINGS">
   | <ST_POSTGIS_GIST_SEL_: "ST_POSTGIS_GIST_SEL">
   | <LOCATE_ALONG_MEASURE_: "LOCATE_ALONG_MEASURE">
   | <ST_COLLECTIONEXTRACT_: "ST_COLLECTIONEXTRACT">
   | <ST_DISTANCE_SPHEROID_: "ST_DISTANCE_SPHEROID">
   | <ST_GEOGRAPHYFROMTEXT_: "ST_GEOGRAPHYFROMTEXT">
   | <ST_HAUSDORFFDISTANCE_: "ST_HAUSDORFFDISTANCE">
   | <ST_LENGTH2D_SPHEROID_: "ST_LENGTH2D_SPHEROID">
   | <ST_LENGTH3D_SPHEROID_: "ST_LENGTH3D_SPHEROID">
   | <ST_LINE_LOCATE_POINT_: "ST_LINE_LOCATE_POINT">
   | <ST_LINESTRINGFROMWKB_: "ST_LINESTRINGFROMWKB">
   | <ST_MULTIPOINTFROMWKB_: "ST_MULTIPOINTFROMWKB">
   | <ST_LINEFROMMULTIPOINT_: "ST_LINEFROMMULTIPOINT">
   | <ST_MULTIPOINTFROMTEXT_: "ST_MULTIPOINTFROMTEXT">
   | <TRANSACTION_TIMESTAMP_: "TRANSACTION_TIMESTAMP">
   | <LINE_INTERPOLATE_POINT_: "LINE_INTERPOLATE_POINT">
   | <ST_POINT_INSIDE_CIRCLE_: "ST_POINT_INSIDE_CIRCLE">
   | <ST_SYMMETRICDIFFERENCE_: "ST_SYMMETRICDIFFERENCE">
   | <LOCATE_BETWEEN_MEASURES_: "LOCATE_BETWEEN_MEASURES">
   | <ST_LOCATE_ALONG_MEASURE_: "ST_LOCATE_ALONG_MEASURE">
   | <ST_MULTIPOLYGONFROMTEXT_: "ST_MULTIPOLYGONFROMTEXT">
   | <ST_POSTGIS_GIST_JOINSEL_: "ST_POSTGIS_GIST_JOINSEL">
   | <ST_LINECROSSINGDIRECTION_: "ST_LINECROSSINGDIRECTION">
   | <ST_MINIMUMBOUNDINGCIRCLE_: "ST_MINIMUMBOUNDINGCIRCLE">
   | <ST_LINE_INTERPOLATE_POINT_: "ST_LINE_INTERPOLATE_POINT">
   | <ST_LOCATEBETWEENELEVATIONS_: "ST_LOCATEBETWEENELEVATIONS">
   | <ST_LOCATE_BETWEEN_MEASURES_: "ST_LOCATE_BETWEEN_MEASURES">
   | <ST_MULTILINESTRINGFROMTEXT_: "ST_MULTILINESTRINGFROMTEXT">
   | <ST_SIMPLIFYPRESERVETOPOLOGY_: "ST_SIMPLIFYPRESERVETOPOLOGY">
}

TOKEN :
{
   <UNARY_SIGN_: (<PLUS_> | <MINUS_>)>
   | <ORDER_BY_: "ORDER" (" ")+ "BY">
   | <UPDATE_STAT_: "UPDATE" (" ")+ ("STAT" | "STATISTICS")>
   | <PRIMARYKEY_: "PRIMARY" (" ")+ "KEY">
   | <FOREIGNKEY_: "FOREIGN" (" ")+ "KEY">
   | <PARTITIONINGKEY_: "PARTITIONING" (" ")+ "KEY">
   | <ROUND_ROBIN_: "ROUND" (" ")+ "ROBIN">
   | <WITH_XROWID_: "WITH" (" ")+ "XROWID">
   | <WITHOUT_XROWID_: "WITHOUT" (" ")+ "XROWID">
   | <PARTITION_WITH_: "PARTITION" (" ")+ "WITH">
   | <START_DB_: "START" (" ")+ "DATABASE">
   | <WAIT_TIMEOUT_: "WAITTIMEOUT" (" ")+>
   | <STOP_DB_: "STOP" (" ")+ "DATABASE">
   | <CREATE_DB_: (<CREATE_>) (" ")+ "DATABASE">
   | <CREATE_NODE_: (<CREATE_>) (" ")+ (<NODE_>)>
   | <DROP_DB_: "DROP" (" ")+ "DATABASE">
   | <SHOW_AGENTS_: "SHOW" (" ")+ "AGENTS">
   | <SHOW_STATEMENTS_: "SHOW" (" ")+ "STATEMENTS">
   | <SHOW_DATABASES_: "SHOW" (" ")+ "DATABASES">
   | <SHOW_TABLES_: "SHOW" (" ")+ "TABLES">
   | <SHOW_TRAN_ISOLATION_: "SHOW" (" ")+ "TRANSACTION" (" ")+ "ISOLATION" (" ")+ "LEVEL">
   | <REPEATABLE_READ_: "REPEATABLE" (" ")+ "READ">
   | <READ_COMMITTED_: "READ" (" ")+ "COMMITTED">
   | <READ_UNCOMMITTED_: "READ" (" ")+ "UNCOMMITTED">
   | <ISOLATION_LEVEL_: "ISOLATION" (" ")+ "LEVEL">
   | <SHOW_CONSTRAINTS_: "SHOW" (" ")+ "CONSTRAINTS">
   | <OWNER_TO_: "OWNER" (" ")+ "TO">
   | <SHOW_TABLE_: "SHOW" (" ")+ "TABLE">
   | <SHOW_VIEW_: "SHOW" (" ")+ "VIEW">
   | <SHOW_VIEWS_: "SHOW" (" ")+ "VIEWS">
   | <SHOW_USERS_: "SHOW" (" ")+ "USERS">
   | <FORCE_NOT_NULL_: "FORCE" (" ")+ "NOT" (" ")+ "NULL">
   | <FORCE_QUOTE_: "FORCE" (" ")+ "QUOTE">
   | <ON_COMMIT_: "ON" (" ")+ "COMMIT">
   | <PRESERVE_ROWS_: "PRESERVE" (" ")+ "ROWS">
   | <DELETE_ROWS_: "DELETE" (" ")+ "ROWS">
   | <GROUP_BY_: "GROUP" (" ")+ "BY">
   | <EXEC_: "EXEC" ("UTE")?>
   | <SIMILAR_TO_: "SIMILAR" (" ")+ "TO">
   | <SHOW_INDEXES_: "SHOW" (" ")+ "INDEXES">
   | <WITH_TIMEZONE_: "WITH" (" ")+ "TIME" (" ")+ "ZONE">
   | <WITHOUT_TIMEZONE_: "WITHOUT" (" ")+ "TIME" (" ")+ "ZONE">
   | <DOUBLE_PRECISION_: "DOUBLE" (" ")+ "PRECISION">
   | <BOOLEAN_: "BOOL" ("EAN")?>
}

TOKEN :
{
   <YEAR_FROM: "YEAR" (" ")* "FROM">
   | <QUARTER_FROM: "QUARTER" (" ")* "FROM">
   | <MONTH_FROM: "MONTH" (" ")* "FROM">
   | <WEEK_FROM: "WEEK" (" ")* "FROM">
   | <DAY_FROM: "DAY" (" ")* "FROM">
   | <DOY_FROM: "DOY" (" ")* "FROM">
   | <DOW_FROM: "DOW" (" ")* "FROM">
   | <DECADE_FROM: "DECADE" (" ")* "FROM">
   | <CENTURY_FROM: "CENTURY" (" ")* "FROM">
   | <HOUR_FROM: "HOUR" (" ")* "FROM">
   | <MINUTE_FROM: "MINUTE" (" ")* "FROM">
   | <SECOND_FROM: "SECOND" (" ")* "FROM">
   | <MILLISECOND_FROM: "MILLISECONDS" (" ")* "FROM">
   | <MILLENNIUM_FROM: "MILLENNIUM" (" ")* "FROM">
   | <MICROSECONDS_FROM: "MICROSECONDS" (" ")* "FROM">
   | <EPOCH_FROM: "EPOCH" (" ")* "FROM">
}

TOKEN :
{
   <POSITION_: "POSITION">
   | <VALUES_: "VALUES">
      {
         matchedToken.image = image.substring(0,image.length() - 1);
      }
}

TOKEN :
{
   <#SINGLEDIGIT: ["0"-"9"]>
   | <INT_LITERAL: (<SINGLEDIGIT>)+>
   | <DECIMAL_LITERAL: (<SINGLEDIGIT>)* "." (<SINGLEDIGIT>)+>
   | <SCIENTIFIC_LITERAL: (((<SINGLEDIGIT>)+)? ".")? (<SINGLEDIGIT>)+ "E" (["-", "+"])? (<SINGLEDIGIT>)+>
}

TOKEN :
{
   <STRING_LITERAL: "'" (~["'"])* ("''" (~["'"])*)* "'">
}

TOKEN :
{
   <PARAM_PLACE_HOLDER: "$" (<SINGLEDIGIT>)+>
}

TOKEN :
{
   <INTERVAL_LITERAL: "INTERVAL" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <DATE_LITERAL: "DATE" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <TIME_LITERAL: "TIME" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <TIMESTAMP_LITERAL: "TIMESTAMP" (" ")* ((<WITH_TIMEZONE_> | <WITHOUT_TIMEZONE_>) (" ")*)? "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <TEXT_LITERAL: "TEXT" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <INTEGER_LITERAL: "INTEGER" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <MACADDR_LITERAL: "MACADDR" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <CIDR_LITERAL: "CIDR" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <INET_LITERAL: "INET" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
   | <GEOMETRY_LITERAL: "GEOMETRY" (" ")* "'" (~["'"])* ("''" (~["'"])*)* "'">
}

TOKEN :
{
   <BINARY_LITERAL: "b'" (("0" | "1"))+ "'">
   | <HEXDECIMAL_LITERAL: "x'" (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f"))+ "'">
}

numberValue numberValue(PrintStream prn) :
{
   FloatingPointNumber n0;

   {
   }
}
{
   n0=FloatingPointNumber(prn)
   
   { return new numberValue(n0); }
}

stringLiteral stringLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new stringLiteral(n0); }
}

TOKEN :
{
   <#LETTER: ["_", "a"-"z", "A"-"Z"]>
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <SINGLEDIGIT>)*>
   | <QUOTED_IDENTIFIER: "\"" (~["\""])* ("\"\"" (~["\""])*)* "\"">
}

UnreservedWords UnreservedWords(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;
   NodeToken n103;
   Token n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeToken n111;
   Token n112;
   NodeToken n113;
   Token n114;
   NodeToken n115;
   Token n116;
   NodeToken n117;
   Token n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeToken n123;
   Token n124;
   NodeToken n125;
   Token n126;
   NodeToken n127;
   Token n128;
   NodeToken n129;
   Token n130;
   NodeToken n131;
   Token n132;
   NodeToken n133;
   Token n134;
   NodeToken n135;
   Token n136;
   NodeToken n137;
   Token n138;
   NodeToken n139;
   Token n140;
   NodeToken n141;
   Token n142;
   NodeToken n143;
   Token n144;
   NodeToken n145;
   Token n146;
   NodeToken n147;
   Token n148;
   NodeToken n149;
   Token n150;
   NodeToken n151;
   Token n152;
   NodeToken n153;
   Token n154;
   NodeToken n155;
   Token n156;
   NodeToken n157;
   Token n158;
   NodeToken n159;
   Token n160;
   NodeToken n161;
   Token n162;
   NodeToken n163;
   Token n164;
   NodeToken n165;
   Token n166;
   NodeToken n167;
   Token n168;
   NodeToken n169;
   Token n170;
   NodeToken n171;
   Token n172;
   NodeToken n173;
   Token n174;
   NodeToken n175;
   Token n176;
   NodeToken n177;
   Token n178;
   NodeToken n179;
   Token n180;
   NodeToken n181;
   Token n182;
   NodeToken n183;
   Token n184;
   NodeToken n185;
   Token n186;
   NodeToken n187;
   Token n188;
   NodeToken n189;
   Token n190;
   NodeToken n191;
   Token n192;
   NodeToken n193;
   Token n194;
   NodeToken n195;
   Token n196;
   NodeToken n197;
   Token n198;
   NodeToken n199;
   Token n200;
   NodeToken n201;
   Token n202;
   NodeToken n203;
   Token n204;
   NodeToken n205;
   Token n206;
   NodeToken n207;
   Token n208;
   NodeToken n209;
   Token n210;
   NodeToken n211;
   Token n212;
   NodeToken n213;
   Token n214;
   NodeToken n215;
   Token n216;
   NodeToken n217;
   Token n218;
   NodeToken n219;
   Token n220;
   NodeToken n221;
   Token n222;
   NodeToken n223;
   Token n224;
   NodeToken n225;
   Token n226;
   NodeToken n227;
   Token n228;
   NodeToken n229;
   Token n230;
   NodeToken n231;
   Token n232;
   NodeToken n233;
   Token n234;
   NodeToken n235;
   Token n236;
   NodeToken n237;
   Token n238;
   NodeToken n239;
   Token n240;
   NodeToken n241;
   Token n242;
   NodeToken n243;
   Token n244;
   NodeToken n245;
   Token n246;
   NodeToken n247;
   Token n248;
   NodeToken n249;
   Token n250;
   NodeToken n251;
   Token n252;
   NodeToken n253;
   Token n254;
   NodeToken n255;
   Token n256;
   NodeToken n257;
   Token n258;
   NodeToken n259;
   Token n260;
   NodeToken n261;
   Token n262;
   NodeToken n263;
   Token n264;
   NodeToken n265;
   Token n266;
   NodeToken n267;
   Token n268;
   NodeToken n269;
   Token n270;
   NodeToken n271;
   Token n272;
   NodeToken n273;
   Token n274;
   NodeToken n275;
   Token n276;
   NodeToken n277;
   Token n278;
   NodeToken n279;
   Token n280;
   NodeToken n281;
   Token n282;
   NodeToken n283;
   Token n284;
   NodeToken n285;
   Token n286;
   NodeToken n287;
   Token n288;
   NodeToken n289;
   Token n290;
   NodeToken n291;
   Token n292;
   NodeToken n293;
   Token n294;
   NodeToken n295;
   Token n296;
   NodeToken n297;
   Token n298;
   NodeToken n299;
   Token n300;
   NodeToken n301;
   Token n302;
   NodeToken n303;
   Token n304;
   NodeToken n305;
   Token n306;
   NodeToken n307;
   Token n308;
   NodeToken n309;
   Token n310;
   NodeToken n311;
   Token n312;
   NodeToken n313;
   Token n314;
   NodeToken n315;
   Token n316;
   NodeToken n317;
   Token n318;
   NodeToken n319;
   Token n320;
   NodeToken n321;
   Token n322;
   NodeToken n323;
   Token n324;
   NodeToken n325;
   Token n326;
   NodeToken n327;
   Token n328;
   NodeToken n329;
   Token n330;
   NodeToken n331;
   Token n332;
   NodeToken n333;
   Token n334;
   NodeToken n335;
   Token n336;
   NodeToken n337;
   Token n338;
   NodeToken n339;
   Token n340;
   NodeToken n341;
   Token n342;
   NodeToken n343;
   Token n344;
   NodeToken n345;
   Token n346;
   NodeToken n347;
   Token n348;
   NodeToken n349;
   Token n350;
   NodeToken n351;
   Token n352;
   NodeToken n353;
   Token n354;
   NodeToken n355;
   Token n356;
   NodeToken n357;
   Token n358;
   NodeToken n359;
   Token n360;
   NodeToken n361;
   Token n362;
   NodeToken n363;
   Token n364;
   NodeToken n365;
   Token n366;
   NodeToken n367;
   Token n368;
   NodeToken n369;
   Token n370;
   NodeToken n371;
   Token n372;
   NodeToken n373;
   Token n374;
   NodeToken n375;
   Token n376;
   NodeToken n377;
   Token n378;
   NodeToken n379;
   Token n380;
   NodeToken n381;
   Token n382;
   NodeToken n383;
   Token n384;
   NodeToken n385;
   Token n386;
   NodeToken n387;
   Token n388;
   NodeToken n389;
   Token n390;
   NodeToken n391;
   Token n392;
   NodeToken n393;
   Token n394;
   NodeToken n395;
   Token n396;
   NodeToken n397;
   Token n398;
   NodeToken n399;
   Token n400;
   NodeToken n401;
   Token n402;
   NodeToken n403;
   Token n404;
   NodeToken n405;
   Token n406;
   NodeToken n407;
   Token n408;
   NodeToken n409;
   Token n410;
   NodeToken n411;
   Token n412;
   NodeToken n413;
   Token n414;
   NodeToken n415;
   Token n416;
   NodeToken n417;
   Token n418;
   NodeToken n419;
   Token n420;
   NodeToken n421;
   Token n422;
   NodeToken n423;
   Token n424;
   NodeToken n425;
   Token n426;
   NodeToken n427;
   Token n428;
   NodeToken n429;
   Token n430;
   NodeToken n431;
   Token n432;
   NodeToken n433;
   Token n434;
   NodeToken n435;
   Token n436;
   NodeToken n437;
   Token n438;
   NodeToken n439;
   Token n440;
   NodeToken n441;
   Token n442;
   NodeToken n443;
   Token n444;
   NodeToken n445;
   Token n446;
   NodeToken n447;
   Token n448;
   NodeToken n449;
   Token n450;
   NodeToken n451;
   Token n452;
   NodeToken n453;
   Token n454;
   NodeToken n455;
   Token n456;
   NodeToken n457;
   Token n458;
   NodeToken n459;
   Token n460;
   NodeToken n461;
   Token n462;
   NodeToken n463;
   Token n464;
   NodeToken n465;
   Token n466;
   NodeToken n467;
   Token n468;
   NodeToken n469;
   Token n470;
   NodeToken n471;
   Token n472;
   NodeToken n473;
   Token n474;
   NodeToken n475;
   Token n476;
   NodeToken n477;
   Token n478;
   NodeToken n479;
   Token n480;
   NodeToken n481;
   Token n482;
   NodeToken n483;
   Token n484;
   NodeToken n485;
   Token n486;
   NodeToken n487;
   Token n488;
   NodeToken n489;
   Token n490;
   NodeToken n491;
   Token n492;
   NodeToken n493;
   Token n494;
   NodeToken n495;
   Token n496;
   NodeToken n497;
   Token n498;
   NodeToken n499;
   Token n500;
   NodeToken n501;
   Token n502;
   NodeToken n503;
   Token n504;
   NodeToken n505;
   Token n506;
   NodeToken n507;
   Token n508;
   NodeToken n509;
   Token n510;
   NodeToken n511;
   Token n512;
   NodeToken n513;
   Token n514;
   NodeToken n515;
   Token n516;
   NodeToken n517;
   Token n518;
   NodeToken n519;
   Token n520;
   NodeToken n521;
   Token n522;
   NodeToken n523;
   Token n524;
   NodeToken n525;
   Token n526;
   NodeToken n527;
   Token n528;
   NodeToken n529;
   Token n530;
   NodeToken n531;
   Token n532;
   NodeToken n533;
   Token n534;
   NodeToken n535;
   Token n536;
   NodeToken n537;
   Token n538;
   NodeToken n539;
   Token n540;
   NodeToken n541;
   Token n542;
   NodeToken n543;
   Token n544;
   NodeToken n545;
   Token n546;
   NodeToken n547;
   Token n548;
   NodeToken n549;
   Token n550;
   NodeToken n551;
   Token n552;
   NodeToken n553;
   Token n554;
   NodeToken n555;
   Token n556;
   NodeToken n557;
   Token n558;
   NodeToken n559;
   Token n560;
   NodeToken n561;
   Token n562;
   NodeToken n563;
   Token n564;
   NodeToken n565;
   Token n566;
   NodeToken n567;
   Token n568;
   NodeToken n569;
   Token n570;
   NodeToken n571;
   Token n572;
   NodeToken n573;
   Token n574;
   NodeToken n575;
   Token n576;
   NodeToken n577;
   Token n578;
   NodeToken n579;
   Token n580;
   NodeToken n581;
   Token n582;
   NodeToken n583;
   Token n584;
   NodeToken n585;
   Token n586;
   NodeToken n587;
   Token n588;
   NodeToken n589;
   Token n590;
   NodeToken n591;
   Token n592;
   NodeToken n593;
   Token n594;
   NodeToken n595;
   Token n596;
   NodeToken n597;
   Token n598;
   NodeToken n599;
   Token n600;
   NodeToken n601;
   Token n602;
   NodeToken n603;
   Token n604;
   NodeToken n605;
   Token n606;
   NodeToken n607;
   Token n608;
   NodeToken n609;
   Token n610;
   NodeToken n611;
   Token n612;
   NodeToken n613;
   Token n614;
   NodeToken n615;
   Token n616;
   NodeToken n617;
   Token n618;
   NodeToken n619;
   Token n620;
   NodeToken n621;
   Token n622;
   NodeToken n623;
   Token n624;
   NodeToken n625;
   Token n626;
   NodeToken n627;
   Token n628;
   NodeToken n629;
   Token n630;
   NodeToken n631;
   Token n632;
   NodeToken n633;
   Token n634;
   NodeToken n635;
   Token n636;
   NodeToken n637;
   Token n638;
   NodeToken n639;
   Token n640;
   NodeToken n641;
   Token n642;
   NodeToken n643;
   Token n644;
   NodeToken n645;
   Token n646;
   NodeToken n647;
   Token n648;
   NodeToken n649;
   Token n650;
   NodeToken n651;
   Token n652;
   NodeToken n653;
   Token n654;
   NodeToken n655;
   Token n656;
   NodeToken n657;
   Token n658;
   NodeToken n659;
   Token n660;
   NodeToken n661;
   Token n662;
   NodeToken n663;
   Token n664;
   NodeToken n665;
   Token n666;
   NodeToken n667;
   Token n668;
   NodeToken n669;
   Token n670;
   NodeToken n671;
   Token n672;
   NodeToken n673;
   Token n674;
   NodeToken n675;
   Token n676;
   NodeToken n677;
   Token n678;
   NodeToken n679;
   Token n680;
   NodeToken n681;
   Token n682;
   NodeToken n683;
   Token n684;
   NodeToken n685;
   Token n686;
   NodeToken n687;
   Token n688;
   NodeToken n689;
   Token n690;
   NodeToken n691;
   Token n692;
   NodeToken n693;
   Token n694;
   NodeToken n695;
   Token n696;
   NodeToken n697;
   Token n698;
   NodeToken n699;
   Token n700;
   NodeToken n701;
   Token n702;
   NodeToken n703;
   Token n704;
   NodeToken n705;
   Token n706;
   NodeToken n707;
   Token n708;
   NodeToken n709;
   Token n710;
   NodeToken n711;
   Token n712;
   NodeToken n713;
   Token n714;
   NodeToken n715;
   Token n716;
   NodeToken n717;
   Token n718;
   NodeToken n719;
   Token n720;
   NodeToken n721;
   Token n722;
   NodeToken n723;
   Token n724;
   NodeToken n725;
   Token n726;
   NodeToken n727;
   Token n728;
   NodeToken n729;
   Token n730;
   NodeToken n731;
   Token n732;
   NodeToken n733;
   Token n734;
   NodeToken n735;
   Token n736;
   NodeToken n737;
   Token n738;
   NodeToken n739;
   Token n740;
   NodeToken n741;
   Token n742;
   NodeToken n743;
   Token n744;
   NodeToken n745;
   Token n746;
   NodeToken n747;
   Token n748;
   NodeToken n749;
   Token n750;
   NodeToken n751;
   Token n752;
   NodeToken n753;
   Token n754;
   NodeToken n755;
   Token n756;
   NodeToken n757;
   Token n758;
   NodeToken n759;
   Token n760;
   NodeToken n761;
   Token n762;
   NodeToken n763;
   Token n764;
   NodeToken n765;
   Token n766;
   NodeToken n767;
   Token n768;
   NodeToken n769;
   Token n770;
   NodeToken n771;
   Token n772;
   NodeToken n773;
   Token n774;
   NodeToken n775;
   Token n776;
   NodeToken n777;
   Token n778;
   NodeToken n779;
   Token n780;
   NodeToken n781;
   Token n782;
   NodeToken n783;
   Token n784;
   NodeToken n785;
   Token n786;
   NodeToken n787;
   Token n788;
   NodeToken n789;
   Token n790;
   NodeToken n791;
   Token n792;
   NodeToken n793;
   Token n794;
   NodeToken n795;
   Token n796;
   NodeToken n797;
   Token n798;
   NodeToken n799;
   Token n800;
   NodeToken n801;
   Token n802;
   NodeToken n803;
   Token n804;
   NodeToken n805;
   Token n806;
   NodeToken n807;
   Token n808;
   NodeToken n809;
   Token n810;
   NodeToken n811;
   Token n812;
   NodeToken n813;
   Token n814;
   NodeToken n815;
   Token n816;
   NodeToken n817;
   Token n818;
   NodeToken n819;
   Token n820;
   NodeToken n821;
   Token n822;
   NodeToken n823;
   Token n824;
   NodeToken n825;
   Token n826;
   NodeToken n827;
   Token n828;
   NodeToken n829;
   Token n830;
   NodeToken n831;
   Token n832;
   NodeToken n833;
   Token n834;
   NodeToken n835;
   Token n836;
   NodeToken n837;
   Token n838;
   NodeToken n839;
   Token n840;
   NodeToken n841;
   Token n842;
   NodeToken n843;
   Token n844;
   NodeToken n845;
   Token n846;
   NodeToken n847;
   Token n848;
   NodeToken n849;
   Token n850;
   NodeToken n851;
   Token n852;
   NodeToken n853;
   Token n854;
   NodeToken n855;
   Token n856;
   NodeToken n857;
   Token n858;
   NodeToken n859;
   Token n860;
   NodeToken n861;
   Token n862;
   NodeToken n863;
   Token n864;
   NodeToken n865;
   Token n866;
   NodeToken n867;
   Token n868;
   NodeToken n869;
   Token n870;
   NodeToken n871;
   Token n872;
   NodeToken n873;
   Token n874;
   NodeToken n875;
   Token n876;
   NodeToken n877;
   Token n878;
   NodeToken n879;
   Token n880;
   NodeToken n881;
   Token n882;
   NodeToken n883;
   Token n884;
   NodeToken n885;
   Token n886;
   NodeToken n887;
   Token n888;
   NodeToken n889;
   Token n890;
   NodeToken n891;
   Token n892;
   NodeToken n893;
   Token n894;
   NodeToken n895;
   Token n896;
   NodeToken n897;
   Token n898;
   NodeToken n899;
   Token n900;
   NodeToken n901;
   Token n902;
   NodeToken n903;
   Token n904;
   NodeToken n905;
   Token n906;
   NodeToken n907;
   Token n908;
   NodeToken n909;
   Token n910;
   NodeToken n911;
   Token n912;
   NodeToken n913;
   Token n914;
   NodeToken n915;
   Token n916;
   NodeToken n917;
   Token n918;
   NodeToken n919;
   Token n920;
   NodeToken n921;
   Token n922;
   NodeToken n923;
   Token n924;
   NodeToken n925;
   Token n926;
   NodeToken n927;
   Token n928;
   NodeToken n929;
   Token n930;
   NodeToken n931;
   Token n932;
   NodeToken n933;
   Token n934;
   NodeToken n935;
   Token n936;
   NodeToken n937;
   Token n938;
   NodeToken n939;
   Token n940;
   NodeToken n941;
   Token n942;
   NodeToken n943;
   Token n944;
   NodeToken n945;
   Token n946;
   NodeToken n947;
   Token n948;
   NodeToken n949;
   Token n950;
   NodeToken n951;
   Token n952;
   NodeToken n953;
   Token n954;
   NodeToken n955;
   Token n956;
   NodeToken n957;
   Token n958;
   NodeToken n959;
   Token n960;
   NodeToken n961;
   Token n962;
   NodeToken n963;
   Token n964;
   NodeToken n965;
   Token n966;
   NodeToken n967;
   Token n968;
   NodeToken n969;
   Token n970;
   NodeToken n971;
   Token n972;
   NodeToken n973;
   Token n974;
   NodeToken n975;
   Token n976;
   NodeToken n977;
   Token n978;
   NodeToken n979;
   Token n980;
   NodeToken n981;
   Token n982;
   NodeToken n983;
   Token n984;
   NodeToken n985;
   Token n986;
   NodeToken n987;
   Token n988;
   NodeToken n989;
   Token n990;
   NodeToken n991;
   Token n992;
   NodeToken n993;
   Token n994;
   NodeToken n995;
   Token n996;
   NodeToken n997;
   Token n998;
   NodeToken n999;
   Token n1000;
   NodeToken n1001;
   Token n1002;
   NodeToken n1003;
   Token n1004;
   NodeToken n1005;
   Token n1006;
   NodeToken n1007;
   Token n1008;
   NodeToken n1009;
   Token n1010;
   NodeToken n1011;
   Token n1012;
   NodeToken n1013;
   Token n1014;
   NodeToken n1015;
   Token n1016;
   NodeToken n1017;
   Token n1018;
   NodeToken n1019;
   Token n1020;
   NodeToken n1021;
   Token n1022;
   NodeToken n1023;
   Token n1024;

   {
   }
}
{
   (
      n2=<POSITION_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n4=<DATE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DAY_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<QUARTER_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      LOOKAHEAD(2)
      n10=<TIME_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      LOOKAHEAD(2)
      n12=<TIMESTAMP_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<WITH_TIMEZONE_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<WITHOUT_TIMEZONE_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=<DATETIME_> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20=<SAMLLDATETIME_> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22=<PASSWORD_> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24=<AVERAGE_> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   |
      n26=<SQRT_> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n0 = new NodeChoice(n25, 12); }
   |
      n28=<COUNT_> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n0 = new NodeChoice(n27, 13); }
   |
      n30=<EXTRACT_> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n0 = new NodeChoice(n29, 14); }
   |
      n32=<MAX_> { n31 = JTBToolkit.makeNodeToken(n32); }
      { n0 = new NodeChoice(n31, 15); }
   |
      n34=<CURRENTDATE_> { n33 = JTBToolkit.makeNodeToken(n34); }
      { n0 = new NodeChoice(n33, 16); }
   |
      n36=<CURRENT_TIME_> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n0 = new NodeChoice(n35, 17); }
   |
      n38=<CURRENT_TIMESTAMP_> { n37 = JTBToolkit.makeNodeToken(n38); }
      { n0 = new NodeChoice(n37, 18); }
   |
      n40=<TRUNC_> { n39 = JTBToolkit.makeNodeToken(n40); }
      { n0 = new NodeChoice(n39, 19); }
   |
      n42=<TRUNCATE_> { n41 = JTBToolkit.makeNodeToken(n42); }
      { n0 = new NodeChoice(n41, 20); }
   |
      n44=<USER_> { n43 = JTBToolkit.makeNodeToken(n44); }
      { n0 = new NodeChoice(n43, 21); }
   |
      n46=<YEAR_> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n0 = new NodeChoice(n45, 22); }
   |
      n48=<LENGTH_> { n47 = JTBToolkit.makeNodeToken(n48); }
      { n0 = new NodeChoice(n47, 23); }
   |
      n50=<LOWER_> { n49 = JTBToolkit.makeNodeToken(n50); }
      { n0 = new NodeChoice(n49, 24); }
   |
      n52=<MONTH_> { n51 = JTBToolkit.makeNodeToken(n52); }
      { n0 = new NodeChoice(n51, 25); }
   |
      n54=<HOUR_> { n53 = JTBToolkit.makeNodeToken(n54); }
      { n0 = new NodeChoice(n53, 26); }
   |
      n56=<MINUTE_> { n55 = JTBToolkit.makeNodeToken(n56); }
      { n0 = new NodeChoice(n55, 27); }
   |
      n58=<SECOND_> { n57 = JTBToolkit.makeNodeToken(n58); }
      { n0 = new NodeChoice(n57, 28); }
   |
      n60=<SUBSTRING_> { n59 = JTBToolkit.makeNodeToken(n60); }
      { n0 = new NodeChoice(n59, 29); }
   |
      n62=<NOW_> { n61 = JTBToolkit.makeNodeToken(n62); }
      { n0 = new NodeChoice(n61, 30); }
   |
      n64=<ADDDATE_> { n63 = JTBToolkit.makeNodeToken(n64); }
      { n0 = new NodeChoice(n63, 31); }
   |
      n66=<ADDTIME_> { n65 = JTBToolkit.makeNodeToken(n66); }
      { n0 = new NodeChoice(n65, 32); }
   |
      n68=<DAYNAME_> { n67 = JTBToolkit.makeNodeToken(n68); }
      { n0 = new NodeChoice(n67, 33); }
   |
      n70=<SUBDATE_> { n69 = JTBToolkit.makeNodeToken(n70); }
      { n0 = new NodeChoice(n69, 34); }
   |
      n72=<SUBTIME_> { n71 = JTBToolkit.makeNodeToken(n72); }
      { n0 = new NodeChoice(n71, 35); }
   |
      n74=<DATEDIFF_> { n73 = JTBToolkit.makeNodeToken(n74); }
      { n0 = new NodeChoice(n73, 36); }
   |
      n76=<MONTHNAME_> { n75 = JTBToolkit.makeNodeToken(n76); }
      { n0 = new NodeChoice(n75, 37); }
   |
      n78=<DAYOFWEEK_> { n77 = JTBToolkit.makeNodeToken(n78); }
      { n0 = new NodeChoice(n77, 38); }
   |
      n80=<DAYOFYEAR_> { n79 = JTBToolkit.makeNodeToken(n80); }
      { n0 = new NodeChoice(n79, 39); }
   |
      n82=<DAYOFMONTH_> { n81 = JTBToolkit.makeNodeToken(n82); }
      { n0 = new NodeChoice(n81, 40); }
   |
      n84=<WEEKOFYEAR_> { n83 = JTBToolkit.makeNodeToken(n84); }
      { n0 = new NodeChoice(n83, 41); }
   |
      n86=<WEEK_> { n85 = JTBToolkit.makeNodeToken(n86); }
      { n0 = new NodeChoice(n85, 42); }
   |
      n88=<ABS_> { n87 = JTBToolkit.makeNodeToken(n88); }
      { n0 = new NodeChoice(n87, 43); }
   |
      n90=<CEIL_> { n89 = JTBToolkit.makeNodeToken(n90); }
      { n0 = new NodeChoice(n89, 44); }
   |
      n92=<CEILING_> { n91 = JTBToolkit.makeNodeToken(n92); }
      { n0 = new NodeChoice(n91, 45); }
   |
      n94=<EXP_> { n93 = JTBToolkit.makeNodeToken(n94); }
      { n0 = new NodeChoice(n93, 46); }
   |
      n96=<FLOOR_> { n95 = JTBToolkit.makeNodeToken(n96); }
      { n0 = new NodeChoice(n95, 47); }
   |
      n98=<LN_> { n97 = JTBToolkit.makeNodeToken(n98); }
      { n0 = new NodeChoice(n97, 48); }
   |
      n100=<LOG_> { n99 = JTBToolkit.makeNodeToken(n100); }
      { n0 = new NodeChoice(n99, 49); }
   |
      n102=<LOG10_> { n101 = JTBToolkit.makeNodeToken(n102); }
      { n0 = new NodeChoice(n101, 50); }
   |
      n104=<PI_> { n103 = JTBToolkit.makeNodeToken(n104); }
      { n0 = new NodeChoice(n103, 51); }
   |
      n106=<POWER_> { n105 = JTBToolkit.makeNodeToken(n106); }
      { n0 = new NodeChoice(n105, 52); }
   |
      n108=<ROUND_> { n107 = JTBToolkit.makeNodeToken(n108); }
      { n0 = new NodeChoice(n107, 53); }
   |
      n110=<SIGN_> { n109 = JTBToolkit.makeNodeToken(n110); }
      { n0 = new NodeChoice(n109, 54); }
   |
      n112=<ASIN_> { n111 = JTBToolkit.makeNodeToken(n112); }
      { n0 = new NodeChoice(n111, 55); }
   |
      n114=<ATAN_> { n113 = JTBToolkit.makeNodeToken(n114); }
      { n0 = new NodeChoice(n113, 56); }
   |
      n116=<ATAN2_> { n115 = JTBToolkit.makeNodeToken(n116); }
      { n0 = new NodeChoice(n115, 57); }
   |
      n118=<ATN2_> { n117 = JTBToolkit.makeNodeToken(n118); }
      { n0 = new NodeChoice(n117, 58); }
   |
      n120=<COS_> { n119 = JTBToolkit.makeNodeToken(n120); }
      { n0 = new NodeChoice(n119, 59); }
   |
      n122=<ACOS_> { n121 = JTBToolkit.makeNodeToken(n122); }
      { n0 = new NodeChoice(n121, 60); }
   |
      n124=<COSH_> { n123 = JTBToolkit.makeNodeToken(n124); }
      { n0 = new NodeChoice(n123, 61); }
   |
      n126=<COT_> { n125 = JTBToolkit.makeNodeToken(n126); }
      { n0 = new NodeChoice(n125, 62); }
   |
      n128=<DEGREE_> { n127 = JTBToolkit.makeNodeToken(n128); }
      { n0 = new NodeChoice(n127, 63); }
   |
      n130=<RADIANS_> { n129 = JTBToolkit.makeNodeToken(n130); }
      { n0 = new NodeChoice(n129, 64); }
   |
      n132=<SIN_> { n131 = JTBToolkit.makeNodeToken(n132); }
      { n0 = new NodeChoice(n131, 65); }
   |
      n134=<TAN_> { n133 = JTBToolkit.makeNodeToken(n134); }
      { n0 = new NodeChoice(n133, 66); }
   |
      n136=<DATABASE_> { n135 = JTBToolkit.makeNodeToken(n136); }
      { n0 = new NodeChoice(n135, 67); }
   |
      n138=<VALUE_> { n137 = JTBToolkit.makeNodeToken(n138); }
      { n0 = new NodeChoice(n137, 68); }
   |
      n140=<VERSION_> { n139 = JTBToolkit.makeNodeToken(n140); }
      { n0 = new NodeChoice(n139, 69); }
   |
      n142=<MIN_> { n141 = JTBToolkit.makeNodeToken(n142); }
      { n0 = new NodeChoice(n141, 70); }
   |
      n144=<STDDEV_> { n143 = JTBToolkit.makeNodeToken(n144); }
      { n0 = new NodeChoice(n143, 71); }
   |
      n146=<STDDEV_POP_> { n145 = JTBToolkit.makeNodeToken(n146); }
      { n0 = new NodeChoice(n145, 72); }
   |
      n148=<STDDEV_SAMP_> { n147 = JTBToolkit.makeNodeToken(n148); }
      { n0 = new NodeChoice(n147, 73); }
   |
      n150=<SUM_> { n149 = JTBToolkit.makeNodeToken(n150); }
      { n0 = new NodeChoice(n149, 74); }
   |
      n152=<VARIANCE_> { n151 = JTBToolkit.makeNodeToken(n152); }
      { n0 = new NodeChoice(n151, 75); }
   |
      n154=<VARIANCE_POP_> { n153 = JTBToolkit.makeNodeToken(n154); }
      { n0 = new NodeChoice(n153, 76); }
   |
      n156=<VARIANCE_SAMP_> { n155 = JTBToolkit.makeNodeToken(n156); }
      { n0 = new NodeChoice(n155, 77); }
   |
      n158=<VAR_POP_> { n157 = JTBToolkit.makeNodeToken(n158); }
      { n0 = new NodeChoice(n157, 78); }
   |
      n160=<VAR_SAMP_> { n159 = JTBToolkit.makeNodeToken(n160); }
      { n0 = new NodeChoice(n159, 79); }
   |
      n162=<ASCII_> { n161 = JTBToolkit.makeNodeToken(n162); }
      { n0 = new NodeChoice(n161, 80); }
   |
      n164=<LPAD_> { n163 = JTBToolkit.makeNodeToken(n164); }
      { n0 = new NodeChoice(n163, 81); }
   |
      n166=<RPAD_> { n165 = JTBToolkit.makeNodeToken(n166); }
      { n0 = new NodeChoice(n165, 82); }
   |
      n168=<LTRIM_> { n167 = JTBToolkit.makeNodeToken(n168); }
      { n0 = new NodeChoice(n167, 83); }
   |
      n170=<REPLACE_> { n169 = JTBToolkit.makeNodeToken(n170); }
      { n0 = new NodeChoice(n169, 84); }
   |
      n172=<RTRIM_> { n171 = JTBToolkit.makeNodeToken(n172); }
      { n0 = new NodeChoice(n171, 85); }
   |
      n174=<SUBSTR_> { n173 = JTBToolkit.makeNodeToken(n174); }
      { n0 = new NodeChoice(n173, 86); }
   |
      n176=<TRIM_> { n175 = JTBToolkit.makeNodeToken(n176); }
      { n0 = new NodeChoice(n175, 87); }
   |
      n178=<UPPER_> { n177 = JTBToolkit.makeNodeToken(n178); }
      { n0 = new NodeChoice(n177, 88); }
   |
      n180=<FIXED_> { n179 = JTBToolkit.makeNodeToken(n180); }
      { n0 = new NodeChoice(n179, 89); }
   |
      n182=<GREATEST_> { n181 = JTBToolkit.makeNodeToken(n182); }
      { n0 = new NodeChoice(n181, 90); }
   |
      n184=<LEAST_> { n183 = JTBToolkit.makeNodeToken(n184); }
      { n0 = new NodeChoice(n183, 91); }
   |
      n186=<INSTR_> { n185 = JTBToolkit.makeNodeToken(n186); }
      { n0 = new NodeChoice(n185, 92); }
   |
      n188=<SOUNDEX_> { n187 = JTBToolkit.makeNodeToken(n188); }
      { n0 = new NodeChoice(n187, 93); }
   |
      n190=<INITCAP_> { n189 = JTBToolkit.makeNodeToken(n190); }
      { n0 = new NodeChoice(n189, 94); }
   |
      n192=<LFILL_> { n191 = JTBToolkit.makeNodeToken(n192); }
      { n0 = new NodeChoice(n191, 95); }
   |
      n194=<MAPCHAR_> { n193 = JTBToolkit.makeNodeToken(n194); }
      { n0 = new NodeChoice(n193, 96); }
   |
      n196=<NUM_> { n195 = JTBToolkit.makeNodeToken(n196); }
      { n0 = new NodeChoice(n195, 97); }
   |
      n198=<CONCAT_WORD> { n197 = JTBToolkit.makeNodeToken(n198); }
      { n0 = new NodeChoice(n197, 98); }
   |
      n200=<CURTIME_> { n199 = JTBToolkit.makeNodeToken(n200); }
      { n0 = new NodeChoice(n199, 99); }
   |
      n202=<CURDATE_> { n201 = JTBToolkit.makeNodeToken(n202); }
      { n0 = new NodeChoice(n201, 100); }
   |
      n204=<TIMEOFDAY_> { n203 = JTBToolkit.makeNodeToken(n204); }
      { n0 = new NodeChoice(n203, 101); }
   |
      n206=<ISFINITE_> { n205 = JTBToolkit.makeNodeToken(n206); }
      { n0 = new NodeChoice(n205, 102); }
   |
      n208=<DATETRUNC_> { n207 = JTBToolkit.makeNodeToken(n208); }
      { n0 = new NodeChoice(n207, 103); }
   |
      n210=<DATEPART_> { n209 = JTBToolkit.makeNodeToken(n210); }
      { n0 = new NodeChoice(n209, 104); }
   |
      n212=<AGE_> { n211 = JTBToolkit.makeNodeToken(n212); }
      { n0 = new NodeChoice(n211, 105); }
   |
      n214=<LOCALTIME_> { n213 = JTBToolkit.makeNodeToken(n214); }
      { n0 = new NodeChoice(n213, 106); }
   |
      n216=<LOCALTIMESTAMP_> { n215 = JTBToolkit.makeNodeToken(n216); }
      { n0 = new NodeChoice(n215, 107); }
   |
      n218=<BIT_LENGTH_> { n217 = JTBToolkit.makeNodeToken(n218); }
      { n0 = new NodeChoice(n217, 108); }
   |
      n220=<CHAR_LENGTH_> { n219 = JTBToolkit.makeNodeToken(n220); }
      { n0 = new NodeChoice(n219, 109); }
   |
      n222=<CHARACTER_LENGTH_> { n221 = JTBToolkit.makeNodeToken(n222); }
      { n0 = new NodeChoice(n221, 110); }
   |
      n224=<CONVERT_> { n223 = JTBToolkit.makeNodeToken(n224); }
      { n0 = new NodeChoice(n223, 111); }
   |
      n226=<OCTET_LENGTH_> { n225 = JTBToolkit.makeNodeToken(n226); }
      { n0 = new NodeChoice(n225, 112); }
   |
      n228=<OVERLAY_> { n227 = JTBToolkit.makeNodeToken(n228); }
      { n0 = new NodeChoice(n227, 113); }
   |
      n230=<PLACING_> { n229 = JTBToolkit.makeNodeToken(n230); }
      { n0 = new NodeChoice(n229, 114); }
   |
      n232=<STORAGE_> { n231 = JTBToolkit.makeNodeToken(n232); }
      { n0 = new NodeChoice(n231, 115); }
   |
      n234=<TYPE_> { n233 = JTBToolkit.makeNodeToken(n234); }
      { n0 = new NodeChoice(n233, 116); }
   |
      n236=<BTRIM_> { n235 = JTBToolkit.makeNodeToken(n236); }
      { n0 = new NodeChoice(n235, 117); }
   |
      n238=<CHR_> { n237 = JTBToolkit.makeNodeToken(n238); }
      { n0 = new NodeChoice(n237, 118); }
   |
      n240=<DECODE_> { n239 = JTBToolkit.makeNodeToken(n240); }
      { n0 = new NodeChoice(n239, 119); }
   |
      n242=<ENCODE_> { n241 = JTBToolkit.makeNodeToken(n242); }
      { n0 = new NodeChoice(n241, 120); }
   |
      n244=<MD5_> { n243 = JTBToolkit.makeNodeToken(n244); }
      { n0 = new NodeChoice(n243, 121); }
   |
      n246=<PG_CLIENT_ENCODING_> { n245 = JTBToolkit.makeNodeToken(n246); }
      { n0 = new NodeChoice(n245, 122); }
   |
      n248=<QUOTE_IDENT_> { n247 = JTBToolkit.makeNodeToken(n248); }
      { n0 = new NodeChoice(n247, 123); }
   |
      n250=<QUOTE_LITERAL_> { n249 = JTBToolkit.makeNodeToken(n250); }
      { n0 = new NodeChoice(n249, 124); }
   |
      n252=<REPEAT_> { n251 = JTBToolkit.makeNodeToken(n252); }
      { n0 = new NodeChoice(n251, 125); }
   |
      n254=<SPLIT_PART_> { n253 = JTBToolkit.makeNodeToken(n254); }
      { n0 = new NodeChoice(n253, 126); }
   |
      n256=<STRPOS_> { n255 = JTBToolkit.makeNodeToken(n256); }
      { n0 = new NodeChoice(n255, 127); }
   |
      n258=<TO_ASCII_> { n257 = JTBToolkit.makeNodeToken(n258); }
      { n0 = new NodeChoice(n257, 128); }
   |
      n260=<TO_HEX_> { n259 = JTBToolkit.makeNodeToken(n260); }
      { n0 = new NodeChoice(n259, 129); }
   |
      n262=<TRANSLATE_> { n261 = JTBToolkit.makeNodeToken(n262); }
      { n0 = new NodeChoice(n261, 130); }
   |
      n264=<WIDTH_BUCKET_> { n263 = JTBToolkit.makeNodeToken(n264); }
      { n0 = new NodeChoice(n263, 131); }
   |
      n266=<SETSEED_> { n265 = JTBToolkit.makeNodeToken(n266); }
      { n0 = new NodeChoice(n265, 132); }
   |
      n268=<RANDOM_> { n267 = JTBToolkit.makeNodeToken(n268); }
      { n0 = new NodeChoice(n267, 133); }
   |
      n270=<CBRT_> { n269 = JTBToolkit.makeNodeToken(n270); }
      { n0 = new NodeChoice(n269, 134); }
   |
      n272=<GET_BIT_> { n271 = JTBToolkit.makeNodeToken(n272); }
      { n0 = new NodeChoice(n271, 135); }
   |
      n274=<GET_BYTE_> { n273 = JTBToolkit.makeNodeToken(n274); }
      { n0 = new NodeChoice(n273, 136); }
   |
      n276=<TO_DATE_> { n275 = JTBToolkit.makeNodeToken(n276); }
      { n0 = new NodeChoice(n275, 137); }
   |
      n278=<CLOCK_TIMESTAMP_> { n277 = JTBToolkit.makeNodeToken(n278); }
      { n0 = new NodeChoice(n277, 138); }
   |
      n280=<STATEMENT_TIMESTAMP_> { n279 = JTBToolkit.makeNodeToken(n280); }
      { n0 = new NodeChoice(n279, 139); }
   |
      n282=<TRANSACTION_TIMESTAMP_> { n281 = JTBToolkit.makeNodeToken(n282); }
      { n0 = new NodeChoice(n281, 140); }
   |
      n284=<SMALLINT_> { n283 = JTBToolkit.makeNodeToken(n284); }
      { n0 = new NodeChoice(n283, 141); }
   |
      n286=<TINYINT_> { n285 = JTBToolkit.makeNodeToken(n286); }
      { n0 = new NodeChoice(n285, 142); }
   |
      n288=<INT2_> { n287 = JTBToolkit.makeNodeToken(n288); }
      { n0 = new NodeChoice(n287, 143); }
   |
      n290=<BYTEA_> { n289 = JTBToolkit.makeNodeToken(n290); }
      { n0 = new NodeChoice(n289, 144); }
   |
      n292=<BIGINT_> { n291 = JTBToolkit.makeNodeToken(n292); }
      { n0 = new NodeChoice(n291, 145); }
   |
      n294=<INT8_> { n293 = JTBToolkit.makeNodeToken(n294); }
      { n0 = new NodeChoice(n293, 146); }
   |
      n296=<BIGINTEGER_> { n295 = JTBToolkit.makeNodeToken(n296); }
      { n0 = new NodeChoice(n295, 147); }
   |
      n298=<INT_> { n297 = JTBToolkit.makeNodeToken(n298); }
      { n0 = new NodeChoice(n297, 148); }
   |
      n300=<INTEGER_> { n299 = JTBToolkit.makeNodeToken(n300); }
      { n0 = new NodeChoice(n299, 149); }
   |
      n302=<INT4_> { n301 = JTBToolkit.makeNodeToken(n302); }
      { n0 = new NodeChoice(n301, 150); }
   |
      n304=<REAL_> { n303 = JTBToolkit.makeNodeToken(n304); }
      { n0 = new NodeChoice(n303, 151); }
   |
      n306=<SMALLFLOAT_> { n305 = JTBToolkit.makeNodeToken(n306); }
      { n0 = new NodeChoice(n305, 152); }
   |
      n308=<FLOAT_> { n307 = JTBToolkit.makeNodeToken(n308); }
      { n0 = new NodeChoice(n307, 153); }
   |
      n310=<FLOAT4_> { n309 = JTBToolkit.makeNodeToken(n310); }
      { n0 = new NodeChoice(n309, 154); }
   |
      n312=<FLOAT8_> { n311 = JTBToolkit.makeNodeToken(n312); }
      { n0 = new NodeChoice(n311, 155); }
   |
      n314=<DECIMAL_> { n313 = JTBToolkit.makeNodeToken(n314); }
      { n0 = new NodeChoice(n313, 156); }
   |
      n316=<NUMERIC_> { n315 = JTBToolkit.makeNodeToken(n316); }
      { n0 = new NodeChoice(n315, 157); }
   |
      n318=<SMALLMONEY_> { n317 = JTBToolkit.makeNodeToken(n318); }
      { n0 = new NodeChoice(n317, 158); }
   |
      n320=<MONEY_> { n319 = JTBToolkit.makeNodeToken(n320); }
      { n0 = new NodeChoice(n319, 159); }
   |
      n322=<NUMBER_> { n321 = JTBToolkit.makeNodeToken(n322); }
      { n0 = new NodeChoice(n321, 160); }
   |
      n324=<CHAR_> { n323 = JTBToolkit.makeNodeToken(n324); }
      { n0 = new NodeChoice(n323, 161); }
   |
      n326=<CHARACHTER_> { n325 = JTBToolkit.makeNodeToken(n326); }
      { n0 = new NodeChoice(n325, 162); }
   |
      n328=<VARCHAR_> { n327 = JTBToolkit.makeNodeToken(n328); }
      { n0 = new NodeChoice(n327, 163); }
   |
      n330=<TINYTEXT_> { n329 = JTBToolkit.makeNodeToken(n330); }
      { n0 = new NodeChoice(n329, 164); }
   |
      n332=<VARCHAR2_> { n331 = JTBToolkit.makeNodeToken(n332); }
      { n0 = new NodeChoice(n331, 165); }
   |
      n334=<DATE_> { n333 = JTBToolkit.makeNodeToken(n334); }
      { n0 = new NodeChoice(n333, 166); }
   |
      n336=<TIME_> { n335 = JTBToolkit.makeNodeToken(n336); }
      { n0 = new NodeChoice(n335, 167); }
   |
      n338=<TIMESTAMP_> { n337 = JTBToolkit.makeNodeToken(n338); }
      { n0 = new NodeChoice(n337, 168); }
   |
      n340=<DEC_> { n339 = JTBToolkit.makeNodeToken(n340); }
      { n0 = new NodeChoice(n339, 169); }
   |
      n342=<DOUBLE_PRECISION_> { n341 = JTBToolkit.makeNodeToken(n342); }
      { n0 = new NodeChoice(n341, 170); }
   |
      n344=<NCHAR_> { n343 = JTBToolkit.makeNodeToken(n344); }
      { n0 = new NodeChoice(n343, 171); }
   |
      n346=<NATIONAL_> { n345 = JTBToolkit.makeNodeToken(n346); }
      { n0 = new NodeChoice(n345, 172); }
   |
      n348=<VARYING_> { n347 = JTBToolkit.makeNodeToken(n348); }
      { n0 = new NodeChoice(n347, 173); }
   |
      n350=<BOOLEAN_> { n349 = JTBToolkit.makeNodeToken(n350); }
      { n0 = new NodeChoice(n349, 174); }
   |
      n352=<INTERVAL_> { n351 = JTBToolkit.makeNodeToken(n352); }
      { n0 = new NodeChoice(n351, 175); }
   |
      n354=<TEXT_> { n353 = JTBToolkit.makeNodeToken(n354); }
      { n0 = new NodeChoice(n353, 176); }
   |
      n356=<MEDIUMTEXT_> { n355 = JTBToolkit.makeNodeToken(n356); }
      { n0 = new NodeChoice(n355, 177); }
   |
      n358=<LVARCHAR_> { n357 = JTBToolkit.makeNodeToken(n358); }
      { n0 = new NodeChoice(n357, 178); }
   |
      n360=<LONGTEXT_> { n359 = JTBToolkit.makeNodeToken(n360); }
      { n0 = new NodeChoice(n359, 179); }
   |
      n362=<LONG_VARCHAR_> { n361 = JTBToolkit.makeNodeToken(n362); }
      { n0 = new NodeChoice(n361, 180); }
   |
      n364=<LONG_> { n363 = JTBToolkit.makeNodeToken(n364); }
      { n0 = new NodeChoice(n363, 181); }
   |
      n366=<CLOB_> { n365 = JTBToolkit.makeNodeToken(n366); }
      { n0 = new NodeChoice(n365, 182); }
   |
      n368=<BLOB_> { n367 = JTBToolkit.makeNodeToken(n368); }
      { n0 = new NodeChoice(n367, 183); }
   |
      n370=<BINARY_> { n369 = JTBToolkit.makeNodeToken(n370); }
      { n0 = new NodeChoice(n369, 184); }
   |
      n372=<VARBINARY_> { n371 = JTBToolkit.makeNodeToken(n372); }
      { n0 = new NodeChoice(n371, 185); }
   |
      n374=<RAW_> { n373 = JTBToolkit.makeNodeToken(n374); }
      { n0 = new NodeChoice(n373, 186); }
   |
      n376=<LONG_RAW_> { n375 = JTBToolkit.makeNodeToken(n376); }
      { n0 = new NodeChoice(n375, 187); }
   |
      n378=<IMAGE_> { n377 = JTBToolkit.makeNodeToken(n378); }
      { n0 = new NodeChoice(n377, 188); }
   |
      n380=<BYTE_> { n379 = JTBToolkit.makeNodeToken(n380); }
      { n0 = new NodeChoice(n379, 189); }
   |
      n382=<CLUSTER_> { n381 = JTBToolkit.makeNodeToken(n382); }
      { n0 = new NodeChoice(n381, 190); }
   |
      n384=<CURRENT_USER_> { n383 = JTBToolkit.makeNodeToken(n384); }
      { n0 = new NodeChoice(n383, 191); }
   |
      n386=<NULLIF_> { n385 = JTBToolkit.makeNodeToken(n386); }
      { n0 = new NodeChoice(n385, 192); }
   |
      n388=<SET_BIT_> { n387 = JTBToolkit.makeNodeToken(n388); }
      { n0 = new NodeChoice(n387, 193); }
   |
      n390=<SET_BYTE_> { n389 = JTBToolkit.makeNodeToken(n390); }
      { n0 = new NodeChoice(n389, 194); }
   |
      n392=<TO_CHAR_> { n391 = JTBToolkit.makeNodeToken(n392); }
      { n0 = new NodeChoice(n391, 195); }
   |
      n394=<TO_NUMBER_> { n393 = JTBToolkit.makeNodeToken(n394); }
      { n0 = new NodeChoice(n393, 196); }
   |
      n396=<TO_TIMESTAMP_> { n395 = JTBToolkit.makeNodeToken(n396); }
      { n0 = new NodeChoice(n395, 197); }
   |
      n398=<ADD_MONTHS_> { n397 = JTBToolkit.makeNodeToken(n398); }
      { n0 = new NodeChoice(n397, 198); }
   |
      n400=<JUSTIFY_DAYS_> { n399 = JTBToolkit.makeNodeToken(n400); }
      { n0 = new NodeChoice(n399, 199); }
   |
      n402=<JUSTIFY_HOURS_> { n401 = JTBToolkit.makeNodeToken(n402); }
      { n0 = new NodeChoice(n401, 200); }
   |
      n404=<JUSTIFY_INTERVAL_> { n403 = JTBToolkit.makeNodeToken(n404); }
      { n0 = new NodeChoice(n403, 201); }
   |
      n406=<LAST_DAY_> { n405 = JTBToolkit.makeNodeToken(n406); }
      { n0 = new NodeChoice(n405, 202); }
   |
      n408=<MONTHS_BETWEEN_> { n407 = JTBToolkit.makeNodeToken(n408); }
      { n0 = new NodeChoice(n407, 203); }
   |
      n410=<NEXT_DAY_> { n409 = JTBToolkit.makeNodeToken(n410); }
      { n0 = new NodeChoice(n409, 204); }
   |
      n412=<CURRENT_DATABASE_> { n411 = JTBToolkit.makeNodeToken(n412); }
      { n0 = new NodeChoice(n411, 205); }
   |
      n414=<CURRENT_SCHEMA_> { n413 = JTBToolkit.makeNodeToken(n414); }
      { n0 = new NodeChoice(n413, 206); }
   |
      n416=<BIT_AND_> { n415 = JTBToolkit.makeNodeToken(n416); }
      { n0 = new NodeChoice(n415, 207); }
   |
      n418=<BIT_OR_> { n417 = JTBToolkit.makeNodeToken(n418); }
      { n0 = new NodeChoice(n417, 208); }
   |
      n420=<BOOL_AND_> { n419 = JTBToolkit.makeNodeToken(n420); }
      { n0 = new NodeChoice(n419, 209); }
   |
      n422=<BOOL_OR_> { n421 = JTBToolkit.makeNodeToken(n422); }
      { n0 = new NodeChoice(n421, 210); }
   |
      n424=<EVERY_> { n423 = JTBToolkit.makeNodeToken(n424); }
      { n0 = new NodeChoice(n423, 211); }
   |
      n426=<CORR_> { n425 = JTBToolkit.makeNodeToken(n426); }
      { n0 = new NodeChoice(n425, 212); }
   |
      n428=<COVAR_POP_> { n427 = JTBToolkit.makeNodeToken(n428); }
      { n0 = new NodeChoice(n427, 213); }
   |
      n430=<COVAR_SAMP_> { n429 = JTBToolkit.makeNodeToken(n430); }
      { n0 = new NodeChoice(n429, 214); }
   |
      n432=<REGR_AVGX_> { n431 = JTBToolkit.makeNodeToken(n432); }
      { n0 = new NodeChoice(n431, 215); }
   |
      n434=<REGR_AVGY_> { n433 = JTBToolkit.makeNodeToken(n434); }
      { n0 = new NodeChoice(n433, 216); }
   |
      n436=<REGR_COUNT_> { n435 = JTBToolkit.makeNodeToken(n436); }
      { n0 = new NodeChoice(n435, 217); }
   |
      n438=<REGR_INTERCEPT_> { n437 = JTBToolkit.makeNodeToken(n438); }
      { n0 = new NodeChoice(n437, 218); }
   |
      n440=<REGR_R2_> { n439 = JTBToolkit.makeNodeToken(n440); }
      { n0 = new NodeChoice(n439, 219); }
   |
      n442=<REGR_SLOPE_> { n441 = JTBToolkit.makeNodeToken(n442); }
      { n0 = new NodeChoice(n441, 220); }
   |
      n444=<REGR_SXX_> { n443 = JTBToolkit.makeNodeToken(n444); }
      { n0 = new NodeChoice(n443, 221); }
   |
      n446=<REGR_SXY_> { n445 = JTBToolkit.makeNodeToken(n446); }
      { n0 = new NodeChoice(n445, 222); }
   |
      n448=<REGR_SYY_> { n447 = JTBToolkit.makeNodeToken(n448); }
      { n0 = new NodeChoice(n447, 223); }
   |
      n450=<REGEXP_REPLACE_> { n449 = JTBToolkit.makeNodeToken(n450); }
      { n0 = new NodeChoice(n449, 224); }
   |
      n452=<ABBREV_> { n451 = JTBToolkit.makeNodeToken(n452); }
      { n0 = new NodeChoice(n451, 225); }
   |
      n454=<BROADCAST_> { n453 = JTBToolkit.makeNodeToken(n454); }
      { n0 = new NodeChoice(n453, 226); }
   |
      n456=<FAMILY_> { n455 = JTBToolkit.makeNodeToken(n456); }
      { n0 = new NodeChoice(n455, 227); }
   |
      n458=<HOST_> { n457 = JTBToolkit.makeNodeToken(n458); }
      { n0 = new NodeChoice(n457, 228); }
   |
      n460=<HOSTMASK_> { n459 = JTBToolkit.makeNodeToken(n460); }
      { n0 = new NodeChoice(n459, 229); }
   |
      n462=<MASKLEN_> { n461 = JTBToolkit.makeNodeToken(n462); }
      { n0 = new NodeChoice(n461, 230); }
   |
      n464=<NETMASK_> { n463 = JTBToolkit.makeNodeToken(n464); }
      { n0 = new NodeChoice(n463, 231); }
   |
      n466=<NETWORK_> { n465 = JTBToolkit.makeNodeToken(n466); }
      { n0 = new NodeChoice(n465, 232); }
   |
      n468=<SET_MASKLEN_> { n467 = JTBToolkit.makeNodeToken(n468); }
      { n0 = new NodeChoice(n467, 233); }
   |
      n470=<GEOMETRY_> { n469 = JTBToolkit.makeNodeToken(n470); }
      { n0 = new NodeChoice(n469, 234); }
   |
      n472=<BOX2D_> { n471 = JTBToolkit.makeNodeToken(n472); }
      { n0 = new NodeChoice(n471, 235); }
   |
      n474=<BOX3D_> { n473 = JTBToolkit.makeNodeToken(n474); }
      { n0 = new NodeChoice(n473, 236); }
   |
      n476=<BOX3DEXTENT_> { n475 = JTBToolkit.makeNodeToken(n476); }
      { n0 = new NodeChoice(n475, 237); }
   |
      n478=<REGCLASS_> { n477 = JTBToolkit.makeNodeToken(n478); }
      { n0 = new NodeChoice(n477, 238); }
   |
      n480=<ST_ASTEXT_> { n479 = JTBToolkit.makeNodeToken(n480); }
      { n0 = new NodeChoice(n479, 239); }
   |
      n482=<ST_TRANSFORM_> { n481 = JTBToolkit.makeNodeToken(n482); }
      { n0 = new NodeChoice(n481, 240); }
   |
      n484=<ST_DISTANCE_> { n483 = JTBToolkit.makeNodeToken(n484); }
      { n0 = new NodeChoice(n483, 241); }
   |
      n486=<ST_DWITHIN_> { n485 = JTBToolkit.makeNodeToken(n486); }
      { n0 = new NodeChoice(n485, 242); }
   |
      n488=<ST_LENGTH_> { n487 = JTBToolkit.makeNodeToken(n488); }
      { n0 = new NodeChoice(n487, 243); }
   |
      n490=<ST_AREA_> { n489 = JTBToolkit.makeNodeToken(n490); }
      { n0 = new NodeChoice(n489, 244); }
   |
      n492=<ST_ASBINARY_> { n491 = JTBToolkit.makeNodeToken(n492); }
      { n0 = new NodeChoice(n491, 245); }
   |
      n494=<ST_BOUNDARY_> { n493 = JTBToolkit.makeNodeToken(n494); }
      { n0 = new NodeChoice(n493, 246); }
   |
      n496=<ST_BUFFER_> { n495 = JTBToolkit.makeNodeToken(n496); }
      { n0 = new NodeChoice(n495, 247); }
   |
      n498=<ST_CENTROID_> { n497 = JTBToolkit.makeNodeToken(n498); }
      { n0 = new NodeChoice(n497, 248); }
   |
      n500=<ST_ADDMEASURE_> { n499 = JTBToolkit.makeNodeToken(n500); }
      { n0 = new NodeChoice(n499, 249); }
   |
      n502=<ST_ADDPOINT_> { n501 = JTBToolkit.makeNodeToken(n502); }
      { n0 = new NodeChoice(n501, 250); }
   |
      n504=<ST_AFFINE_> { n503 = JTBToolkit.makeNodeToken(n504); }
      { n0 = new NodeChoice(n503, 251); }
   |
      n506=<ST_AREA2D_> { n505 = JTBToolkit.makeNodeToken(n506); }
      { n0 = new NodeChoice(n505, 252); }
   |
      n508=<ST_ASEWKB_> { n507 = JTBToolkit.makeNodeToken(n508); }
      { n0 = new NodeChoice(n507, 253); }
   |
      n510=<ST_ASEWKT_> { n509 = JTBToolkit.makeNodeToken(n510); }
      { n0 = new NodeChoice(n509, 254); }
   |
      n512=<ST_ASGEOJSON_> { n511 = JTBToolkit.makeNodeToken(n512); }
      { n0 = new NodeChoice(n511, 255); }
   |
      n514=<ST_ASGML_> { n513 = JTBToolkit.makeNodeToken(n514); }
      { n0 = new NodeChoice(n513, 256); }
   |
      n516=<ST_ASHEXEWKB_> { n515 = JTBToolkit.makeNodeToken(n516); }
      { n0 = new NodeChoice(n515, 257); }
   |
      n518=<ST_ASKML_> { n517 = JTBToolkit.makeNodeToken(n518); }
      { n0 = new NodeChoice(n517, 258); }
   |
      n520=<ST_ASSVG_> { n519 = JTBToolkit.makeNodeToken(n520); }
      { n0 = new NodeChoice(n519, 259); }
   |
      n522=<ST_AZIMUTH_> { n521 = JTBToolkit.makeNodeToken(n522); }
      { n0 = new NodeChoice(n521, 260); }
   |
      n524=<ST_BDMPOLYFROMTEXT_> { n523 = JTBToolkit.makeNodeToken(n524); }
      { n0 = new NodeChoice(n523, 261); }
   |
      n526=<ST_BDPOLYFROMTEXT_> { n525 = JTBToolkit.makeNodeToken(n526); }
      { n0 = new NodeChoice(n525, 262); }
   |
      n528=<ST_BUILDAREA_> { n527 = JTBToolkit.makeNodeToken(n528); }
      { n0 = new NodeChoice(n527, 263); }
   |
      n530=<ST_BYTEA_> { n529 = JTBToolkit.makeNodeToken(n530); }
      { n0 = new NodeChoice(n529, 264); }
   |
      n532=<ST_CHIP_IN_> { n531 = JTBToolkit.makeNodeToken(n532); }
      { n0 = new NodeChoice(n531, 265); }
   |
      n534=<ST_CHIP_OUT_> { n533 = JTBToolkit.makeNodeToken(n534); }
      { n0 = new NodeChoice(n533, 266); }
   |
      n536=<ST_CLOSESTPOINT_> { n535 = JTBToolkit.makeNodeToken(n536); }
      { n0 = new NodeChoice(n535, 267); }
   |
      n538=<ST_COLLECT_> { n537 = JTBToolkit.makeNodeToken(n538); }
      { n0 = new NodeChoice(n537, 268); }
   |
      n540=<ST_COLLECTIONEXTRACT_> { n539 = JTBToolkit.makeNodeToken(n540); }
      { n0 = new NodeChoice(n539, 269); }
   |
      n542=<ST_COMBINE_BBOX_> { n541 = JTBToolkit.makeNodeToken(n542); }
      { n0 = new NodeChoice(n541, 270); }
   |
      n544=<ST_COMPRESSION_> { n543 = JTBToolkit.makeNodeToken(n544); }
      { n0 = new NodeChoice(n543, 271); }
   |
      n546=<ST_CONTAINS_> { n545 = JTBToolkit.makeNodeToken(n546); }
      { n0 = new NodeChoice(n545, 272); }
   |
      n548=<ST_CONTAINSPROPERLY_> { n547 = JTBToolkit.makeNodeToken(n548); }
      { n0 = new NodeChoice(n547, 273); }
   |
      n550=<ST_CONVEXHULL_> { n549 = JTBToolkit.makeNodeToken(n550); }
      { n0 = new NodeChoice(n549, 274); }
   |
      n552=<ST_COORDDIM_> { n551 = JTBToolkit.makeNodeToken(n552); }
      { n0 = new NodeChoice(n551, 275); }
   |
      n554=<ST_COVEREDBY_> { n553 = JTBToolkit.makeNodeToken(n554); }
      { n0 = new NodeChoice(n553, 276); }
   |
      n556=<ST_COVERS_> { n555 = JTBToolkit.makeNodeToken(n556); }
      { n0 = new NodeChoice(n555, 277); }
   |
      n558=<ST_CROSSES_> { n557 = JTBToolkit.makeNodeToken(n558); }
      { n0 = new NodeChoice(n557, 278); }
   |
      n560=<ST_CURVETOLINE_> { n559 = JTBToolkit.makeNodeToken(n560); }
      { n0 = new NodeChoice(n559, 279); }
   |
      n562=<ST_DATATYPE_> { n561 = JTBToolkit.makeNodeToken(n562); }
      { n0 = new NodeChoice(n561, 280); }
   |
      n564=<ST_DFULLYWITHIN_> { n563 = JTBToolkit.makeNodeToken(n564); }
      { n0 = new NodeChoice(n563, 281); }
   |
      n566=<ST_DIFFERENCE_> { n565 = JTBToolkit.makeNodeToken(n566); }
      { n0 = new NodeChoice(n565, 282); }
   |
      n568=<ST_DIMENSION_> { n567 = JTBToolkit.makeNodeToken(n568); }
      { n0 = new NodeChoice(n567, 283); }
   |
      n570=<ST_DISJOINT_> { n569 = JTBToolkit.makeNodeToken(n570); }
      { n0 = new NodeChoice(n569, 284); }
   |
      n572=<ST_DISTANCE_SPHERE_> { n571 = JTBToolkit.makeNodeToken(n572); }
      { n0 = new NodeChoice(n571, 285); }
   |
      n574=<ST_DISTANCE_SPHEROID_> { n573 = JTBToolkit.makeNodeToken(n574); }
      { n0 = new NodeChoice(n573, 286); }
   |
      n576=<ST_ENDPOINT_> { n575 = JTBToolkit.makeNodeToken(n576); }
      { n0 = new NodeChoice(n575, 287); }
   |
      n578=<ST_ENVELOPE_> { n577 = JTBToolkit.makeNodeToken(n578); }
      { n0 = new NodeChoice(n577, 288); }
   |
      n580=<ST_EQUALS_> { n579 = JTBToolkit.makeNodeToken(n580); }
      { n0 = new NodeChoice(n579, 289); }
   |
      n582=<ST_EXTERIORRING_> { n581 = JTBToolkit.makeNodeToken(n582); }
      { n0 = new NodeChoice(n581, 290); }
   |
      n584=<ST_EXTENT_> { n583 = JTBToolkit.makeNodeToken(n584); }
      { n0 = new NodeChoice(n583, 291); }
   |
      n586=<ST_EXTENT3D_> { n585 = JTBToolkit.makeNodeToken(n586); }
      { n0 = new NodeChoice(n585, 292); }
   |
      n588=<ST_FACTOR_> { n587 = JTBToolkit.makeNodeToken(n588); }
      { n0 = new NodeChoice(n587, 293); }
   |
      n590=<ST_FIND_EXTENT_> { n589 = JTBToolkit.makeNodeToken(n590); }
      { n0 = new NodeChoice(n589, 294); }
   |
      n592=<ST_FORCERHR_> { n591 = JTBToolkit.makeNodeToken(n592); }
      { n0 = new NodeChoice(n591, 295); }
   |
      n594=<ST_FORCE_2D_> { n593 = JTBToolkit.makeNodeToken(n594); }
      { n0 = new NodeChoice(n593, 296); }
   |
      n596=<ST_FORCE_3D_> { n595 = JTBToolkit.makeNodeToken(n596); }
      { n0 = new NodeChoice(n595, 297); }
   |
      n598=<ST_FORCE_3DM_> { n597 = JTBToolkit.makeNodeToken(n598); }
      { n0 = new NodeChoice(n597, 298); }
   |
      n600=<ST_FORCE_3DZ_> { n599 = JTBToolkit.makeNodeToken(n600); }
      { n0 = new NodeChoice(n599, 299); }
   |
      n602=<ST_FORCE_4D_> { n601 = JTBToolkit.makeNodeToken(n602); }
      { n0 = new NodeChoice(n601, 300); }
   |
      n604=<ST_FORCE_COLLECTION_> { n603 = JTBToolkit.makeNodeToken(n604); }
      { n0 = new NodeChoice(n603, 301); }
   |
      n606=<ST_GEOGFROMTEXT_> { n605 = JTBToolkit.makeNodeToken(n606); }
      { n0 = new NodeChoice(n605, 302); }
   |
      n608=<ST_GEOGFROMWKB_> { n607 = JTBToolkit.makeNodeToken(n608); }
      { n0 = new NodeChoice(n607, 303); }
   |
      n610=<ST_GEOGRAPHYFROMTEXT_> { n609 = JTBToolkit.makeNodeToken(n610); }
      { n0 = new NodeChoice(n609, 304); }
   |
      n612=<ST_GEOHASH_> { n611 = JTBToolkit.makeNodeToken(n612); }
      { n0 = new NodeChoice(n611, 305); }
   |
      n614=<ST_GEOMCOLLFROMTEXT_> { n613 = JTBToolkit.makeNodeToken(n614); }
      { n0 = new NodeChoice(n613, 306); }
   |
      n616=<ST_GEOMCOLLFROMWKB_> { n615 = JTBToolkit.makeNodeToken(n616); }
      { n0 = new NodeChoice(n615, 307); }
   |
      n618=<ST_GEOMETRYTYPE_> { n617 = JTBToolkit.makeNodeToken(n618); }
      { n0 = new NodeChoice(n617, 308); }
   |
      n620=<ST_GEOMFROMEWKB_> { n619 = JTBToolkit.makeNodeToken(n620); }
      { n0 = new NodeChoice(n619, 309); }
   |
      n622=<ST_GEOMFROMEWKT_> { n621 = JTBToolkit.makeNodeToken(n622); }
      { n0 = new NodeChoice(n621, 310); }
   |
      n624=<ST_GEOMFROMGML_> { n623 = JTBToolkit.makeNodeToken(n624); }
      { n0 = new NodeChoice(n623, 311); }
   |
      n626=<ST_GEOMFROMKML_> { n625 = JTBToolkit.makeNodeToken(n626); }
      { n0 = new NodeChoice(n625, 312); }
   |
      n628=<ST_GEOMFROMTEXT_> { n627 = JTBToolkit.makeNodeToken(n628); }
      { n0 = new NodeChoice(n627, 313); }
   |
      n630=<ST_GEOMFROMWKB_> { n629 = JTBToolkit.makeNodeToken(n630); }
      { n0 = new NodeChoice(n629, 314); }
   |
      n632=<ST_GMLTOSQL_> { n631 = JTBToolkit.makeNodeToken(n632); }
      { n0 = new NodeChoice(n631, 315); }
   |
      n634=<ST_HASARC_> { n633 = JTBToolkit.makeNodeToken(n634); }
      { n0 = new NodeChoice(n633, 316); }
   |
      n636=<ST_HAUSDORFFDISTANCE_> { n635 = JTBToolkit.makeNodeToken(n636); }
      { n0 = new NodeChoice(n635, 317); }
   |
      n638=<ST_HEIGHT_> { n637 = JTBToolkit.makeNodeToken(n638); }
      { n0 = new NodeChoice(n637, 318); }
   |
      n640=<ST_INTERIORRINGN_> { n639 = JTBToolkit.makeNodeToken(n640); }
      { n0 = new NodeChoice(n639, 319); }
   |
      n642=<ST_INTERSECTION_> { n641 = JTBToolkit.makeNodeToken(n642); }
      { n0 = new NodeChoice(n641, 320); }
   |
      n644=<ST_INTERSECTS_> { n643 = JTBToolkit.makeNodeToken(n644); }
      { n0 = new NodeChoice(n643, 321); }
   |
      n646=<ST_ISCLOSED_> { n645 = JTBToolkit.makeNodeToken(n646); }
      { n0 = new NodeChoice(n645, 322); }
   |
      n648=<ST_ISEMPTY_> { n647 = JTBToolkit.makeNodeToken(n648); }
      { n0 = new NodeChoice(n647, 323); }
   |
      n650=<ST_ISRING_> { n649 = JTBToolkit.makeNodeToken(n650); }
      { n0 = new NodeChoice(n649, 324); }
   |
      n652=<ST_ISSIMPLE_> { n651 = JTBToolkit.makeNodeToken(n652); }
      { n0 = new NodeChoice(n651, 325); }
   |
      n654=<ST_ISVALID_> { n653 = JTBToolkit.makeNodeToken(n654); }
      { n0 = new NodeChoice(n653, 326); }
   |
      n656=<ST_ISVALIDREASON_> { n655 = JTBToolkit.makeNodeToken(n656); }
      { n0 = new NodeChoice(n655, 327); }
   |
      n658=<ST_LENGTH2D_> { n657 = JTBToolkit.makeNodeToken(n658); }
      { n0 = new NodeChoice(n657, 328); }
   |
      n660=<ST_LENGTH2D_SPHEROID_> { n659 = JTBToolkit.makeNodeToken(n660); }
      { n0 = new NodeChoice(n659, 329); }
   |
      n662=<ST_LENGTH3D_> { n661 = JTBToolkit.makeNodeToken(n662); }
      { n0 = new NodeChoice(n661, 330); }
   |
      n664=<ST_LENGTH3D_SPHEROID_> { n663 = JTBToolkit.makeNodeToken(n664); }
      { n0 = new NodeChoice(n663, 331); }
   |
      n666=<ST_LENGTH_SPHEROID_> { n665 = JTBToolkit.makeNodeToken(n666); }
      { n0 = new NodeChoice(n665, 332); }
   |
      n668=<ST_LINECROSSINGDIRECTION_> { n667 = JTBToolkit.makeNodeToken(n668); }
      { n0 = new NodeChoice(n667, 333); }
   |
      n670=<ST_LINEFROMMULTIPOINT_> { n669 = JTBToolkit.makeNodeToken(n670); }
      { n0 = new NodeChoice(n669, 334); }
   |
      n672=<ST_LINEFROMTEXT_> { n671 = JTBToolkit.makeNodeToken(n672); }
      { n0 = new NodeChoice(n671, 335); }
   |
      n674=<ST_LINEFROMWKB_> { n673 = JTBToolkit.makeNodeToken(n674); }
      { n0 = new NodeChoice(n673, 336); }
   |
      n676=<ST_LINEMERGE_> { n675 = JTBToolkit.makeNodeToken(n676); }
      { n0 = new NodeChoice(n675, 337); }
   |
      n678=<ST_LINESTRINGFROMWKB_> { n677 = JTBToolkit.makeNodeToken(n678); }
      { n0 = new NodeChoice(n677, 338); }
   |
      n680=<ST_LINETOCURVE_> { n679 = JTBToolkit.makeNodeToken(n680); }
      { n0 = new NodeChoice(n679, 339); }
   |
      n682=<ST_LINE_INTERPOLATE_POINT_> { n681 = JTBToolkit.makeNodeToken(n682); }
      { n0 = new NodeChoice(n681, 340); }
   |
      n684=<ST_LINE_LOCATE_POINT_> { n683 = JTBToolkit.makeNodeToken(n684); }
      { n0 = new NodeChoice(n683, 341); }
   |
      n686=<ST_LINE_SUBSTRING_> { n685 = JTBToolkit.makeNodeToken(n686); }
      { n0 = new NodeChoice(n685, 342); }
   |
      n688=<ST_LOCATEBETWEENELEVATIONS_> { n687 = JTBToolkit.makeNodeToken(n688); }
      { n0 = new NodeChoice(n687, 343); }
   |
      n690=<ST_LOCATE_ALONG_MEASURE_> { n689 = JTBToolkit.makeNodeToken(n690); }
      { n0 = new NodeChoice(n689, 344); }
   |
      n692=<ST_LOCATE_BETWEEN_MEASURES_> { n691 = JTBToolkit.makeNodeToken(n692); }
      { n0 = new NodeChoice(n691, 345); }
   |
      n694=<ST_LONGESTLINE_> { n693 = JTBToolkit.makeNodeToken(n694); }
      { n0 = new NodeChoice(n693, 346); }
   |
      n696=<ST_M_> { n695 = JTBToolkit.makeNodeToken(n696); }
      { n0 = new NodeChoice(n695, 347); }
   |
      n698=<ST_MAKEENVELOPE_> { n697 = JTBToolkit.makeNodeToken(n698); }
      { n0 = new NodeChoice(n697, 348); }
   |
      n700=<ST_MAKEPOINT_> { n699 = JTBToolkit.makeNodeToken(n700); }
      { n0 = new NodeChoice(n699, 349); }
   |
      n702=<ST_MAKEPOINTM_> { n701 = JTBToolkit.makeNodeToken(n702); }
      { n0 = new NodeChoice(n701, 350); }
   |
      n704=<ST_MAKEPOLYGON_> { n703 = JTBToolkit.makeNodeToken(n704); }
      { n0 = new NodeChoice(n703, 351); }
   |
      n706=<ST_MAXDISTANCE_> { n705 = JTBToolkit.makeNodeToken(n706); }
      { n0 = new NodeChoice(n705, 352); }
   |
      n708=<ST_MEMCOLLECT_> { n707 = JTBToolkit.makeNodeToken(n708); }
      { n0 = new NodeChoice(n707, 353); }
   |
      n710=<ST_MEM_SIZE_> { n709 = JTBToolkit.makeNodeToken(n710); }
      { n0 = new NodeChoice(n709, 354); }
   |
      n712=<ST_MINIMUMBOUNDINGCIRCLE_> { n711 = JTBToolkit.makeNodeToken(n712); }
      { n0 = new NodeChoice(n711, 355); }
   |
      n714=<ST_MLINEFROMTEXT_> { n713 = JTBToolkit.makeNodeToken(n714); }
      { n0 = new NodeChoice(n713, 356); }
   |
      n716=<ST_MLINEFROMWKB_> { n715 = JTBToolkit.makeNodeToken(n716); }
      { n0 = new NodeChoice(n715, 357); }
   |
      n718=<ST_MPOINTFROMTEXT_> { n717 = JTBToolkit.makeNodeToken(n718); }
      { n0 = new NodeChoice(n717, 358); }
   |
      n720=<ST_MPOINTFROMWKB_> { n719 = JTBToolkit.makeNodeToken(n720); }
      { n0 = new NodeChoice(n719, 359); }
   |
      n722=<ST_MPOLYFROMTEXT_> { n721 = JTBToolkit.makeNodeToken(n722); }
      { n0 = new NodeChoice(n721, 360); }
   |
      n724=<ST_MPOLYFROMWKB_> { n723 = JTBToolkit.makeNodeToken(n724); }
      { n0 = new NodeChoice(n723, 361); }
   |
      n726=<ST_MULTI_> { n725 = JTBToolkit.makeNodeToken(n726); }
      { n0 = new NodeChoice(n725, 362); }
   |
      n728=<ST_MULTILINEFROMWKB_> { n727 = JTBToolkit.makeNodeToken(n728); }
      { n0 = new NodeChoice(n727, 363); }
   |
      n730=<ST_MULTILINESTRINGFROMTEXT_> { n729 = JTBToolkit.makeNodeToken(n730); }
      { n0 = new NodeChoice(n729, 364); }
   |
      n732=<ST_MULTIPOINTFROMTEXT_> { n731 = JTBToolkit.makeNodeToken(n732); }
      { n0 = new NodeChoice(n731, 365); }
   |
      n734=<ST_MULTIPOINTFROMWKB_> { n733 = JTBToolkit.makeNodeToken(n734); }
      { n0 = new NodeChoice(n733, 366); }
   |
      n736=<ST_MULTIPOLYFROMWKB_> { n735 = JTBToolkit.makeNodeToken(n736); }
      { n0 = new NodeChoice(n735, 367); }
   |
      n738=<ST_MULTIPOLYGONFROMTEXT_> { n737 = JTBToolkit.makeNodeToken(n738); }
      { n0 = new NodeChoice(n737, 368); }
   |
      n740=<ST_NDIMS_> { n739 = JTBToolkit.makeNodeToken(n740); }
      { n0 = new NodeChoice(n739, 369); }
   |
      n742=<ST_NPOINTS_> { n741 = JTBToolkit.makeNodeToken(n742); }
      { n0 = new NodeChoice(n741, 370); }
   |
      n744=<ST_NRINGS_> { n743 = JTBToolkit.makeNodeToken(n744); }
      { n0 = new NodeChoice(n743, 371); }
   |
      n746=<ST_NUMGEOMETRIES_> { n745 = JTBToolkit.makeNodeToken(n746); }
      { n0 = new NodeChoice(n745, 372); }
   |
      n748=<ST_NUMINTERIORRING_> { n747 = JTBToolkit.makeNodeToken(n748); }
      { n0 = new NodeChoice(n747, 373); }
   |
      n750=<ST_NUMINTERIORRINGS_> { n749 = JTBToolkit.makeNodeToken(n750); }
      { n0 = new NodeChoice(n749, 374); }
   |
      n752=<ST_NUMPOINTS_> { n751 = JTBToolkit.makeNodeToken(n752); }
      { n0 = new NodeChoice(n751, 375); }
   |
      n754=<ST_ORDERINGEQUALS_> { n753 = JTBToolkit.makeNodeToken(n754); }
      { n0 = new NodeChoice(n753, 376); }
   |
      n756=<ST_OVERLAPS_> { n755 = JTBToolkit.makeNodeToken(n756); }
      { n0 = new NodeChoice(n755, 377); }
   |
      n758=<ST_PERIMETER_> { n757 = JTBToolkit.makeNodeToken(n758); }
      { n0 = new NodeChoice(n757, 378); }
   |
      n760=<ST_PERIMETER2D_> { n759 = JTBToolkit.makeNodeToken(n760); }
      { n0 = new NodeChoice(n759, 379); }
   |
      n762=<ST_PERIMETER3D_> { n761 = JTBToolkit.makeNodeToken(n762); }
      { n0 = new NodeChoice(n761, 380); }
   |
      n764=<ST_POINT_> { n763 = JTBToolkit.makeNodeToken(n764); }
      { n0 = new NodeChoice(n763, 381); }
   |
      n766=<ST_POINTFROMTEXT_> { n765 = JTBToolkit.makeNodeToken(n766); }
      { n0 = new NodeChoice(n765, 382); }
   |
      n768=<ST_POINTFROMWKB_> { n767 = JTBToolkit.makeNodeToken(n768); }
      { n0 = new NodeChoice(n767, 383); }
   |
      n770=<ST_POINTN_> { n769 = JTBToolkit.makeNodeToken(n770); }
      { n0 = new NodeChoice(n769, 384); }
   |
      n772=<ST_POINTONSURFACE_> { n771 = JTBToolkit.makeNodeToken(n772); }
      { n0 = new NodeChoice(n771, 385); }
   |
      n774=<ST_POINT_INSIDE_CIRCLE_> { n773 = JTBToolkit.makeNodeToken(n774); }
      { n0 = new NodeChoice(n773, 386); }
   |
      n776=<ST_POLYFROMTEXT_> { n775 = JTBToolkit.makeNodeToken(n776); }
      { n0 = new NodeChoice(n775, 387); }
   |
      n778=<ST_POLYFROMWKB_> { n777 = JTBToolkit.makeNodeToken(n778); }
      { n0 = new NodeChoice(n777, 388); }
   |
      n780=<ST_POLYGON_> { n779 = JTBToolkit.makeNodeToken(n780); }
      { n0 = new NodeChoice(n779, 389); }
   |
      n782=<ST_POLYGONFROMTEXT_> { n781 = JTBToolkit.makeNodeToken(n782); }
      { n0 = new NodeChoice(n781, 390); }
   |
      n784=<ST_POLYGONFROMWKB_> { n783 = JTBToolkit.makeNodeToken(n784); }
      { n0 = new NodeChoice(n783, 391); }
   |
      n786=<ST_POSTGIS_GIST_JOINSEL_> { n785 = JTBToolkit.makeNodeToken(n786); }
      { n0 = new NodeChoice(n785, 392); }
   |
      n788=<ST_POSTGIS_GIST_SEL_> { n787 = JTBToolkit.makeNodeToken(n788); }
      { n0 = new NodeChoice(n787, 393); }
   |
      n790=<ST_RELATE_> { n789 = JTBToolkit.makeNodeToken(n790); }
      { n0 = new NodeChoice(n789, 394); }
   |
      n792=<ST_REMOVEPOINT_> { n791 = JTBToolkit.makeNodeToken(n792); }
      { n0 = new NodeChoice(n791, 395); }
   |
      n794=<ST_REVERSE_> { n793 = JTBToolkit.makeNodeToken(n794); }
      { n0 = new NodeChoice(n793, 396); }
   |
      n796=<ST_ROTATE_> { n795 = JTBToolkit.makeNodeToken(n796); }
      { n0 = new NodeChoice(n795, 397); }
   |
      n798=<ST_ROTATEX_> { n797 = JTBToolkit.makeNodeToken(n798); }
      { n0 = new NodeChoice(n797, 398); }
   |
      n800=<ST_ROTATEY_> { n799 = JTBToolkit.makeNodeToken(n800); }
      { n0 = new NodeChoice(n799, 399); }
   |
      n802=<ST_ROTATEZ_> { n801 = JTBToolkit.makeNodeToken(n802); }
      { n0 = new NodeChoice(n801, 400); }
   |
      n804=<ST_SCALE_> { n803 = JTBToolkit.makeNodeToken(n804); }
      { n0 = new NodeChoice(n803, 401); }
   |
      n806=<ST_SEGMENTIZE_> { n805 = JTBToolkit.makeNodeToken(n806); }
      { n0 = new NodeChoice(n805, 402); }
   |
      n808=<ST_SETFACTOR_> { n807 = JTBToolkit.makeNodeToken(n808); }
      { n0 = new NodeChoice(n807, 403); }
   |
      n810=<ST_SETPOINT_> { n809 = JTBToolkit.makeNodeToken(n810); }
      { n0 = new NodeChoice(n809, 404); }
   |
      n812=<ST_SETSRID_> { n811 = JTBToolkit.makeNodeToken(n812); }
      { n0 = new NodeChoice(n811, 405); }
   |
      n814=<ST_SHIFT_LONGITUDE_> { n813 = JTBToolkit.makeNodeToken(n814); }
      { n0 = new NodeChoice(n813, 406); }
   |
      n816=<ST_SHORTESTLINE_> { n815 = JTBToolkit.makeNodeToken(n816); }
      { n0 = new NodeChoice(n815, 407); }
   |
      n818=<ST_SIMPLIFY_> { n817 = JTBToolkit.makeNodeToken(n818); }
      { n0 = new NodeChoice(n817, 408); }
   |
      n820=<ST_SIMPLIFYPRESERVETOPOLOGY_> { n819 = JTBToolkit.makeNodeToken(n820); }
      { n0 = new NodeChoice(n819, 409); }
   |
      n822=<ST_SNAPTOGRID_> { n821 = JTBToolkit.makeNodeToken(n822); }
      { n0 = new NodeChoice(n821, 410); }
   |
      n824=<ST_SRID_> { n823 = JTBToolkit.makeNodeToken(n824); }
      { n0 = new NodeChoice(n823, 411); }
   |
      n826=<ST_STARTPOINT_> { n825 = JTBToolkit.makeNodeToken(n826); }
      { n0 = new NodeChoice(n825, 412); }
   |
      n828=<ST_SUMMARY_> { n827 = JTBToolkit.makeNodeToken(n828); }
      { n0 = new NodeChoice(n827, 413); }
   |
      n830=<ST_SYMDIFFERENCE_> { n829 = JTBToolkit.makeNodeToken(n830); }
      { n0 = new NodeChoice(n829, 414); }
   |
      n832=<ST_SYMMETRICDIFFERENCE_> { n831 = JTBToolkit.makeNodeToken(n832); }
      { n0 = new NodeChoice(n831, 415); }
   |
      n834=<ST_TEXT_> { n833 = JTBToolkit.makeNodeToken(n834); }
      { n0 = new NodeChoice(n833, 416); }
   |
      n836=<ST_TOUCHES_> { n835 = JTBToolkit.makeNodeToken(n836); }
      { n0 = new NodeChoice(n835, 417); }
   |
      n838=<ST_TRANSLATE_> { n837 = JTBToolkit.makeNodeToken(n838); }
      { n0 = new NodeChoice(n837, 418); }
   |
      n840=<ST_TRANSSCALE_> { n839 = JTBToolkit.makeNodeToken(n840); }
      { n0 = new NodeChoice(n839, 419); }
   |
      n842=<ST_WIDTH_> { n841 = JTBToolkit.makeNodeToken(n842); }
      { n0 = new NodeChoice(n841, 420); }
   |
      n844=<ST_WITHIN_> { n843 = JTBToolkit.makeNodeToken(n844); }
      { n0 = new NodeChoice(n843, 421); }
   |
      n846=<ST_WKBTOSQL_> { n845 = JTBToolkit.makeNodeToken(n846); }
      { n0 = new NodeChoice(n845, 422); }
   |
      n848=<ST_WKTTOSQL_> { n847 = JTBToolkit.makeNodeToken(n848); }
      { n0 = new NodeChoice(n847, 423); }
   |
      n850=<ST_X_> { n849 = JTBToolkit.makeNodeToken(n850); }
      { n0 = new NodeChoice(n849, 424); }
   |
      n852=<ST_Y_> { n851 = JTBToolkit.makeNodeToken(n852); }
      { n0 = new NodeChoice(n851, 425); }
   |
      n854=<ST_Z_> { n853 = JTBToolkit.makeNodeToken(n854); }
      { n0 = new NodeChoice(n853, 426); }
   |
      n856=<ST_ZMFLAG_> { n855 = JTBToolkit.makeNodeToken(n856); }
      { n0 = new NodeChoice(n855, 427); }
   |
      n858=<ST_BOX2D_> { n857 = JTBToolkit.makeNodeToken(n858); }
      { n0 = new NodeChoice(n857, 428); }
   |
      n860=<ST_BOX3D_> { n859 = JTBToolkit.makeNodeToken(n860); }
      { n0 = new NodeChoice(n859, 429); }
   |
      n862=<ST_GEOMETRY_> { n861 = JTBToolkit.makeNodeToken(n862); }
      { n0 = new NodeChoice(n861, 430); }
   |
      n864=<ST_GEOMETRYN_> { n863 = JTBToolkit.makeNodeToken(n864); }
      { n0 = new NodeChoice(n863, 431); }
   |
      n866=<SETPOINT_> { n865 = JTBToolkit.makeNodeToken(n866); }
      { n0 = new NodeChoice(n865, 432); }
   |
      n868=<ASEWKT_> { n867 = JTBToolkit.makeNodeToken(n868); }
      { n0 = new NodeChoice(n867, 433); }
   |
      n870=<SIMPLIFY_> { n869 = JTBToolkit.makeNodeToken(n870); }
      { n0 = new NodeChoice(n869, 434); }
   |
      n872=<ASTEXT_> { n871 = JTBToolkit.makeNodeToken(n872); }
      { n0 = new NodeChoice(n871, 435); }
   |
      n874=<REMOVEPOINT_> { n873 = JTBToolkit.makeNodeToken(n874); }
      { n0 = new NodeChoice(n873, 436); }
   |
      n876=<NPOINTS_> { n875 = JTBToolkit.makeNodeToken(n876); }
      { n0 = new NodeChoice(n875, 437); }
   |
      n878=<NRINGS_> { n877 = JTBToolkit.makeNodeToken(n878); }
      { n0 = new NodeChoice(n877, 438); }
   |
      n880=<MEM_SIZE_> { n879 = JTBToolkit.makeNodeToken(n880); }
      { n0 = new NodeChoice(n879, 439); }
   |
      n882=<NUMGEOMETRIES_> { n881 = JTBToolkit.makeNodeToken(n882); }
      { n0 = new NodeChoice(n881, 440); }
   |
      n884=<POSTGIS_DROPBBOX_> { n883 = JTBToolkit.makeNodeToken(n884); }
      { n0 = new NodeChoice(n883, 441); }
   |
      n886=<DROPBBOX_> { n885 = JTBToolkit.makeNodeToken(n886); }
      { n0 = new NodeChoice(n885, 442); }
   |
      n888=<SETSRID_> { n887 = JTBToolkit.makeNodeToken(n888); }
      { n0 = new NodeChoice(n887, 443); }
   |
      n890=<MULTI_> { n889 = JTBToolkit.makeNodeToken(n890); }
      { n0 = new NodeChoice(n889, 444); }
   |
      n892=<FORCE_2D_> { n891 = JTBToolkit.makeNodeToken(n892); }
      { n0 = new NodeChoice(n891, 445); }
   |
      n894=<FORCE_3D_> { n893 = JTBToolkit.makeNodeToken(n894); }
      { n0 = new NodeChoice(n893, 446); }
   |
      n896=<FORCE_3DM_> { n895 = JTBToolkit.makeNodeToken(n896); }
      { n0 = new NodeChoice(n895, 447); }
   |
      n898=<FORCE_3DZ_> { n897 = JTBToolkit.makeNodeToken(n898); }
      { n0 = new NodeChoice(n897, 448); }
   |
      n900=<FORCE_4D_> { n899 = JTBToolkit.makeNodeToken(n900); }
      { n0 = new NodeChoice(n899, 449); }
   |
      n902=<SEGMENTIZE_> { n901 = JTBToolkit.makeNodeToken(n902); }
      { n0 = new NodeChoice(n901, 450); }
   |
      n904=<FORCE_COLLECTION_> { n903 = JTBToolkit.makeNodeToken(n904); }
      { n0 = new NodeChoice(n903, 451); }
   |
      n906=<ASBINARY_> { n905 = JTBToolkit.makeNodeToken(n906); }
      { n0 = new NodeChoice(n905, 452); }
   |
      n908=<EXTENT_> { n907 = JTBToolkit.makeNodeToken(n908); }
      { n0 = new NodeChoice(n907, 453); }
   |
      n910=<EXTENT3D_> { n909 = JTBToolkit.makeNodeToken(n910); }
      { n0 = new NodeChoice(n909, 454); }
   |
      n912=<COLLECT_> { n911 = JTBToolkit.makeNodeToken(n912); }
      { n0 = new NodeChoice(n911, 455); }
   |
      n914=<LOCATE_ALONG_MEASURE_> { n913 = JTBToolkit.makeNodeToken(n914); }
      { n0 = new NodeChoice(n913, 456); }
   |
      n916=<LOCATE_BETWEEN_MEASURES_> { n915 = JTBToolkit.makeNodeToken(n916); }
      { n0 = new NodeChoice(n915, 457); }
   |
      n918=<LINE_LOCATE_POINT_> { n917 = JTBToolkit.makeNodeToken(n918); }
      { n0 = new NodeChoice(n917, 458); }
   |
      n920=<LINE_SUBSTRING_> { n919 = JTBToolkit.makeNodeToken(n920); }
      { n0 = new NodeChoice(n919, 459); }
   |
      n922=<LINE_INTERPOLATE_POINT_> { n921 = JTBToolkit.makeNodeToken(n922); }
      { n0 = new NodeChoice(n921, 460); }
   |
      n924=<GEOMFROMTEXT_> { n923 = JTBToolkit.makeNodeToken(n924); }
      { n0 = new NodeChoice(n923, 461); }
   |
      n926=<GEOMFROMEWKT_> { n925 = JTBToolkit.makeNodeToken(n926); }
      { n0 = new NodeChoice(n925, 462); }
   |
      n928=<ADDGEOMETRYCOLUMN_> { n927 = JTBToolkit.makeNodeToken(n928); }
      { n0 = new NodeChoice(n927, 463); }
   |
      n930=<GEOMETRYTYPE_> { n929 = JTBToolkit.makeNodeToken(n930); }
      { n0 = new NodeChoice(n929, 464); }
   |
      n932=<ZMFLAG_> { n931 = JTBToolkit.makeNodeToken(n932); }
      { n0 = new NodeChoice(n931, 465); }
   |
      n934=<ASEWKB_> { n933 = JTBToolkit.makeNodeToken(n934); }
      { n0 = new NodeChoice(n933, 466); }
   |
      n936=<SNAPTOGRID_> { n935 = JTBToolkit.makeNodeToken(n936); }
      { n0 = new NodeChoice(n935, 467); }
   |
      n938=<SCALE_> { n937 = JTBToolkit.makeNodeToken(n938); }
      { n0 = new NodeChoice(n937, 468); }
   |
      n940=<ROTATEZ_> { n939 = JTBToolkit.makeNodeToken(n940); }
      { n0 = new NodeChoice(n939, 469); }
   |
      n942=<ROTATE_> { n941 = JTBToolkit.makeNodeToken(n942); }
      { n0 = new NodeChoice(n941, 470); }
   |
      n944=<ROTATEX_> { n943 = JTBToolkit.makeNodeToken(n944); }
      { n0 = new NodeChoice(n943, 471); }
   |
      n946=<ROTATEY_> { n945 = JTBToolkit.makeNodeToken(n946); }
      { n0 = new NodeChoice(n945, 472); }
   |
      n948=<TRANSSCALE_> { n947 = JTBToolkit.makeNodeToken(n948); }
      { n0 = new NodeChoice(n947, 473); }
   |
      n950=<AREA2D_> { n949 = JTBToolkit.makeNodeToken(n950); }
      { n0 = new NodeChoice(n949, 474); }
   |
      n952=<PERIMETER2D_> { n951 = JTBToolkit.makeNodeToken(n952); }
      { n0 = new NodeChoice(n951, 475); }
   |
      n954=<PERIMETER3D_> { n953 = JTBToolkit.makeNodeToken(n954); }
      { n0 = new NodeChoice(n953, 476); }
   |
      n956=<LENGTH2D_> { n955 = JTBToolkit.makeNodeToken(n956); }
      { n0 = new NodeChoice(n955, 477); }
   |
      n958=<LENGTH3D_> { n957 = JTBToolkit.makeNodeToken(n958); }
      { n0 = new NodeChoice(n957, 478); }
   |
      n960=<DISTANCE_> { n959 = JTBToolkit.makeNodeToken(n960); }
      { n0 = new NodeChoice(n959, 479); }
   |
      n962=<SRID_> { n961 = JTBToolkit.makeNodeToken(n962); }
      { n0 = new NodeChoice(n961, 480); }
   |
      n964=<WITHIN_> { n963 = JTBToolkit.makeNodeToken(n964); }
      { n0 = new NodeChoice(n963, 481); }
   |
      n966=<DISJOINT_> { n965 = JTBToolkit.makeNodeToken(n966); }
      { n0 = new NodeChoice(n965, 482); }
   |
      n968=<INTERSECTS_> { n967 = JTBToolkit.makeNodeToken(n968); }
      { n0 = new NodeChoice(n967, 483); }
   |
      n970=<CONTAINS_> { n969 = JTBToolkit.makeNodeToken(n970); }
      { n0 = new NodeChoice(n969, 484); }
   |
      n972=<ASKML_> { n971 = JTBToolkit.makeNodeToken(n972); }
      { n0 = new NodeChoice(n971, 485); }
   |
      n974=<NDIMS_> { n973 = JTBToolkit.makeNodeToken(n974); }
      { n0 = new NodeChoice(n973, 486); }
   |
      n976=<ISVALID_> { n975 = JTBToolkit.makeNodeToken(n976); }
      { n0 = new NodeChoice(n975, 487); }
   |
      n978=<DIMENSION_> { n977 = JTBToolkit.makeNodeToken(n978); }
      { n0 = new NodeChoice(n977, 488); }
   |
      n980=<GEOMETRYN_> { n979 = JTBToolkit.makeNodeToken(n980); }
      { n0 = new NodeChoice(n979, 489); }
   |
      n982=<ASHEXEWKB_> { n981 = JTBToolkit.makeNodeToken(n982); }
      { n0 = new NodeChoice(n981, 490); }
   |
      n984=<ISCLOSED_> { n983 = JTBToolkit.makeNodeToken(n984); }
      { n0 = new NodeChoice(n983, 491); }
   |
      n986=<ISSIMPLE_> { n985 = JTBToolkit.makeNodeToken(n986); }
      { n0 = new NodeChoice(n985, 492); }
   |
      n988=<ISRING_> { n987 = JTBToolkit.makeNodeToken(n988); }
      { n0 = new NodeChoice(n987, 493); }
   |
      n990=<DIFFERENCE_> { n989 = JTBToolkit.makeNodeToken(n990); }
      { n0 = new NodeChoice(n989, 494); }
   |
      n992=<LINEMERGE_> { n991 = JTBToolkit.makeNodeToken(n992); }
      { n0 = new NodeChoice(n991, 495); }
   |
      n994=<INTERSECTION_> { n993 = JTBToolkit.makeNodeToken(n994); }
      { n0 = new NodeChoice(n993, 496); }
   |
      n996=<SYMDIFFERENCE_> { n995 = JTBToolkit.makeNodeToken(n996); }
      { n0 = new NodeChoice(n995, 497); }
   |
      n998=<WORD_EQUALS_> { n997 = JTBToolkit.makeNodeToken(n998); }
      { n0 = new NodeChoice(n997, 498); }
   |
      n1000=<ENVELOPE_> { n999 = JTBToolkit.makeNodeToken(n1000); }
      { n0 = new NodeChoice(n999, 499); }
   |
      n1002=<ISEMPTY_> { n1001 = JTBToolkit.makeNodeToken(n1002); }
      { n0 = new NodeChoice(n1001, 500); }
   |
      n1004=<STARTPOINT_> { n1003 = JTBToolkit.makeNodeToken(n1004); }
      { n0 = new NodeChoice(n1003, 501); }
   |
      n1006=<ENDPOINT_> { n1005 = JTBToolkit.makeNodeToken(n1006); }
      { n0 = new NodeChoice(n1005, 502); }
   |
      n1008=<EXTERIORRING_> { n1007 = JTBToolkit.makeNodeToken(n1008); }
      { n0 = new NodeChoice(n1007, 503); }
   |
      n1010=<NUMINTERIORRINGS_> { n1009 = JTBToolkit.makeNodeToken(n1010); }
      { n0 = new NodeChoice(n1009, 504); }
   |
      n1012=<INTERIORRINGN_> { n1011 = JTBToolkit.makeNodeToken(n1012); }
      { n0 = new NodeChoice(n1011, 505); }
   |
      n1014=<TRANSFORM_> { n1013 = JTBToolkit.makeNodeToken(n1014); }
      { n0 = new NodeChoice(n1013, 506); }
   |
      n1016=<X_> { n1015 = JTBToolkit.makeNodeToken(n1016); }
      { n0 = new NodeChoice(n1015, 507); }
   |
      n1018=<Y_> { n1017 = JTBToolkit.makeNodeToken(n1018); }
      { n0 = new NodeChoice(n1017, 508); }
   |
      n1020=<Z_> { n1019 = JTBToolkit.makeNodeToken(n1020); }
      { n0 = new NodeChoice(n1019, 509); }
   |
      n1022=<SPATIAL_> { n1021 = JTBToolkit.makeNodeToken(n1022); }
      { n0 = new NodeChoice(n1021, 510); }
   |
      n1024=<PORT_> { n1023 = JTBToolkit.makeNodeToken(n1024); }
      { n0 = new NodeChoice(n1023, 511); }
   )
   
   { return new UnreservedWords(n0); }
}

Identifier Identifier(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   UnreservedWords n5;

   {
   }
}
{
   (
      n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<QUOTED_IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n5=UnreservedWords(prn)
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new Identifier(n0); }
}

process process(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   VacuumDatabase n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   AnalyzeDatabase n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   createTable n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   CreateTablespace n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   createIndex n22;
   NodeOptional n23 = new NodeOptional();
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   dropTable n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   NodeSequence n31;
   DropTablespace n32;
   NodeOptional n33 = new NodeOptional();
   NodeToken n34;
   Token n35;
   NodeSequence n36;
   SelectAddGeometryColumn n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   SelectWithParenthesis n42;
   NodeOptional n43 = new NodeOptional();
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   InsertTable n47;
   NodeOptional n48 = new NodeOptional();
   NodeToken n49;
   Token n50;
   NodeSequence n51;
   UpdateTable n52;
   NodeOptional n53 = new NodeOptional();
   NodeToken n54;
   Token n55;
   NodeSequence n56;
   Delete n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;
   NodeSequence n61;
   Alter n62;
   NodeOptional n63 = new NodeOptional();
   NodeToken n64;
   Token n65;
   NodeSequence n66;
   DropIndex n67;
   NodeOptional n68 = new NodeOptional();
   NodeToken n69;
   Token n70;
   NodeSequence n71;
   RenameTable n72;
   NodeOptional n73 = new NodeOptional();
   NodeToken n74;
   Token n75;
   NodeSequence n76;
   UpdateStats n77;
   NodeOptional n78 = new NodeOptional();
   NodeToken n79;
   Token n80;
   NodeSequence n81;
   ShowAgents n82;
   NodeOptional n83 = new NodeOptional();
   NodeToken n84;
   Token n85;
   NodeSequence n86;
   ShowDatabases n87;
   NodeOptional n88 = new NodeOptional();
   NodeToken n89;
   Token n90;
   NodeSequence n91;
   ShowStatements n92;
   NodeOptional n93 = new NodeOptional();
   NodeToken n94;
   Token n95;
   NodeSequence n96;
   ShowTables n97;
   NodeOptional n98 = new NodeOptional();
   NodeToken n99;
   Token n100;
   NodeSequence n101;
   ShowTranIsolation n102;
   NodeOptional n103 = new NodeOptional();
   NodeToken n104;
   Token n105;
   NodeSequence n106;
   BeginTransaction n107;
   NodeOptional n108 = new NodeOptional();
   NodeToken n109;
   Token n110;
   NodeSequence n111;
   CommitTransaction n112;
   NodeOptional n113 = new NodeOptional();
   NodeToken n114;
   Token n115;
   NodeSequence n116;
   RollbackTransaction n117;
   NodeOptional n118 = new NodeOptional();
   NodeToken n119;
   Token n120;
   NodeSequence n121;
   DescribeTable n122;
   NodeOptional n123 = new NodeOptional();
   NodeToken n124;
   Token n125;
   NodeSequence n126;
   ShowConstraints n127;
   NodeOptional n128 = new NodeOptional();
   NodeToken n129;
   Token n130;
   NodeSequence n131;
   ShowIndexes n132;
   NodeOptional n133 = new NodeOptional();
   NodeToken n134;
   Token n135;
   NodeSequence n136;
   Deallocate n137;
   NodeOptional n138 = new NodeOptional();
   NodeToken n139;
   Token n140;
   NodeSequence n141;
   CreateUser n142;
   NodeOptional n143 = new NodeOptional();
   NodeToken n144;
   Token n145;
   NodeSequence n146;
   DropUser n147;
   NodeOptional n148 = new NodeOptional();
   NodeToken n149;
   Token n150;
   NodeSequence n151;
   AlterUser n152;
   NodeOptional n153 = new NodeOptional();
   NodeToken n154;
   Token n155;
   NodeSequence n156;
   Grant n157;
   NodeOptional n158 = new NodeOptional();
   NodeToken n159;
   Token n160;
   NodeSequence n161;
   Revoke n162;
   NodeOptional n163 = new NodeOptional();
   NodeToken n164;
   Token n165;
   NodeSequence n166;
   createView n167;
   NodeOptional n168 = new NodeOptional();
   NodeToken n169;
   Token n170;
   NodeSequence n171;
   DropView n172;
   NodeOptional n173 = new NodeOptional();
   NodeToken n174;
   Token n175;
   NodeSequence n176;
   ShowUsers n177;
   NodeOptional n178 = new NodeOptional();
   NodeToken n179;
   Token n180;
   NodeSequence n181;
   ShowViews n182;
   NodeOptional n183 = new NodeOptional();
   NodeToken n184;
   Token n185;
   NodeSequence n186;
   Cluster n187;
   NodeOptional n188 = new NodeOptional();
   NodeToken n189;
   Token n190;
   NodeSequence n191;
   Truncate n192;
   NodeOptional n193 = new NodeOptional();
   NodeToken n194;
   Token n195;
   NodeSequence n196;
   ExecDirect n197;
   NodeOptional n198 = new NodeOptional();
   NodeToken n199;
   Token n200;
   NodeSequence n201;
   Explain n202;
   NodeOptional n203 = new NodeOptional();
   NodeToken n204;
   Token n205;
   NodeSequence n206;
   SetProperty n207;
   NodeOptional n208 = new NodeOptional();
   NodeToken n209;
   Token n210;
   NodeSequence n211;
   ShowProperty n212;
   NodeOptional n213 = new NodeOptional();
   NodeToken n214;
   Token n215;
   NodeSequence n216;
   AddNodeToDB n217;
   NodeOptional n218 = new NodeOptional();
   NodeToken n219;
   Token n220;
   NodeSequence n221;
   DropNodeFromDB n222;
   NodeOptional n223 = new NodeOptional();
   NodeToken n224;
   Token n225;
   NodeSequence n226;
   StartDatabase n227;
   NodeOptional n228 = new NodeOptional();
   NodeToken n229;
   Token n230;
   NodeSequence n231;
   StopDatabase n232;
   NodeOptional n233 = new NodeOptional();
   NodeToken n234;
   Token n235;
   NodeSequence n236;
   ShutdownXDB n237;
   NodeOptional n238 = new NodeOptional();
   NodeToken n239;
   Token n240;
   NodeSequence n241;
   CreateDatabase n242;
   NodeOptional n243 = new NodeOptional();
   NodeToken n244;
   Token n245;
   NodeSequence n246;
   DropDatabase n247;
   NodeOptional n248 = new NodeOptional();
   NodeToken n249;
   Token n250;
   NodeSequence n251;
   CopyData n252;
   NodeOptional n253 = new NodeOptional();
   NodeToken n254;
   Token n255;
   NodeSequence n256;
   Kill n257;
   NodeOptional n258 = new NodeOptional();
   NodeToken n259;
   Token n260;
   NodeSequence n261;
   Unlisten n262;
   NodeOptional n263 = new NodeOptional();
   NodeToken n264;
   Token n265;
   NodeSequence n266;
   DeclareCursor n267;
   NodeOptional n268 = new NodeOptional();
   NodeToken n269;
   Token n270;
   NodeSequence n271;
   CloseCursor n272;
   NodeOptional n273 = new NodeOptional();
   NodeToken n274;
   Token n275;
   NodeSequence n276;
   FetchCursor n277;
   NodeOptional n278 = new NodeOptional();
   NodeToken n279;
   Token n280;
   NodeToken n281;
   Token n282;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=VacuumDatabase(prn)
         { n1.addNode(n2); }
         (
            n5=<SEMICOLON_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n6 = new NodeSequence(2); }
         n7=AnalyzeDatabase(prn)
         { n6.addNode(n7); }
         (
            n10=<SEMICOLON_> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
         )?
         { n6.addNode(n8); }
         { n0 = new NodeChoice(n6, 1); }
      |
         LOOKAHEAD(3)
         { n11 = new NodeSequence(3); }
         n12=createTable(prn)
         { n11.addNode(n12); }
         (
            n15=<SEMICOLON_> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n13.addNode(n14); }
         )?
         { n11.addNode(n13); }
         { n0 = new NodeChoice(n11, 2); }
      |
         LOOKAHEAD(3)
         { n16 = new NodeSequence(3); }
         n17=CreateTablespace(prn)
         { n16.addNode(n17); }
         (
            n20=<SEMICOLON_> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18.addNode(n19); }
         )?
         { n16.addNode(n18); }
         { n0 = new NodeChoice(n16, 3); }
      |
         LOOKAHEAD(3)
         { n21 = new NodeSequence(3); }
         n22=createIndex(prn)
         { n21.addNode(n22); }
         (
            n25=<SEMICOLON_> { n24 = JTBToolkit.makeNodeToken(n25); }
            { n23.addNode(n24); }
         )?
         { n21.addNode(n23); }
         { n0 = new NodeChoice(n21, 4); }
      |
         LOOKAHEAD(3)
         { n26 = new NodeSequence(3); }
         n27=dropTable(prn)
         { n26.addNode(n27); }
         (
            n30=<SEMICOLON_> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28.addNode(n29); }
         )?
         { n26.addNode(n28); }
         { n0 = new NodeChoice(n26, 5); }
      |
         LOOKAHEAD(3)
         { n31 = new NodeSequence(3); }
         n32=DropTablespace(prn)
         { n31.addNode(n32); }
         (
            n35=<SEMICOLON_> { n34 = JTBToolkit.makeNodeToken(n35); }
            { n33.addNode(n34); }
         )?
         { n31.addNode(n33); }
         { n0 = new NodeChoice(n31, 6); }
      |
         LOOKAHEAD(4)
         { n36 = new NodeSequence(3); }
         n37=SelectAddGeometryColumn(prn)
         { n36.addNode(n37); }
         (
            n40=<SEMICOLON_> { n39 = JTBToolkit.makeNodeToken(n40); }
            { n38.addNode(n39); }
         )?
         { n36.addNode(n38); }
         { n0 = new NodeChoice(n36, 7); }
      |
         LOOKAHEAD(4)
         { n41 = new NodeSequence(3); }
         n42=SelectWithParenthesis(prn)
         { n41.addNode(n42); }
         (
            n45=<SEMICOLON_> { n44 = JTBToolkit.makeNodeToken(n45); }
            { n43.addNode(n44); }
         )?
         { n41.addNode(n43); }
         { n0 = new NodeChoice(n41, 8); }
      |
         { n46 = new NodeSequence(2); }
         n47=InsertTable(prn)
         { n46.addNode(n47); }
         (
            n50=<SEMICOLON_> { n49 = JTBToolkit.makeNodeToken(n50); }
            { n48.addNode(n49); }
         )?
         { n46.addNode(n48); }
         { n0 = new NodeChoice(n46, 9); }
      |
         LOOKAHEAD(<UPDATE_> TableName(prn) <SET_>)
         { n51 = new NodeSequence(3); }
         n52=UpdateTable(prn)
         { n51.addNode(n52); }
         (
            n55=<SEMICOLON_> { n54 = JTBToolkit.makeNodeToken(n55); }
            { n53.addNode(n54); }
         )?
         { n51.addNode(n53); }
         { n0 = new NodeChoice(n51, 10); }
      |
         { n56 = new NodeSequence(2); }
         n57=Delete(prn)
         { n56.addNode(n57); }
         (
            n60=<SEMICOLON_> { n59 = JTBToolkit.makeNodeToken(n60); }
            { n58.addNode(n59); }
         )?
         { n56.addNode(n58); }
         { n0 = new NodeChoice(n56, 11); }
      |
         LOOKAHEAD(2)
         { n61 = new NodeSequence(3); }
         n62=Alter(prn)
         { n61.addNode(n62); }
         (
            n65=<SEMICOLON_> { n64 = JTBToolkit.makeNodeToken(n65); }
            { n63.addNode(n64); }
         )?
         { n61.addNode(n63); }
         { n0 = new NodeChoice(n61, 12); }
      |
         LOOKAHEAD(2)
         { n66 = new NodeSequence(3); }
         n67=DropIndex(prn)
         { n66.addNode(n67); }
         (
            n70=<SEMICOLON_> { n69 = JTBToolkit.makeNodeToken(n70); }
            { n68.addNode(n69); }
         )?
         { n66.addNode(n68); }
         { n0 = new NodeChoice(n66, 13); }
      |
         { n71 = new NodeSequence(2); }
         n72=RenameTable(prn)
         { n71.addNode(n72); }
         (
            n75=<SEMICOLON_> { n74 = JTBToolkit.makeNodeToken(n75); }
            { n73.addNode(n74); }
         )?
         { n71.addNode(n73); }
         { n0 = new NodeChoice(n71, 14); }
      |
         { n76 = new NodeSequence(2); }
         n77=UpdateStats(prn)
         { n76.addNode(n77); }
         (
            n80=<SEMICOLON_> { n79 = JTBToolkit.makeNodeToken(n80); }
            { n78.addNode(n79); }
         )?
         { n76.addNode(n78); }
         { n0 = new NodeChoice(n76, 15); }
      |
         LOOKAHEAD(2)
         { n81 = new NodeSequence(3); }
         n82=ShowAgents()
         { n81.addNode(n82); }
         (
            n85=<SEMICOLON_> { n84 = JTBToolkit.makeNodeToken(n85); }
            { n83.addNode(n84); }
         )?
         { n81.addNode(n83); }
         { n0 = new NodeChoice(n81, 16); }
      |
         LOOKAHEAD(2)
         { n86 = new NodeSequence(3); }
         n87=ShowDatabases()
         { n86.addNode(n87); }
         (
            n90=<SEMICOLON_> { n89 = JTBToolkit.makeNodeToken(n90); }
            { n88.addNode(n89); }
         )?
         { n86.addNode(n88); }
         { n0 = new NodeChoice(n86, 17); }
      |
         LOOKAHEAD(2)
         { n91 = new NodeSequence(3); }
         n92=ShowStatements()
         { n91.addNode(n92); }
         (
            n95=<SEMICOLON_> { n94 = JTBToolkit.makeNodeToken(n95); }
            { n93.addNode(n94); }
         )?
         { n91.addNode(n93); }
         { n0 = new NodeChoice(n91, 18); }
      |
         LOOKAHEAD(2)
         { n96 = new NodeSequence(3); }
         n97=ShowTables()
         { n96.addNode(n97); }
         (
            n100=<SEMICOLON_> { n99 = JTBToolkit.makeNodeToken(n100); }
            { n98.addNode(n99); }
         )?
         { n96.addNode(n98); }
         { n0 = new NodeChoice(n96, 19); }
      |
         LOOKAHEAD(2)
         { n101 = new NodeSequence(3); }
         n102=ShowTranIsolation()
         { n101.addNode(n102); }
         (
            n105=<SEMICOLON_> { n104 = JTBToolkit.makeNodeToken(n105); }
            { n103.addNode(n104); }
         )?
         { n101.addNode(n103); }
         { n0 = new NodeChoice(n101, 20); }
      |
         { n106 = new NodeSequence(2); }
         n107=BeginTransaction()
         { n106.addNode(n107); }
         (
            n110=<SEMICOLON_> { n109 = JTBToolkit.makeNodeToken(n110); }
            { n108.addNode(n109); }
         )?
         { n106.addNode(n108); }
         { n0 = new NodeChoice(n106, 21); }
      |
         { n111 = new NodeSequence(2); }
         n112=CommitTransaction()
         { n111.addNode(n112); }
         (
            n115=<SEMICOLON_> { n114 = JTBToolkit.makeNodeToken(n115); }
            { n113.addNode(n114); }
         )?
         { n111.addNode(n113); }
         { n0 = new NodeChoice(n111, 22); }
      |
         { n116 = new NodeSequence(2); }
         n117=RollbackTransaction()
         { n116.addNode(n117); }
         (
            n120=<SEMICOLON_> { n119 = JTBToolkit.makeNodeToken(n120); }
            { n118.addNode(n119); }
         )?
         { n116.addNode(n118); }
         { n0 = new NodeChoice(n116, 23); }
      |
         { n121 = new NodeSequence(2); }
         n122=DescribeTable(prn)
         { n121.addNode(n122); }
         (
            n125=<SEMICOLON_> { n124 = JTBToolkit.makeNodeToken(n125); }
            { n123.addNode(n124); }
         )?
         { n121.addNode(n123); }
         { n0 = new NodeChoice(n121, 24); }
      |
         LOOKAHEAD(2)
         { n126 = new NodeSequence(3); }
         n127=ShowConstraints(prn)
         { n126.addNode(n127); }
         (
            n130=<SEMICOLON_> { n129 = JTBToolkit.makeNodeToken(n130); }
            { n128.addNode(n129); }
         )?
         { n126.addNode(n128); }
         { n0 = new NodeChoice(n126, 25); }
      |
         LOOKAHEAD(2)
         { n131 = new NodeSequence(3); }
         n132=ShowIndexes(prn)
         { n131.addNode(n132); }
         (
            n135=<SEMICOLON_> { n134 = JTBToolkit.makeNodeToken(n135); }
            { n133.addNode(n134); }
         )?
         { n131.addNode(n133); }
         { n0 = new NodeChoice(n131, 26); }
      |
         LOOKAHEAD(3)
         { n136 = new NodeSequence(3); }
         n137=Deallocate(prn)
         { n136.addNode(n137); }
         (
            n140=<SEMICOLON_> { n139 = JTBToolkit.makeNodeToken(n140); }
            { n138.addNode(n139); }
         )?
         { n136.addNode(n138); }
         { n0 = new NodeChoice(n136, 27); }
      |
         LOOKAHEAD(3)
         { n141 = new NodeSequence(3); }
         n142=CreateUser(prn)
         { n141.addNode(n142); }
         (
            n145=<SEMICOLON_> { n144 = JTBToolkit.makeNodeToken(n145); }
            { n143.addNode(n144); }
         )?
         { n141.addNode(n143); }
         { n0 = new NodeChoice(n141, 28); }
      |
         LOOKAHEAD(3)
         { n146 = new NodeSequence(3); }
         n147=DropUser(prn)
         { n146.addNode(n147); }
         (
            n150=<SEMICOLON_> { n149 = JTBToolkit.makeNodeToken(n150); }
            { n148.addNode(n149); }
         )?
         { n146.addNode(n148); }
         { n0 = new NodeChoice(n146, 29); }
      |
         LOOKAHEAD(3)
         { n151 = new NodeSequence(3); }
         n152=AlterUser(prn)
         { n151.addNode(n152); }
         (
            n155=<SEMICOLON_> { n154 = JTBToolkit.makeNodeToken(n155); }
            { n153.addNode(n154); }
         )?
         { n151.addNode(n153); }
         { n0 = new NodeChoice(n151, 30); }
      |
         { n156 = new NodeSequence(2); }
         n157=Grant(prn)
         { n156.addNode(n157); }
         (
            n160=<SEMICOLON_> { n159 = JTBToolkit.makeNodeToken(n160); }
            { n158.addNode(n159); }
         )?
         { n156.addNode(n158); }
         { n0 = new NodeChoice(n156, 31); }
      |
         { n161 = new NodeSequence(2); }
         n162=Revoke(prn)
         { n161.addNode(n162); }
         (
            n165=<SEMICOLON_> { n164 = JTBToolkit.makeNodeToken(n165); }
            { n163.addNode(n164); }
         )?
         { n161.addNode(n163); }
         { n0 = new NodeChoice(n161, 32); }
      |
         { n166 = new NodeSequence(2); }
         n167=createView(prn)
         { n166.addNode(n167); }
         (
            n170=<SEMICOLON_> { n169 = JTBToolkit.makeNodeToken(n170); }
            { n168.addNode(n169); }
         )?
         { n166.addNode(n168); }
         { n0 = new NodeChoice(n166, 33); }
      |
         { n171 = new NodeSequence(2); }
         n172=DropView(prn)
         { n171.addNode(n172); }
         (
            n175=<SEMICOLON_> { n174 = JTBToolkit.makeNodeToken(n175); }
            { n173.addNode(n174); }
         )?
         { n171.addNode(n173); }
         { n0 = new NodeChoice(n171, 34); }
      |
         LOOKAHEAD(2)
         { n176 = new NodeSequence(3); }
         n177=ShowUsers(prn)
         { n176.addNode(n177); }
         (
            n180=<SEMICOLON_> { n179 = JTBToolkit.makeNodeToken(n180); }
            { n178.addNode(n179); }
         )?
         { n176.addNode(n178); }
         { n0 = new NodeChoice(n176, 35); }
      |
         LOOKAHEAD(2)
         { n181 = new NodeSequence(3); }
         n182=ShowViews(prn)
         { n181.addNode(n182); }
         (
            n185=<SEMICOLON_> { n184 = JTBToolkit.makeNodeToken(n185); }
            { n183.addNode(n184); }
         )?
         { n181.addNode(n183); }
         { n0 = new NodeChoice(n181, 36); }
      |
         { n186 = new NodeSequence(2); }
         n187=Cluster(prn)
         { n186.addNode(n187); }
         (
            n190=<SEMICOLON_> { n189 = JTBToolkit.makeNodeToken(n190); }
            { n188.addNode(n189); }
         )?
         { n186.addNode(n188); }
         { n0 = new NodeChoice(n186, 37); }
      |
         { n191 = new NodeSequence(2); }
         n192=Truncate(prn)
         { n191.addNode(n192); }
         (
            n195=<SEMICOLON_> { n194 = JTBToolkit.makeNodeToken(n195); }
            { n193.addNode(n194); }
         )?
         { n191.addNode(n193); }
         { n0 = new NodeChoice(n191, 38); }
      |
         { n196 = new NodeSequence(2); }
         n197=ExecDirect(prn)
         { n196.addNode(n197); }
         (
            n200=<SEMICOLON_> { n199 = JTBToolkit.makeNodeToken(n200); }
            { n198.addNode(n199); }
         )?
         { n196.addNode(n198); }
         { n0 = new NodeChoice(n196, 39); }
      |
         { n201 = new NodeSequence(2); }
         n202=Explain(prn)
         { n201.addNode(n202); }
         (
            n205=<SEMICOLON_> { n204 = JTBToolkit.makeNodeToken(n205); }
            { n203.addNode(n204); }
         )?
         { n201.addNode(n203); }
         { n0 = new NodeChoice(n201, 40); }
      |
         LOOKAHEAD(2)
         { n206 = new NodeSequence(3); }
         n207=SetProperty(prn)
         { n206.addNode(n207); }
         (
            n210=<SEMICOLON_> { n209 = JTBToolkit.makeNodeToken(n210); }
            { n208.addNode(n209); }
         )?
         { n206.addNode(n208); }
         { n0 = new NodeChoice(n206, 41); }
      |
         LOOKAHEAD(2)
         { n211 = new NodeSequence(3); }
         n212=ShowProperty(prn)
         { n211.addNode(n212); }
         (
            n215=<SEMICOLON_> { n214 = JTBToolkit.makeNodeToken(n215); }
            { n213.addNode(n214); }
         )?
         { n211.addNode(n213); }
         { n0 = new NodeChoice(n211, 42); }
      |
         { n216 = new NodeSequence(2); }
         n217=AddNodeToDB(prn)
         { n216.addNode(n217); }
         (
            n220=<SEMICOLON_> { n219 = JTBToolkit.makeNodeToken(n220); }
            { n218.addNode(n219); }
         )?
         { n216.addNode(n218); }
         { n0 = new NodeChoice(n216, 43); }
      |
         { n221 = new NodeSequence(2); }
         n222=DropNodeFromDB(prn)
         { n221.addNode(n222); }
         (
            n225=<SEMICOLON_> { n224 = JTBToolkit.makeNodeToken(n225); }
            { n223.addNode(n224); }
         )?
         { n221.addNode(n223); }
         { n0 = new NodeChoice(n221, 44); }
      |
         { n226 = new NodeSequence(2); }
         n227=StartDatabase(prn)
         { n226.addNode(n227); }
         (
            n230=<SEMICOLON_> { n229 = JTBToolkit.makeNodeToken(n230); }
            { n228.addNode(n229); }
         )?
         { n226.addNode(n228); }
         { n0 = new NodeChoice(n226, 45); }
      |
         { n231 = new NodeSequence(2); }
         n232=StopDatabase(prn)
         { n231.addNode(n232); }
         (
            n235=<SEMICOLON_> { n234 = JTBToolkit.makeNodeToken(n235); }
            { n233.addNode(n234); }
         )?
         { n231.addNode(n233); }
         { n0 = new NodeChoice(n231, 46); }
      |
         { n236 = new NodeSequence(2); }
         n237=ShutdownXDB(prn)
         { n236.addNode(n237); }
         (
            n240=<SEMICOLON_> { n239 = JTBToolkit.makeNodeToken(n240); }
            { n238.addNode(n239); }
         )?
         { n236.addNode(n238); }
         { n0 = new NodeChoice(n236, 47); }
      |
         { n241 = new NodeSequence(2); }
         n242=CreateDatabase(prn)
         { n241.addNode(n242); }
         (
            n245=<SEMICOLON_> { n244 = JTBToolkit.makeNodeToken(n245); }
            { n243.addNode(n244); }
         )?
         { n241.addNode(n243); }
         { n0 = new NodeChoice(n241, 48); }
      |
         { n246 = new NodeSequence(2); }
         n247=DropDatabase(prn)
         { n246.addNode(n247); }
         (
            n250=<SEMICOLON_> { n249 = JTBToolkit.makeNodeToken(n250); }
            { n248.addNode(n249); }
         )?
         { n246.addNode(n248); }
         { n0 = new NodeChoice(n246, 49); }
      |
         { n251 = new NodeSequence(2); }
         n252=CopyData(prn)
         { n251.addNode(n252); }
         (
            n255=<SEMICOLON_> { n254 = JTBToolkit.makeNodeToken(n255); }
            { n253.addNode(n254); }
         )?
         { n251.addNode(n253); }
         { n0 = new NodeChoice(n251, 50); }
      |
         { n256 = new NodeSequence(2); }
         n257=Kill(prn)
         { n256.addNode(n257); }
         (
            n260=<SEMICOLON_> { n259 = JTBToolkit.makeNodeToken(n260); }
            { n258.addNode(n259); }
         )?
         { n256.addNode(n258); }
         { n0 = new NodeChoice(n256, 51); }
      |
         { n261 = new NodeSequence(2); }
         n262=Unlisten(prn)
         { n261.addNode(n262); }
         (
            n265=<SEMICOLON_> { n264 = JTBToolkit.makeNodeToken(n265); }
            { n263.addNode(n264); }
         )?
         { n261.addNode(n263); }
         { n0 = new NodeChoice(n261, 52); }
      |
         { n266 = new NodeSequence(2); }
         n267=DeclareCursor(prn)
         { n266.addNode(n267); }
         (
            n270=<SEMICOLON_> { n269 = JTBToolkit.makeNodeToken(n270); }
            { n268.addNode(n269); }
         )?
         { n266.addNode(n268); }
         { n0 = new NodeChoice(n266, 53); }
      |
         { n271 = new NodeSequence(2); }
         n272=CloseCursor(prn)
         { n271.addNode(n272); }
         (
            n275=<SEMICOLON_> { n274 = JTBToolkit.makeNodeToken(n275); }
            { n273.addNode(n274); }
         )?
         { n271.addNode(n273); }
         { n0 = new NodeChoice(n271, 54); }
      |
         { n276 = new NodeSequence(2); }
         n277=FetchCursor(prn)
         { n276.addNode(n277); }
         (
            n280=<SEMICOLON_> { n279 = JTBToolkit.makeNodeToken(n280); }
            { n278.addNode(n279); }
         )?
         { n276.addNode(n278); }
         { n0 = new NodeChoice(n276, 55); }
      )
      
   )
   n282=<EOF> { 
      n282.beginColumn++; n282.endColumn++;
      n281 = JTBToolkit.makeNodeToken(n282);
   }
   
   { return new process(n0,n281); }
}

CopyData CopyData(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   TableName n4;
   NodeOptional n5 = new NodeOptional();
   ColumnNameListWithParenthesis n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Select n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeChoice n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeOptional n32;
   NodeToken n33;
   Token n34;
   NodeList n35;
   NodeChoice n36;
   FormatDefOIDS n37;
   FormatDefDelimiter n38;
   FormatDefNull n39;
   FormatDefCSV n40;

   {
   }
}
{
   n1=<COPY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n4=TableName(prn)
         { n3.addNode(n4); }
         (
            n6=ColumnNameListWithParenthesis(prn)
            { n5.addNode(n6); }
         )?
         { n3.addNode(n5); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(3); }
         n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=Select(prn)
         { n7.addNode(n10); }
         n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n7.addNode(n11); }
         { n2 = new NodeChoice(n7, 1); }
      )
      
   )
   (
      (
         { n14 = new NodeSequence(2); }
         n16=<FROM_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         (
            (
               n19=<STDIN_> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n17 = new NodeChoice(n18, 0); }
            |
               n21=<STRING_LITERAL> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n17 = new NodeChoice(n20, 1); }
            )
            
         )
         { n14.addNode(n17); }
         { n13 = new NodeChoice(n14, 0); }
      |
         { n22 = new NodeSequence(2); }
         n24=<TO_> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n22.addNode(n23); }
         (
            (
               n27=<STDOUT_> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n25 = new NodeChoice(n26, 0); }
            |
               n29=<STRING_LITERAL> { n28 = JTBToolkit.makeNodeToken(n29); }
               { n25 = new NodeChoice(n28, 1); }
            )
            
         )
         { n22.addNode(n25); }
         { n13 = new NodeChoice(n22, 1); }
      )
      
   )
   (
      { n32 = new NodeOptional(); }
      { n35 = new NodeList(); }
      { n31 = new NodeSequence(2); }
      (
         n34=<WITH_> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
      )?
      { n31.addNode(n32); }
      (
         (
            n37=FormatDefOIDS(prn)
            { n36 = new NodeChoice(n37, 0); }
         |
            n38=FormatDefDelimiter(prn)
            { n36 = new NodeChoice(n38, 1); }
         |
            n39=FormatDefNull(prn)
            { n36 = new NodeChoice(n39, 2); }
         |
            n40=FormatDefCSV(prn)
            { n36 = new NodeChoice(n40, 3); }
         )
         { n35.addNode(n36); }
      )+
      { n35.nodes.trimToSize(); }
      { n31.addNode(n35); }
      { n30.addNode(n31); }
   )?
   
   { return new CopyData(n0,n2,n13,n30); }
}

FormatDefOIDS FormatDefOIDS(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<OIDS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FormatDefOIDS(n0); }
}

FormatDefDelimiter FormatDefDelimiter(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DELIMITER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<AS_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<STRING_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FormatDefDelimiter(n0,n2,n5); }
}

FormatDefNull FormatDefNull(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NULL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<AS_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<STRING_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FormatDefNull(n0,n2,n5); }
}

FormatDefCSV FormatDefCSV(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   ColumnNameList n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   ColumnNameList n27;

   {
   }
}
{
   n1=<CSV_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n7 = new NodeOptional(); }
      { n15 = new NodeOptional(); }
      (
         { n4 = new NodeSequence(3); }
         n6=<QUOTE_STRING_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         (
            n9=<AS_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7.addNode(n8); }
         )?
         { n4.addNode(n7); }
         n11=<STRING_LITERAL> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n4.addNode(n10); }
         { n3 = new NodeChoice(n4, 0); }
      |
         { n12 = new NodeSequence(3); }
         n14=<ESCAPE_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n12.addNode(n13); }
         (
            n17=<AS_> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n15.addNode(n16); }
         )?
         { n12.addNode(n15); }
         n19=<STRING_LITERAL> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n12.addNode(n18); }
         { n3 = new NodeChoice(n12, 1); }
      |
         { n20 = new NodeSequence(2); }
         n22=<FORCE_QUOTE_> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         n23=ColumnNameList(prn)
         { n20.addNode(n23); }
         { n3 = new NodeChoice(n20, 2); }
      |
         { n24 = new NodeSequence(2); }
         n26=<FORCE_NOT_NULL_> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         n27=ColumnNameList(prn)
         { n24.addNode(n27); }
         { n3 = new NodeChoice(n24, 3); }
      )
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new FormatDefCSV(n0,n2); }
}

AddNodeToDB AddNodeToDB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<ADD_NODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<INT_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      n12=<MANUAL_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   
   { return new AddNodeToDB(n0,n2,n4,n10); }
}

DropNodeFromDB DropNodeFromDB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<DROP_NODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<INT_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   (
      n12=<FORCE_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   
   { return new DropNodeFromDB(n0,n2,n4,n10); }
}

StartDatabase StartDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   {
   }
}
{
   n1=<START_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier(prn)
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n9 = new NodeSequence(2); }
      n11=<WAIT_TIMEOUT_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<INT_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new StartDatabase(n0,n2,n3,n8); }
}

StopDatabase StopDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   {
   }
}
{
   n1=<STOP_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Identifier(prn)
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new StopDatabase(n0,n2,n3); }
}

ShutdownXDB ShutdownXDB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1=<SHUT_DOWN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<FORCE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   
   { return new ShutdownXDB(n0,n2); }
}

CreateDatabase CreateDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeList n8;
   NodeChoice n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   Identifier n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19 = new NodeOptional();
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeListOptional n31 = new NodeListOptional();
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;

   {
   }
}
{
   n1=<CREATE_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      { n5 = new NodeOptional(); }
      { n8 = new NodeList(); }
      { n4 = new NodeSequence(2); }
      (
         n7=<WITH_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n4.addNode(n5); }
      (
         { n13 = new NodeOptional(); }
         (
            { n10 = new NodeSequence(3); }
            n12=<OWNER_> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10.addNode(n11); }
            (
               n15="=" { n14 = JTBToolkit.makeNodeToken(n15); }
               { n13.addNode(n14); }
            )?
            { n10.addNode(n13); }
            n16=Identifier(prn)
            { n10.addNode(n16); }
            { n9 = new NodeChoice(n10, 0); }
         |
            n18=<SPATIAL_> { n17 = JTBToolkit.makeNodeToken(n18); }
            { n9 = new NodeChoice(n17, 1); }
         )
         { n8.addNode(n9); }
      )+
      { n8.nodes.trimToSize(); }
      { n4.addNode(n8); }
      { n3.addNode(n4); }
   )?
   (
      n21=<MANUAL_> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n19.addNode(n20); }
   )?
   n23=<ON_> { n22 = JTBToolkit.makeNodeToken(n23); }
   (
      (
         n26=<NODE_> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24 = new NodeChoice(n25, 0); }
      |
         n28=<NODES_> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n24 = new NodeChoice(n27, 1); }
      )
      
   )
   n30=<INT_LITERAL> { n29 = JTBToolkit.makeNodeToken(n30); }
   (
      { n32 = new NodeSequence(2); }
      n34="," { n33 = JTBToolkit.makeNodeToken(n34); }
      { n32.addNode(n33); }
      n36=<INT_LITERAL> { n35 = JTBToolkit.makeNodeToken(n36); }
      { n32.addNode(n35); }
      { n31.addNode(n32); }
   )*
   { n31.nodes.trimToSize(); }
   
   { return new CreateDatabase(n0,n2,n3,n19,n22,n24,n29,n31); }
}

DropDatabase DropDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<DROP_DB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   (
      n5=<FORCE_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new DropDatabase(n0,n2,n3); }
}

CreateNode CreateNode(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeList n10;
   NodeChoice n11;
   FormatDefPort n12;
   FormatDefUser n13;
   FormatDefPassword n14;

   {
   }
}
{
   n1=<CREATE_NODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FOR_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   (
      { n7 = new NodeOptional(); }
      { n10 = new NodeList(); }
      { n6 = new NodeSequence(2); }
      (
         n9=<WITH_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n6.addNode(n7); }
      (
         (
            n12=FormatDefPort(prn)
            { n11 = new NodeChoice(n12, 0); }
         |
            n13=FormatDefUser(prn)
            { n11 = new NodeChoice(n13, 1); }
         |
            n14=FormatDefPassword(prn)
            { n11 = new NodeChoice(n14, 2); }
         )
         { n10.addNode(n11); }
      )+
      { n10.nodes.trimToSize(); }
      { n6.addNode(n10); }
      { n5.addNode(n6); }
   )?
   
   { return new CreateNode(n0,n2,n4,n5); }
}

FormatDefPort FormatDefPort(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<PORT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<INT_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new FormatDefPort(n0,n2,n5); }
}

FormatDefUser FormatDefUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n1=<USER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier(prn)
   
   { return new FormatDefUser(n0,n2,n5); }
}

FormatDefPassword FormatDefPassword(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n1=<PASSWORD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier(prn)
   
   { return new FormatDefPassword(n0,n2,n5); }
}

ExecDirect ExecDirect(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17 = new NodeListOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   {
   }
}
{
   n1=<EXEC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<DIRECT_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<ON_> { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      (
         n8=<ALL_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6 = new NodeChoice(n7, 0); }
      |
         { n9 = new NodeSequence(3); }
         (
            (
               n12=<NODE_> { n11 = JTBToolkit.makeNodeToken(n12); }
               { n10 = new NodeChoice(n11, 0); }
            |
               n14=<NODES_> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n10 = new NodeChoice(n13, 1); }
            )
            
         )
         { n9.addNode(n10); }
         n16=<INT_LITERAL> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n9.addNode(n15); }
         (
            { n18 = new NodeSequence(2); }
            n20="," { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18.addNode(n19); }
            n22=<INT_LITERAL> { n21 = JTBToolkit.makeNodeToken(n22); }
            { n18.addNode(n21); }
            { n17.addNode(n18); }
         )*
         { n17.nodes.trimToSize(); }
         { n9.addNode(n17); }
         { n6 = new NodeChoice(n9, 1); }
      )
      
   )
   n24=<STRING_LITERAL> { n23 = JTBToolkit.makeNodeToken(n24); }
   
   { return new ExecDirect(n0,n2,n4,n6,n23); }
}

Explain Explain(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Select n5;

   {
   }
}
{
   n1=<EXPLAIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<VERBOSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Select(prn)
   
   { return new Explain(n0,n2,n5); }
}

VacuumDatabase VacuumDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   TableName n10;
   AnalyzeDatabase n11;

   {
   }
}
{
   n1=<VACUUM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<FULL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<FREEZE_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      (
         n10=TableName(prn)
         { n9 = new NodeChoice(n10, 0); }
      |
         n11=AnalyzeDatabase(prn)
         { n9 = new NodeChoice(n11, 1); }
      )
      { n8.addNode(n9); }
   )?
   
   { return new VacuumDatabase(n0,n2,n8); }
}

AnalyzeDatabase AnalyzeDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   TableName n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ColumnNameList n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ANALYZE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=TableName(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(3); }
         n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=ColumnNameList(prn)
         { n6.addNode(n9); }
         n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n6.addNode(n10); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   
   { return new AnalyzeDatabase(n0,n2); }
}

CreateTablespace CreateTablespace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   TablespaceLocation n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   TablespaceLocation n10;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLESPACE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   n5=TablespaceLocation(prn)
   (
      { n7 = new NodeSequence(2); }
      n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=TablespaceLocation(prn)
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new CreateTablespace(n0,n2,n4,n5,n6); }
}

DropTablespace DropTablespace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLESPACE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   
   { return new DropTablespace(n0,n2,n4); }
}

TablespaceLocation TablespaceLocation(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   stringLiteral n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeListOptional n16 = new NodeListOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   {
   }
}
{
   n1=<LOCATION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=stringLiteral(prn)
   n4=<ON_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         n7=<ALL_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n8 = new NodeSequence(3); }
         (
            (
               n11=<NODE_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               n13=<NODES_> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n9 = new NodeChoice(n12, 1); }
            )
            
         )
         { n8.addNode(n9); }
         n15=<INT_LITERAL> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n8.addNode(n14); }
         (
            LOOKAHEAD(2)
            { n17 = new NodeSequence(2); }
            n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
            { n17.addNode(n18); }
            n21=<INT_LITERAL> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n17.addNode(n20); }
            { n16.addNode(n17); }
         )*
         { n16.nodes.trimToSize(); }
         { n8.addNode(n16); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new TablespaceLocation(n0,n2,n3,n5); }
}

UpdateStats UpdateStats(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ColumnNameList n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   TableName n22;
   TableName n23;
   NodeToken n24;
   Token n25;

   {
   }
}
{
   n1=<UPDATE_STAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(4); }
         n5=<COLUMN_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            (
               LOOKAHEAD(2)
               { n7 = new NodeSequence(4); }
               n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n7.addNode(n8); }
               n11=<STAR_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n7.addNode(n10); }
               n13=<PARENTHESIS_CLOSE_> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n7.addNode(n12); }
               { n6 = new NodeChoice(n7, 0); }
            |
               { n14 = new NodeSequence(3); }
               n16=<PARENTHESIS_START_> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n14.addNode(n15); }
               n17=ColumnNameList(prn)
               { n14.addNode(n17); }
               n19=<PARENTHESIS_CLOSE_> { n18 = JTBToolkit.makeNodeToken(n19); }
               { n14.addNode(n18); }
               { n6 = new NodeChoice(n14, 1); }
            )
            
         )
         { n3.addNode(n6); }
         n21=<FOR_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n3.addNode(n20); }
         n22=TableName(prn)
         { n3.addNode(n22); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n23=TableName(prn)
         { n2 = new NodeChoice(n23, 1); }
      |
         n25=<STAR_> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n2 = new NodeChoice(n24, 2); }
      )
      
   )
   
   { return new UpdateStats(n0,n2); }
}

RenameTable RenameTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeToken n5;
   Token n6;
   TableName n7;

   {
   }
}
{
   n1=<RENAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   n6=<TO_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=TableName(prn)
   
   { return new RenameTable(n0,n2,n4,n5,n7); }
}

DropIndex DropIndex(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INDEX_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   (
      { n6 = new NodeSequence(2); }
      n8=<ON_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableName(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
   { return new DropIndex(n0,n2,n4,n5); }
}

Alter Alter(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   AlterTable n3;
   AlterTableSpace n4;

   {
   }
}
{
   n1=<ALTER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=AlterTable(prn)
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=AlterTableSpace(prn)
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new Alter(n0,n2); }
}

AlterTableSpace AlterTableSpace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   {
   }
}
{
   n1=<TABLESPACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   n4=<RENAME_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<TO_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier(prn)
   
   { return new AlterTableSpace(n0,n2,n3,n5,n7); }
}

AlterTable AlterTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   TableName n2;
   AlterTableActon n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   AlterTableActon n8;

   {
   }
}
{
   n1=<TABLE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableName(prn)
   n3=AlterTableActon(prn)
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=AlterTableActon(prn)
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
   { return new AlterTable(n0,n2,n3,n4); }
}

AlterTableActon AlterTableActon(PrintStream prn) :
{
   NodeChoice n0;
   AddDef n1;
   DropDef n2;
   AlterDef n3;
   RenameDef n4;
   OwnerDef n5;
   SetTablespace n6;
   Inherit n7;

   {
   }
}
{
   (
      n1=AddDef(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DropDef(prn)
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=AlterDef(prn)
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RenameDef(prn)
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=OwnerDef(prn)
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=SetTablespace(prn)
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Inherit(prn)
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new AlterTableActon(n0); }
}

Inherit Inherit(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   TableName n5;

   {
   }
}
{
   (
      n2=<NO_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<INHERIT_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=TableName(prn)
   
   { return new Inherit(n0,n3,n5); }
}

SetTablespace SetTablespace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
}
{
   n1=<SET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLESPACE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   
   { return new SetTablespace(n0,n2,n4); }
}

SetProperty SetProperty(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   IsolationLevel n26;

   {
   }
}
{
   n1=<SET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         n4=Identifier(prn)
         { n3.addNode(n4); }
         (
            (
               n8=<TO_> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6 = new NodeChoice(n7, 0); }
            |
               n10="=" { n9 = JTBToolkit.makeNodeToken(n10); }
               { n6 = new NodeChoice(n9, 1); }
            )
            { n5.addNode(n6); }
         )?
         { n3.addNode(n5); }
         (
            (
               n13=<STRING_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n11 = new NodeChoice(n12, 0); }
            |
               n14=Identifier(prn)
               { n11 = new NodeChoice(n14, 1); }
            |
               n16=<ON_> { n15 = JTBToolkit.makeNodeToken(n16); }
               { n11 = new NodeChoice(n15, 2); }
            |
               n18=<TRUE_> { n17 = JTBToolkit.makeNodeToken(n18); }
               { n11 = new NodeChoice(n17, 3); }
            |
               n20=<FALSE_> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n11 = new NodeChoice(n19, 4); }
            )
            
         )
         { n3.addNode(n11); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n21 = new NodeSequence(3); }
         n23=<TRANSACTION_> { n22 = JTBToolkit.makeNodeToken(n23); }
         { n21.addNode(n22); }
         n25=<ISOLATION_LEVEL_> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n21.addNode(n24); }
         n26=IsolationLevel(prn)
         { n21.addNode(n26); }
         { n2 = new NodeChoice(n21, 1); }
      )
      
   )
   
   { return new SetProperty(n0,n2); }
}

IsolationLevel IsolationLevel(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2=<SERIALIZABLE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REPEATABLE_READ_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<READ_COMMITTED_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<READ_UNCOMMITTED_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   
   { return new IsolationLevel(n0); }
}

ShowProperty ShowProperty(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<SHOW_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<ALL_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<QUOTED_IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      )
      
   )
   
   { return new ShowProperty(n0,n2); }
}

OwnerDef OwnerDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n1=<OWNER_TO_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<PUBLIC_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=Identifier(prn)
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new OwnerDef(n0,n2); }
}

Constraint Constraint(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
}
{
   n1=<CONSTRAINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   
   { return new Constraint(n0,n2); }
}

AddDef AddDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   ColumnDeclare n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeSequence n16;
   NodeOptional n17 = new NodeOptional();
   Constraint n18;
   NodeChoice n19;
   PrimaryKeyDef n20;
   ForeignKeyDef n21;
   CheckDef n22;

   {
   }
}
{
   n1=<ADD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(3); }
         (
            n6=<COLUMN_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n7=ColumnDeclare(prn)
         { n3.addNode(n7); }
         (
            (
               n11=<FIRST_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               { n12 = new NodeSequence(2); }
               n14=<AFTER_> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
               n15=Identifier(prn)
               { n12.addNode(n15); }
               { n9 = new NodeChoice(n12, 1); }
            )
            { n8.addNode(n9); }
         )?
         { n3.addNode(n8); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n16 = new NodeSequence(2); }
         (
            n18=Constraint(prn)
            { n17.addNode(n18); }
         )?
         { n16.addNode(n17); }
         (
            (
               n20=PrimaryKeyDef(prn)
               { n19 = new NodeChoice(n20, 0); }
            |
               n21=ForeignKeyDef(prn)
               { n19 = new NodeChoice(n21, 1); }
            |
               n22=CheckDef(prn)
               { n19 = new NodeChoice(n22, 2); }
            )
            
         )
         { n16.addNode(n19); }
         { n2 = new NodeChoice(n16, 1); }
      )
      
   )
   
   { return new AddDef(n0,n2); }
}

DropDef DropDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   Identifier n7;
   Constraint n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         (
            n6=<COLUMN_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n3.addNode(n4); }
         n7=Identifier(prn)
         { n3.addNode(n7); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n8=Constraint(prn)
         { n2 = new NodeChoice(n8, 1); }
      |
         n10=<PRIMARYKEY_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2 = new NodeChoice(n9, 2); }
      )
      
   )
   
   { return new DropDef(n0,n2); }
}

RenameDef RenameDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   Identifier n8;

   {
   }
}
{
   n1=<RENAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<COLUMN_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier(prn)
   n7=<TO_> { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=Identifier(prn)
   
   { return new RenameDef(n0,n2,n5,n6,n8); }
}

AlterDef AlterDef(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   AlterDefOperation n8;

   {
   }
}
{
   (
      (
         n2=<MODIFY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ALTER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<COLUMN_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=AlterDefOperation(prn)
   
   { return new AlterDef(n0,n5,n8); }
}

AlterDefOperation AlterDefOperation(PrintStream prn) :
{
   Identifier n0;
   NodeChoice n1;
   AlterDefOperationType n2;
   AlterDefOperationSet n3;
   DropDefaultNotNull n4;

   {
   }
}
{
   n0=Identifier(prn)
   (
      (
         n2=AlterDefOperationType(prn)
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=AlterDefOperationSet(prn)
         { n1 = new NodeChoice(n3, 1); }
      |
         n4=DropDefaultNotNull(prn)
         { n1 = new NodeChoice(n4, 2); }
      )
      
   )
   
   { return new AlterDefOperation(n0,n1); }
}

AlterDefOperationType AlterDefOperationType(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   types n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   IntervalLiterals n22;

   {
   }
}
{
   n1=<TYPE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=types()
   (
      { n4 = new NodeSequence(2); }
      n6=<USING_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      (
         (
            n9=<STRING_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n7 = new NodeChoice(n8, 0); }
         |
            n11=<NULL_> { n10 = JTBToolkit.makeNodeToken(n11); }
            { n7 = new NodeChoice(n10, 1); }
         |
            n13=<DATE_> { n12 = JTBToolkit.makeNodeToken(n13); }
            { n7 = new NodeChoice(n12, 2); }
         |
            n15=<TIME_> { n14 = JTBToolkit.makeNodeToken(n15); }
            { n7 = new NodeChoice(n14, 3); }
         |
            n17=<TIMESTAMP_> { n16 = JTBToolkit.makeNodeToken(n17); }
            { n7 = new NodeChoice(n16, 4); }
         |
            n19=<INT_LITERAL> { n18 = JTBToolkit.makeNodeToken(n19); }
            { n7 = new NodeChoice(n18, 5); }
         |
            n21=<DECIMAL_LITERAL> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n7 = new NodeChoice(n20, 6); }
         |
            LOOKAHEAD(2)
            n22=IntervalLiterals(prn)
            { n7 = new NodeChoice(n22, 7); }
         )
         
      )
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new AlterDefOperationType(n0,n2,n3); }
}

AlterDefOperationSet AlterDefOperationSet(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   DefaultSpec n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<SET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=DefaultSpec(prn)
         { n2 = new NodeChoice(n3, 0); }
      |
         { n4 = new NodeSequence(2); }
         n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<NULL_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         { n2 = new NodeChoice(n4, 1); }
      |
         { n9 = new NodeSequence(2); }
         n11=<STATISTICS_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n13=<INT_LITERAL> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9.addNode(n12); }
         { n2 = new NodeChoice(n9, 2); }
      |
         n15=<STORAGE_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n2 = new NodeChoice(n14, 3); }
      )
      
   )
   
   { return new AlterDefOperationSet(n0,n2); }
}

DropDefaultNotNull DropDefaultNotNull(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<DEFAULT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n5 = new NodeSequence(2); }
         n7=<NOT_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n9=<NULL_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5.addNode(n8); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new DropDefaultNotNull(n0,n2); }
}

Delete Delete(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeOptional n5 = new NodeOptional();
   WhereClause n6;

   {
   }
}
{
   n1=<DELETE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<FROM_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   (
      n6=WhereClause(prn)
      { n5.addNode(n6); }
   )?
   
   { return new Delete(n0,n2,n4,n5); }
}

UpdateTable UpdateTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   SetUpdateClause n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   SetUpdateClause n10;
   NodeOptional n11 = new NodeOptional();
   WhereClause n12;

   {
   }
}
{
   n1=<UPDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableName(prn)
   n4=<SET_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SetUpdateClause(prn)
   (
      { n7 = new NodeSequence(2); }
      n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=SetUpdateClause(prn)
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   (
      n12=WhereClause(prn)
      { n11.addNode(n12); }
   )?
   
   { return new UpdateTable(n0,n2,n3,n5,n6,n11); }
}

SetUpdateClause SetUpdateClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(2); }
      n2=TableName(prn)
      { n1.addNode(n2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   n5=Identifier(prn)
   n7="=" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=SQLSimpleExpression(prn)
   
   { return new SetUpdateClause(n0,n5,n6,n8); }
}

createIndex createIndex(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   TableName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   columnListIndexSpec n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   tablespaceDef n22;
   NodeOptional n23 = new NodeOptional();
   WhereClause n24;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<UNIQUE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<INDEX_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier(prn)
   n9=<ON_> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=TableName(prn)
   (
      { n12 = new NodeSequence(2); }
      n14=<USING_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Identifier(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_START_> { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=columnListIndexSpec(prn)
   n20=<PARENTHESIS_CLOSE_> { n19 = JTBToolkit.makeNodeToken(n20); }
   (
      n22=tablespaceDef(prn)
      { n21.addNode(n22); }
   )?
   (
      n24=WhereClause(prn)
      { n23.addNode(n24); }
   )?
   
   { return new createIndex(n0,n2,n5,n7,n8,n10,n11,n16,n18,n19,n21,n23); }
}

columnListIndexSpec columnListIndexSpec(PrintStream prn) :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeListOptional n15 = new NodeListOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   Identifier n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   SQLSimpleExpression n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   NodeChoice n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Identifier n33;

   {
   }
}
{
   (
      (
         n1=Identifier(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(3); }
         n4=<PARENTHESIS_START_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=SQLSimpleExpression(prn)
         { n2.addNode(n5); }
         n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n2.addNode(n6); }
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      (
         n11=<ASC_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9 = new NodeChoice(n10, 0); }
      |
         n13=<DESC_> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9 = new NodeChoice(n12, 1); }
      |
         n14=Identifier(prn)
         { n9 = new NodeChoice(n14, 2); }
      )
      { n8.addNode(n9); }
   )?
   (
      { n27 = new NodeOptional(); }
      { n16 = new NodeSequence(3); }
      n18="," { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      (
         (
            n20=Identifier(prn)
            { n19 = new NodeChoice(n20, 0); }
         |
            { n21 = new NodeSequence(3); }
            n23=<PARENTHESIS_START_> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n21.addNode(n22); }
            n24=SQLSimpleExpression(prn)
            { n21.addNode(n24); }
            n26=<PARENTHESIS_CLOSE_> { n25 = JTBToolkit.makeNodeToken(n26); }
            { n21.addNode(n25); }
            { n19 = new NodeChoice(n21, 1); }
         )
         
      )
      { n16.addNode(n19); }
      (
         (
            n30=<ASC_> { n29 = JTBToolkit.makeNodeToken(n30); }
            { n28 = new NodeChoice(n29, 0); }
         |
            n32=<DESC_> { n31 = JTBToolkit.makeNodeToken(n32); }
            { n28 = new NodeChoice(n31, 1); }
         |
            n33=Identifier(prn)
            { n28 = new NodeChoice(n33, 2); }
         )
         { n27.addNode(n28); }
      )?
      { n16.addNode(n27); }
      { n15.addNode(n16); }
   )*
   { n15.nodes.trimToSize(); }
   
   { return new columnListIndexSpec(n0,n8,n15); }
}

createTable createTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   TableName n17;
   NodeChoice n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   CreateDefinition n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   CreateDefinition n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   PartitionDeclare n31;
   NodeOptional n32 = new NodeOptional();
   inheritsDef n33;
   NodeOptional n34 = new NodeOptional();
   WithXRowID n35;
   NodeOptional n36 = new NodeOptional();
   OnCommitClause n37;
   NodeOptional n38 = new NodeOptional();
   tablespaceDef n39;
   NodeSequence n40;
   NodeOptional n41 = new NodeOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   ColumnNameList n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48 = new NodeOptional();
   PartitionDeclare n49;
   NodeOptional n50 = new NodeOptional();
   WithXRowID n51;
   NodeOptional n52 = new NodeOptional();
   OnCommitClause n53;
   NodeOptional n54 = new NodeOptional();
   tablespaceDef n55;
   NodeToken n56;
   Token n57;
   SelectWithoutOrderAndSet n58;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n4 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      (
         (
            n7=<LOCAL_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<GLOBAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         { n4.addNode(n5); }
      )?
      { n3.addNode(n4); }
      (
         (
            n12=<TEMP_> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n10 = new NodeChoice(n11, 0); }
         |
            n14=<TEMPORARY_> { n13 = JTBToolkit.makeNodeToken(n14); }
            { n10 = new NodeChoice(n13, 1); }
         )
         
      )
      { n3.addNode(n10); }
      { n2.addNode(n3); }
   )?
   n16=<TABLE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   n17=TableName(prn)
   (
      (
         LOOKAHEAD(3)
         { n19 = new NodeSequence(10); }
         n21=<PARENTHESIS_START_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
         n22=CreateDefinition(prn)
         { n19.addNode(n22); }
         (
            { n24 = new NodeSequence(2); }
            n26="," { n25 = JTBToolkit.makeNodeToken(n26); }
            { n24.addNode(n25); }
            n27=CreateDefinition(prn)
            { n24.addNode(n27); }
            { n23.addNode(n24); }
         )*
         { n23.nodes.trimToSize(); }
         { n19.addNode(n23); }
         n29=<PARENTHESIS_CLOSE_> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n19.addNode(n28); }
         (
            n31=PartitionDeclare(prn)
            { n30.addNode(n31); }
         )?
         { n19.addNode(n30); }
         (
            n33=inheritsDef(prn)
            { n32.addNode(n33); }
         )?
         { n19.addNode(n32); }
         (
            n35=WithXRowID(prn)
            { n34.addNode(n35); }
         )?
         { n19.addNode(n34); }
         (
            n37=OnCommitClause(prn)
            { n36.addNode(n37); }
         )?
         { n19.addNode(n36); }
         (
            n39=tablespaceDef(prn)
            { n38.addNode(n39); }
         )?
         { n19.addNode(n38); }
         { n18 = new NodeChoice(n19, 0); }
      |
         LOOKAHEAD(2)
         { n40 = new NodeSequence(8); }
         (
            { n42 = new NodeSequence(3); }
            n44=<PARENTHESIS_START_> { n43 = JTBToolkit.makeNodeToken(n44); }
            { n42.addNode(n43); }
            n45=ColumnNameList(prn)
            { n42.addNode(n45); }
            n47=<PARENTHESIS_CLOSE_> { n46 = JTBToolkit.makeNodeToken(n47); }
            { n42.addNode(n46); }
            { n41.addNode(n42); }
         )?
         { n40.addNode(n41); }
         (
            n49=PartitionDeclare(prn)
            { n48.addNode(n49); }
         )?
         { n40.addNode(n48); }
         (
            n51=WithXRowID(prn)
            { n50.addNode(n51); }
         )?
         { n40.addNode(n50); }
         (
            n53=OnCommitClause(prn)
            { n52.addNode(n53); }
         )?
         { n40.addNode(n52); }
         (
            n55=tablespaceDef(prn)
            { n54.addNode(n55); }
         )?
         { n40.addNode(n54); }
         n57=<AS_> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n40.addNode(n56); }
         n58=SelectWithoutOrderAndSet(prn)
         { n40.addNode(n58); }
         { n18 = new NodeChoice(n40, 1); }
      )
      
   )
   
   { return new createTable(n0,n2,n15,n17,n18); }
}

OnCommitClause OnCommitClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<ON_COMMIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<PRESERVE_ROWS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<DELETE_ROWS_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<DROP_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      )
      
   )
   
   { return new OnCommitClause(n0,n2); }
}

WithXRowID WithXRowID(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<WITH_XROWID_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<WITHOUT_XROWID_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new WithXRowID(n0); }
}

tablespaceDef tablespaceDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
}
{
   n1=<TABLESPACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   
   { return new tablespaceDef(n0,n2); }
}

inheritsDef inheritsDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<INHERITS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableName(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new inheritsDef(n0,n2,n4,n5,n10); }
}

createView createView(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TableName n7;
   NodeOptional n8 = new NodeOptional();
   ColumnNameListWithParenthesis n9;
   NodeToken n10;
   Token n11;
   SelectWithoutOrder n12;

   {
   }
}
{
   (
      (
         n2=<CREATE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REPLACE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<VIEW_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=TableName(prn)
   (
      n9=ColumnNameListWithParenthesis(prn)
      { n8.addNode(n9); }
   )?
   n11=<AS_> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=SelectWithoutOrder(prn)
   
   { return new createView(n0,n5,n7,n8,n10,n12); }
}

ColumnNameListWithParenthesis ColumnNameListWithParenthesis(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   ColumnNameList n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ColumnNameList(prn)
   n4=<PARENTHESIS_CLOSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ColumnNameListWithParenthesis(n0,n2,n3); }
}

DropView DropView(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<VIEW_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   
   { return new DropView(n0,n2,n4); }
}

dropTable dropTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<TABLE_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=TableName(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   
   { return new dropTable(n0,n2,n4,n5); }
}

InsertTable InsertTable(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableName n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   ColumnNameList n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   SQLExpressionList n19;
   NodeToken n20;
   Token n21;
   SelectWithoutOrderWithParenthesis n22;

   {
   }
}
{
   n1=<INSERT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<INTO_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=TableName(prn)
   (
      LOOKAHEAD(<PARENTHESIS_START_> ColumnNameList(prn))
      { n7 = new NodeSequence(3); }
      n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n10=ColumnNameList(prn)
      { n7.addNode(n10); }
      n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n7.addNode(n11); }
      { n6.addNode(n7); }
   )?
   (
      (
         { n14 = new NodeSequence(4); }
         n16=<VALUES_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n18=<PARENTHESIS_START_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n14.addNode(n17); }
         n19=SQLExpressionList(prn)
         { n14.addNode(n19); }
         n21=<PARENTHESIS_CLOSE_> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n14.addNode(n20); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n22=SelectWithoutOrderWithParenthesis(prn)
         { n13 = new NodeChoice(n22, 1); }
      )
      
   )
   
   { return new InsertTable(n0,n2,n5,n6,n13); }
}

PrimaryKeyDef PrimaryKeyDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNameList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<PRIMARYKEY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ColumnNameList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new PrimaryKeyDef(n0,n2,n4,n5); }
}

CheckDef CheckDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   skip_to_matching_brace n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CHECK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=skip_to_matching_brace(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new CheckDef(n0,n2,n4,n5); }
}

JAVACODE
skip_to_matching_brace skip_to_matching_brace(PrintStream prn)
{
   Token tok;
   int nesting = 1;
   String str = new String();
   while ( true )
   {
      tok = getToken(1);
      if ( tok.kind == PARENTHESIS_START_ )
         nesting++;
      if ( tok.kind == PARENTHESIS_CLOSE_ )
      {
         nesting--;
         if ( nesting == 0 )
            break;
      }
      str += tok.image + " ";
      tok = getNextToken();
   }
   return new skip_to_matching_brace(str);
}

CreateDefinition CreateDefinition(PrintStream prn) :
{
   NodeChoice n0;
   ColumnDeclare n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Constraint n4;
   NodeChoice n5;
   PrimaryKeyDef n6;
   ForeignKeyDef n7;
   CheckDef n8;

   {
   }
}
{
   (
      n1=ColumnDeclare(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      (
         n4=Constraint(prn)
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      (
         (
            n6=PrimaryKeyDef(prn)
            { n5 = new NodeChoice(n6, 0); }
         |
            n7=ForeignKeyDef(prn)
            { n5 = new NodeChoice(n7, 1); }
         |
            n8=CheckDef(prn)
            { n5 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n5); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new CreateDefinition(n0); }
}

ColumnDeclare ColumnDeclare(PrintStream prn) :
{
   Identifier n0;
   types n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   DefaultSpec n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   SQLComplexExpression n22;
   NodeToken n23;
   Token n24;

   {
   }
}
{
   n0=Identifier(prn)
   n1=types()
   (
      (
         { n4 = new NodeSequence(2); }
         n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8=<NULL_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n10=<NULL_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n3 = new NodeChoice(n9, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      n12=DefaultSpec(prn)
      { n11.addNode(n12); }
   )?
   (
      n15=<PRIMARYKEY_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
   )?
   (
      { n17 = new NodeSequence(4); }
      n19=<CHECK_> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n21=<PARENTHESIS_START_> { n20 = JTBToolkit.makeNodeToken(n21); }
      { n17.addNode(n20); }
      n22=SQLComplexExpression(prn)
      { n17.addNode(n22); }
      n24=<PARENTHESIS_CLOSE_> { n23 = JTBToolkit.makeNodeToken(n24); }
      { n17.addNode(n23); }
      { n16.addNode(n17); }
   )?
   
   { return new ColumnDeclare(n0,n1,n2,n11,n13,n16); }
}

ForeignKeyDef ForeignKeyDef(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNameList n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   TableName n9;
   NodeToken n10;
   Token n11;
   ColumnNameList n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<FOREIGNKEY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=ColumnNameList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<REFERENCES_> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=TableName(prn)
   n11=<PARENTHESIS_START_> { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=ColumnNameList(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ForeignKeyDef(n0,n2,n4,n5,n7,n9,n10,n12,n13); }
}

DefaultSpec DefaultSpec(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLSimpleExpression n2;

   {
   }
}
{
   n1=<DEFAULT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLSimpleExpression(prn)
   
   { return new DefaultSpec(n0,n2); }
}

PartitionDeclare PartitionDeclare(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Identifier n5;
   NodeToken n6;
   Token n7;
   PartitionChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   PartitionChoice n31;

   {
   }
}
{
   (
      { n1 = new NodeSequence(4); }
      n3=<PARTITIONINGKEY_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=Identifier(prn)
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      n7=<ON_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      n8=PartitionChoice(prn)
      { n1.addNode(n8); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(2); }
      n11=<PARTITION_WITH_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n13=<PARENT_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 1); }
   |
      n15=<REPLICATED_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 2); }
   |
      { n16 = new NodeSequence(3); }
      n18=<ON_> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      (
         (
            n21=<NODE_> { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19 = new NodeChoice(n20, 0); }
         |
            n23=<NODES_> { n22 = JTBToolkit.makeNodeToken(n23); }
            { n19 = new NodeChoice(n22, 1); }
         )
         
      )
      { n16.addNode(n19); }
      n25=<INT_LITERAL> { n24 = JTBToolkit.makeNodeToken(n25); }
      { n16.addNode(n24); }
      { n0 = new NodeChoice(n16, 3); }
   |
      { n26 = new NodeSequence(3); }
      n28=<ROUND_ROBIN_> { n27 = JTBToolkit.makeNodeToken(n28); }
      { n26.addNode(n27); }
      n30=<ON_> { n29 = JTBToolkit.makeNodeToken(n30); }
      { n26.addNode(n29); }
      n31=PartitionChoice(prn)
      { n26.addNode(n31); }
      { n0 = new NodeChoice(n26, 4); }
   )
   
   { return new PartitionDeclare(n0); }
}

PartitionChoice PartitionChoice(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodePartitionList n9;

   {
   }
}
{
   (
      n2=<ALL_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      (
         (
            n6=<NODE_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4 = new NodeChoice(n5, 0); }
         |
            n8=<NODES_> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n4 = new NodeChoice(n7, 1); }
         )
         
      )
      { n3.addNode(n4); }
      n9=NodePartitionList(prn)
      { n3.addNode(n9); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new PartitionChoice(n0); }
}

NodePartitionList NodePartitionList(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<INT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<INT_LITERAL> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   
   { return new NodePartitionList(n0,n2); }
}

types types() :
{
   NodeChoice n0;
   IntegerDataType n1;
   SmallIntDataType n2;
   RealDataType n3;
   DoublePrecision n4;
   FloatDataType n5;
   DecimalDataType n6;
   NumericDataType n7;
   FixedDataType n8;
   CharachterDataType n9;
   VarCharDataType n10;
   DateDataType n11;
   TimeDataType n12;
   TimeStampDataType n13;
   BooleanDataType n14;
   NationalCharDataType n15;
   SerialDataType n16;
   BigSerialDataType n17;
   BigIntDataType n18;
   IntervalDataType n19;
   TextDataType n20;
   BLOBDataType n21;
   BitDataType n22;
   VarBitDataType n23;
   MacAddrDataType n24;
   CidrDataType n25;
   InetDataType n26;
   GeometryDataType n27;
   Box2DDataType n28;
   Box3DDataType n29;
   Box3DExtentDataType n30;
   RegClassDataType n31;

   {
   }
}
{
   (
      n1=IntegerDataType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=SmallIntDataType()
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=RealDataType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DoublePrecision()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=FloatDataType()
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=DecimalDataType()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=NumericDataType()
      { n0 = new NodeChoice(n7, 6); }
   |
      n8=FixedDataType()
      { n0 = new NodeChoice(n8, 7); }
   |
      n9=CharachterDataType()
      { n0 = new NodeChoice(n9, 8); }
   |
      n10=VarCharDataType()
      { n0 = new NodeChoice(n10, 9); }
   |
      n11=DateDataType()
      { n0 = new NodeChoice(n11, 10); }
   |
      n12=TimeDataType()
      { n0 = new NodeChoice(n12, 11); }
   |
      n13=TimeStampDataType()
      { n0 = new NodeChoice(n13, 12); }
   |
      n14=BooleanDataType()
      { n0 = new NodeChoice(n14, 13); }
   |
      n15=NationalCharDataType()
      { n0 = new NodeChoice(n15, 14); }
   |
      n16=SerialDataType()
      { n0 = new NodeChoice(n16, 15); }
   |
      n17=BigSerialDataType()
      { n0 = new NodeChoice(n17, 16); }
   |
      n18=BigIntDataType()
      { n0 = new NodeChoice(n18, 17); }
   |
      n19=IntervalDataType()
      { n0 = new NodeChoice(n19, 18); }
   |
      n20=TextDataType()
      { n0 = new NodeChoice(n20, 19); }
   |
      n21=BLOBDataType()
      { n0 = new NodeChoice(n21, 20); }
   |
      n22=BitDataType()
      { n0 = new NodeChoice(n22, 21); }
   |
      n23=VarBitDataType()
      { n0 = new NodeChoice(n23, 22); }
   |
      n24=MacAddrDataType()
      { n0 = new NodeChoice(n24, 23); }
   |
      n25=CidrDataType()
      { n0 = new NodeChoice(n25, 24); }
   |
      n26=InetDataType()
      { n0 = new NodeChoice(n26, 25); }
   |
      n27=GeometryDataType()
      { n0 = new NodeChoice(n27, 26); }
   |
      n28=Box2DDataType()
      { n0 = new NodeChoice(n28, 27); }
   |
      n29=Box3DDataType()
      { n0 = new NodeChoice(n29, 28); }
   |
      n30=Box3DExtentDataType()
      { n0 = new NodeChoice(n30, 29); }
   |
      n31=RegClassDataType()
      { n0 = new NodeChoice(n31, 30); }
   )
   
   { return new types(n0); }
}

DatetimeField DatetimeField() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   (
      n2=<YEAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<QUARTER_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<MONTH_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<WEEK_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<DAY_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<HOUR_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<MINUTE_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<SECOND_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new DatetimeField(n0); }
}

IntervalQualifier IntervalQualifier() :
{
   DatetimeField n0;
   NodeToken n1;
   Token n2;
   DatetimeField n3;

   {
   }
}
{
   n0=DatetimeField()
   n2=<TO_> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=DatetimeField()
   
   { return new IntervalQualifier(n0,n1,n3); }
}

IntervalDataType IntervalDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   IntervalQualifier n3;

   {
   }
}
{
   n1=<INTERVAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      n3=IntervalQualifier()
      { n2.addNode(n3); }
   )?
   
   { return new IntervalDataType(n0,n2); }
}

TextDataType TextDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      n2=<TEXT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CLOB_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<LONG_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<LONG_VARCHAR_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<LONGTEXT_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<LVARCHAR_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<MEDIUMTEXT_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
   { return new TextDataType(n0); }
}

BLOBDataType BLOBDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   (
      n2=<BLOB_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<BYTEA_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<BYTE_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<BINARY_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<IMAGE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<LONG_RAW_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<RAW_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=<VARBINARY_> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new BLOBDataType(n0); }
}

BitDataType BitDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;

   {
   }
}
{
   n1=<BIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   
   { return new BitDataType(n0,n2); }
}

VarBitDataType VarBitDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;

   {
   }
}
{
   n1=<VARBIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   
   { return new VarBitDataType(n0,n2); }
}

MacAddrDataType MacAddrDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<MACADDR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new MacAddrDataType(n0); }
}

CidrDataType CidrDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<CIDR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CidrDataType(n0); }
}

InetDataType InetDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new InetDataType(n0); }
}

GeometryDataType GeometryDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<GEOMETRY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new GeometryDataType(n0); }
}

Box2DDataType Box2DDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BOX2D_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Box2DDataType(n0); }
}

Box3DDataType Box3DDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BOX3D_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Box3DDataType(n0); }
}

Box3DExtentDataType Box3DExtentDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BOX3DEXTENT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Box3DExtentDataType(n0); }
}

RegClassDataType RegClassDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<REGCLASS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new RegClassDataType(n0); }
}

BooleanDataType BooleanDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BOOLEAN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanDataType(n0); }
}

SmallIntDataType SmallIntDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      { n1 = new NodeSequence(3); }
      (
         (
            n4=<SMALLINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<INT2_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n9=<SERIAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      n10=UnsignedZeroFillSpecs()
      { n1.addNode(n10); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n12=<TINYINT_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 1); }
   )
   
   { return new SmallIntDataType(n0); }
}

BigIntDataType BigIntDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;

   {
   }
}
{
   (
      (
         n2=<BIGINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<BIGINTEGER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<INT8_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   (
      n9=<SERIAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=UnsignedZeroFillSpecs()
   
   { return new BigIntDataType(n0,n7,n10); }
}

SerialDataType SerialDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SERIAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new SerialDataType(n0); }
}

BigSerialDataType BigSerialDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BIGSERIAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BigSerialDataType(n0); }
}

RealDataType RealDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnsignedZeroFillSpecs n7;

   {
   }
}
{
   (
      (
         n2=<REAL_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SMALLFLOAT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<FLOAT4_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=UnsignedZeroFillSpecs()
   
   { return new RealDataType(n0,n7); }
}

IntegerDataType IntegerDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;

   {
   }
}
{
   (
      (
         n2=<INT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INTEGER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<INT4_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   (
      n9=<SERIAL_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=UnsignedZeroFillSpecs()
   
   { return new IntegerDataType(n0,n7,n10); }
}

FloatDataType FloatDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;
   UnsignedZeroFillSpecs n4;

   {
   }
}
{
   n1=<FLOAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   n4=UnsignedZeroFillSpecs()
   
   { return new FloatDataType(n0,n2,n4); }
}

TimeStampDataType TimeStampDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   LengthSpec n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      { n1 = new NodeSequence(3); }
      n3=<TIMESTAMP_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      (
         n5=LengthSpec()
         { n4.addNode(n5); }
      )?
      { n1.addNode(n4); }
      (
         LOOKAHEAD(2)
         (
            (
               n9=<WITH_TIMEZONE_> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n7 = new NodeChoice(n8, 0); }
            |
               n11=<WITHOUT_TIMEZONE_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n7 = new NodeChoice(n10, 1); }
            )
            
         )
         { n6.addNode(n7); }
      )?
      { n1.addNode(n6); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n13=<DATETIME_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 1); }
   |
      n15=<SAMLLDATETIME_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 2); }
   )
   
   { return new TimeStampDataType(n0); }
}

TimeDataType TimeDataType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<TIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=LengthSpec()
      { n2.addNode(n3); }
   )?
   (
      LOOKAHEAD(2)
      (
         (
            n7=<WITH_TIMEZONE_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5 = new NodeChoice(n6, 0); }
         |
            n9=<WITHOUT_TIMEZONE_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n5 = new NodeChoice(n8, 1); }
         )
         
      )
      { n4.addNode(n5); }
   )?
   
   { return new TimeDataType(n0,n2,n4); }
}

DateDataType DateDataType() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<DATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DateDataType(n0); }
}

VarCharDataType VarCharDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   LengthSpec n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n4=<VARCHAR_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<VARCHAR2_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n8=LengthSpec()
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n10=<TINYTEXT_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 1); }
   )
   
   { return new VarCharDataType(n0); }
}

NumericDataType NumericDataType() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   PrecisionSpec n8;
   UnsignedZeroFillSpecs n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      (
         (
            n4=<NUMERIC_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6=<NUMBER_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      (
         n8=PrecisionSpec()
         { n7.addNode(n8); }
      )?
      { n1.addNode(n7); }
      n9=UnsignedZeroFillSpecs()
      { n1.addNode(n9); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n11=<MONEY_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 1); }
   |
      n13=<SMALLMONEY_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n0 = new NodeChoice(n12, 2); }
   |
      n15=<YEAR_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n0 = new NodeChoice(n14, 3); }
   )
   
   { return new NumericDataType(n0); }
}

DecimalDataType DecimalDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   PrecisionSpec n6;
   UnsignedZeroFillSpecs n7;

   {
   }
}
{
   (
      (
         n2=<DECIMAL_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DEC_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n6=PrecisionSpec()
      { n5.addNode(n6); }
   )?
   n7=UnsignedZeroFillSpecs()
   
   { return new DecimalDataType(n0,n5,n7); }
}

FixedDataType FixedDataType() :
{
   NodeToken n0;
   Token n1;
   PrecisionSpec n2;
   UnsignedZeroFillSpecs n3;

   {
   }
}
{
   n1=<FIXED_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrecisionSpec()
   n3=UnsignedZeroFillSpecs()
   
   { return new FixedDataType(n0,n2,n3); }
}

NationalCharDataType NationalCharDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   LengthSpec n15;

   {
   }
}
{
   (
      (
         n2=<NCHAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(2); }
         n5=<NATIONAL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         (
            (
               n8=<CHAR_> { n7 = JTBToolkit.makeNodeToken(n8); }
               { n6 = new NodeChoice(n7, 0); }
            |
               n10=<CHARACHTER_> { n9 = JTBToolkit.makeNodeToken(n10); }
               { n6 = new NodeChoice(n9, 1); }
            )
            
         )
         { n3.addNode(n6); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      LOOKAHEAD(2)
      n13=<VARYING_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
   )?
   (
      n15=LengthSpec()
      { n14.addNode(n15); }
   )?
   
   { return new NationalCharDataType(n0,n11,n14); }
}

DoublePrecision DoublePrecision() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<DOUBLE_PRECISION_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOAT8_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new DoublePrecision(n0); }
}

CharachterDataType CharachterDataType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   LengthSpec n9;

   {
   }
}
{
   (
      (
         n2=<CHARACHTER_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHAR_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      LOOKAHEAD(2)
      n7=<VARYING_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      n9=LengthSpec()
      { n8.addNode(n9); }
   )?
   
   { return new CharachterDataType(n0,n5,n8); }
}

LengthSpec LengthSpec() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new LengthSpec(n0,n2,n4); }
}

UnsignedZeroFillSpecs UnsignedZeroFillSpecs() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
}
{
   (
      n2=<UNSIGNED_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   (
      n5=<ZEROFILL_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new UnsignedZeroFillSpecs(n0,n3); }
}

PrecisionSpec PrecisionSpec() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      { n5 = new NodeSequence(2); }
      n7="," { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<INT_LITERAL> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new PrecisionSpec(n0,n2,n4,n10); }
}

SelectAddGeometryColumn SelectAddGeometryColumn(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;
   SQLArgument n18;
   NodeOptional n19 = new NodeOptional();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   SQLArgument n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   SQLArgument n28;
   NodeToken n29;
   Token n30;

   {
   }
}
{
   n1=<SELECT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ADDGEOMETRYCOLUMN_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=SQLArgument(prn)
   n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=SQLArgument(prn)
   n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=SQLArgument(prn)
   n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
   n15=SQLArgument(prn)
   n17="," { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n20 = new NodeSequence(2); }
      n22="," { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      n23=SQLArgument(prn)
      { n20.addNode(n23); }
      { n19.addNode(n20); }
   )?
   (
      { n25 = new NodeSequence(2); }
      n27="," { n26 = JTBToolkit.makeNodeToken(n27); }
      { n25.addNode(n26); }
      n28=SQLArgument(prn)
      { n25.addNode(n28); }
      { n24.addNode(n25); }
   )?
   n30=<PARENTHESIS_CLOSE_> { n29 = JTBToolkit.makeNodeToken(n30); }
   
   { return new SelectAddGeometryColumn(n0,n2,n4,n6,n7,n9,n10,n12,n13,n15,n16,n18,n19,n24,n29); }
}

SelectWithParenthesis SelectWithParenthesis(PrintStream prn) :
{
   Select n0;

   {
   }
}
{
   n0=Select(prn)
   
   { return new SelectWithParenthesis(n0); }
}

Select Select(PrintStream prn) :
{
   SelectWithoutOrderWithParenthesis n0;
   NodeOptional n1 = new NodeOptional();
   OrderByClause n2;
   NodeOptional n3 = new NodeOptional();
   LimitClause n4;
   NodeOptional n5 = new NodeOptional();
   OffsetClause n6;

   {
   }
}
{
   n0=SelectWithoutOrderWithParenthesis(prn)
   (
      n2=OrderByClause(prn)
      { n1.addNode(n2); }
   )?
   (
      n4=LimitClause(prn)
      { n3.addNode(n4); }
   )?
   (
      n6=OffsetClause(prn)
      { n5.addNode(n6); }
   )?
   
   { return new Select(n0,n1,n3,n5); }
}

SelectWithoutOrderWithParenthesis SelectWithoutOrderWithParenthesis(PrintStream prn) :
{
   SelectWithoutOrder n0;

   {
   }
}
{
   n0=SelectWithoutOrder(prn)
   
   { return new SelectWithoutOrderWithParenthesis(n0); }
}

SelectWithoutOrder SelectWithoutOrder(PrintStream prn) :
{
   SelectWithoutOrderAndSetWithParenthesis n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   SelectWithoutOrderAndSet n9;
   UnionSpec n10;

   {
   }
}
{
   n0=SelectWithoutOrderAndSetWithParenthesis(prn)
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(3); }
      n4=<UNION_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n7=<ALL_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      (
         (
            n9=SelectWithoutOrderAndSet(prn)
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=UnionSpec(prn)
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SelectWithoutOrder(n0,n1); }
}

SelectWithoutOrderAndSetWithParenthesis SelectWithoutOrderAndSetWithParenthesis(PrintStream prn) :
{
   NodeChoice n0;
   SelectWithoutOrderAndSet n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectWithoutOrderAndSetWithParenthesis n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   (
      n1=SelectWithoutOrderAndSet(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4=<PARENTHESIS_START_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SelectWithoutOrderAndSetWithParenthesis(prn)
      { n2.addNode(n5); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new SelectWithoutOrderAndSetWithParenthesis(n0); }
}

UnionSpec UnionSpec(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SelectWithoutOrder n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SelectWithoutOrder(prn)
   n4=<PARENTHESIS_CLOSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new UnionSpec(n0,n2,n3); }
}

SelectWithoutOrderAndSet SelectWithoutOrderAndSet(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SelectList n10;
   NodeOptional n11 = new NodeOptional();
   IntoClause n12;
   NodeOptional n13 = new NodeOptional();
   FromClause n14;
   NodeOptional n15 = new NodeOptional();
   WhereClause n16;
   NodeOptional n17 = new NodeOptional();
   GroupByClause n18;
   NodeOptional n19 = new NodeOptional();
   HavingClause n20;

   {
   }
}
{
   n1=<SELECT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<ALL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<DISTINCT_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      |
         n9=<UNIQUE_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3 = new NodeChoice(n8, 2); }
      )
      { n2.addNode(n3); }
   )?
   n10=SelectList(prn)
   (
      n12=IntoClause(prn)
      { n11.addNode(n12); }
   )?
   (
      n14=FromClause(prn)
      { n13.addNode(n14); }
   )?
   (
      n16=WhereClause(prn)
      { n15.addNode(n16); }
   )?
   (
      n18=GroupByClause(prn)
      { n17.addNode(n18); }
   )?
   (
      n20=HavingClause(prn)
      { n19.addNode(n20); }
   )?
   
   { return new SelectWithoutOrderAndSet(n0,n2,n10,n11,n13,n15,n17,n19); }
}

SelectList SelectList(PrintStream prn) :
{
   SelectTupleSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectTupleSpec n5;

   {
   }
}
{
   n0=SelectTupleSpec(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SelectTupleSpec(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SelectList(n0,n1); }
}

SelectTupleSpec SelectTupleSpec(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   TableName n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   SQLSimpleExpression n10;
   NodeOptional n11 = new NodeOptional();
   SelectAliasSpec n12;

   {
   }
}
{
   (
      (
         n2=<STAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(TableName(prn) "." <STAR_>)
         { n3 = new NodeSequence(4); }
         n4=TableName(prn)
         { n3.addNode(n4); }
         n6="." { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3.addNode(n5); }
         n8=<STAR_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n0 = new NodeChoice(n3, 1); }
      |
         { n9 = new NodeSequence(2); }
         n10=SQLSimpleExpression(prn)
         { n9.addNode(n10); }
         (
            LOOKAHEAD(2)
            n12=SelectAliasSpec(prn)
            { n11.addNode(n12); }
         )?
         { n9.addNode(n11); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   
   { return new SelectTupleSpec(n0); }
}

SQLSimpleExpression SQLSimpleExpression(PrintStream prn) :
{
   SQLPrecedenceLevel1Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLPrecedenceLevel1Operand n2;

   {
   }
}
{
   n0=SQLPrecedenceLevel1Expression(prn)
   (
      LOOKAHEAD(2)
      n2=SQLPrecedenceLevel1Operand(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLSimpleExpression(n0,n1); }
}

SQLPrecedenceLevel1Expression SQLPrecedenceLevel1Expression(PrintStream prn) :
{
   SQLPrecedenceLevel2Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLPrecedenceLevel2Operand n2;

   {
   }
}
{
   n0=SQLPrecedenceLevel2Expression(prn)
   (
      LOOKAHEAD(2)
      n2=SQLPrecedenceLevel2Operand(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLPrecedenceLevel1Expression(n0,n1); }
}

SQLPrecedenceLevel1Operand SQLPrecedenceLevel1Operand(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   SQLSimpleExpression n39;

   {
   }
}
{
   (
      (
         n2=<CONTAINED_WITHIN_OR_EQUALS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CONTAINS_OR_EQUALS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<GREATER_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<GREATER_EQUALS_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<LESS_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<LESS_EQUALS_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<EQUALS_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<NOT_EQUALS_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<NOT_EQUALS_2_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20=<GIS_OVERLAPS_> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22=<GIS_OVERLAPS_RIGHT_> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      |
         n24=<GIS_OVERLAPS_LEFT_> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 11); }
      |
         n26=<GIS_OVERLAPS_BELOW_> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 12); }
      |
         n28=<GIS_OVERLAPS_ABOVE_> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 13); }
      |
         n30=<GIS_SAME_> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n0 = new NodeChoice(n29, 14); }
      |
         n32=<GIS_STRICT_BELOW_> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n0 = new NodeChoice(n31, 15); }
      |
         n34=<GIS_STRICT_ABOVE_> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n0 = new NodeChoice(n33, 16); }
      |
         n36=<NOT_BITWISE_> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n0 = new NodeChoice(n35, 17); }
      |
         n38=<ABSOLUTE_> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n0 = new NodeChoice(n37, 18); }
      )
      
   )
   n39=SQLSimpleExpression(prn)
   
   { return new SQLPrecedenceLevel1Operand(n0,n39); }
}

SQLPrecedenceLevel2Expression SQLPrecedenceLevel2Expression(PrintStream prn) :
{
   SQLPrecedenceLevel3Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLPrecedenceLevel3Operand n2;

   {
   }
}
{
   n0=SQLPrecedenceLevel3Expression(prn)
   (
      LOOKAHEAD(2)
      n2=SQLPrecedenceLevel3Operand(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLPrecedenceLevel2Expression(n0,n1); }
}

SQLPrecedenceLevel2Operand SQLPrecedenceLevel2Operand(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLPrecedenceLevel1Expression n7;

   {
   }
}
{
   (
      (
         n2=<PLUS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MINUS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<CONCAT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=SQLPrecedenceLevel1Expression(prn)
   
   { return new SQLPrecedenceLevel2Operand(n0,n7); }
}

SQLPrecedenceLevel3Expression SQLPrecedenceLevel3Expression(PrintStream prn) :
{
   SQLPrimaryExpression n0;

   {
   }
}
{
   n0=SQLPrimaryExpression(prn)
   
   { return new SQLPrecedenceLevel3Expression(n0); }
}

SQLPrecedenceLevel3Operand SQLPrecedenceLevel3Operand(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   SQLPrecedenceLevel2Expression n21;

   {
   }
}
{
   (
      (
         n2=<STAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DIVIDE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<MOD_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<DIV_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<MODULO_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<AND_BITWISE_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<OR_BITWISE_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<XOR_BITWISE_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<SHIFT_LEFT_BITWISE_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20=<SHIFT_RIGHT_BITWISE_> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      )
      
   )
   n21=SQLPrecedenceLevel2Expression(prn)
   
   { return new SQLPrecedenceLevel3Operand(n0,n21); }
}

SQLPrimaryExpression SQLPrimaryExpression(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   FunctionCall n19;
   TableColumn n20;
   PseudoColumn n21;
   numberValue n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   SQLComplexExpression n26;
   NodeToken n27;
   Token n28;
   booleanLiteral n29;
   stringLiteral n30;
   NullLiterals n31;
   IntervalLiterals n32;
   TextLiterals n33;
   PreparedStmtParameter n34;
   TimeStampLiteral n35;
   TimeLiteral n36;
   DateLiteral n37;
   binaryLiteral n38;
   hex_decimalLiteral n39;
   IntegerLiteral n40;
   MacaddrLiteral n41;
   CidrLiteral n42;
   InetLiteral n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeOptional n47 = new NodeOptional();
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   types n51;

   {
   }
}
{
   (
      (
         n3=<SQUARE_ROOT_> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n5=<CUBE_ROOT_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1 = new NodeChoice(n4, 1); }
      |
         n7=<FACTORIAL_PREFIX_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n1 = new NodeChoice(n6, 2); }
      |
         n9=<ABSOLUTE_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n1 = new NodeChoice(n8, 3); }
      |
         n11=<NOT_BITWISE_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n1 = new NodeChoice(n10, 4); }
      )
      { n0.addNode(n1); }
   )?
   (
      (
         n15=<PLUS_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13 = new NodeChoice(n14, 0); }
      |
         n17=<MINUS_> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13 = new NodeChoice(n16, 1); }
      )
      { n12.addNode(n13); }
   )?
   (
      (
         LOOKAHEAD(2)
         n19=FunctionCall(prn)
         { n18 = new NodeChoice(n19, 0); }
      |
         LOOKAHEAD(2)
         n20=TableColumn(prn)
         { n18 = new NodeChoice(n20, 1); }
      |
         LOOKAHEAD(2)
         n21=PseudoColumn(prn)
         { n18 = new NodeChoice(n21, 2); }
      |
         n22=numberValue(prn)
         { n18 = new NodeChoice(n22, 3); }
      |
         LOOKAHEAD(2)
         { n23 = new NodeSequence(4); }
         n25=<PARENTHESIS_START_> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         n26=SQLComplexExpression(prn)
         { n23.addNode(n26); }
         n28=<PARENTHESIS_CLOSE_> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n23.addNode(n27); }
         { n18 = new NodeChoice(n23, 4); }
      |
         n29=booleanLiteral(prn)
         { n18 = new NodeChoice(n29, 5); }
      |
         n30=stringLiteral(prn)
         { n18 = new NodeChoice(n30, 6); }
      |
         n31=NullLiterals(prn)
         { n18 = new NodeChoice(n31, 7); }
      |
         LOOKAHEAD(2)
         n32=IntervalLiterals(prn)
         { n18 = new NodeChoice(n32, 8); }
      |
         LOOKAHEAD(2)
         n33=TextLiterals(prn)
         { n18 = new NodeChoice(n33, 9); }
      |
         LOOKAHEAD(2)
         n34=PreparedStmtParameter(prn)
         { n18 = new NodeChoice(n34, 10); }
      |
         n35=TimeStampLiteral(prn)
         { n18 = new NodeChoice(n35, 11); }
      |
         n36=TimeLiteral(prn)
         { n18 = new NodeChoice(n36, 12); }
      |
         n37=DateLiteral(prn)
         { n18 = new NodeChoice(n37, 13); }
      |
         n38=binaryLiteral(prn)
         { n18 = new NodeChoice(n38, 14); }
      |
         n39=hex_decimalLiteral(prn)
         { n18 = new NodeChoice(n39, 15); }
      |
         n40=IntegerLiteral(prn)
         { n18 = new NodeChoice(n40, 16); }
      |
         n41=MacaddrLiteral(prn)
         { n18 = new NodeChoice(n41, 17); }
      |
         n42=CidrLiteral(prn)
         { n18 = new NodeChoice(n42, 18); }
      |
         n43=InetLiteral(prn)
         { n18 = new NodeChoice(n43, 19); }
      )
      
   )
   (
      n46=<FACTORIAL_> { n45 = JTBToolkit.makeNodeToken(n46); }
      { n44.addNode(n45); }
   )?
   (
      { n48 = new NodeSequence(2); }
      n50="::" { n49 = JTBToolkit.makeNodeToken(n50); }
      { n48.addNode(n49); }
      n51=types()
      { n48.addNode(n51); }
      { n47.addNode(n48); }
   )?
   
   { return new SQLPrimaryExpression(n0,n12,n18,n44,n47); }
}

IsNullExpression IsNullExpression(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<IS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<NOT_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<NULL_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new IsNullExpression(n0,n2,n5); }
}

IsBooleanExpression IsBooleanExpression(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<IS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<NOT_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<BINARY_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new IsBooleanExpression(n0,n2,n5); }
}

PreparedStmtParameter PreparedStmtParameter(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<PARAM_PLACE_HOLDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PreparedStmtParameter(n0); }
}

TimeStampLiteral TimeStampLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<TIMESTAMP_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TimeStampLiteral(n0); }
}

TimeLiteral TimeLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<TIME_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TimeLiteral(n0); }
}

DateLiteral DateLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<DATE_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new DateLiteral(n0); }
}

IntervalLiterals IntervalLiterals(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INTERVAL_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntervalLiterals(n0); }
}

TextLiterals TextLiterals(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<TEXT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TextLiterals(n0); }
}

NullLiterals NullLiterals(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<NULL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NullLiterals(n0); }
}

booleanLiteral booleanLiteral(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<TRUE_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FALSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new booleanLiteral(n0); }
}

binaryLiteral binaryLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<BINARY_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new binaryLiteral(n0); }
}

hex_decimalLiteral hex_decimalLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<HEXDECIMAL_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new hex_decimalLiteral(n0); }
}

IntegerLiteral IntegerLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INTEGER_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new IntegerLiteral(n0); }
}

MacaddrLiteral MacaddrLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<MACADDR_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new MacaddrLiteral(n0); }
}

CidrLiteral CidrLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<CIDR_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new CidrLiteral(n0); }
}

InetLiteral InetLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INET_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new InetLiteral(n0); }
}

GeometryLiteral GeometryLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<GEOMETRY_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new GeometryLiteral(n0); }
}

PseudoColumn PseudoColumn(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SelectList n10;
   NodeOptional n11 = new NodeOptional();
   FromClause n12;
   NodeOptional n13 = new NodeOptional();
   WhereClause n14;
   NodeOptional n15 = new NodeOptional();
   LimitClause n16;
   NodeToken n17;
   Token n18;

   {
   }
}
{
   n1=<PARENTHESIS_START_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<SELECT_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n7=<ALL_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9=<DISTINCT_> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      { n4.addNode(n5); }
   )?
   n10=SelectList(prn)
   (
      n12=FromClause(prn)
      { n11.addNode(n12); }
   )?
   (
      n14=WhereClause(prn)
      { n13.addNode(n14); }
   )?
   (
      n16=LimitClause(prn)
      { n15.addNode(n16); }
   )?
   n18=<PARENTHESIS_CLOSE_> { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new PseudoColumn(n0,n2,n4,n10,n11,n13,n15,n17); }
}

SQLArgumentList SQLArgumentList(PrintStream prn) :
{
   SQLArgument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLArgument n5;

   {
   }
}
{
   n0=SQLArgument(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLArgument(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLArgumentList(n0,n1); }
}

SQLArgument SQLArgument(PrintStream prn) :
{
   SQLSimpleExpression n0;

   {
   }
}
{
   n0=SQLSimpleExpression(prn)
   
   { return new SQLArgument(n0); }
}

CharString CharString(PrintStream prn) :
{
   extendbObject n0;

   {
   }
}
{
   n0=extendbObject(prn)
   
   { return new CharString(n0); }
}

FunctionCall FunctionCall(PrintStream prn) :
{
   NodeChoice n0;
   Func_Trunc n1;
   Func_Date n2;
   Func_Time n3;
   Func_TimeStamp n4;
   Func_CurrentDate n5;
   Func_PgCurrentDate n6;
   Func_CurrentTime n7;
   Func_PgCurrentTime n8;
   Func_PgCurrentTimeStamp n9;
   Func_Year n10;
   Func_Month n11;
   Func_Hour n12;
   Func_Minute n13;
   Func_Second n14;
   Func_AddDate n15;
   Func_AddTime n16;
   Func_DateDiff n17;
   Func_Day n18;
   Func_DayName n19;
   Func_DayOfMonth n20;
   Func_DayOfWeek n21;
   Func_DayOfYear n22;
   Func_MonthName n23;
   Func_SubDate n24;
   Func_SubTime n25;
   Func_WeekOfYear n26;
   Func_Now n27;
   Func_Abs n28;
   Func_Ceil n29;
   Func_Ceiling n30;
   Func_Exp n31;
   Func_Floor n32;
   Func_LN n33;
   Func_Log n34;
   Func_PI n35;
   Func_Power n36;
   Func_Round n37;
   Func_Sign n38;
   Func_TAsin n39;
   Func_TAtan n40;
   Func_TCos n41;
   Func_TCot n42;
   Func_TDegree n43;
   Func_Radians n44;
   Func_Sin n45;
   Func_Tan n46;
   Func_Avg n47;
   Func_Count n48;
   Func_Max n49;
   Func_Min n50;
   Func_Stdev n51;
   Func_Sum n52;
   Func_Variance n53;
   Func_Ascii n54;
   Func_Index n55;
   Func_Left n56;
   Func_Length n57;
   Func_Lower n58;
   Func_Lpad n59;
   Func_Rpad n60;
   Func_Ltrim n61;
   Func_Replace n62;
   Func_Right n63;
   Func_Rtrim n64;
   Func_SubStr n65;
   Func_Trim n66;
   Func_Upper n67;
   Func_Database n68;
   Func_Value n69;
   Func_Version n70;
   Func_Case n71;
   Func_TACos n72;
   Func_Log10 n73;
   Func_Mod n74;
   Func_Sqrt n75;
   Func_Least n76;
   Func_TCosh n77;
   Func_Float n78;
   Func_Greatest n79;
   Func_TATan2 n80;
   Func_TATn2 n81;
   Func_SoundEx n82;
   Func_InitCap n83;
   Func_LFill n84;
   Func_MapChar n85;
   Func_NUM n86;
   Func_Concat n87;
   Func_User n88;
   Func_Cast n89;
   Func_TimeOfDay n90;
   Func_Custom n91;
   Func_IsFinite n92;
   Func_Extract n93;
   Func_DateTrunc n94;
   Func_DatePart n95;
   Func_Age n96;
   Func_LocalTime n97;
   Func_LocalTimeStamp n98;
   Func_BitLength n99;
   Func_CharLength n100;
   Func_Convert n101;
   Func_OctetLength n102;
   Func_Overlay n103;
   Func_Position n104;
   Func_Substring n105;
   Func_ToHex n106;
   Func_QuoteLiteral n107;
   Func_QuoteIdent n108;
   Func_Md5 n109;
   Func_Chr n110;
   Func_PgClientEncoding n111;
   Func_Translate n112;
   Func_ToAscii n113;
   Func_StrPos n114;
   Func_SplitPart n115;
   Func_Repeat n116;
   Func_Encode n117;
   Func_Decode n118;
   Func_Btrim n119;
   Func_Width_bucket n120;
   Func_Setseed n121;
   Func_Random n122;
   Func_Cbrt n123;
   Func_GetBit n124;
   Func_GetByte n125;
   Func_ToDate n126;
   Func_ClockTimeStamp n127;
   Func_StatementTimeStamp n128;
   Func_TransactionTimeStamp n129;
   Func_NullIf n130;
   Func_SetBit n131;
   Func_SetByte n132;
   Func_ToChar n133;
   Func_ToNumber n134;
   Func_ToTimestamp n135;
   Func_AddMonths n136;
   Func_JustifyDays n137;
   Func_JustifyHours n138;
   Func_JustifyInterval n139;
   Func_LastDay n140;
   Func_MonthsBetween n141;
   Func_NextDay n142;
   Func_CurrentDatabase n143;
   Func_CurrentSchema n144;
   Func_BitAnd n145;
   Func_BitOr n146;
   Func_BoolAnd n147;
   Func_BoolOr n148;
   Func_CorrCov n149;
   Func_Regr n150;
   Func_RegexReplace n151;
   Func_Coalesce n152;
   Func_Abbrev n153;
   Func_Broadcast n154;
   Func_Family n155;
   Func_Host n156;
   Func_Hostmask n157;
   Func_Masklen n158;
   Func_Netmask n159;
   Func_Network n160;
   Func_Set_Masklen n161;
   Func_Text n162;
   Func_ST_AsText n163;
   Func_ST_Transform n164;
   Func_ST_Distance n165;
   Func_ST_DWithin n166;
   Func_ST_Length n167;
   Func_ST_Area n168;
   Func_ST_Boundary n169;
   Func_ST_Buffer n170;
   Func_ST_Centroid n171;
   Func_ST_AsBinary n172;
   Func_ST_ADDMEASURE n173;
   Func_ST_ADDPOINT n174;
   Func_ST_AFFINE n175;
   Func_ST_AREA2D n176;
   Func_ST_ASEWKB n177;
   Func_ST_ASEWKT n178;
   Func_ST_ASGEOJSON n179;
   Func_ST_ASGML n180;
   Func_ST_ASHEXEWKB n181;
   Func_ST_ASKML n182;
   Func_ST_ASSVG n183;
   Func_ST_AZIMUTH n184;
   Func_ST_BDMPOLYFROMTEXT n185;
   Func_ST_BDPOLYFROMTEXT n186;
   Func_ST_BUILDAREA n187;
   Func_ST_BYTEA n188;
   Func_ST_CHIP_IN n189;
   Func_ST_CHIP_OUT n190;
   Func_ST_CLOSESTPOINT n191;
   Func_ST_COLLECT n192;
   Func_ST_COLLECTIONEXTRACT n193;
   Func_ST_COMBINE_BBOX n194;
   Func_ST_COMPRESSION n195;
   Func_ST_CONTAINS n196;
   Func_ST_CONTAINSPROPERLY n197;
   Func_ST_CONVEXHULL n198;
   Func_ST_COORDDIM n199;
   Func_ST_COVEREDBY n200;
   Func_ST_COVERS n201;
   Func_ST_CROSSES n202;
   Func_ST_CURVETOLINE n203;
   Func_ST_DATATYPE n204;
   Func_ST_DFULLYWITHIN n205;
   Func_ST_DIFFERENCE n206;
   Func_ST_DIMENSION n207;
   Func_ST_DISJOINT n208;
   Func_ST_DISTANCE_SPHERE n209;
   Func_ST_DISTANCE_SPHEROID n210;
   Func_ST_ENDPOINT n211;
   Func_ST_ENVELOPE n212;
   Func_ST_EQUALS n213;
   Func_ST_EXTENT n214;
   Func_ST_EXTENT3D n215;
   Func_ST_EXTERIORRING n216;
   Func_ST_FACTOR n217;
   Func_ST_FIND_EXTENT n218;
   Func_ST_FORCERHR n219;
   Func_ST_FORCE_2D n220;
   Func_ST_FORCE_3D n221;
   Func_ST_FORCE_3DM n222;
   Func_ST_FORCE_3DZ n223;
   Func_ST_FORCE_4D n224;
   Func_ST_FORCE_COLLECTION n225;
   Func_ST_GEOMETRYTYPE n226;
   Func_ST_GEOGFROMTEXT n227;
   Func_ST_GEOGFROMWKB n228;
   Func_ST_GEOGRAPHYFROMTEXT n229;
   Func_ST_GEOHASH n230;
   Func_ST_GEOMCOLLFROMTEXT n231;
   Func_ST_GEOMCOLLFROMWKB n232;
   Func_ST_GEOMFROMEWKB n233;
   Func_ST_GEOMFROMEWKT n234;
   Func_ST_GEOMFROMGML n235;
   Func_ST_GEOMFROMKML n236;
   Func_ST_GEOMFROMTEXT n237;
   Func_ST_GEOMFROMWKB n238;
   Func_ST_GMLTOSQL n239;
   Func_ST_HASARC n240;
   Func_ST_HAUSDORFFDISTANCE n241;
   Func_ST_HEIGHT n242;
   Func_ST_INTERIORRINGN n243;
   Func_ST_INTERSECTION n244;
   Func_ST_INTERSECTS n245;
   Func_ST_ISCLOSED n246;
   Func_ST_ISEMPTY n247;
   Func_ST_ISRING n248;
   Func_ST_ISSIMPLE n249;
   Func_ST_ISVALID n250;
   Func_ST_ISVALIDREASON n251;
   Func_ST_LENGTH2D n252;
   Func_ST_LENGTH2D_SPHEROID n253;
   Func_ST_LENGTH3D n254;
   Func_ST_LENGTH3D_SPHEROID n255;
   Func_ST_LENGTH_SPHEROID n256;
   Func_ST_LINECROSSINGDIRECTION n257;
   Func_ST_LINEFROMMULTIPOINT n258;
   Func_ST_LINEFROMTEXT n259;
   Func_ST_LINEFROMWKB n260;
   Func_ST_LINEMERGE n261;
   Func_ST_LINESTRINGFROMWKB n262;
   Func_ST_LINETOCURVE n263;
   Func_ST_LINE_INTERPOLATE_POINT n264;
   Func_ST_LINE_LOCATE_POINT n265;
   Func_ST_LINE_SUBSTRING n266;
   Func_ST_LOCATEBETWEENELEVATIONS n267;
   Func_ST_LOCATE_ALONG_MEASURE n268;
   Func_ST_LOCATE_BETWEEN_MEASURES n269;
   Func_ST_LONGESTLINE n270;
   Func_ST_M n271;
   Func_ST_MAKEENVELOPE n272;
   Func_ST_MAKEPOINT n273;
   Func_ST_MAKEPOINTM n274;
   Func_ST_MAKEPOLYGON n275;
   Func_ST_MAXDISTANCE n276;
   Func_ST_MEMCOLLECT n277;
   Func_ST_MEM_SIZE n278;
   Func_ST_MINIMUMBOUNDINGCIRCLE n279;
   Func_ST_MLINEFROMTEXT n280;
   Func_ST_MLINEFROMWKB n281;
   Func_ST_MPOINTFROMTEXT n282;
   Func_ST_MPOINTFROMWKB n283;
   Func_ST_MPOLYFROMTEXT n284;
   Func_ST_MPOLYFROMWKB n285;
   Func_ST_MULTI n286;
   Func_ST_MULTILINEFROMWKB n287;
   Func_ST_MULTILINESTRINGFROMTEXT n288;
   Func_ST_MULTIPOINTFROMTEXT n289;
   Func_ST_MULTIPOINTFROMWKB n290;
   Func_ST_MULTIPOLYFROMWKB n291;
   Func_ST_MULTIPOLYGONFROMTEXT n292;
   Func_ST_NDIMS n293;
   Func_ST_NPOINTS n294;
   Func_ST_NRINGS n295;
   Func_ST_NUMGEOMETRIES n296;
   Func_ST_NUMINTERIORRING n297;
   Func_ST_NUMINTERIORRINGS n298;
   Func_ST_NUMPOINTS n299;
   Func_ST_ORDERINGEQUALS n300;
   Func_ST_OVERLAPS n301;
   Func_ST_PERIMETER n302;
   Func_ST_PERIMETER2D n303;
   Func_ST_PERIMETER3D n304;
   Func_ST_POINT n305;
   Func_ST_POINTFROMTEXT n306;
   Func_ST_POINTFROMWKB n307;
   Func_ST_POINTN n308;
   Func_ST_POINTONSURFACE n309;
   Func_ST_POINT_INSIDE_CIRCLE n310;
   Func_ST_POLYFROMTEXT n311;
   Func_ST_POLYFROMWKB n312;
   Func_ST_POLYGON n313;
   Func_ST_POLYGONFROMTEXT n314;
   Func_ST_POLYGONFROMWKB n315;
   Func_ST_POSTGIS_GIST_JOINSEL n316;
   Func_ST_POSTGIS_GIST_SEL n317;
   Func_ST_RELATE n318;
   Func_ST_REMOVEPOINT n319;
   Func_ST_REVERSE n320;
   Func_ST_ROTATEX n321;
   Func_ST_ROTATEY n322;
   Func_ST_ROTATEZ n323;
   Func_ST_SCALE n324;
   Func_ST_SEGMENTIZE n325;
   Func_ST_SETFACTOR n326;
   Func_ST_SETPOINT n327;
   Func_ST_SETSRID n328;
   Func_ST_SHIFT_LONGITUDE n329;
   Func_ST_SHORTESTLINE n330;
   Func_ST_SIMPLIFY n331;
   Func_ST_SIMPLIFYPRESERVETOPOLOGY n332;
   Func_ST_SNAPTOGRID n333;
   Func_ST_SRID n334;
   Func_ST_STARTPOINT n335;
   Func_ST_SUMMARY n336;
   Func_ST_SYMDIFFERENCE n337;
   Func_ST_SYMMETRICDIFFERENCE n338;
   Func_ST_TEXT n339;
   Func_ST_TOUCHES n340;
   Func_ST_TRANSLATE n341;
   Func_ST_TRANSSCALE n342;
   Func_ST_WIDTH n343;
   Func_ST_WITHIN n344;
   Func_ST_WKBTOSQL n345;
   Func_ST_WKTTOSQL n346;
   Func_ST_X n347;
   Func_ST_Y n348;
   Func_ST_Z n349;
   Func_ST_ZMFLAG n350;
   Func_ST_BOX2D n351;
   Func_ST_BOX3D n352;
   Func_ST_GEOMETRY n353;
   Func_ST_GEOMETRYN n354;
   Func_POSTGIS_DROPBBOX n355;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      n1=Func_Trunc(prn)
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=Func_Date(prn)
      { n0 = new NodeChoice(n2, 1); }
   |
      LOOKAHEAD(2)
      n3=Func_Time(prn)
      { n0 = new NodeChoice(n3, 2); }
   |
      LOOKAHEAD(2)
      n4=Func_TimeStamp(prn)
      { n0 = new NodeChoice(n4, 3); }
   |
      LOOKAHEAD(2)
      n5=Func_CurrentDate(prn)
      { n0 = new NodeChoice(n5, 4); }
   |
      LOOKAHEAD(2)
      n6=Func_PgCurrentDate(prn)
      { n0 = new NodeChoice(n6, 5); }
   |
      LOOKAHEAD(2)
      n7=Func_CurrentTime(prn)
      { n0 = new NodeChoice(n7, 6); }
   |
      LOOKAHEAD(2)
      n8=Func_PgCurrentTime(prn)
      { n0 = new NodeChoice(n8, 7); }
   |
      LOOKAHEAD(2)
      n9=Func_PgCurrentTimeStamp(prn)
      { n0 = new NodeChoice(n9, 8); }
   |
      LOOKAHEAD(2)
      n10=Func_Year(prn)
      { n0 = new NodeChoice(n10, 9); }
   |
      LOOKAHEAD(2)
      n11=Func_Month(prn)
      { n0 = new NodeChoice(n11, 10); }
   |
      LOOKAHEAD(2)
      n12=Func_Hour(prn)
      { n0 = new NodeChoice(n12, 11); }
   |
      LOOKAHEAD(2)
      n13=Func_Minute(prn)
      { n0 = new NodeChoice(n13, 12); }
   |
      LOOKAHEAD(2)
      n14=Func_Second(prn)
      { n0 = new NodeChoice(n14, 13); }
   |
      LOOKAHEAD(2)
      n15=Func_AddDate(prn)
      { n0 = new NodeChoice(n15, 14); }
   |
      LOOKAHEAD(2)
      n16=Func_AddTime(prn)
      { n0 = new NodeChoice(n16, 15); }
   |
      LOOKAHEAD(2)
      n17=Func_DateDiff(prn)
      { n0 = new NodeChoice(n17, 16); }
   |
      LOOKAHEAD(4)
      n18=Func_Day(prn)
      { n0 = new NodeChoice(n18, 17); }
   |
      LOOKAHEAD(2)
      n19=Func_DayName(prn)
      { n0 = new NodeChoice(n19, 18); }
   |
      LOOKAHEAD(2)
      n20=Func_DayOfMonth(prn)
      { n0 = new NodeChoice(n20, 19); }
   |
      LOOKAHEAD(2)
      n21=Func_DayOfWeek(prn)
      { n0 = new NodeChoice(n21, 20); }
   |
      LOOKAHEAD(2)
      n22=Func_DayOfYear(prn)
      { n0 = new NodeChoice(n22, 21); }
   |
      LOOKAHEAD(2)
      n23=Func_MonthName(prn)
      { n0 = new NodeChoice(n23, 22); }
   |
      LOOKAHEAD(2)
      n24=Func_SubDate(prn)
      { n0 = new NodeChoice(n24, 23); }
   |
      LOOKAHEAD(2)
      n25=Func_SubTime(prn)
      { n0 = new NodeChoice(n25, 24); }
   |
      LOOKAHEAD(2)
      n26=Func_WeekOfYear(prn)
      { n0 = new NodeChoice(n26, 25); }
   |
      LOOKAHEAD(2)
      n27=Func_Now(prn)
      { n0 = new NodeChoice(n27, 26); }
   |
      LOOKAHEAD(2)
      n28=Func_Abs(prn)
      { n0 = new NodeChoice(n28, 27); }
   |
      LOOKAHEAD(2)
      n29=Func_Ceil(prn)
      { n0 = new NodeChoice(n29, 28); }
   |
      LOOKAHEAD(2)
      n30=Func_Ceiling(prn)
      { n0 = new NodeChoice(n30, 29); }
   |
      LOOKAHEAD(2)
      n31=Func_Exp(prn)
      { n0 = new NodeChoice(n31, 30); }
   |
      LOOKAHEAD(2)
      n32=Func_Floor(prn)
      { n0 = new NodeChoice(n32, 31); }
   |
      LOOKAHEAD(2)
      n33=Func_LN(prn)
      { n0 = new NodeChoice(n33, 32); }
   |
      LOOKAHEAD(2)
      n34=Func_Log(prn)
      { n0 = new NodeChoice(n34, 33); }
   |
      LOOKAHEAD(2)
      n35=Func_PI(prn)
      { n0 = new NodeChoice(n35, 34); }
   |
      LOOKAHEAD(2)
      n36=Func_Power(prn)
      { n0 = new NodeChoice(n36, 35); }
   |
      LOOKAHEAD(2)
      n37=Func_Round(prn)
      { n0 = new NodeChoice(n37, 36); }
   |
      LOOKAHEAD(2)
      n38=Func_Sign(prn)
      { n0 = new NodeChoice(n38, 37); }
   |
      LOOKAHEAD(2)
      n39=Func_TAsin(prn)
      { n0 = new NodeChoice(n39, 38); }
   |
      LOOKAHEAD(2)
      n40=Func_TAtan(prn)
      { n0 = new NodeChoice(n40, 39); }
   |
      LOOKAHEAD(2)
      n41=Func_TCos(prn)
      { n0 = new NodeChoice(n41, 40); }
   |
      LOOKAHEAD(2)
      n42=Func_TCot(prn)
      { n0 = new NodeChoice(n42, 41); }
   |
      LOOKAHEAD(2)
      n43=Func_TDegree(prn)
      { n0 = new NodeChoice(n43, 42); }
   |
      LOOKAHEAD(2)
      n44=Func_Radians(prn)
      { n0 = new NodeChoice(n44, 43); }
   |
      LOOKAHEAD(2)
      n45=Func_Sin(prn)
      { n0 = new NodeChoice(n45, 44); }
   |
      LOOKAHEAD(2)
      n46=Func_Tan(prn)
      { n0 = new NodeChoice(n46, 45); }
   |
      LOOKAHEAD(2)
      n47=Func_Avg(prn)
      { n0 = new NodeChoice(n47, 46); }
   |
      LOOKAHEAD(2)
      n48=Func_Count(prn)
      { n0 = new NodeChoice(n48, 47); }
   |
      LOOKAHEAD(2)
      n49=Func_Max(prn)
      { n0 = new NodeChoice(n49, 48); }
   |
      LOOKAHEAD(2)
      n50=Func_Min(prn)
      { n0 = new NodeChoice(n50, 49); }
   |
      LOOKAHEAD(2)
      n51=Func_Stdev(prn)
      { n0 = new NodeChoice(n51, 50); }
   |
      LOOKAHEAD(2)
      n52=Func_Sum(prn)
      { n0 = new NodeChoice(n52, 51); }
   |
      LOOKAHEAD(2)
      n53=Func_Variance(prn)
      { n0 = new NodeChoice(n53, 52); }
   |
      LOOKAHEAD(2)
      n54=Func_Ascii(prn)
      { n0 = new NodeChoice(n54, 53); }
   |
      LOOKAHEAD(2)
      n55=Func_Index(prn)
      { n0 = new NodeChoice(n55, 54); }
   |
      LOOKAHEAD(2)
      n56=Func_Left(prn)
      { n0 = new NodeChoice(n56, 55); }
   |
      LOOKAHEAD(2)
      n57=Func_Length(prn)
      { n0 = new NodeChoice(n57, 56); }
   |
      LOOKAHEAD(2)
      n58=Func_Lower(prn)
      { n0 = new NodeChoice(n58, 57); }
   |
      LOOKAHEAD(2)
      n59=Func_Lpad(prn)
      { n0 = new NodeChoice(n59, 58); }
   |
      LOOKAHEAD(2)
      n60=Func_Rpad(prn)
      { n0 = new NodeChoice(n60, 59); }
   |
      LOOKAHEAD(2)
      n61=Func_Ltrim(prn)
      { n0 = new NodeChoice(n61, 60); }
   |
      LOOKAHEAD(2)
      n62=Func_Replace(prn)
      { n0 = new NodeChoice(n62, 61); }
   |
      LOOKAHEAD(2)
      n63=Func_Right(prn)
      { n0 = new NodeChoice(n63, 62); }
   |
      LOOKAHEAD(2)
      n64=Func_Rtrim(prn)
      { n0 = new NodeChoice(n64, 63); }
   |
      LOOKAHEAD(2)
      n65=Func_SubStr(prn)
      { n0 = new NodeChoice(n65, 64); }
   |
      LOOKAHEAD(2)
      n66=Func_Trim(prn)
      { n0 = new NodeChoice(n66, 65); }
   |
      LOOKAHEAD(2)
      n67=Func_Upper(prn)
      { n0 = new NodeChoice(n67, 66); }
   |
      LOOKAHEAD(2)
      n68=Func_Database(prn)
      { n0 = new NodeChoice(n68, 67); }
   |
      LOOKAHEAD(2)
      n69=Func_Value(prn)
      { n0 = new NodeChoice(n69, 68); }
   |
      LOOKAHEAD(2)
      n70=Func_Version(prn)
      { n0 = new NodeChoice(n70, 69); }
   |
      LOOKAHEAD(2)
      n71=Func_Case(prn)
      { n0 = new NodeChoice(n71, 70); }
   |
      LOOKAHEAD(2)
      n72=Func_TACos(prn)
      { n0 = new NodeChoice(n72, 71); }
   |
      LOOKAHEAD(2)
      n73=Func_Log10(prn)
      { n0 = new NodeChoice(n73, 72); }
   |
      LOOKAHEAD(2)
      n74=Func_Mod(prn)
      { n0 = new NodeChoice(n74, 73); }
   |
      LOOKAHEAD(2)
      n75=Func_Sqrt(prn)
      { n0 = new NodeChoice(n75, 74); }
   |
      LOOKAHEAD(2)
      n76=Func_Least(prn)
      { n0 = new NodeChoice(n76, 75); }
   |
      LOOKAHEAD(2)
      n77=Func_TCosh(prn)
      { n0 = new NodeChoice(n77, 76); }
   |
      LOOKAHEAD(2)
      n78=Func_Float(prn)
      { n0 = new NodeChoice(n78, 77); }
   |
      LOOKAHEAD(2)
      n79=Func_Greatest(prn)
      { n0 = new NodeChoice(n79, 78); }
   |
      LOOKAHEAD(2)
      n80=Func_TATan2(prn)
      { n0 = new NodeChoice(n80, 79); }
   |
      LOOKAHEAD(2)
      n81=Func_TATn2(prn)
      { n0 = new NodeChoice(n81, 80); }
   |
      LOOKAHEAD(2)
      n82=Func_SoundEx(prn)
      { n0 = new NodeChoice(n82, 81); }
   |
      LOOKAHEAD(2)
      n83=Func_InitCap(prn)
      { n0 = new NodeChoice(n83, 82); }
   |
      LOOKAHEAD(2)
      n84=Func_LFill(prn)
      { n0 = new NodeChoice(n84, 83); }
   |
      LOOKAHEAD(2)
      n85=Func_MapChar(prn)
      { n0 = new NodeChoice(n85, 84); }
   |
      LOOKAHEAD(2)
      n86=Func_NUM(prn)
      { n0 = new NodeChoice(n86, 85); }
   |
      LOOKAHEAD(2)
      n87=Func_Concat(prn)
      { n0 = new NodeChoice(n87, 86); }
   |
      LOOKAHEAD(2)
      n88=Func_User(prn)
      { n0 = new NodeChoice(n88, 87); }
   |
      LOOKAHEAD(2)
      n89=Func_Cast(prn)
      { n0 = new NodeChoice(n89, 88); }
   |
      LOOKAHEAD(2)
      n90=Func_TimeOfDay(prn)
      { n0 = new NodeChoice(n90, 89); }
   |
      LOOKAHEAD(3)
      n91=Func_Custom(prn)
      { n0 = new NodeChoice(n91, 90); }
   |
      LOOKAHEAD(2)
      n92=Func_IsFinite(prn)
      { n0 = new NodeChoice(n92, 91); }
   |
      LOOKAHEAD(2)
      n93=Func_Extract(prn)
      { n0 = new NodeChoice(n93, 92); }
   |
      LOOKAHEAD(2)
      n94=Func_DateTrunc(prn)
      { n0 = new NodeChoice(n94, 93); }
   |
      LOOKAHEAD(2)
      n95=Func_DatePart(prn)
      { n0 = new NodeChoice(n95, 94); }
   |
      LOOKAHEAD(2)
      n96=Func_Age(prn)
      { n0 = new NodeChoice(n96, 95); }
   |
      LOOKAHEAD(2)
      n97=Func_LocalTime(prn)
      { n0 = new NodeChoice(n97, 96); }
   |
      LOOKAHEAD(2)
      n98=Func_LocalTimeStamp(prn)
      { n0 = new NodeChoice(n98, 97); }
   |
      LOOKAHEAD(2)
      n99=Func_BitLength(prn)
      { n0 = new NodeChoice(n99, 98); }
   |
      LOOKAHEAD(2)
      n100=Func_CharLength(prn)
      { n0 = new NodeChoice(n100, 99); }
   |
      LOOKAHEAD(2)
      n101=Func_Convert(prn)
      { n0 = new NodeChoice(n101, 100); }
   |
      LOOKAHEAD(2)
      n102=Func_OctetLength(prn)
      { n0 = new NodeChoice(n102, 101); }
   |
      LOOKAHEAD(2)
      n103=Func_Overlay(prn)
      { n0 = new NodeChoice(n103, 102); }
   |
      LOOKAHEAD(2)
      n104=Func_Position(prn)
      { n0 = new NodeChoice(n104, 103); }
   |
      LOOKAHEAD(2)
      n105=Func_Substring(prn)
      { n0 = new NodeChoice(n105, 104); }
   |
      LOOKAHEAD(2)
      n106=Func_ToHex(prn)
      { n0 = new NodeChoice(n106, 105); }
   |
      LOOKAHEAD(2)
      n107=Func_QuoteLiteral(prn)
      { n0 = new NodeChoice(n107, 106); }
   |
      LOOKAHEAD(2)
      n108=Func_QuoteIdent(prn)
      { n0 = new NodeChoice(n108, 107); }
   |
      LOOKAHEAD(2)
      n109=Func_Md5(prn)
      { n0 = new NodeChoice(n109, 108); }
   |
      LOOKAHEAD(2)
      n110=Func_Chr(prn)
      { n0 = new NodeChoice(n110, 109); }
   |
      LOOKAHEAD(2)
      n111=Func_PgClientEncoding(prn)
      { n0 = new NodeChoice(n111, 110); }
   |
      LOOKAHEAD(2)
      n112=Func_Translate(prn)
      { n0 = new NodeChoice(n112, 111); }
   |
      LOOKAHEAD(2)
      n113=Func_ToAscii(prn)
      { n0 = new NodeChoice(n113, 112); }
   |
      LOOKAHEAD(2)
      n114=Func_StrPos(prn)
      { n0 = new NodeChoice(n114, 113); }
   |
      LOOKAHEAD(2)
      n115=Func_SplitPart(prn)
      { n0 = new NodeChoice(n115, 114); }
   |
      LOOKAHEAD(2)
      n116=Func_Repeat(prn)
      { n0 = new NodeChoice(n116, 115); }
   |
      LOOKAHEAD(2)
      n117=Func_Encode(prn)
      { n0 = new NodeChoice(n117, 116); }
   |
      LOOKAHEAD(2)
      n118=Func_Decode(prn)
      { n0 = new NodeChoice(n118, 117); }
   |
      LOOKAHEAD(2)
      n119=Func_Btrim(prn)
      { n0 = new NodeChoice(n119, 118); }
   |
      LOOKAHEAD(2)
      n120=Func_Width_bucket(prn)
      { n0 = new NodeChoice(n120, 119); }
   |
      LOOKAHEAD(2)
      n121=Func_Setseed(prn)
      { n0 = new NodeChoice(n121, 120); }
   |
      LOOKAHEAD(2)
      n122=Func_Random(prn)
      { n0 = new NodeChoice(n122, 121); }
   |
      LOOKAHEAD(2)
      n123=Func_Cbrt(prn)
      { n0 = new NodeChoice(n123, 122); }
   |
      LOOKAHEAD(2)
      n124=Func_GetBit(prn)
      { n0 = new NodeChoice(n124, 123); }
   |
      LOOKAHEAD(2)
      n125=Func_GetByte(prn)
      { n0 = new NodeChoice(n125, 124); }
   |
      LOOKAHEAD(2)
      n126=Func_ToDate(prn)
      { n0 = new NodeChoice(n126, 125); }
   |
      LOOKAHEAD(2)
      n127=Func_ClockTimeStamp(prn)
      { n0 = new NodeChoice(n127, 126); }
   |
      LOOKAHEAD(2)
      n128=Func_StatementTimeStamp(prn)
      { n0 = new NodeChoice(n128, 127); }
   |
      LOOKAHEAD(2)
      n129=Func_TransactionTimeStamp(prn)
      { n0 = new NodeChoice(n129, 128); }
   |
      LOOKAHEAD(2)
      n130=Func_NullIf(prn)
      { n0 = new NodeChoice(n130, 129); }
   |
      LOOKAHEAD(2)
      n131=Func_SetBit(prn)
      { n0 = new NodeChoice(n131, 130); }
   |
      LOOKAHEAD(2)
      n132=Func_SetByte(prn)
      { n0 = new NodeChoice(n132, 131); }
   |
      LOOKAHEAD(2)
      n133=Func_ToChar(prn)
      { n0 = new NodeChoice(n133, 132); }
   |
      LOOKAHEAD(2)
      n134=Func_ToNumber(prn)
      { n0 = new NodeChoice(n134, 133); }
   |
      LOOKAHEAD(2)
      n135=Func_ToTimestamp(prn)
      { n0 = new NodeChoice(n135, 134); }
   |
      LOOKAHEAD(2)
      n136=Func_AddMonths(prn)
      { n0 = new NodeChoice(n136, 135); }
   |
      LOOKAHEAD(2)
      n137=Func_JustifyDays(prn)
      { n0 = new NodeChoice(n137, 136); }
   |
      LOOKAHEAD(2)
      n138=Func_JustifyHours(prn)
      { n0 = new NodeChoice(n138, 137); }
   |
      LOOKAHEAD(2)
      n139=Func_JustifyInterval(prn)
      { n0 = new NodeChoice(n139, 138); }
   |
      LOOKAHEAD(2)
      n140=Func_LastDay(prn)
      { n0 = new NodeChoice(n140, 139); }
   |
      LOOKAHEAD(2)
      n141=Func_MonthsBetween(prn)
      { n0 = new NodeChoice(n141, 140); }
   |
      LOOKAHEAD(2)
      n142=Func_NextDay(prn)
      { n0 = new NodeChoice(n142, 141); }
   |
      LOOKAHEAD(2)
      n143=Func_CurrentDatabase(prn)
      { n0 = new NodeChoice(n143, 142); }
   |
      LOOKAHEAD(2)
      n144=Func_CurrentSchema(prn)
      { n0 = new NodeChoice(n144, 143); }
   |
      LOOKAHEAD(2)
      n145=Func_BitAnd(prn)
      { n0 = new NodeChoice(n145, 144); }
   |
      LOOKAHEAD(2)
      n146=Func_BitOr(prn)
      { n0 = new NodeChoice(n146, 145); }
   |
      LOOKAHEAD(2)
      n147=Func_BoolAnd(prn)
      { n0 = new NodeChoice(n147, 146); }
   |
      LOOKAHEAD(2)
      n148=Func_BoolOr(prn)
      { n0 = new NodeChoice(n148, 147); }
   |
      LOOKAHEAD(2)
      n149=Func_CorrCov(prn)
      { n0 = new NodeChoice(n149, 148); }
   |
      LOOKAHEAD(2)
      n150=Func_Regr(prn)
      { n0 = new NodeChoice(n150, 149); }
   |
      LOOKAHEAD(2)
      n151=Func_RegexReplace(prn)
      { n0 = new NodeChoice(n151, 150); }
   |
      LOOKAHEAD(2)
      n152=Func_Coalesce(prn)
      { n0 = new NodeChoice(n152, 151); }
   |
      LOOKAHEAD(2)
      n153=Func_Abbrev(prn)
      { n0 = new NodeChoice(n153, 152); }
   |
      LOOKAHEAD(2)
      n154=Func_Broadcast(prn)
      { n0 = new NodeChoice(n154, 153); }
   |
      LOOKAHEAD(2)
      n155=Func_Family(prn)
      { n0 = new NodeChoice(n155, 154); }
   |
      LOOKAHEAD(2)
      n156=Func_Host(prn)
      { n0 = new NodeChoice(n156, 155); }
   |
      LOOKAHEAD(2)
      n157=Func_Hostmask(prn)
      { n0 = new NodeChoice(n157, 156); }
   |
      LOOKAHEAD(2)
      n158=Func_Masklen(prn)
      { n0 = new NodeChoice(n158, 157); }
   |
      LOOKAHEAD(2)
      n159=Func_Netmask(prn)
      { n0 = new NodeChoice(n159, 158); }
   |
      LOOKAHEAD(2)
      n160=Func_Network(prn)
      { n0 = new NodeChoice(n160, 159); }
   |
      LOOKAHEAD(2)
      n161=Func_Set_Masklen(prn)
      { n0 = new NodeChoice(n161, 160); }
   |
      LOOKAHEAD(2)
      n162=Func_Text(prn)
      { n0 = new NodeChoice(n162, 161); }
   |
      LOOKAHEAD(2)
      n163=Func_ST_AsText(prn)
      { n0 = new NodeChoice(n163, 162); }
   |
      LOOKAHEAD(2)
      n164=Func_ST_Transform(prn)
      { n0 = new NodeChoice(n164, 163); }
   |
      LOOKAHEAD(2)
      n165=Func_ST_Distance(prn)
      { n0 = new NodeChoice(n165, 164); }
   |
      LOOKAHEAD(2)
      n166=Func_ST_DWithin(prn)
      { n0 = new NodeChoice(n166, 165); }
   |
      LOOKAHEAD(2)
      n167=Func_ST_Length(prn)
      { n0 = new NodeChoice(n167, 166); }
   |
      LOOKAHEAD(2)
      n168=Func_ST_Area(prn)
      { n0 = new NodeChoice(n168, 167); }
   |
      LOOKAHEAD(2)
      n169=Func_ST_Boundary(prn)
      { n0 = new NodeChoice(n169, 168); }
   |
      LOOKAHEAD(2)
      n170=Func_ST_Buffer(prn)
      { n0 = new NodeChoice(n170, 169); }
   |
      LOOKAHEAD(2)
      n171=Func_ST_Centroid(prn)
      { n0 = new NodeChoice(n171, 170); }
   |
      LOOKAHEAD(2)
      n172=Func_ST_AsBinary(prn)
      { n0 = new NodeChoice(n172, 171); }
   |
      LOOKAHEAD(2)
      n173=Func_ST_ADDMEASURE(prn)
      { n0 = new NodeChoice(n173, 172); }
   |
      LOOKAHEAD(2)
      n174=Func_ST_ADDPOINT(prn)
      { n0 = new NodeChoice(n174, 173); }
   |
      LOOKAHEAD(2)
      n175=Func_ST_AFFINE(prn)
      { n0 = new NodeChoice(n175, 174); }
   |
      LOOKAHEAD(2)
      n176=Func_ST_AREA2D(prn)
      { n0 = new NodeChoice(n176, 175); }
   |
      LOOKAHEAD(2)
      n177=Func_ST_ASEWKB(prn)
      { n0 = new NodeChoice(n177, 176); }
   |
      LOOKAHEAD(2)
      n178=Func_ST_ASEWKT(prn)
      { n0 = new NodeChoice(n178, 177); }
   |
      LOOKAHEAD(2)
      n179=Func_ST_ASGEOJSON(prn)
      { n0 = new NodeChoice(n179, 178); }
   |
      LOOKAHEAD(2)
      n180=Func_ST_ASGML(prn)
      { n0 = new NodeChoice(n180, 179); }
   |
      LOOKAHEAD(2)
      n181=Func_ST_ASHEXEWKB(prn)
      { n0 = new NodeChoice(n181, 180); }
   |
      LOOKAHEAD(2)
      n182=Func_ST_ASKML(prn)
      { n0 = new NodeChoice(n182, 181); }
   |
      LOOKAHEAD(2)
      n183=Func_ST_ASSVG(prn)
      { n0 = new NodeChoice(n183, 182); }
   |
      LOOKAHEAD(2)
      n184=Func_ST_AZIMUTH(prn)
      { n0 = new NodeChoice(n184, 183); }
   |
      LOOKAHEAD(2)
      n185=Func_ST_BDMPOLYFROMTEXT(prn)
      { n0 = new NodeChoice(n185, 184); }
   |
      LOOKAHEAD(2)
      n186=Func_ST_BDPOLYFROMTEXT(prn)
      { n0 = new NodeChoice(n186, 185); }
   |
      LOOKAHEAD(2)
      n187=Func_ST_BUILDAREA(prn)
      { n0 = new NodeChoice(n187, 186); }
   |
      LOOKAHEAD(2)
      n188=Func_ST_BYTEA(prn)
      { n0 = new NodeChoice(n188, 187); }
   |
      LOOKAHEAD(2)
      n189=Func_ST_CHIP_IN(prn)
      { n0 = new NodeChoice(n189, 188); }
   |
      LOOKAHEAD(2)
      n190=Func_ST_CHIP_OUT(prn)
      { n0 = new NodeChoice(n190, 189); }
   |
      LOOKAHEAD(2)
      n191=Func_ST_CLOSESTPOINT(prn)
      { n0 = new NodeChoice(n191, 190); }
   |
      LOOKAHEAD(2)
      n192=Func_ST_COLLECT(prn)
      { n0 = new NodeChoice(n192, 191); }
   |
      LOOKAHEAD(2)
      n193=Func_ST_COLLECTIONEXTRACT(prn)
      { n0 = new NodeChoice(n193, 192); }
   |
      LOOKAHEAD(2)
      n194=Func_ST_COMBINE_BBOX(prn)
      { n0 = new NodeChoice(n194, 193); }
   |
      LOOKAHEAD(2)
      n195=Func_ST_COMPRESSION(prn)
      { n0 = new NodeChoice(n195, 194); }
   |
      LOOKAHEAD(2)
      n196=Func_ST_CONTAINS(prn)
      { n0 = new NodeChoice(n196, 195); }
   |
      LOOKAHEAD(2)
      n197=Func_ST_CONTAINSPROPERLY(prn)
      { n0 = new NodeChoice(n197, 196); }
   |
      LOOKAHEAD(2)
      n198=Func_ST_CONVEXHULL(prn)
      { n0 = new NodeChoice(n198, 197); }
   |
      LOOKAHEAD(2)
      n199=Func_ST_COORDDIM(prn)
      { n0 = new NodeChoice(n199, 198); }
   |
      LOOKAHEAD(2)
      n200=Func_ST_COVEREDBY(prn)
      { n0 = new NodeChoice(n200, 199); }
   |
      LOOKAHEAD(2)
      n201=Func_ST_COVERS(prn)
      { n0 = new NodeChoice(n201, 200); }
   |
      LOOKAHEAD(2)
      n202=Func_ST_CROSSES(prn)
      { n0 = new NodeChoice(n202, 201); }
   |
      LOOKAHEAD(2)
      n203=Func_ST_CURVETOLINE(prn)
      { n0 = new NodeChoice(n203, 202); }
   |
      LOOKAHEAD(2)
      n204=Func_ST_DATATYPE(prn)
      { n0 = new NodeChoice(n204, 203); }
   |
      LOOKAHEAD(2)
      n205=Func_ST_DFULLYWITHIN(prn)
      { n0 = new NodeChoice(n205, 204); }
   |
      LOOKAHEAD(2)
      n206=Func_ST_DIFFERENCE(prn)
      { n0 = new NodeChoice(n206, 205); }
   |
      LOOKAHEAD(2)
      n207=Func_ST_DIMENSION(prn)
      { n0 = new NodeChoice(n207, 206); }
   |
      LOOKAHEAD(2)
      n208=Func_ST_DISJOINT(prn)
      { n0 = new NodeChoice(n208, 207); }
   |
      LOOKAHEAD(2)
      n209=Func_ST_DISTANCE_SPHERE(prn)
      { n0 = new NodeChoice(n209, 208); }
   |
      LOOKAHEAD(2)
      n210=Func_ST_DISTANCE_SPHEROID(prn)
      { n0 = new NodeChoice(n210, 209); }
   |
      LOOKAHEAD(2)
      n211=Func_ST_ENDPOINT(prn)
      { n0 = new NodeChoice(n211, 210); }
   |
      LOOKAHEAD(2)
      n212=Func_ST_ENVELOPE(prn)
      { n0 = new NodeChoice(n212, 211); }
   |
      LOOKAHEAD(2)
      n213=Func_ST_EQUALS(prn)
      { n0 = new NodeChoice(n213, 212); }
   |
      LOOKAHEAD(2)
      n214=Func_ST_EXTENT(prn)
      { n0 = new NodeChoice(n214, 213); }
   |
      LOOKAHEAD(2)
      n215=Func_ST_EXTENT3D(prn)
      { n0 = new NodeChoice(n215, 214); }
   |
      LOOKAHEAD(2)
      n216=Func_ST_EXTERIORRING(prn)
      { n0 = new NodeChoice(n216, 215); }
   |
      LOOKAHEAD(2)
      n217=Func_ST_FACTOR(prn)
      { n0 = new NodeChoice(n217, 216); }
   |
      LOOKAHEAD(2)
      n218=Func_ST_FIND_EXTENT(prn)
      { n0 = new NodeChoice(n218, 217); }
   |
      LOOKAHEAD(2)
      n219=Func_ST_FORCERHR(prn)
      { n0 = new NodeChoice(n219, 218); }
   |
      LOOKAHEAD(2)
      n220=Func_ST_FORCE_2D(prn)
      { n0 = new NodeChoice(n220, 219); }
   |
      LOOKAHEAD(2)
      n221=Func_ST_FORCE_3D(prn)
      { n0 = new NodeChoice(n221, 220); }
   |
      LOOKAHEAD(2)
      n222=Func_ST_FORCE_3DM(prn)
      { n0 = new NodeChoice(n222, 221); }
   |
      LOOKAHEAD(2)
      n223=Func_ST_FORCE_3DZ(prn)
      { n0 = new NodeChoice(n223, 222); }
   |
      LOOKAHEAD(2)
      n224=Func_ST_FORCE_4D(prn)
      { n0 = new NodeChoice(n224, 223); }
   |
      LOOKAHEAD(2)
      n225=Func_ST_FORCE_COLLECTION(prn)
      { n0 = new NodeChoice(n225, 224); }
   |
      LOOKAHEAD(2)
      n226=Func_ST_GEOMETRYTYPE(prn)
      { n0 = new NodeChoice(n226, 225); }
   |
      LOOKAHEAD(2)
      n227=Func_ST_GEOGFROMTEXT(prn)
      { n0 = new NodeChoice(n227, 226); }
   |
      LOOKAHEAD(2)
      n228=Func_ST_GEOGFROMWKB(prn)
      { n0 = new NodeChoice(n228, 227); }
   |
      LOOKAHEAD(2)
      n229=Func_ST_GEOGRAPHYFROMTEXT(prn)
      { n0 = new NodeChoice(n229, 228); }
   |
      LOOKAHEAD(2)
      n230=Func_ST_GEOHASH(prn)
      { n0 = new NodeChoice(n230, 229); }
   |
      LOOKAHEAD(2)
      n231=Func_ST_GEOMCOLLFROMTEXT(prn)
      { n0 = new NodeChoice(n231, 230); }
   |
      LOOKAHEAD(2)
      n232=Func_ST_GEOMCOLLFROMWKB(prn)
      { n0 = new NodeChoice(n232, 231); }
   |
      LOOKAHEAD(2)
      n233=Func_ST_GEOMFROMEWKB(prn)
      { n0 = new NodeChoice(n233, 232); }
   |
      LOOKAHEAD(2)
      n234=Func_ST_GEOMFROMEWKT(prn)
      { n0 = new NodeChoice(n234, 233); }
   |
      LOOKAHEAD(2)
      n235=Func_ST_GEOMFROMGML(prn)
      { n0 = new NodeChoice(n235, 234); }
   |
      LOOKAHEAD(2)
      n236=Func_ST_GEOMFROMKML(prn)
      { n0 = new NodeChoice(n236, 235); }
   |
      LOOKAHEAD(2)
      n237=Func_ST_GEOMFROMTEXT(prn)
      { n0 = new NodeChoice(n237, 236); }
   |
      LOOKAHEAD(2)
      n238=Func_ST_GEOMFROMWKB(prn)
      { n0 = new NodeChoice(n238, 237); }
   |
      LOOKAHEAD(2)
      n239=Func_ST_GMLTOSQL(prn)
      { n0 = new NodeChoice(n239, 238); }
   |
      LOOKAHEAD(2)
      n240=Func_ST_HASARC(prn)
      { n0 = new NodeChoice(n240, 239); }
   |
      LOOKAHEAD(2)
      n241=Func_ST_HAUSDORFFDISTANCE(prn)
      { n0 = new NodeChoice(n241, 240); }
   |
      LOOKAHEAD(2)
      n242=Func_ST_HEIGHT(prn)
      { n0 = new NodeChoice(n242, 241); }
   |
      LOOKAHEAD(2)
      n243=Func_ST_INTERIORRINGN(prn)
      { n0 = new NodeChoice(n243, 242); }
   |
      LOOKAHEAD(2)
      n244=Func_ST_INTERSECTION(prn)
      { n0 = new NodeChoice(n244, 243); }
   |
      LOOKAHEAD(2)
      n245=Func_ST_INTERSECTS(prn)
      { n0 = new NodeChoice(n245, 244); }
   |
      LOOKAHEAD(2)
      n246=Func_ST_ISCLOSED(prn)
      { n0 = new NodeChoice(n246, 245); }
   |
      LOOKAHEAD(2)
      n247=Func_ST_ISEMPTY(prn)
      { n0 = new NodeChoice(n247, 246); }
   |
      LOOKAHEAD(2)
      n248=Func_ST_ISRING(prn)
      { n0 = new NodeChoice(n248, 247); }
   |
      LOOKAHEAD(2)
      n249=Func_ST_ISSIMPLE(prn)
      { n0 = new NodeChoice(n249, 248); }
   |
      LOOKAHEAD(2)
      n250=Func_ST_ISVALID(prn)
      { n0 = new NodeChoice(n250, 249); }
   |
      LOOKAHEAD(2)
      n251=Func_ST_ISVALIDREASON(prn)
      { n0 = new NodeChoice(n251, 250); }
   |
      LOOKAHEAD(2)
      n252=Func_ST_LENGTH2D(prn)
      { n0 = new NodeChoice(n252, 251); }
   |
      LOOKAHEAD(2)
      n253=Func_ST_LENGTH2D_SPHEROID(prn)
      { n0 = new NodeChoice(n253, 252); }
   |
      LOOKAHEAD(2)
      n254=Func_ST_LENGTH3D(prn)
      { n0 = new NodeChoice(n254, 253); }
   |
      LOOKAHEAD(2)
      n255=Func_ST_LENGTH3D_SPHEROID(prn)
      { n0 = new NodeChoice(n255, 254); }
   |
      LOOKAHEAD(2)
      n256=Func_ST_LENGTH_SPHEROID(prn)
      { n0 = new NodeChoice(n256, 255); }
   |
      LOOKAHEAD(2)
      n257=Func_ST_LINECROSSINGDIRECTION(prn)
      { n0 = new NodeChoice(n257, 256); }
   |
      LOOKAHEAD(2)
      n258=Func_ST_LINEFROMMULTIPOINT(prn)
      { n0 = new NodeChoice(n258, 257); }
   |
      LOOKAHEAD(2)
      n259=Func_ST_LINEFROMTEXT(prn)
      { n0 = new NodeChoice(n259, 258); }
   |
      LOOKAHEAD(2)
      n260=Func_ST_LINEFROMWKB(prn)
      { n0 = new NodeChoice(n260, 259); }
   |
      LOOKAHEAD(2)
      n261=Func_ST_LINEMERGE(prn)
      { n0 = new NodeChoice(n261, 260); }
   |
      LOOKAHEAD(2)
      n262=Func_ST_LINESTRINGFROMWKB(prn)
      { n0 = new NodeChoice(n262, 261); }
   |
      LOOKAHEAD(2)
      n263=Func_ST_LINETOCURVE(prn)
      { n0 = new NodeChoice(n263, 262); }
   |
      LOOKAHEAD(2)
      n264=Func_ST_LINE_INTERPOLATE_POINT(prn)
      { n0 = new NodeChoice(n264, 263); }
   |
      LOOKAHEAD(2)
      n265=Func_ST_LINE_LOCATE_POINT(prn)
      { n0 = new NodeChoice(n265, 264); }
   |
      LOOKAHEAD(2)
      n266=Func_ST_LINE_SUBSTRING(prn)
      { n0 = new NodeChoice(n266, 265); }
   |
      LOOKAHEAD(2)
      n267=Func_ST_LOCATEBETWEENELEVATIONS(prn)
      { n0 = new NodeChoice(n267, 266); }
   |
      LOOKAHEAD(2)
      n268=Func_ST_LOCATE_ALONG_MEASURE(prn)
      { n0 = new NodeChoice(n268, 267); }
   |
      LOOKAHEAD(2)
      n269=Func_ST_LOCATE_BETWEEN_MEASURES(prn)
      { n0 = new NodeChoice(n269, 268); }
   |
      LOOKAHEAD(2)
      n270=Func_ST_LONGESTLINE(prn)
      { n0 = new NodeChoice(n270, 269); }
   |
      LOOKAHEAD(2)
      n271=Func_ST_M(prn)
      { n0 = new NodeChoice(n271, 270); }
   |
      LOOKAHEAD(2)
      n272=Func_ST_MAKEENVELOPE(prn)
      { n0 = new NodeChoice(n272, 271); }
   |
      LOOKAHEAD(2)
      n273=Func_ST_MAKEPOINT(prn)
      { n0 = new NodeChoice(n273, 272); }
   |
      LOOKAHEAD(2)
      n274=Func_ST_MAKEPOINTM(prn)
      { n0 = new NodeChoice(n274, 273); }
   |
      LOOKAHEAD(2)
      n275=Func_ST_MAKEPOLYGON(prn)
      { n0 = new NodeChoice(n275, 274); }
   |
      LOOKAHEAD(2)
      n276=Func_ST_MAXDISTANCE(prn)
      { n0 = new NodeChoice(n276, 275); }
   |
      LOOKAHEAD(2)
      n277=Func_ST_MEMCOLLECT(prn)
      { n0 = new NodeChoice(n277, 276); }
   |
      LOOKAHEAD(2)
      n278=Func_ST_MEM_SIZE(prn)
      { n0 = new NodeChoice(n278, 277); }
   |
      LOOKAHEAD(2)
      n279=Func_ST_MINIMUMBOUNDINGCIRCLE(prn)
      { n0 = new NodeChoice(n279, 278); }
   |
      LOOKAHEAD(2)
      n280=Func_ST_MLINEFROMTEXT(prn)
      { n0 = new NodeChoice(n280, 279); }
   |
      LOOKAHEAD(2)
      n281=Func_ST_MLINEFROMWKB(prn)
      { n0 = new NodeChoice(n281, 280); }
   |
      LOOKAHEAD(2)
      n282=Func_ST_MPOINTFROMTEXT(prn)
      { n0 = new NodeChoice(n282, 281); }
   |
      LOOKAHEAD(2)
      n283=Func_ST_MPOINTFROMWKB(prn)
      { n0 = new NodeChoice(n283, 282); }
   |
      LOOKAHEAD(2)
      n284=Func_ST_MPOLYFROMTEXT(prn)
      { n0 = new NodeChoice(n284, 283); }
   |
      LOOKAHEAD(2)
      n285=Func_ST_MPOLYFROMWKB(prn)
      { n0 = new NodeChoice(n285, 284); }
   |
      LOOKAHEAD(2)
      n286=Func_ST_MULTI(prn)
      { n0 = new NodeChoice(n286, 285); }
   |
      LOOKAHEAD(2)
      n287=Func_ST_MULTILINEFROMWKB(prn)
      { n0 = new NodeChoice(n287, 286); }
   |
      LOOKAHEAD(2)
      n288=Func_ST_MULTILINESTRINGFROMTEXT(prn)
      { n0 = new NodeChoice(n288, 287); }
   |
      LOOKAHEAD(2)
      n289=Func_ST_MULTIPOINTFROMTEXT(prn)
      { n0 = new NodeChoice(n289, 288); }
   |
      LOOKAHEAD(2)
      n290=Func_ST_MULTIPOINTFROMWKB(prn)
      { n0 = new NodeChoice(n290, 289); }
   |
      LOOKAHEAD(2)
      n291=Func_ST_MULTIPOLYFROMWKB(prn)
      { n0 = new NodeChoice(n291, 290); }
   |
      LOOKAHEAD(2)
      n292=Func_ST_MULTIPOLYGONFROMTEXT(prn)
      { n0 = new NodeChoice(n292, 291); }
   |
      LOOKAHEAD(2)
      n293=Func_ST_NDIMS(prn)
      { n0 = new NodeChoice(n293, 292); }
   |
      LOOKAHEAD(2)
      n294=Func_ST_NPOINTS(prn)
      { n0 = new NodeChoice(n294, 293); }
   |
      LOOKAHEAD(2)
      n295=Func_ST_NRINGS(prn)
      { n0 = new NodeChoice(n295, 294); }
   |
      LOOKAHEAD(2)
      n296=Func_ST_NUMGEOMETRIES(prn)
      { n0 = new NodeChoice(n296, 295); }
   |
      LOOKAHEAD(2)
      n297=Func_ST_NUMINTERIORRING(prn)
      { n0 = new NodeChoice(n297, 296); }
   |
      LOOKAHEAD(2)
      n298=Func_ST_NUMINTERIORRINGS(prn)
      { n0 = new NodeChoice(n298, 297); }
   |
      LOOKAHEAD(2)
      n299=Func_ST_NUMPOINTS(prn)
      { n0 = new NodeChoice(n299, 298); }
   |
      LOOKAHEAD(2)
      n300=Func_ST_ORDERINGEQUALS(prn)
      { n0 = new NodeChoice(n300, 299); }
   |
      LOOKAHEAD(2)
      n301=Func_ST_OVERLAPS(prn)
      { n0 = new NodeChoice(n301, 300); }
   |
      LOOKAHEAD(2)
      n302=Func_ST_PERIMETER(prn)
      { n0 = new NodeChoice(n302, 301); }
   |
      LOOKAHEAD(2)
      n303=Func_ST_PERIMETER2D(prn)
      { n0 = new NodeChoice(n303, 302); }
   |
      LOOKAHEAD(2)
      n304=Func_ST_PERIMETER3D(prn)
      { n0 = new NodeChoice(n304, 303); }
   |
      LOOKAHEAD(2)
      n305=Func_ST_POINT(prn)
      { n0 = new NodeChoice(n305, 304); }
   |
      LOOKAHEAD(2)
      n306=Func_ST_POINTFROMTEXT(prn)
      { n0 = new NodeChoice(n306, 305); }
   |
      LOOKAHEAD(2)
      n307=Func_ST_POINTFROMWKB(prn)
      { n0 = new NodeChoice(n307, 306); }
   |
      LOOKAHEAD(2)
      n308=Func_ST_POINTN(prn)
      { n0 = new NodeChoice(n308, 307); }
   |
      LOOKAHEAD(2)
      n309=Func_ST_POINTONSURFACE(prn)
      { n0 = new NodeChoice(n309, 308); }
   |
      LOOKAHEAD(2)
      n310=Func_ST_POINT_INSIDE_CIRCLE(prn)
      { n0 = new NodeChoice(n310, 309); }
   |
      LOOKAHEAD(2)
      n311=Func_ST_POLYFROMTEXT(prn)
      { n0 = new NodeChoice(n311, 310); }
   |
      LOOKAHEAD(2)
      n312=Func_ST_POLYFROMWKB(prn)
      { n0 = new NodeChoice(n312, 311); }
   |
      LOOKAHEAD(2)
      n313=Func_ST_POLYGON(prn)
      { n0 = new NodeChoice(n313, 312); }
   |
      LOOKAHEAD(2)
      n314=Func_ST_POLYGONFROMTEXT(prn)
      { n0 = new NodeChoice(n314, 313); }
   |
      LOOKAHEAD(2)
      n315=Func_ST_POLYGONFROMWKB(prn)
      { n0 = new NodeChoice(n315, 314); }
   |
      LOOKAHEAD(2)
      n316=Func_ST_POSTGIS_GIST_JOINSEL(prn)
      { n0 = new NodeChoice(n316, 315); }
   |
      LOOKAHEAD(2)
      n317=Func_ST_POSTGIS_GIST_SEL(prn)
      { n0 = new NodeChoice(n317, 316); }
   |
      LOOKAHEAD(2)
      n318=Func_ST_RELATE(prn)
      { n0 = new NodeChoice(n318, 317); }
   |
      LOOKAHEAD(2)
      n319=Func_ST_REMOVEPOINT(prn)
      { n0 = new NodeChoice(n319, 318); }
   |
      LOOKAHEAD(2)
      n320=Func_ST_REVERSE(prn)
      { n0 = new NodeChoice(n320, 319); }
   |
      LOOKAHEAD(2)
      n321=Func_ST_ROTATEX(prn)
      { n0 = new NodeChoice(n321, 320); }
   |
      LOOKAHEAD(2)
      n322=Func_ST_ROTATEY(prn)
      { n0 = new NodeChoice(n322, 321); }
   |
      LOOKAHEAD(2)
      n323=Func_ST_ROTATEZ(prn)
      { n0 = new NodeChoice(n323, 322); }
   |
      LOOKAHEAD(2)
      n324=Func_ST_SCALE(prn)
      { n0 = new NodeChoice(n324, 323); }
   |
      LOOKAHEAD(2)
      n325=Func_ST_SEGMENTIZE(prn)
      { n0 = new NodeChoice(n325, 324); }
   |
      LOOKAHEAD(2)
      n326=Func_ST_SETFACTOR(prn)
      { n0 = new NodeChoice(n326, 325); }
   |
      LOOKAHEAD(2)
      n327=Func_ST_SETPOINT(prn)
      { n0 = new NodeChoice(n327, 326); }
   |
      LOOKAHEAD(2)
      n328=Func_ST_SETSRID(prn)
      { n0 = new NodeChoice(n328, 327); }
   |
      LOOKAHEAD(2)
      n329=Func_ST_SHIFT_LONGITUDE(prn)
      { n0 = new NodeChoice(n329, 328); }
   |
      LOOKAHEAD(2)
      n330=Func_ST_SHORTESTLINE(prn)
      { n0 = new NodeChoice(n330, 329); }
   |
      LOOKAHEAD(2)
      n331=Func_ST_SIMPLIFY(prn)
      { n0 = new NodeChoice(n331, 330); }
   |
      LOOKAHEAD(2)
      n332=Func_ST_SIMPLIFYPRESERVETOPOLOGY(prn)
      { n0 = new NodeChoice(n332, 331); }
   |
      LOOKAHEAD(2)
      n333=Func_ST_SNAPTOGRID(prn)
      { n0 = new NodeChoice(n333, 332); }
   |
      LOOKAHEAD(2)
      n334=Func_ST_SRID(prn)
      { n0 = new NodeChoice(n334, 333); }
   |
      LOOKAHEAD(2)
      n335=Func_ST_STARTPOINT(prn)
      { n0 = new NodeChoice(n335, 334); }
   |
      LOOKAHEAD(2)
      n336=Func_ST_SUMMARY(prn)
      { n0 = new NodeChoice(n336, 335); }
   |
      LOOKAHEAD(2)
      n337=Func_ST_SYMDIFFERENCE(prn)
      { n0 = new NodeChoice(n337, 336); }
   |
      LOOKAHEAD(2)
      n338=Func_ST_SYMMETRICDIFFERENCE(prn)
      { n0 = new NodeChoice(n338, 337); }
   |
      LOOKAHEAD(2)
      n339=Func_ST_TEXT(prn)
      { n0 = new NodeChoice(n339, 338); }
   |
      LOOKAHEAD(2)
      n340=Func_ST_TOUCHES(prn)
      { n0 = new NodeChoice(n340, 339); }
   |
      LOOKAHEAD(2)
      n341=Func_ST_TRANSLATE(prn)
      { n0 = new NodeChoice(n341, 340); }
   |
      LOOKAHEAD(2)
      n342=Func_ST_TRANSSCALE(prn)
      { n0 = new NodeChoice(n342, 341); }
   |
      LOOKAHEAD(2)
      n343=Func_ST_WIDTH(prn)
      { n0 = new NodeChoice(n343, 342); }
   |
      LOOKAHEAD(2)
      n344=Func_ST_WITHIN(prn)
      { n0 = new NodeChoice(n344, 343); }
   |
      LOOKAHEAD(2)
      n345=Func_ST_WKBTOSQL(prn)
      { n0 = new NodeChoice(n345, 344); }
   |
      LOOKAHEAD(2)
      n346=Func_ST_WKTTOSQL(prn)
      { n0 = new NodeChoice(n346, 345); }
   |
      LOOKAHEAD(2)
      n347=Func_ST_X(prn)
      { n0 = new NodeChoice(n347, 346); }
   |
      LOOKAHEAD(2)
      n348=Func_ST_Y(prn)
      { n0 = new NodeChoice(n348, 347); }
   |
      LOOKAHEAD(2)
      n349=Func_ST_Z(prn)
      { n0 = new NodeChoice(n349, 348); }
   |
      LOOKAHEAD(2)
      n350=Func_ST_ZMFLAG(prn)
      { n0 = new NodeChoice(n350, 349); }
   |
      LOOKAHEAD(2)
      n351=Func_ST_BOX2D(prn)
      { n0 = new NodeChoice(n351, 350); }
   |
      LOOKAHEAD(2)
      n352=Func_ST_BOX3D(prn)
      { n0 = new NodeChoice(n352, 351); }
   |
      LOOKAHEAD(2)
      n353=Func_ST_GEOMETRY(prn)
      { n0 = new NodeChoice(n353, 352); }
   |
      LOOKAHEAD(2)
      n354=Func_ST_GEOMETRYN(prn)
      { n0 = new NodeChoice(n354, 353); }
   |
      LOOKAHEAD(2)
      n355=Func_POSTGIS_DROPBBOX(prn)
      { n0 = new NodeChoice(n355, 354); }
   )
   
   { return new FunctionCall(n0); }
}

Func_Cbrt Func_Cbrt(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CBRT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Cbrt(n0,n2,n4,n5); }
}

Func_GetBit Func_GetBit(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<GET_BIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_GetBit(n0,n2,n4,n5,n7,n8); }
}

Func_GetByte Func_GetByte(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<GET_BYTE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_GetByte(n0,n2,n4,n5,n7,n8); }
}

Func_ToDate Func_ToDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TO_DATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ToDate(n0,n2,n4,n5,n10); }
}

Func_ClockTimeStamp Func_ClockTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<CLOCK_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_ClockTimeStamp(n0,n2); }
}

Func_StatementTimeStamp Func_StatementTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<STATEMENT_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_StatementTimeStamp(n0,n2); }
}

Func_TransactionTimeStamp Func_TransactionTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<TRANSACTION_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_TransactionTimeStamp(n0,n2); }
}

Func_NullIf Func_NullIf(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<NULLIF_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_NullIf(n0,n2,n4,n5,n7,n8); }
}

Func_SetBit Func_SetBit(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<SET_BIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_SetBit(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_SetByte Func_SetByte(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<SET_BYTE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_SetByte(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_ToChar Func_ToChar(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TO_CHAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ToChar(n0,n2,n4,n5,n10); }
}

Func_ToNumber Func_ToNumber(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<TO_NUMBER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ToNumber(n0,n2,n4,n5,n7,n8); }
}

Func_ToTimestamp Func_ToTimestamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<TO_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ToTimestamp(n0,n2,n4,n5,n7,n8); }
}

Func_AddMonths Func_AddMonths(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ADD_MONTHS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_AddMonths(n0,n2,n4,n5,n7,n8); }
}

Func_JustifyDays Func_JustifyDays(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<JUSTIFY_DAYS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      LOOKAHEAD(2)
      n6=<INTERVAL_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_JustifyDays(n0,n2,n4,n7,n8); }
}

Func_JustifyHours Func_JustifyHours(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<JUSTIFY_HOURS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      LOOKAHEAD(2)
      n6=<INTERVAL_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_JustifyHours(n0,n2,n4,n7,n8); }
}

Func_JustifyInterval Func_JustifyInterval(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<JUSTIFY_INTERVAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      LOOKAHEAD(2)
      n6=<INTERVAL_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_JustifyInterval(n0,n2,n4,n7,n8); }
}

Func_LastDay Func_LastDay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LAST_DAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_LastDay(n0,n2,n4,n5); }
}

Func_MonthsBetween Func_MonthsBetween(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<MONTHS_BETWEEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_MonthsBetween(n0,n2,n4,n5,n7,n8); }
}

Func_NextDay Func_NextDay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<NEXT_DAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_NextDay(n0,n2,n4,n5,n7,n8); }
}

Func_CurrentDatabase Func_CurrentDatabase(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<CURRENT_DATABASE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_CurrentDatabase(n0,n2); }
}

Func_CurrentSchema Func_CurrentSchema(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<CURRENT_SCHEMA_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_CurrentSchema(n0,n2); }
}

Func_BitAnd Func_BitAnd(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BIT_AND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_BitAnd(n0,n2,n4,n7,n8); }
}

Func_BitOr Func_BitOr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BIT_OR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_BitOr(n0,n2,n4,n7,n8); }
}

Func_BoolAnd Func_BoolAnd(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<BOOL_AND_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<EVERY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n9=<DISTINCT_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
   )?
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_BoolAnd(n0,n5,n7,n10,n11); }
}

Func_BoolOr Func_BoolOr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BOOL_OR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_BoolOr(n0,n2,n4,n7,n8); }
}

Func_CorrCov Func_CorrCov(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<CORR_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<COVAR_POP_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<COVAR_SAMP_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=SQLArgument(prn)
   n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=SQLArgument(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_CorrCov(n0,n7,n9,n10,n12,n13); }
}

Func_Regr Func_Regr(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   SQLArgument n21;
   NodeToken n22;
   Token n23;
   SQLArgument n24;
   NodeToken n25;
   Token n26;

   {
   }
}
{
   (
      (
         n2=<REGR_AVGX_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REGR_AVGY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<REGR_COUNT_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<REGR_INTERCEPT_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<REGR_R2_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<REGR_SLOPE_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<REGR_SXX_> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=<REGR_SXY_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18=<REGR_SYY_> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      )
      
   )
   n20=<PARENTHESIS_START_> { n19 = JTBToolkit.makeNodeToken(n20); }
   n21=SQLArgument(prn)
   n23="," { n22 = JTBToolkit.makeNodeToken(n23); }
   n24=SQLArgument(prn)
   n26=<PARENTHESIS_CLOSE_> { n25 = JTBToolkit.makeNodeToken(n26); }
   
   { return new Func_Regr(n0,n19,n21,n22,n24,n25); }
}

Func_RegexReplace Func_RegexReplace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<REGEXP_REPLACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_RegexReplace(n0,n2,n4,n5,n7,n8,n10,n11,n16); }
}

Func_Coalesce Func_Coalesce(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COALESCE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgumentList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Coalesce(n0,n2,n4,n5); }
}

Func_Random Func_Random(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<RANDOM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Random(n0,n2,n4); }
}

Func_Setseed Func_Setseed(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SETSEED_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Setseed(n0,n2,n4,n5); }
}

Func_Width_bucket Func_Width_bucket(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<WIDTH_BUCKET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new Func_Width_bucket(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14); }
}

Func_Btrim Func_Btrim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<BTRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Btrim(n0,n2,n4,n5,n10); }
}

Func_Decode Func_Decode(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<DECODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Decode(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Encode Func_Encode(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ENCODE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Encode(n0,n2,n4,n5,n7,n8); }
}

Func_Repeat Func_Repeat(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<REPEAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Repeat(n0,n2,n4,n5,n7,n8); }
}

Func_SplitPart Func_SplitPart(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<SPLIT_PART_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_SplitPart(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_StrPos Func_StrPos(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<STRPOS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_StrPos(n0,n2,n4,n5,n7,n8); }
}

Func_ToAscii Func_ToAscii(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TO_ASCII_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ToAscii(n0,n2,n4,n5,n10); }
}

Func_Translate Func_Translate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<TRANSLATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_Translate(n0,n2,n4,n5,n7,n8,n10,n11,n16); }
}

Func_PgClientEncoding Func_PgClientEncoding(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<PG_CLIENT_ENCODING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_PgClientEncoding(n0,n2,n4); }
}

Func_Chr Func_Chr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CHR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Chr(n0,n2,n4,n5); }
}

Func_Md5 Func_Md5(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MD5_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Md5(n0,n2,n4,n5); }
}

Func_QuoteIdent Func_QuoteIdent(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<QUOTE_IDENT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_QuoteIdent(n0,n2,n4,n5); }
}

Func_QuoteLiteral Func_QuoteLiteral(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<QUOTE_LITERAL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_QuoteLiteral(n0,n2,n4,n5); }
}

Func_ToHex Func_ToHex(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TO_HEX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ToHex(n0,n2,n4,n5); }
}

Func_Substring Func_Substring(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   n1=<SUBSTRING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8=<FROM_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      { n11 = new NodeSequence(2); }
      n13=<FOR_> { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=SQLArgument(prn)
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   n16=<PARENTHESIS_CLOSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new Func_Substring(n0,n2,n4,n5,n10,n15); }
}

Func_Position Func_Position(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<POSITION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<IN_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Position(n0,n2,n4,n5,n7,n8); }
}

Func_Overlay Func_Overlay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<OVERLAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PLACING_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<FROM_> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      { n12 = new NodeSequence(2); }
      n14=<FOR_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_Overlay(n0,n2,n4,n5,n7,n8,n10,n11,n16); }
}

Func_OctetLength Func_OctetLength(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<OCTET_LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_OctetLength(n0,n2,n4,n5); }
}

Func_Convert Func_Convert(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;

   {
   }
}
{
   n1=<CONVERT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      (
         n7=<USING_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5 = new NodeChoice(n6, 0); }
      |
         n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
         { n5 = new NodeChoice(n8, 1); }
      )
      
   )
   (
      (
         n12=<STRING_LITERAL> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10 = new NodeChoice(n11, 0); }
      |
         n13=Identifier(prn)
         { n10 = new NodeChoice(n13, 1); }
      )
      
   )
   (
      { n15 = new NodeSequence(2); }
      n17="," { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      (
         (
            n20=<STRING_LITERAL> { n19 = JTBToolkit.makeNodeToken(n20); }
            { n18 = new NodeChoice(n19, 0); }
         |
            n21=Identifier(prn)
            { n18 = new NodeChoice(n21, 1); }
         )
         
      )
      { n15.addNode(n18); }
      { n14.addNode(n15); }
   )?
   n23=<PARENTHESIS_CLOSE_> { n22 = JTBToolkit.makeNodeToken(n23); }
   
   { return new Func_Convert(n0,n2,n4,n5,n10,n14,n22); }
}

Func_CharLength Func_CharLength(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<CHAR_LENGTH_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CHARACTER_LENGTH_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_CharLength(n0,n5,n7,n8); }
}

Func_BitLength Func_BitLength(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<BIT_LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_BitLength(n0,n2,n4,n5); }
}

Func_LocalTime Func_LocalTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<LOCALTIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_LocalTime(n0,n2); }
}

Func_LocalTimeStamp Func_LocalTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<LOCALTIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_LocalTimeStamp(n0,n2); }
}

Func_Age Func_Age(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<AGE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Age(n0,n2,n4,n5,n10); }
}

Func_DatePart Func_DatePart(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DATEPART_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_DatePart(n0,n2,n4,n5,n7,n8); }
}

Func_DateTrunc Func_DateTrunc(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DATETRUNC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_DateTrunc(n0,n2,n4,n5,n7,n8); }
}

Func_Extract Func_Extract(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   SQLArgument n37;
   NodeToken n38;
   Token n39;

   {
   }
}
{
   n1=<EXTRACT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=<YEAR_FROM> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<QUARTER_FROM> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      |
         n10=<MONTH_FROM> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4 = new NodeChoice(n9, 2); }
      |
         n12=<WEEK_FROM> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n4 = new NodeChoice(n11, 3); }
      |
         n14=<DAY_FROM> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n4 = new NodeChoice(n13, 4); }
      |
         n16=<HOUR_FROM> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n4 = new NodeChoice(n15, 5); }
      |
         n18=<MINUTE_FROM> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n4 = new NodeChoice(n17, 6); }
      |
         n20=<SECOND_FROM> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n4 = new NodeChoice(n19, 7); }
      |
         n22=<DOY_FROM> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n4 = new NodeChoice(n21, 8); }
      |
         n24=<DOW_FROM> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n4 = new NodeChoice(n23, 9); }
      |
         n26=<DECADE_FROM> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n4 = new NodeChoice(n25, 10); }
      |
         n28=<CENTURY_FROM> { n27 = JTBToolkit.makeNodeToken(n28); }
         { n4 = new NodeChoice(n27, 11); }
      |
         n30=<MILLISECOND_FROM> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n4 = new NodeChoice(n29, 12); }
      |
         n32=<MILLENNIUM_FROM> { n31 = JTBToolkit.makeNodeToken(n32); }
         { n4 = new NodeChoice(n31, 13); }
      |
         n34=<MICROSECONDS_FROM> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n4 = new NodeChoice(n33, 14); }
      |
         n36=<EPOCH_FROM> { n35 = JTBToolkit.makeNodeToken(n36); }
         { n4 = new NodeChoice(n35, 15); }
      )
      
   )
   n37=SQLArgument(prn)
   n39=<PARENTHESIS_CLOSE_> { n38 = JTBToolkit.makeNodeToken(n39); }
   
   { return new Func_Extract(n0,n2,n4,n37,n38); }
}

Func_IsFinite Func_IsFinite(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ISFINITE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_IsFinite(n0,n2,n4,n5); }
}

Func_TimeOfDay Func_TimeOfDay(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<TIMEOFDAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_TimeOfDay(n0,n2,n4); }
}

Func_User Func_User(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   {
   }
}
{
   (
      (
         n2=<USER_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CURRENT_USER_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      { n6 = new NodeSequence(2); }
      n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=<PARENTHESIS_CLOSE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   
   { return new Func_User(n0,n5); }
}

Func_Custom Func_Custom(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLArgumentList n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=SQLArgumentList(prn)
      { n4.addNode(n5); }
   )?
   n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Func_Custom(n0,n2,n4,n6); }
}

Func_Concat Func_Concat(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<CONCAT_WORD> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Concat(n0,n2,n4,n5,n7,n8); }
}

Func_Case Func_Case(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLSimpleExpression n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLSimpleExpression n9;
   NodeToken n10;
   Token n11;
   SQLSimpleExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLSimpleExpression n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   SQLComplexExpression n27;
   NodeToken n28;
   Token n29;
   SQLSimpleExpression n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   SQLSimpleExpression n35;
   NodeToken n36;
   Token n37;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(6); }
      n3=<CASE_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=SQLSimpleExpression(prn)
      { n1.addNode(n4); }
      (
         { n6 = new NodeSequence(4); }
         n8=<WHEN_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=SQLSimpleExpression(prn)
         { n6.addNode(n9); }
         n11=<THEN_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n6.addNode(n10); }
         n12=SQLSimpleExpression(prn)
         { n6.addNode(n12); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n1.addNode(n5); }
      (
         { n14 = new NodeSequence(2); }
         n16=<ELSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=SQLSimpleExpression(prn)
         { n14.addNode(n17); }
         { n13.addNode(n14); }
      )?
      { n1.addNode(n13); }
      n19=<END_> { n18 = JTBToolkit.makeNodeToken(n19); }
      { n1.addNode(n18); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n20 = new NodeSequence(4); }
      n22=<CASE_> { n21 = JTBToolkit.makeNodeToken(n22); }
      { n20.addNode(n21); }
      (
         { n24 = new NodeSequence(4); }
         n26=<WHEN_> { n25 = JTBToolkit.makeNodeToken(n26); }
         { n24.addNode(n25); }
         n27=SQLComplexExpression(prn)
         { n24.addNode(n27); }
         n29=<THEN_> { n28 = JTBToolkit.makeNodeToken(n29); }
         { n24.addNode(n28); }
         n30=SQLSimpleExpression(prn)
         { n24.addNode(n30); }
         { n23.addNode(n24); }
      )*
      { n23.nodes.trimToSize(); }
      { n20.addNode(n23); }
      (
         { n32 = new NodeSequence(2); }
         n34=<ELSE_> { n33 = JTBToolkit.makeNodeToken(n34); }
         { n32.addNode(n33); }
         n35=SQLSimpleExpression(prn)
         { n32.addNode(n35); }
         { n31.addNode(n32); }
      )?
      { n20.addNode(n31); }
      n37=<END_> { n36 = JTBToolkit.makeNodeToken(n37); }
      { n20.addNode(n36); }
      { n0 = new NodeChoice(n20, 1); }
   )
   
   { return new Func_Case(n0); }
}

Func_Abs Func_Abs(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ABS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Abs(n0,n2,n4,n5); }
}

Func_Ceil Func_Ceil(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CEIL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Ceil(n0,n2,n4,n5); }
}

Func_Ceiling Func_Ceiling(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<CEILING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Ceiling(n0,n2,n4,n5); }
}

Func_Exp Func_Exp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<EXP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Exp(n0,n2,n4,n5); }
}

Func_Floor Func_Floor(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<FLOOR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Floor(n0,n2,n4,n5); }
}

Func_LN Func_LN(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_LN(n0,n2,n4,n5); }
}

Func_Log Func_Log(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<LOG_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Log(n0,n2,n4,n5,n10); }
}

Func_Log10 Func_Log10(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LOG10_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Log10(n0,n2,n4,n5); }
}

Func_PI Func_PI(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<PI_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_PI(n0,n2,n4); }
}

Func_Power Func_Power(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<POWER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Power(n0,n2,n4,n5,n7,n8); }
}

Func_Sign Func_Sign(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SIGN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Sign(n0,n2,n4,n5); }
}

Func_TAsin Func_TAsin(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ASIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TAsin(n0,n2,n4,n5); }
}

Func_TATan2 Func_TATan2(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ATAN2_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_TATan2(n0,n2,n4,n5,n7,n8); }
}

Func_TATn2 Func_TATn2(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ATN2_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_TATn2(n0,n2,n4,n5,n7,n8); }
}

Func_TAtan Func_TAtan(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ATAN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TAtan(n0,n2,n4,n5); }
}

Func_TCos Func_TCos(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TCos(n0,n2,n4,n5); }
}

Func_TCosh Func_TCosh(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COSH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TCosh(n0,n2,n4,n5); }
}

Func_TCot Func_TCot(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<COT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TCot(n0,n2,n4,n5); }
}

Func_TACos Func_TACos(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ACOS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TACos(n0,n2,n4,n5); }
}

Func_TDegree Func_TDegree(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DEGREE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_TDegree(n0,n2,n4,n5); }
}

Func_Radians Func_Radians(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<RADIANS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Radians(n0,n2,n4,n5); }
}

Func_Sin Func_Sin(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Sin(n0,n2,n4,n5); }
}

Func_Tan Func_Tan(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TAN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Tan(n0,n2,n4,n5); }
}

Func_Round Func_Round(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ROUND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Round(n0,n2,n4,n5,n10); }
}

Func_Mod Func_Mod(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<MOD_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MODULE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_Mod(n0,n5,n7,n8,n10,n11); }
}

Func_Float Func_Float(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<FLOAT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Float(n0,n2,n4,n5,n7,n8); }
}

Func_Greatest Func_Greatest(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<GREATEST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgumentList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Greatest(n0,n2,n4,n5); }
}

Func_Sqrt Func_Sqrt(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SQRT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Sqrt(n0,n2,n4,n5); }
}

Func_Least Func_Least(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LEAST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgumentList(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Least(n0,n2,n4,n5); }
}

Func_Ascii Func_Ascii(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ASCII_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Ascii(n0,n2,n4,n5); }
}

Func_Index Func_Index(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   SQLArgument n20;
   NodeToken n21;
   Token n22;

   {
   }
}
{
   (
      (
         n2=<INDEX_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INSTR_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   (
      { n17 = new NodeSequence(2); }
      n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n20=SQLArgument(prn)
      { n17.addNode(n20); }
      { n16.addNode(n17); }
   )?
   n22=<PARENTHESIS_CLOSE_> { n21 = JTBToolkit.makeNodeToken(n22); }
   
   { return new Func_Index(n0,n5,n7,n8,n10,n11,n16,n21); }
}

Func_Left Func_Left(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<LEFT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Left(n0,n2,n4,n5,n7,n8); }
}

Func_Right Func_Right(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<RIGHT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Right(n0,n2,n4,n5,n7,n8); }
}

Func_Length Func_Length(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Length(n0,n2,n4,n5); }
}

Func_Lower Func_Lower(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LOWER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Lower(n0,n2,n4,n5); }
}

Func_Lpad Func_Lpad(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<LPAD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Lpad(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Ltrim Func_Ltrim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<LTRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Ltrim(n0,n2,n4,n5,n10); }
}

Func_Replace Func_Replace(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<REPLACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Replace(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Trunc Func_Trunc(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<TRUNC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Trunc(n0,n2,n4,n5,n10); }
}

Func_Trim Func_Trim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   SQLArgument n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<TRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=<BOTH> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         n8=<LEADING> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4 = new NodeChoice(n7, 1); }
      |
         n10=<TRAILING> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n4 = new NodeChoice(n9, 2); }
      )
      
   )
   (
      n12=SQLArgument(prn)
      { n11.addNode(n12); }
   )?
   n14=<FROM_> { n13 = JTBToolkit.makeNodeToken(n14); }
   n15=SQLArgument(prn)
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_Trim(n0,n2,n4,n11,n13,n15,n16); }
}

Func_Rpad Func_Rpad(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<RPAD_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Rpad(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Rtrim Func_Rtrim(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<RTRIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_Rtrim(n0,n2,n4,n5,n10); }
}

Func_SubStr Func_SubStr(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<SUBSTR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_SubStr(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Database Func_Database(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<DATABASE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Database(n0,n2,n4); }
}

Func_Version Func_Version(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<VERSION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Version(n0,n2,n4); }
}

Func_Value Func_Value(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<VALUE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      LOOKAHEAD(2)
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Value(n0,n2,n4,n5,n7,n8,n13); }
}

Func_Avg Func_Avg(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<AVERAGE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Avg(n0,n2,n4,n7,n8); }
}

Func_Count Func_Count(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   n1=<COUNT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         n6=<STAR_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4 = new NodeChoice(n5, 0); }
      |
         { n7 = new NodeSequence(2); }
         (
            (
               n11=<DISTINCT_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n9 = new NodeChoice(n10, 0); }
            |
               n13=<ALL_> { n12 = JTBToolkit.makeNodeToken(n13); }
               { n9 = new NodeChoice(n12, 1); }
            )
            { n8.addNode(n9); }
         )?
         { n7.addNode(n8); }
         n14=SQLArgument(prn)
         { n7.addNode(n14); }
         { n4 = new NodeChoice(n7, 1); }
      )
      
   )
   n16=<PARENTHESIS_CLOSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new Func_Count(n0,n2,n4,n15); }
}

Func_Max Func_Max(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<MAX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Max(n0,n2,n4,n7,n8); }
}

Func_Min Func_Min(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<MIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Min(n0,n2,n4,n7,n8); }
}

Func_Stdev Func_Stdev(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<STDDEV_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<STDDEV_POP_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<STDDEV_SAMP_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      n11=<DISTINCT_> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   n12=SQLArgument(prn)
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_Stdev(n0,n7,n9,n12,n13); }
}

Func_Variance Func_Variance(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   SQLArgument n16;
   NodeToken n17;
   Token n18;

   {
   }
}
{
   (
      (
         n2=<VARIANCE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<VARIANCE_POP_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<VARIANCE_SAMP_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<VAR_POP_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<VAR_SAMP_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      )
      
   )
   n12=<PARENTHESIS_START_> { n11 = JTBToolkit.makeNodeToken(n12); }
   (
      n15=<DISTINCT_> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
   )?
   n16=SQLArgument(prn)
   n18=<PARENTHESIS_CLOSE_> { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new Func_Variance(n0,n11,n13,n16,n17); }
}

Func_Sum Func_Sum(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<SUM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n6=<DISTINCT_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Sum(n0,n2,n4,n7,n8); }
}

Func_Upper Func_Upper(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<UPPER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Upper(n0,n2,n4,n5); }
}

Func_Abbrev Func_Abbrev(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ABBREV_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Abbrev(n0,n2,n4,n5); }
}

Func_Broadcast Func_Broadcast(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<BROADCAST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Broadcast(n0,n2,n4,n5); }
}

Func_Family Func_Family(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<FAMILY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Family(n0,n2,n4,n5); }
}

Func_Host Func_Host(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<HOST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Host(n0,n2,n4,n5); }
}

Func_Hostmask Func_Hostmask(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<HOSTMASK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Hostmask(n0,n2,n4,n5); }
}

Func_Masklen Func_Masklen(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MASKLEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Masklen(n0,n2,n4,n5); }
}

Func_Netmask Func_Netmask(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NETMASK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Netmask(n0,n2,n4,n5); }
}

Func_Network Func_Network(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NETWORK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Network(n0,n2,n4,n5); }
}

Func_Set_Masklen Func_Set_Masklen(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<SET_MASKLEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_Set_Masklen(n0,n2,n4,n5,n7,n8); }
}

Func_Text Func_Text(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Text(n0,n2,n4,n5); }
}

Func_ST_AsText Func_ST_AsText(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ASTEXT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ASTEXT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_AsText(n0,n5,n7,n8); }
}

Func_ST_Transform Func_ST_Transform(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_TRANSFORM_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<TRANSFORM_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_Transform(n0,n5,n7,n8,n10,n11); }
}

Func_ST_Distance Func_ST_Distance(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_DISTANCE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DISTANCE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_Distance(n0,n5,n7,n8,n10,n11); }
}

Func_ST_DWithin Func_ST_DWithin(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<ST_DWITHIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_DWithin(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_ST_Length Func_ST_Length(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ST_LENGTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ST_Length(n0,n2,n4,n5,n10); }
}

Func_ST_Area Func_ST_Area(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ST_AREA_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ST_Area(n0,n2,n4,n5,n10); }
}

Func_ST_AsBinary Func_ST_AsBinary(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<ST_ASBINARY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ASBINARY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_AsBinary(n0,n5,n7,n8,n13); }
}

Func_ST_Boundary Func_ST_Boundary(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_BOUNDARY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_Boundary(n0,n2,n4,n5); }
}

Func_ST_Buffer Func_ST_Buffer(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<ST_BUFFER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_Buffer(n0,n2,n4,n5,n7,n8,n13); }
}

Func_ST_Centroid Func_ST_Centroid(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_CENTROID_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_Centroid(n0,n2,n4,n5); }
}

Func_ST_ADDMEASURE Func_ST_ADDMEASURE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_ADDMEASURE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_ADDMEASURE(n0,n2,n4,n5); }
}

Func_ST_ADDPOINT Func_ST_ADDPOINT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_ADDPOINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_ADDPOINT(n0,n2,n4,n5); }
}

Func_ST_AFFINE Func_ST_AFFINE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_AFFINE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_AFFINE(n0,n2,n4,n5); }
}

Func_ST_AREA2D Func_ST_AREA2D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_AREA2D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AREA2D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_AREA2D(n0,n5,n7,n8); }
}

Func_ST_ASEWKB Func_ST_ASEWKB(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<ST_ASEWKB_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ASEWKB_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_ASEWKB(n0,n5,n7,n8,n13); }
}

Func_ST_ASEWKT Func_ST_ASEWKT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ASEWKT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ASEWKT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ASEWKT(n0,n5,n7,n8); }
}

Func_ST_ASGEOJSON Func_ST_ASGEOJSON(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   SQLArgument n19;
   NodeToken n20;
   Token n21;

   {
   }
}
{
   n1=<ST_ASGEOJSON_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      LOOKAHEAD(3)
      { n11 = new NodeSequence(2); }
      n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=SQLArgument(prn)
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   (
      { n16 = new NodeSequence(2); }
      n18="," { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n19=SQLArgument(prn)
      { n16.addNode(n19); }
      { n15.addNode(n16); }
   )?
   n21=<PARENTHESIS_CLOSE_> { n20 = JTBToolkit.makeNodeToken(n21); }
   
   { return new Func_ST_ASGEOJSON(n0,n2,n4,n5,n10,n15,n20); }
}

Func_ST_ASGML Func_ST_ASGML(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   SQLArgument n19;
   NodeToken n20;
   Token n21;

   {
   }
}
{
   n1=<ST_ASGML_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      LOOKAHEAD(3)
      { n11 = new NodeSequence(2); }
      n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=SQLArgument(prn)
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   (
      { n16 = new NodeSequence(2); }
      n18="," { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n19=SQLArgument(prn)
      { n16.addNode(n19); }
      { n15.addNode(n16); }
   )?
   n21=<PARENTHESIS_CLOSE_> { n20 = JTBToolkit.makeNodeToken(n21); }
   
   { return new Func_ST_ASGML(n0,n2,n4,n5,n10,n15,n20); }
}

Func_ST_ASHEXEWKB Func_ST_ASHEXEWKB(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<ST_ASHEXEWKB_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ASHEXEWKB_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_ASHEXEWKB(n0,n5,n7,n8,n13); }
}

Func_ST_ASKML Func_ST_ASKML(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLArgument n17;
   NodeToken n18;
   Token n19;

   {
   }
}
{
   (
      (
         n2=<ST_ASKML_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ASKML_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   (
      { n14 = new NodeSequence(2); }
      n16="," { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17=SQLArgument(prn)
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   n19=<PARENTHESIS_CLOSE_> { n18 = JTBToolkit.makeNodeToken(n19); }
   
   { return new Func_ST_ASKML(n0,n5,n7,n8,n13,n18); }
}

Func_ST_ASSVG Func_ST_ASSVG(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   n1=<ST_ASSVG_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      { n11 = new NodeSequence(2); }
      n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=SQLArgument(prn)
      { n11.addNode(n14); }
      { n10.addNode(n11); }
   )?
   n16=<PARENTHESIS_CLOSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new Func_ST_ASSVG(n0,n2,n4,n5,n10,n15); }
}

Func_ST_AZIMUTH Func_ST_AZIMUTH(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_AZIMUTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_AZIMUTH(n0,n2,n4,n5); }
}

Func_ST_BDMPOLYFROMTEXT Func_ST_BDMPOLYFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_BDMPOLYFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_BDMPOLYFROMTEXT(n0,n2,n4,n5,n7,n8); }
}

Func_ST_BDPOLYFROMTEXT Func_ST_BDPOLYFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_BDPOLYFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_BDPOLYFROMTEXT(n0,n2,n4,n5,n7,n8); }
}

Func_ST_BUILDAREA Func_ST_BUILDAREA(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_BUILDAREA_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_BUILDAREA(n0,n2,n4,n5); }
}

Func_ST_BYTEA Func_ST_BYTEA(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_BYTEA_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_BYTEA(n0,n2,n4,n5); }
}

Func_ST_CHIP_IN Func_ST_CHIP_IN(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_CHIP_IN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_CHIP_IN(n0,n2,n4,n5); }
}

Func_ST_CHIP_OUT Func_ST_CHIP_OUT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_CHIP_OUT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_CHIP_OUT(n0,n2,n4,n5); }
}

Func_ST_CLOSESTPOINT Func_ST_CLOSESTPOINT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_CLOSESTPOINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_CLOSESTPOINT(n0,n2,n4,n5); }
}

Func_ST_COLLECT Func_ST_COLLECT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<ST_COLLECT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<COLLECT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_COLLECT(n0,n5,n7,n8,n13); }
}

Func_ST_COLLECTIONEXTRACT Func_ST_COLLECTIONEXTRACT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_COLLECTIONEXTRACT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_COLLECTIONEXTRACT(n0,n2,n4,n5,n7,n8); }
}

Func_ST_COMBINE_BBOX Func_ST_COMBINE_BBOX(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_COMBINE_BBOX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_COMBINE_BBOX(n0,n2,n4,n5); }
}

Func_ST_COMPRESSION Func_ST_COMPRESSION(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_COMPRESSION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_COMPRESSION(n0,n2,n4,n5); }
}

Func_ST_CONTAINS Func_ST_CONTAINS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_CONTAINS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<CONTAINS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_CONTAINS(n0,n5,n7,n8,n10,n11); }
}

Func_ST_CONTAINSPROPERLY Func_ST_CONTAINSPROPERLY(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_CONTAINSPROPERLY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_CONTAINSPROPERLY(n0,n2,n4,n5); }
}

Func_ST_CONVEXHULL Func_ST_CONVEXHULL(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_CONVEXHULL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_CONVEXHULL(n0,n2,n4,n5); }
}

Func_ST_COORDDIM Func_ST_COORDDIM(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_COORDDIM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_COORDDIM(n0,n2,n4,n5); }
}

Func_ST_COVEREDBY Func_ST_COVEREDBY(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_COVEREDBY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_COVEREDBY(n0,n2,n4,n5,n7,n8); }
}

Func_ST_COVERS Func_ST_COVERS(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_COVERS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_COVERS(n0,n2,n4,n5,n7,n8); }
}

Func_ST_CROSSES Func_ST_CROSSES(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_CROSSES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_CROSSES(n0,n2,n4,n5,n7,n8); }
}

Func_ST_CURVETOLINE Func_ST_CURVETOLINE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ST_CURVETOLINE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ST_CURVETOLINE(n0,n2,n4,n5,n10); }
}

Func_ST_DATATYPE Func_ST_DATATYPE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_DATATYPE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_DATATYPE(n0,n2,n4,n5); }
}

Func_ST_DFULLYWITHIN Func_ST_DFULLYWITHIN(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_DFULLYWITHIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_DFULLYWITHIN(n0,n2,n4,n5); }
}

Func_ST_DIFFERENCE Func_ST_DIFFERENCE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_DIFFERENCE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DIFFERENCE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_DIFFERENCE(n0,n5,n7,n8,n10,n11); }
}

Func_ST_DIMENSION Func_ST_DIMENSION(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_DIMENSION_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DIMENSION_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_DIMENSION(n0,n5,n7,n8); }
}

Func_ST_DISJOINT Func_ST_DISJOINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_DISJOINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DISJOINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_DISJOINT(n0,n5,n7,n8,n10,n11); }
}

Func_ST_DISTANCE_SPHERE Func_ST_DISTANCE_SPHERE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_DISTANCE_SPHERE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_DISTANCE_SPHERE(n0,n2,n4,n5); }
}

Func_ST_DISTANCE_SPHEROID Func_ST_DISTANCE_SPHEROID(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_DISTANCE_SPHEROID_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_DISTANCE_SPHEROID(n0,n2,n4,n5); }
}

Func_ST_ENDPOINT Func_ST_ENDPOINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ENDPOINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ENDPOINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ENDPOINT(n0,n5,n7,n8); }
}

Func_ST_ENVELOPE Func_ST_ENVELOPE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ENVELOPE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ENVELOPE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ENVELOPE(n0,n5,n7,n8); }
}

Func_ST_EQUALS Func_ST_EQUALS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_EQUALS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<WORD_EQUALS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_EQUALS(n0,n5,n7,n8,n10,n11); }
}

Func_ST_EXTENT Func_ST_EXTENT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_EXTENT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<EXTENT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_EXTENT(n0,n5,n7,n8); }
}

Func_ST_EXTENT3D Func_ST_EXTENT3D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_EXTENT3D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<EXTENT3D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_EXTENT3D(n0,n5,n7,n8); }
}

Func_ST_EXTERIORRING Func_ST_EXTERIORRING(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_EXTERIORRING_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<EXTERIORRING_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_EXTERIORRING(n0,n5,n7,n8); }
}

Func_ST_FACTOR Func_ST_FACTOR(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_FACTOR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_FACTOR(n0,n2,n4,n5); }
}

Func_ST_FIND_EXTENT Func_ST_FIND_EXTENT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_FIND_EXTENT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_FIND_EXTENT(n0,n2,n4,n5); }
}

Func_ST_FORCERHR Func_ST_FORCERHR(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_FORCERHR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_FORCERHR(n0,n2,n4,n5); }
}

Func_ST_FORCE_2D Func_ST_FORCE_2D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_FORCE_2D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<FORCE_2D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_FORCE_2D(n0,n5,n7,n8); }
}

Func_ST_FORCE_3D Func_ST_FORCE_3D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_FORCE_3D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<FORCE_3D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_FORCE_3D(n0,n5,n7,n8); }
}

Func_ST_FORCE_3DM Func_ST_FORCE_3DM(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_FORCE_3DM_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<FORCE_3DM_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_FORCE_3DM(n0,n5,n7,n8); }
}

Func_ST_FORCE_3DZ Func_ST_FORCE_3DZ(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_FORCE_3DZ_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<FORCE_3DZ_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_FORCE_3DZ(n0,n5,n7,n8); }
}

Func_ST_FORCE_4D Func_ST_FORCE_4D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_FORCE_4D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<FORCE_4D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_FORCE_4D(n0,n5,n7,n8); }
}

Func_ST_FORCE_COLLECTION Func_ST_FORCE_COLLECTION(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_FORCE_COLLECTION_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<FORCE_COLLECTION_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_FORCE_COLLECTION(n0,n5,n7,n8); }
}

Func_ST_GEOMETRYTYPE Func_ST_GEOMETRYTYPE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_GEOMETRYTYPE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<GEOMETRYTYPE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_GEOMETRYTYPE(n0,n5,n7,n8); }
}

Func_ST_GEOGFROMTEXT Func_ST_GEOGFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOGFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOGFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_GEOGFROMWKB Func_ST_GEOGFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOGFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOGFROMWKB(n0,n2,n4,n5); }
}

Func_ST_GEOGRAPHYFROMTEXT Func_ST_GEOGRAPHYFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOGRAPHYFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOGRAPHYFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_GEOHASH Func_ST_GEOHASH(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOHASH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOHASH(n0,n2,n4,n5); }
}

Func_ST_GEOMCOLLFROMTEXT Func_ST_GEOMCOLLFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOMCOLLFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOMCOLLFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_GEOMCOLLFROMWKB Func_ST_GEOMCOLLFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOMCOLLFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOMCOLLFROMWKB(n0,n2,n4,n5); }
}

Func_ST_GEOMFROMEWKB Func_ST_GEOMFROMEWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOMFROMEWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOMFROMEWKB(n0,n2,n4,n5); }
}

Func_ST_GEOMFROMEWKT Func_ST_GEOMFROMEWKT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_GEOMFROMEWKT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<GEOMFROMEWKT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_GEOMFROMEWKT(n0,n5,n7,n8); }
}

Func_ST_GEOMFROMGML Func_ST_GEOMFROMGML(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOMFROMGML_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOMFROMGML(n0,n2,n4,n5); }
}

Func_ST_GEOMFROMKML Func_ST_GEOMFROMKML(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOMFROMKML_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOMFROMKML(n0,n2,n4,n5); }
}

Func_ST_GEOMFROMTEXT Func_ST_GEOMFROMTEXT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      (
         n2=<ST_GEOMFROMTEXT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<GEOMFROMTEXT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_GEOMFROMTEXT(n0,n5,n7,n8,n13); }
}

Func_ST_GEOMFROMWKB Func_ST_GEOMFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GEOMFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GEOMFROMWKB(n0,n2,n4,n5); }
}

Func_ST_GMLTOSQL Func_ST_GMLTOSQL(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_GMLTOSQL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_GMLTOSQL(n0,n2,n4,n5); }
}

Func_ST_HASARC Func_ST_HASARC(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_HASARC_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_HASARC(n0,n2,n4,n5); }
}

Func_ST_HAUSDORFFDISTANCE Func_ST_HAUSDORFFDISTANCE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<ST_HAUSDORFFDISTANCE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_HAUSDORFFDISTANCE(n0,n2,n4,n5,n7,n8,n13); }
}

Func_ST_HEIGHT Func_ST_HEIGHT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_HEIGHT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_HEIGHT(n0,n2,n4,n5); }
}

Func_ST_INTERIORRINGN Func_ST_INTERIORRINGN(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_INTERIORRINGN_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INTERIORRINGN_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_INTERIORRINGN(n0,n5,n7,n8,n10,n11); }
}

Func_ST_INTERSECTION Func_ST_INTERSECTION(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_INTERSECTION_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INTERSECTION_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_INTERSECTION(n0,n5,n7,n8,n10,n11); }
}

Func_ST_INTERSECTS Func_ST_INTERSECTS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_INTERSECTS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<INTERSECTS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_INTERSECTS(n0,n5,n7,n8,n10,n11); }
}

Func_ST_ISCLOSED Func_ST_ISCLOSED(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ISCLOSED_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ISCLOSED_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ISCLOSED(n0,n5,n7,n8); }
}

Func_ST_ISEMPTY Func_ST_ISEMPTY(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ISEMPTY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ISEMPTY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ISEMPTY(n0,n5,n7,n8); }
}

Func_ST_ISRING Func_ST_ISRING(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ISRING_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ISRING_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ISRING(n0,n5,n7,n8); }
}

Func_ST_ISSIMPLE Func_ST_ISSIMPLE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ISSIMPLE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ISSIMPLE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ISSIMPLE(n0,n5,n7,n8); }
}

Func_ST_ISVALID Func_ST_ISVALID(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ISVALID_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ISVALID_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ISVALID(n0,n5,n7,n8); }
}

Func_ST_ISVALIDREASON Func_ST_ISVALIDREASON(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_ISVALIDREASON_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_ISVALIDREASON(n0,n2,n4,n5); }
}

Func_ST_LENGTH2D Func_ST_LENGTH2D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_LENGTH2D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LENGTH2D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_LENGTH2D(n0,n5,n7,n8); }
}

Func_ST_LENGTH2D_SPHEROID Func_ST_LENGTH2D_SPHEROID(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LENGTH2D_SPHEROID_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LENGTH2D_SPHEROID(n0,n2,n4,n5); }
}

Func_ST_LENGTH3D Func_ST_LENGTH3D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_LENGTH3D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LENGTH3D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_LENGTH3D(n0,n5,n7,n8); }
}

Func_ST_LENGTH3D_SPHEROID Func_ST_LENGTH3D_SPHEROID(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LENGTH3D_SPHEROID_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LENGTH3D_SPHEROID(n0,n2,n4,n5); }
}

Func_ST_LENGTH_SPHEROID Func_ST_LENGTH_SPHEROID(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_LENGTH_SPHEROID_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_LENGTH_SPHEROID(n0,n2,n4,n5,n7,n8); }
}

Func_ST_LINECROSSINGDIRECTION Func_ST_LINECROSSINGDIRECTION(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LINECROSSINGDIRECTION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LINECROSSINGDIRECTION(n0,n2,n4,n5); }
}

Func_ST_LINEFROMMULTIPOINT Func_ST_LINEFROMMULTIPOINT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LINEFROMMULTIPOINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LINEFROMMULTIPOINT(n0,n2,n4,n5); }
}

Func_ST_LINEFROMTEXT Func_ST_LINEFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LINEFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LINEFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_LINEFROMWKB Func_ST_LINEFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LINEFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LINEFROMWKB(n0,n2,n4,n5); }
}

Func_ST_LINEMERGE Func_ST_LINEMERGE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_LINEMERGE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LINEMERGE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_LINEMERGE(n0,n5,n7,n8); }
}

Func_ST_LINESTRINGFROMWKB Func_ST_LINESTRINGFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LINESTRINGFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LINESTRINGFROMWKB(n0,n2,n4,n5); }
}

Func_ST_LINETOCURVE Func_ST_LINETOCURVE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LINETOCURVE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LINETOCURVE(n0,n2,n4,n5); }
}

Func_ST_LINE_INTERPOLATE_POINT Func_ST_LINE_INTERPOLATE_POINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_LINE_INTERPOLATE_POINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LINE_INTERPOLATE_POINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_LINE_INTERPOLATE_POINT(n0,n5,n7,n8,n10,n11); }
}

Func_ST_LINE_LOCATE_POINT Func_ST_LINE_LOCATE_POINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_LINE_LOCATE_POINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LINE_LOCATE_POINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_LINE_LOCATE_POINT(n0,n5,n7,n8,n10,n11); }
}

Func_ST_LINE_SUBSTRING Func_ST_LINE_SUBSTRING(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      (
         n2=<ST_LINE_SUBSTRING_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LINE_SUBSTRING_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new Func_ST_LINE_SUBSTRING(n0,n5,n7,n8,n10,n11,n13,n14); }
}

Func_ST_LOCATEBETWEENELEVATIONS Func_ST_LOCATEBETWEENELEVATIONS(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_LOCATEBETWEENELEVATIONS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_LOCATEBETWEENELEVATIONS(n0,n2,n4,n5); }
}

Func_ST_LOCATE_ALONG_MEASURE Func_ST_LOCATE_ALONG_MEASURE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_LOCATE_ALONG_MEASURE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LOCATE_ALONG_MEASURE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_LOCATE_ALONG_MEASURE(n0,n5,n7,n8,n10,n11); }
}

Func_ST_LOCATE_BETWEEN_MEASURES Func_ST_LOCATE_BETWEEN_MEASURES(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      (
         n2=<ST_LOCATE_BETWEEN_MEASURES_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LOCATE_BETWEEN_MEASURES_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new Func_ST_LOCATE_BETWEEN_MEASURES(n0,n5,n7,n8,n10,n11,n13,n14); }
}

Func_ST_LONGESTLINE Func_ST_LONGESTLINE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_LONGESTLINE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_LONGESTLINE(n0,n2,n4,n5,n7,n8); }
}

Func_ST_M Func_ST_M(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_M_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_M(n0,n2,n4,n5); }
}

Func_ST_MAKEENVELOPE Func_ST_MAKEENVELOPE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;
   SQLArgument n16;
   NodeToken n17;
   Token n18;

   {
   }
}
{
   n1=<ST_MAKEENVELOPE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15="," { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=SQLArgument(prn)
   n18=<PARENTHESIS_CLOSE_> { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new Func_ST_MAKEENVELOPE(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16,n17); }
}

Func_ST_MAKEPOINT Func_ST_MAKEPOINT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLArgument n17;
   NodeToken n18;
   Token n19;

   {
   }
}
{
   n1=<ST_MAKEPOINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   (
      { n14 = new NodeSequence(2); }
      n16="," { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17=SQLArgument(prn)
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   n19=<PARENTHESIS_CLOSE_> { n18 = JTBToolkit.makeNodeToken(n19); }
   
   { return new Func_ST_MAKEPOINT(n0,n2,n4,n5,n7,n8,n13,n18); }
}

Func_ST_MAKEPOINTM Func_ST_MAKEPOINTM(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<ST_MAKEPOINTM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_MAKEPOINTM(n0,n2,n4,n5,n7,n8,n10,n11); }
}

Func_ST_MAKEPOLYGON Func_ST_MAKEPOLYGON(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1=<ST_MAKEPOLYGON_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=SQLArgument(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11=<PARENTHESIS_CLOSE_> { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new Func_ST_MAKEPOLYGON(n0,n2,n4,n5,n10); }
}

Func_ST_MAXDISTANCE Func_ST_MAXDISTANCE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_MAXDISTANCE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_MAXDISTANCE(n0,n2,n4,n5,n7,n8); }
}

Func_ST_MEMCOLLECT Func_ST_MEMCOLLECT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MEMCOLLECT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MEMCOLLECT(n0,n2,n4,n5); }
}

Func_ST_MEM_SIZE Func_ST_MEM_SIZE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_MEM_SIZE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MEM_SIZE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_MEM_SIZE(n0,n5,n7,n8); }
}

Func_ST_MINIMUMBOUNDINGCIRCLE Func_ST_MINIMUMBOUNDINGCIRCLE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MINIMUMBOUNDINGCIRCLE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MINIMUMBOUNDINGCIRCLE(n0,n2,n4,n5); }
}

Func_ST_MLINEFROMTEXT Func_ST_MLINEFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MLINEFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MLINEFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_MLINEFROMWKB Func_ST_MLINEFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MLINEFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MLINEFROMWKB(n0,n2,n4,n5); }
}

Func_ST_MPOINTFROMTEXT Func_ST_MPOINTFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MPOINTFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MPOINTFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_MPOINTFROMWKB Func_ST_MPOINTFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MPOINTFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MPOINTFROMWKB(n0,n2,n4,n5); }
}

Func_ST_MPOLYFROMTEXT Func_ST_MPOLYFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MPOLYFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MPOLYFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_MPOLYFROMWKB Func_ST_MPOLYFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MPOLYFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MPOLYFROMWKB(n0,n2,n4,n5); }
}

Func_ST_MULTI Func_ST_MULTI(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_MULTI_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MULTI_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_MULTI(n0,n5,n7,n8); }
}

Func_ST_MULTILINEFROMWKB Func_ST_MULTILINEFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MULTILINEFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MULTILINEFROMWKB(n0,n2,n4,n5); }
}

Func_ST_MULTILINESTRINGFROMTEXT Func_ST_MULTILINESTRINGFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MULTILINESTRINGFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MULTILINESTRINGFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_MULTIPOINTFROMTEXT Func_ST_MULTIPOINTFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MULTIPOINTFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MULTIPOINTFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_MULTIPOINTFROMWKB Func_ST_MULTIPOINTFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MULTIPOINTFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MULTIPOINTFROMWKB(n0,n2,n4,n5); }
}

Func_ST_MULTIPOLYFROMWKB Func_ST_MULTIPOLYFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MULTIPOLYFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MULTIPOLYFROMWKB(n0,n2,n4,n5); }
}

Func_ST_MULTIPOLYGONFROMTEXT Func_ST_MULTIPOLYGONFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_MULTIPOLYGONFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_MULTIPOLYGONFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_NDIMS Func_ST_NDIMS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_NDIMS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NDIMS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_NDIMS(n0,n5,n7,n8); }
}

Func_ST_NPOINTS Func_ST_NPOINTS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_NPOINTS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NPOINTS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_NPOINTS(n0,n5,n7,n8); }
}

Func_ST_NRINGS Func_ST_NRINGS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_NRINGS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NRINGS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_NRINGS(n0,n5,n7,n8); }
}

Func_ST_NUMGEOMETRIES Func_ST_NUMGEOMETRIES(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_NUMGEOMETRIES_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NUMGEOMETRIES_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_NUMGEOMETRIES(n0,n5,n7,n8); }
}

Func_ST_NUMINTERIORRING Func_ST_NUMINTERIORRING(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_NUMINTERIORRING_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_NUMINTERIORRING(n0,n2,n4,n5); }
}

Func_ST_NUMINTERIORRINGS Func_ST_NUMINTERIORRINGS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_NUMINTERIORRINGS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NUMINTERIORRINGS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_NUMINTERIORRINGS(n0,n5,n7,n8); }
}

Func_ST_NUMPOINTS Func_ST_NUMPOINTS(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_NUMPOINTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_NUMPOINTS(n0,n2,n4,n5); }
}

Func_ST_ORDERINGEQUALS Func_ST_ORDERINGEQUALS(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_ORDERINGEQUALS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ORDERINGEQUALS(n0,n2,n4,n5,n7,n8); }
}

Func_ST_OVERLAPS Func_ST_OVERLAPS(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_OVERLAPS_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<OVERLAPS_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_OVERLAPS(n0,n5,n7,n8,n10,n11); }
}

Func_ST_PERIMETER Func_ST_PERIMETER(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_PERIMETER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_PERIMETER(n0,n2,n4,n5); }
}

Func_ST_PERIMETER2D Func_ST_PERIMETER2D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_PERIMETER2D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<PERIMETER2D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_PERIMETER2D(n0,n5,n7,n8); }
}

Func_ST_PERIMETER3D Func_ST_PERIMETER3D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_PERIMETER3D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<PERIMETER3D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_PERIMETER3D(n0,n5,n7,n8); }
}

Func_ST_POINT Func_ST_POINT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POINT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POINT(n0,n2,n4,n5); }
}

Func_ST_POINTFROMTEXT Func_ST_POINTFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POINTFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POINTFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_POINTFROMWKB Func_ST_POINTFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POINTFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POINTFROMWKB(n0,n2,n4,n5); }
}

Func_ST_POINTN Func_ST_POINTN(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POINTN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POINTN(n0,n2,n4,n5); }
}

Func_ST_POINTONSURFACE Func_ST_POINTONSURFACE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POINTONSURFACE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POINTONSURFACE(n0,n2,n4,n5); }
}

Func_ST_POINT_INSIDE_CIRCLE Func_ST_POINT_INSIDE_CIRCLE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POINT_INSIDE_CIRCLE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POINT_INSIDE_CIRCLE(n0,n2,n4,n5); }
}

Func_ST_POLYFROMTEXT Func_ST_POLYFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POLYFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POLYFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_POLYFROMWKB Func_ST_POLYFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POLYFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POLYFROMWKB(n0,n2,n4,n5); }
}

Func_ST_POLYGON Func_ST_POLYGON(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POLYGON_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POLYGON(n0,n2,n4,n5); }
}

Func_ST_POLYGONFROMTEXT Func_ST_POLYGONFROMTEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POLYGONFROMTEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POLYGONFROMTEXT(n0,n2,n4,n5); }
}

Func_ST_POLYGONFROMWKB Func_ST_POLYGONFROMWKB(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POLYGONFROMWKB_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POLYGONFROMWKB(n0,n2,n4,n5); }
}

Func_ST_POSTGIS_GIST_JOINSEL Func_ST_POSTGIS_GIST_JOINSEL(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POSTGIS_GIST_JOINSEL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POSTGIS_GIST_JOINSEL(n0,n2,n4,n5); }
}

Func_ST_POSTGIS_GIST_SEL Func_ST_POSTGIS_GIST_SEL(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_POSTGIS_GIST_SEL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_POSTGIS_GIST_SEL(n0,n2,n4,n5); }
}

Func_ST_RELATE Func_ST_RELATE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<ST_RELATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_ST_RELATE(n0,n2,n4,n5,n7,n8,n13); }
}

Func_ST_REMOVEPOINT Func_ST_REMOVEPOINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_REMOVEPOINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<REMOVEPOINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_REMOVEPOINT(n0,n5,n7,n8,n10,n11); }
}

Func_ST_REVERSE Func_ST_REVERSE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_REVERSE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_REVERSE(n0,n2,n4,n5); }
}

Func_ST_ROTATEX Func_ST_ROTATEX(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_ROTATEX_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ROTATEX_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_ROTATEX(n0,n5,n7,n8,n10,n11); }
}

Func_ST_ROTATEY Func_ST_ROTATEY(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_ROTATEY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ROTATEY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_ROTATEY(n0,n5,n7,n8,n10,n11); }
}

Func_ST_ROTATEZ Func_ST_ROTATEZ(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   SQLArgument n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
}
{
   (
      (
         n2=<ST_ROTATEZ_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ROTATEZ_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<ST_ROTATE_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<ROTATE_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   n10=<PARENTHESIS_START_> { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=SQLArgument(prn)
   n13="," { n12 = JTBToolkit.makeNodeToken(n13); }
   n14=SQLArgument(prn)
   n16=<PARENTHESIS_CLOSE_> { n15 = JTBToolkit.makeNodeToken(n16); }
   
   { return new Func_ST_ROTATEZ(n0,n9,n11,n12,n14,n15); }
}

Func_ST_SCALE Func_ST_SCALE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   SQLArgument n18;
   NodeToken n19;
   Token n20;

   {
   }
}
{
   (
      (
         n2=<ST_SCALE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SCALE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   (
      { n15 = new NodeSequence(2); }
      n17="," { n16 = JTBToolkit.makeNodeToken(n17); }
      { n15.addNode(n16); }
      n18=SQLArgument(prn)
      { n15.addNode(n18); }
      { n14.addNode(n15); }
   )?
   n20=<PARENTHESIS_CLOSE_> { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new Func_ST_SCALE(n0,n5,n7,n8,n10,n11,n13,n14,n19); }
}

Func_ST_SEGMENTIZE Func_ST_SEGMENTIZE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_SEGMENTIZE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SEGMENTIZE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_SEGMENTIZE(n0,n5,n7,n8,n10,n11); }
}

Func_ST_SETFACTOR Func_ST_SETFACTOR(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_SETFACTOR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_SETFACTOR(n0,n2,n4,n5); }
}

Func_ST_SETPOINT Func_ST_SETPOINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      (
         n2=<ST_SETPOINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SETPOINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new Func_ST_SETPOINT(n0,n5,n7,n8,n10,n11,n13,n14); }
}

Func_ST_SETSRID Func_ST_SETSRID(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_SETSRID_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SETSRID_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_SETSRID(n0,n5,n7,n8,n10,n11); }
}

Func_ST_SHIFT_LONGITUDE Func_ST_SHIFT_LONGITUDE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_SHIFT_LONGITUDE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_SHIFT_LONGITUDE(n0,n2,n4,n5); }
}

Func_ST_SHORTESTLINE Func_ST_SHORTESTLINE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_SHORTESTLINE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_SHORTESTLINE(n0,n2,n4,n5,n7,n8); }
}

Func_ST_SIMPLIFY Func_ST_SIMPLIFY(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_SIMPLIFY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SIMPLIFY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_SIMPLIFY(n0,n5,n7,n8,n10,n11); }
}

Func_ST_SIMPLIFYPRESERVETOPOLOGY Func_ST_SIMPLIFYPRESERVETOPOLOGY(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_SIMPLIFYPRESERVETOPOLOGY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_SIMPLIFYPRESERVETOPOLOGY(n0,n2,n4,n5); }
}

Func_ST_SNAPTOGRID Func_ST_SNAPTOGRID(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   SQLArgument n20;
   NodeOptional n21 = new NodeOptional();
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   SQLArgument n25;
   NodeOptional n26 = new NodeOptional();
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   SQLArgument n30;
   NodeToken n31;
   Token n32;

   {
   }
}
{
   (
      (
         n2=<ST_SNAPTOGRID_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SNAPTOGRID_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      LOOKAHEAD(3)
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   (
      LOOKAHEAD(3)
      { n17 = new NodeSequence(2); }
      n19="," { n18 = JTBToolkit.makeNodeToken(n19); }
      { n17.addNode(n18); }
      n20=SQLArgument(prn)
      { n17.addNode(n20); }
      { n16.addNode(n17); }
   )?
   (
      LOOKAHEAD(3)
      { n22 = new NodeSequence(2); }
      n24="," { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n25=SQLArgument(prn)
      { n22.addNode(n25); }
      { n21.addNode(n22); }
   )?
   (
      { n27 = new NodeSequence(2); }
      n29="," { n28 = JTBToolkit.makeNodeToken(n29); }
      { n27.addNode(n28); }
      n30=SQLArgument(prn)
      { n27.addNode(n30); }
      { n26.addNode(n27); }
   )?
   n32=<PARENTHESIS_CLOSE_> { n31 = JTBToolkit.makeNodeToken(n32); }
   
   { return new Func_ST_SNAPTOGRID(n0,n5,n7,n8,n10,n11,n16,n21,n26,n31); }
}

Func_ST_SRID Func_ST_SRID(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_SRID_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SRID_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_SRID(n0,n5,n7,n8); }
}

Func_ST_STARTPOINT Func_ST_STARTPOINT(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_STARTPOINT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<STARTPOINT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_STARTPOINT(n0,n5,n7,n8); }
}

Func_ST_SUMMARY Func_ST_SUMMARY(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_SUMMARY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_SUMMARY(n0,n2,n4,n5); }
}

Func_ST_SYMDIFFERENCE Func_ST_SYMDIFFERENCE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_SYMDIFFERENCE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SYMDIFFERENCE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_SYMDIFFERENCE(n0,n5,n7,n8,n10,n11); }
}

Func_ST_SYMMETRICDIFFERENCE Func_ST_SYMMETRICDIFFERENCE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_SYMMETRICDIFFERENCE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_SYMMETRICDIFFERENCE(n0,n2,n4,n5); }
}

Func_ST_TEXT Func_ST_TEXT(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_TEXT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_TEXT(n0,n2,n4,n5); }
}

Func_ST_TOUCHES Func_ST_TOUCHES(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ST_TOUCHES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_TOUCHES(n0,n2,n4,n5,n7,n8); }
}

Func_ST_TRANSLATE Func_ST_TRANSLATE(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<ST_TRANSLATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   (
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=SQLArgument(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_ST_TRANSLATE(n0,n2,n4,n5,n7,n8,n10,n11,n16); }
}

Func_ST_TRANSSCALE Func_ST_TRANSSCALE(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;
   SQLArgument n16;
   NodeToken n17;
   Token n18;
   SQLArgument n19;
   NodeToken n20;
   Token n21;

   {
   }
}
{
   (
      (
         n2=<ST_TRANSSCALE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<TRANSSCALE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
   n13=SQLArgument(prn)
   n15="," { n14 = JTBToolkit.makeNodeToken(n15); }
   n16=SQLArgument(prn)
   n18="," { n17 = JTBToolkit.makeNodeToken(n18); }
   n19=SQLArgument(prn)
   n21=<PARENTHESIS_CLOSE_> { n20 = JTBToolkit.makeNodeToken(n21); }
   
   { return new Func_ST_TRANSSCALE(n0,n5,n7,n8,n10,n11,n13,n14,n16,n17,n19,n20); }
}

Func_ST_WIDTH Func_ST_WIDTH(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_WIDTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_WIDTH(n0,n2,n4,n5); }
}

Func_ST_WITHIN Func_ST_WITHIN(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_WITHIN_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<WITHIN_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_WITHIN(n0,n5,n7,n8,n10,n11); }
}

Func_ST_WKBTOSQL Func_ST_WKBTOSQL(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_WKBTOSQL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_WKBTOSQL(n0,n2,n4,n5); }
}

Func_ST_WKTTOSQL Func_ST_WKTTOSQL(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<ST_WKTTOSQL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_ST_WKTTOSQL(n0,n2,n4,n5); }
}

Func_ST_X Func_ST_X(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_X_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<X_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_X(n0,n5,n7,n8); }
}

Func_ST_Y Func_ST_Y(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_Y_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<Y_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_Y(n0,n5,n7,n8); }
}

Func_ST_Z Func_ST_Z(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_Z_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<Z_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_Z(n0,n5,n7,n8); }
}

Func_ST_ZMFLAG Func_ST_ZMFLAG(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_ZMFLAG_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<ZMFLAG_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_ZMFLAG(n0,n5,n7,n8); }
}

Func_ST_BOX2D Func_ST_BOX2D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_BOX2D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<BOX2D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_BOX2D(n0,n5,n7,n8); }
}

Func_ST_BOX3D Func_ST_BOX3D(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_BOX3D_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<BOX3D_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_BOX3D(n0,n5,n7,n8); }
}

Func_ST_GEOMETRY Func_ST_GEOMETRY(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<ST_GEOMETRY_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<GEOMETRY_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_ST_GEOMETRY(n0,n5,n7,n8); }
}

Func_ST_GEOMETRYN Func_ST_GEOMETRYN(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<ST_GEOMETRYN_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<GEOMETRYN_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9="," { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=SQLArgument(prn)
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_ST_GEOMETRYN(n0,n5,n7,n8,n10,n11); }
}

Func_POSTGIS_DROPBBOX Func_POSTGIS_DROPBBOX(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      (
         n2=<POSTGIS_DROPBBOX_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DROPBBOX_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_POSTGIS_DROPBBOX(n0,n5,n7,n8); }
}

length length(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new length(n0); }
}

position position(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<INT_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new position(n0); }
}

TableColumn TableColumn(PrintStream prn) :
{
   extendbObject n0;

   {
   }
}
{
   n0=extendbObject(prn)
   
   { return new TableColumn(n0); }
}

extendbObject extendbObject(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   Identifier n6;

   {
   }
}
{
   (
      (
         LOOKAHEAD(2)
         { n1 = new NodeSequence(4); }
         n2=TableName(prn)
         { n1.addNode(n2); }
         n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
         { n1.addNode(n3); }
         n5=Identifier(prn)
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n6=Identifier(prn)
         { n0 = new NodeChoice(n6, 1); }
      )
      
   )
   
   { return new extendbObject(n0); }
}

SelectAliasSpec SelectAliasSpec(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   AliasName n3;

   {
   }
}
{
   (
      n2=<AS_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=AliasName(prn)
   
   { return new SelectAliasSpec(n0,n3); }
}

AliasName AliasName(PrintStream prn) :
{
   Identifier n0;

   {
   }
}
{
   n0=Identifier(prn)
   
   { return new AliasName(n0); }
}

SQLComplexExpression SQLComplexExpression(PrintStream prn) :
{
   SQLAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLORExpression n2;

   {
   }
}
{
   n0=SQLAndExpression(prn)
   (
      n2=SQLORExpression(prn)
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLComplexExpression(n0,n1); }
}

SQLAndExpression SQLAndExpression(PrintStream prn) :
{
   SQLUnaryLogicalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   SQLAndExp n5;

   {
      Token t;
   }
}
{
   n0=SQLUnaryLogicalExpression(prn)
   (
      LOOKAHEAD(2)
      n3=<LEFTOUTER_> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   (
      n5=SQLAndExp(prn)
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
   { return new SQLAndExpression(n0,n1,n4); }
}

SQLORExpression SQLORExpression(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLAndExpression n2;

   {
   }
}
{
   n1=<OR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLAndExpression(prn)
   
   { return new SQLORExpression(n0,n2); }
}

SQLAndExp SQLAndExp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLUnaryLogicalExpression n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<AND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLUnaryLogicalExpression(prn)
   (
      LOOKAHEAD(2)
      n5=<LEFTOUTER_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
   )?
   
   { return new SQLAndExp(n0,n2,n3); }
}

SQLUnaryLogicalExpression SQLUnaryLogicalExpression(PrintStream prn) :
{
   NodeChoice n0;
   ExistsClause n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   SQLCondResult n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   SQLRelationalExpression n11;

   {
   }
}
{
   (
      (
         LOOKAHEAD(2)
         n1=ExistsClause(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(2)
         { n2 = new NodeSequence(3); }
         (
            n5=<NOT_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         n6=SQLCondResult(prn)
         { n2.addNode(n6); }
         { n0 = new NodeChoice(n2, 1); }
      |
         LOOKAHEAD(2)
         { n7 = new NodeSequence(3); }
         (
            n10=<NOT_> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
         )?
         { n7.addNode(n8); }
         n11=SQLRelationalExpression(prn)
         { n7.addNode(n11); }
         { n0 = new NodeChoice(n7, 2); }
      )
      
   )
   
   { return new SQLUnaryLogicalExpression(n0); }
}

SQLCondResult SQLCondResult(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<TRUE_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FALSE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new SQLCondResult(n0); }
}

ExistsClause ExistsClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SubQuery n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   (
      n2=<NOT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4="EXISTS" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SubQuery(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new ExistsClause(n0,n3,n5,n7,n8); }
}

SQLRelationalExpression SQLRelationalExpression(PrintStream prn) :
{
   NodeChoice n0;
   SQLExpressionList n1;
   SQLSimpleExpression n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   SQLRelationalOperatorExpression n5;
   NodeChoice n6;
   SQLInClause n7;
   SQLBetweenClause n8;
   SQLLikeClause n9;
   IsNullClause n10;
   IsBooleanClause n11;

   {
   }
}
{
   (
      (
         LOOKAHEAD(<PARENTHESIS_START_> SQLSimpleExpression(prn) ",")
         n1=SQLExpressionList(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=SQLSimpleExpression(prn)
         { n0 = new NodeChoice(n2, 1); }
      )
      
   )
   (
      (
         LOOKAHEAD(2)
         n5=SQLRelationalOperatorExpression(prn)
         { n4 = new NodeChoice(n5, 0); }
      |
         (
            (
               LOOKAHEAD(2)
               n7=SQLInClause(prn)
               { n6 = new NodeChoice(n7, 0); }
            |
               LOOKAHEAD(2)
               n8=SQLBetweenClause(prn)
               { n6 = new NodeChoice(n8, 1); }
            |
               LOOKAHEAD(2)
               n9=SQLLikeClause(prn)
               { n6 = new NodeChoice(n9, 2); }
            )
            
         )
         { n4 = new NodeChoice(n6, 1); }
      |
         LOOKAHEAD(3)
         n10=IsNullClause(prn)
         { n4 = new NodeChoice(n10, 2); }
      |
         n11=IsBooleanClause(prn)
         { n4 = new NodeChoice(n11, 3); }
      )
      { n3.addNode(n4); }
   )?
   
   { return new SQLRelationalExpression(n0,n3); }
}

SQLRelationalOperatorExpression SQLRelationalOperatorExpression(PrintStream prn) :
{
   Relop n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SubQuery n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   SQLExpressionList n21;
   NodeToken n22;
   Token n23;
   SQLSimpleExpression n24;

   {
   }
}
{
   n0=Relop(prn)
   (
      (
         LOOKAHEAD("ANY" | "ALL" | "SOME")
         { n2 = new NodeSequence(3); }
         (
            (
               n6="ALL" { n5 = JTBToolkit.makeNodeToken(n6); }
               { n4 = new NodeChoice(n5, 0); }
            |
               n8="ANY" { n7 = JTBToolkit.makeNodeToken(n8); }
               { n4 = new NodeChoice(n7, 1); }
            |
               n10="SOME" { n9 = JTBToolkit.makeNodeToken(n10); }
               { n4 = new NodeChoice(n9, 2); }
            )
            { n3.addNode(n4); }
         )?
         { n2.addNode(n3); }
         (
            (
               LOOKAHEAD(<PARENTHESIS_START_> SubQuery(prn))
               { n12 = new NodeSequence(4); }
               n14=<PARENTHESIS_START_> { n13 = JTBToolkit.makeNodeToken(n14); }
               { n12.addNode(n13); }
               n15=SubQuery(prn)
               { n12.addNode(n15); }
               n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
               { n12.addNode(n16); }
               { n11 = new NodeChoice(n12, 0); }
            |
               { n18 = new NodeSequence(3); }
               n20=<PARENTHESIS_START_> { n19 = JTBToolkit.makeNodeToken(n20); }
               { n18.addNode(n19); }
               n21=SQLExpressionList(prn)
               { n18.addNode(n21); }
               n23=<PARENTHESIS_CLOSE_> { n22 = JTBToolkit.makeNodeToken(n23); }
               { n18.addNode(n22); }
               { n11 = new NodeChoice(n18, 1); }
            )
            
         )
         { n2.addNode(n11); }
         { n1 = new NodeChoice(n2, 0); }
      |
         n24=SQLSimpleExpression(prn)
         { n1 = new NodeChoice(n24, 1); }
      )
      
   )
   
   { return new SQLRelationalOperatorExpression(n0,n1); }
}

Relop Relop(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;

   {
   }
}
{
   (
      (
         n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="!=" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="#" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="<>" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=">" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=">=" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14="<" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16="<=" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18="&&" { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20="&<" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22="&<|" { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      |
         n24="&>" { n23 = JTBToolkit.makeNodeToken(n24); }
         { n0 = new NodeChoice(n23, 11); }
      |
         n26="<<" { n25 = JTBToolkit.makeNodeToken(n26); }
         { n0 = new NodeChoice(n25, 12); }
      |
         n28="<<|" { n27 = JTBToolkit.makeNodeToken(n28); }
         { n0 = new NodeChoice(n27, 13); }
      |
         n30=">>" { n29 = JTBToolkit.makeNodeToken(n30); }
         { n0 = new NodeChoice(n29, 14); }
      |
         n32="@" { n31 = JTBToolkit.makeNodeToken(n32); }
         { n0 = new NodeChoice(n31, 15); }
      |
         n34="|&>" { n33 = JTBToolkit.makeNodeToken(n34); }
         { n0 = new NodeChoice(n33, 16); }
      |
         n36="|>>" { n35 = JTBToolkit.makeNodeToken(n36); }
         { n0 = new NodeChoice(n35, 17); }
      |
         n38="~" { n37 = JTBToolkit.makeNodeToken(n38); }
         { n0 = new NodeChoice(n37, 18); }
      |
         n40="~=" { n39 = JTBToolkit.makeNodeToken(n40); }
         { n0 = new NodeChoice(n39, 19); }
      )
      
   )
   
   { return new Relop(n0); }
}

SQLInClause SQLInClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SubQuery n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   SQLExpressionList n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      n2=<NOT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<IN_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      (
         LOOKAHEAD(<PARENTHESIS_START_> SubQuery(prn))
         { n6 = new NodeSequence(3); }
         n8=<PARENTHESIS_START_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=SubQuery(prn)
         { n6.addNode(n9); }
         { n5 = new NodeChoice(n6, 0); }
      |
         { n10 = new NodeSequence(2); }
         n12=<PARENTHESIS_START_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=SQLExpressionList(prn)
         { n10.addNode(n13); }
         { n5 = new NodeChoice(n10, 1); }
      )
      
   )
   n15=<PARENTHESIS_CLOSE_> { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new SQLInClause(n0,n3,n5,n14); }
}

SQLBetweenClause SQLBetweenClause(PrintStream prn) :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   {
   }
}
{
   (
      n2=<NOT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<BETWEEN_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=SQLSimpleExpression(prn)
   n7="AND" { n6 = JTBToolkit.makeNodeToken(n7); }
   n8=SQLSimpleExpression(prn)
   
   { return new SQLBetweenClause(n0,n3,n5,n6,n8); }
}

SQLLikeClause SQLLikeClause(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   SQLSimpleExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLSimpleExpression n17;
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   SQLSimpleExpression n30;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(4); }
         (
            n4=<NOT_> { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2.addNode(n3); }
         )?
         { n1.addNode(n2); }
         (
            (
               n7=<LIKE_> { n6 = JTBToolkit.makeNodeToken(n7); }
               { n5 = new NodeChoice(n6, 0); }
            |
               n9=<ILIKE_> { n8 = JTBToolkit.makeNodeToken(n9); }
               { n5 = new NodeChoice(n8, 1); }
            |
               n11=<SIMILAR_TO_> { n10 = JTBToolkit.makeNodeToken(n11); }
               { n5 = new NodeChoice(n10, 2); }
            )
            
         )
         { n1.addNode(n5); }
         n12=SQLSimpleExpression(prn)
         { n1.addNode(n12); }
         (
            { n14 = new NodeSequence(2); }
            n16=<ESCAPE_> { n15 = JTBToolkit.makeNodeToken(n16); }
            { n14.addNode(n15); }
            n17=SQLSimpleExpression(prn)
            { n14.addNode(n17); }
            { n13.addNode(n14); }
         )?
         { n1.addNode(n13); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n18 = new NodeSequence(2); }
         (
            (
               n21=<NOT_BITWISE_> { n20 = JTBToolkit.makeNodeToken(n21); }
               { n19 = new NodeChoice(n20, 0); }
            |
               n23=<REGEX_NOT_MATCHES_> { n22 = JTBToolkit.makeNodeToken(n23); }
               { n19 = new NodeChoice(n22, 1); }
            |
               n25=<REGEX_MATCHES_CASE_INSTV_> { n24 = JTBToolkit.makeNodeToken(n25); }
               { n19 = new NodeChoice(n24, 2); }
            |
               n27=<REGEX_NOT_MATCHES_CASE_INSTV_> { n26 = JTBToolkit.makeNodeToken(n27); }
               { n19 = new NodeChoice(n26, 3); }
            |
               n29=<OVERLAPS_> { n28 = JTBToolkit.makeNodeToken(n29); }
               { n19 = new NodeChoice(n28, 4); }
            )
            
         )
         { n18.addNode(n19); }
         n30=SQLSimpleExpression(prn)
         { n18.addNode(n30); }
         { n0 = new NodeChoice(n18, 1); }
      )
      
   )
   
   { return new SQLLikeClause(n0); }
}

SubQuery SubQuery(PrintStream prn) :
{
   SelectWithoutOrder n0;

   {
   }
}
{
   n0=SelectWithoutOrder(prn)
   
   { return new SubQuery(n0); }
}

IsNullClause IsNullClause(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3="IS" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8="=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         n10="!=" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   n12="NULL" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new IsNullClause(n0,n11); }
}

IsBooleanClause IsBooleanClause(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3="IS" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         (
            n6=<NOT_> { n5 = JTBToolkit.makeNodeToken(n6); }
            { n4.addNode(n5); }
         )?
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n8="=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 1); }
      |
         n10="!=" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 2); }
      )
      
   )
   (
      (
         n13="TRUE" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11 = new NodeChoice(n12, 0); }
      |
         n15="FALSE" { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11 = new NodeChoice(n14, 1); }
      )
      
   )
   
   { return new IsBooleanClause(n0,n11); }
}

IntoClause IntoClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   TableName n11;

   {
   }
}
{
   n1=<INTO_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<TEMPORARY_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<TEMP_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      n10=<TABLE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n11=TableName(prn)
   
   { return new IntoClause(n0,n2,n8,n11); }
}

FromClause FromClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   TableList n2;

   {
   }
}
{
   n1=<FROM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TableList(prn)
   
   { return new FromClause(n0,n2); }
}

TableSpec TableSpec(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   TableName n2;
   NodeOptional n3 = new NodeOptional();
   SelectAliasSpec n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   SelectWithoutOrder n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   SelectAliasSpec n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ColumnNameList n17;
   NodeToken n18;
   Token n19;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=TableName(prn)
      { n1.addNode(n2); }
      (
         LOOKAHEAD(2)
         n4=SelectAliasSpec(prn)
         { n3.addNode(n4); }
      )?
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(5); }
      n7=<PARENTHESIS_START_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=SelectWithoutOrder(prn)
      { n5.addNode(n8); }
      n10=<PARENTHESIS_CLOSE_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      (
         LOOKAHEAD(2)
         n12=SelectAliasSpec(prn)
         { n11.addNode(n12); }
      )?
      { n5.addNode(n11); }
      (
         { n14 = new NodeSequence(3); }
         n16=<PARENTHESIS_START_> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n14.addNode(n15); }
         n17=ColumnNameList(prn)
         { n14.addNode(n17); }
         n19=<PARENTHESIS_CLOSE_> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n14.addNode(n18); }
         { n13.addNode(n14); }
      )?
      { n5.addNode(n13); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new TableSpec(n0); }
}

TableList TableList(PrintStream prn) :
{
   FromTableSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   FromTableSpec n5;

   {
   }
}
{
   n0=FromTableSpec(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=FromTableSpec(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new TableList(n0,n1); }
}

FromTableSpec FromTableSpec(PrintStream prn) :
{
   TableSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   TableSpec n8;
   NodeChoice n9;
   NodeSequence n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   TableSpec n16;
   JoinSpec n17;
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   TableSpec n31;
   JoinSpec n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeChoice n36;
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   TableSpec n43;
   NodeSequence n44;
   NodeChoice n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   TableSpec n57;

   {
   }
}
{
   n0=TableSpec(prn)
   (
      { n11 = new NodeOptional(); }
      { n26 = new NodeOptional(); }
      { n38 = new NodeOptional(); }
      { n52 = new NodeOptional(); }
      (
         { n3 = new NodeSequence(3); }
         n5=<CROSS_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<JOIN_> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         n8=TableSpec(prn)
         { n3.addNode(n8); }
         { n2 = new NodeChoice(n3, 0); }
      |
         (
            (
               { n10 = new NodeSequence(4); }
               (
                  n13=<INNER_> { n12 = JTBToolkit.makeNodeToken(n13); }
                  { n11.addNode(n12); }
               )?
               { n10.addNode(n11); }
               n15=<JOIN_> { n14 = JTBToolkit.makeNodeToken(n15); }
               { n10.addNode(n14); }
               n16=TableSpec(prn)
               { n10.addNode(n16); }
               n17=JoinSpec(prn)
               { n10.addNode(n17); }
               { n9 = new NodeChoice(n10, 0); }
            |
               { n18 = new NodeSequence(5); }
               (
                  (
                     n21=<LEFT_> { n20 = JTBToolkit.makeNodeToken(n21); }
                     { n19 = new NodeChoice(n20, 0); }
                  |
                     n23=<RIGHT_> { n22 = JTBToolkit.makeNodeToken(n23); }
                     { n19 = new NodeChoice(n22, 1); }
                  |
                     n25=<FULL_> { n24 = JTBToolkit.makeNodeToken(n25); }
                     { n19 = new NodeChoice(n24, 2); }
                  )
                  
               )
               { n18.addNode(n19); }
               (
                  n28=<OUTER_> { n27 = JTBToolkit.makeNodeToken(n28); }
                  { n26.addNode(n27); }
               )?
               { n18.addNode(n26); }
               n30=<JOIN_> { n29 = JTBToolkit.makeNodeToken(n30); }
               { n18.addNode(n29); }
               n31=TableSpec(prn)
               { n18.addNode(n31); }
               n32=JoinSpec(prn)
               { n18.addNode(n32); }
               { n9 = new NodeChoice(n18, 1); }
            )
            
         )
         { n2 = new NodeChoice(n9, 1); }
      |
         { n33 = new NodeSequence(2); }
         n35=<NATURAL_> { n34 = JTBToolkit.makeNodeToken(n35); }
         { n33.addNode(n34); }
         (
            (
               { n37 = new NodeSequence(3); }
               (
                  n40=<INNER_> { n39 = JTBToolkit.makeNodeToken(n40); }
                  { n38.addNode(n39); }
               )?
               { n37.addNode(n38); }
               n42=<JOIN_> { n41 = JTBToolkit.makeNodeToken(n42); }
               { n37.addNode(n41); }
               n43=TableSpec(prn)
               { n37.addNode(n43); }
               { n36 = new NodeChoice(n37, 0); }
            |
               { n44 = new NodeSequence(4); }
               (
                  (
                     n47=<LEFT_> { n46 = JTBToolkit.makeNodeToken(n47); }
                     { n45 = new NodeChoice(n46, 0); }
                  |
                     n49=<RIGHT_> { n48 = JTBToolkit.makeNodeToken(n49); }
                     { n45 = new NodeChoice(n48, 1); }
                  |
                     n51=<FULL_> { n50 = JTBToolkit.makeNodeToken(n51); }
                     { n45 = new NodeChoice(n50, 2); }
                  )
                  
               )
               { n44.addNode(n45); }
               (
                  n54=<OUTER_> { n53 = JTBToolkit.makeNodeToken(n54); }
                  { n52.addNode(n53); }
               )?
               { n44.addNode(n52); }
               n56=<JOIN_> { n55 = JTBToolkit.makeNodeToken(n56); }
               { n44.addNode(n55); }
               n57=TableSpec(prn)
               { n44.addNode(n57); }
               { n36 = new NodeChoice(n44, 1); }
            )
            
         )
         { n33.addNode(n36); }
         { n2 = new NodeChoice(n33, 2); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FromTableSpec(n0,n1); }
}

JoinSpec JoinSpec(PrintStream prn) :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLComplexExpression n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   ColumnNameList n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      n3="ON" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=SQLComplexExpression(prn)
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(4); }
      n7=<USING_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<PARENTHESIS_START_> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      n10=ColumnNameList(prn)
      { n5.addNode(n10); }
      n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n5.addNode(n11); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new JoinSpec(n0); }
}

WhereClause WhereClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLComplexExpression n2;

   {
   }
}
{
   n1=<WHERE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLComplexExpression(prn)
   
   { return new WhereClause(n0,n2); }
}

GroupByClause GroupByClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLExpressionList n2;

   {
   }
}
{
   n1=<GROUP_BY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLExpressionList(prn)
   
   { return new GroupByClause(n0,n2); }
}

SQLExpressionList SQLExpressionList(PrintStream prn) :
{
   SQLExpressionListItem n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLExpressionListItem n5;

   {
   }
}
{
   n0=SQLExpressionListItem(prn)
   (
      LOOKAHEAD("," SQLExpressionListItem(prn))
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SQLExpressionListItem(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SQLExpressionList(n0,n1); }
}

SQLExpressionListItem SQLExpressionListItem(PrintStream prn) :
{
   SQLSimpleExpression n0;

   {
   }
}
{
   n0=SQLSimpleExpression(prn)
   
   { return new SQLExpressionListItem(n0); }
}

HavingClause HavingClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   SQLComplexExpression n2;

   {
   }
}
{
   n1="HAVING" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SQLComplexExpression(prn)
   
   { return new HavingClause(n0,n2); }
}

OrderByClause OrderByClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   OrderByItem n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   OrderByItem n7;

   {
   }
}
{
   n1=<ORDER_BY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OrderByItem(prn)
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=OrderByItem(prn)
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new OrderByClause(n0,n2,n3); }
}

LimitClause LimitClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<LIMIT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=<INT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<ALL_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new LimitClause(n0,n2); }
}

OffsetClause OffsetClause(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1=<OFFSET_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new OffsetClause(n0,n2); }
}

OrderByItem OrderByItem(PrintStream prn) :
{
   SQLSimpleExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n0=SQLSimpleExpression(prn)
   (
      (
         n4="ASC" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6="DESC" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new OrderByItem(n0,n1); }
}

Func_AddDate Func_AddDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ADDDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_AddDate(n0,n2,n4,n5,n7,n8); }
}

Func_AddTime Func_AddTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ADDTIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_AddTime(n0,n2,n4,n5,n7,n8); }
}

Func_Date Func_Date(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Date(n0,n2,n4,n5); }
}

Func_DateDiff Func_DateDiff(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<DATEDIFF_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_DateDiff(n0,n2,n4,n5,n7,n8); }
}

Func_Day Func_Day(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAY_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Day(n0,n2,n4,n5); }
}

Func_DayName Func_DayName(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYNAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayName(n0,n2,n4,n5); }
}

Func_DayOfMonth Func_DayOfMonth(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYOFMONTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayOfMonth(n0,n2,n4,n5); }
}

Func_DayOfWeek Func_DayOfWeek(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYOFWEEK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayOfWeek(n0,n2,n4,n5); }
}

Func_DayOfYear Func_DayOfYear(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<DAYOFYEAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_DayOfYear(n0,n2,n4,n5); }
}

Func_MonthName Func_MonthName(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MONTHNAME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_MonthName(n0,n2,n4,n5); }
}

Func_SubDate Func_SubDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<SUBDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_SubDate(n0,n2,n4,n5,n7,n8); }
}

Func_SubTime Func_SubTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1="SUBTIME" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   n9=<PARENTHESIS_CLOSE_> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Func_SubTime(n0,n2,n4,n5,n7,n8); }
}

Func_Time Func_Time(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<TIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Time(n0,n2,n4,n5); }
}

Func_CurrentDate Func_CurrentDate(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2=<CURDATE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DATE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Func_CurrentDate(n0,n5,n7); }
}

Func_PgCurrentDate Func_PgCurrentDate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<CURRENTDATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Func_PgCurrentDate(n0); }
}

Func_PgCurrentTime Func_PgCurrentTime(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<CURRENT_TIME_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_PgCurrentTime(n0,n2); }
}

Func_CurrentTime Func_CurrentTime(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      (
         n2=<CURTIME_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<TIME_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<PARENTHESIS_START_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Func_CurrentTime(n0,n5,n7); }
}

Func_PgCurrentTimeStamp Func_PgCurrentTimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<CURRENT_TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<PARENTHESIS_START_> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=SQLArgument(prn)
      { n3.addNode(n6); }
      n8=<PARENTHESIS_CLOSE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   
   { return new Func_PgCurrentTimeStamp(n0,n2); }
}

Func_Year Func_Year(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<YEAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Year(n0,n2,n4,n5); }
}

Func_Month Func_Month(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MONTH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Month(n0,n2,n4,n5); }
}

Func_Minute Func_Minute(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<MINUTE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Minute(n0,n2,n4,n5); }
}

Func_Hour Func_Hour(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<HOUR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Hour(n0,n2,n4,n5); }
}

Func_Second Func_Second(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SECOND_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_Second(n0,n2,n4,n5); }
}

Func_TimeStamp Func_TimeStamp(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLArgument n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   n1=<TIMESTAMP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=SQLArgument(prn)
      { n4.addNode(n5); }
   )?
   n7=<PARENTHESIS_CLOSE_> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new Func_TimeStamp(n0,n2,n4,n6); }
}

Func_WeekOfYear Func_WeekOfYear(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<WEEKOFYEAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_WeekOfYear(n0,n2,n4,n5); }
}

Func_Now Func_Now(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<NOW_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<PARENTHESIS_CLOSE_> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Func_Now(n0,n2,n4); }
}

Func_SoundEx Func_SoundEx(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<SOUNDEX_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_SoundEx(n0,n2,n4,n5); }
}

Func_InitCap Func_InitCap(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<INITCAP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_InitCap(n0,n2,n4,n5); }
}

Func_LFill Func_LFill(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   n1=<LFILL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=SQLArgument(prn)
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=SQLArgument(prn)
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=<PARENTHESIS_CLOSE_> { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Func_LFill(n0,n2,n4,n5,n7,n8,n13); }
}

Func_MapChar Func_MapChar(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<MAPCHAR_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   (
      LOOKAHEAD(2)
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=<INT_LITERAL> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      LOOKAHEAD(2)
      { n12 = new NodeSequence(2); }
      n14="," { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Identifier(prn)
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   n17=<PARENTHESIS_CLOSE_> { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new Func_MapChar(n0,n2,n4,n5,n11,n16); }
}

Func_NUM Func_NUM(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<NUM_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<PARENTHESIS_CLOSE_> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new Func_NUM(n0,n2,n4,n5); }
}

Func_Cast Func_Cast(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   types n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   n1=<CAST_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PARENTHESIS_START_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=SQLArgument(prn)
   n6=<AS_> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      (
         n8=types()
         { n7 = new NodeChoice(n8, 0); }
      |
         n10=<NULL_> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n7 = new NodeChoice(n9, 1); }
      )
      
   )
   n12=<PARENTHESIS_CLOSE_> { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new Func_Cast(n0,n2,n4,n5,n7,n11); }
}

ColumnNameList ColumnNameList(PrintStream prn) :
{
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n0=Identifier(prn)
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Identifier(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ColumnNameList(n0,n1); }
}

TableName TableName(PrintStream prn) :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Identifier n13;

   {
   }
}
{
   (
      (
         n1=Identifier(prn)
         { n0 = new NodeChoice(n1, 0); }
      |
         { n2 = new NodeSequence(2); }
         n4=<TEMPDOT_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2.addNode(n3); }
         n5=Identifier(prn)
         { n2.addNode(n5); }
         { n0 = new NodeChoice(n2, 1); }
      |
         { n6 = new NodeSequence(2); }
         n8=<PUBLICDOT_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Identifier(prn)
         { n6.addNode(n9); }
         { n0 = new NodeChoice(n6, 2); }
      |
         { n10 = new NodeSequence(2); }
         n12=<QPUBLICDOT_> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=Identifier(prn)
         { n10.addNode(n13); }
         { n0 = new NodeChoice(n10, 3); }
      )
      
   )
   
   { return new TableName(n0); }
}

FloatingPointNumber FloatingPointNumber(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   (
      LOOKAHEAD(2)
      n2=<DECIMAL_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<INT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<SCIENTIFIC_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new FloatingPointNumber(n0); }
}

ShowAgents ShowAgents() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_AGENTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowAgents(n0); }
}

ShowDatabases ShowDatabases() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_DATABASES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowDatabases(n0); }
}

ShowStatements ShowStatements() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_STATEMENTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowStatements(n0); }
}

ShowTables ShowTables() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_TABLES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowTables(n0); }
}

ShowTranIsolation ShowTranIsolation() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_TRAN_ISOLATION_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowTranIsolation(n0); }
}

BeginTransaction BeginTransaction() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<BEGIN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            n5=<TRANSACTION_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<TRAN_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<WORK_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
   )?
   
   { return new BeginTransaction(n0,n2); }
}

CommitTransaction CommitTransaction() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
}
{
   (
      (
         n2=<COMMIT_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<END_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      (
         (
            n8=<TRANSACTION_> { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6 = new NodeChoice(n7, 0); }
         |
            n10=<TRAN_> { n9 = JTBToolkit.makeNodeToken(n10); }
            { n6 = new NodeChoice(n9, 1); }
         |
            n12=<WORK_> { n11 = JTBToolkit.makeNodeToken(n12); }
            { n6 = new NodeChoice(n11, 2); }
         )
         
      )
      { n5.addNode(n6); }
   )?
   
   { return new CommitTransaction(n0,n5); }
}

RollbackTransaction RollbackTransaction() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
}
{
   n1=<ROLLBACK_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            n5=<TRANSACTION_> { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=<TRAN_> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9=<WORK_> { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
   )?
   
   { return new RollbackTransaction(n0,n2); }
}

DescribeTable DescribeTable(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TableName n7;

   {
   }
}
{
   (
      (
         n2=<DESCRIBE_> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SHOW_TABLE_> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<SHOW_VIEW_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=TableName(prn)
   
   { return new DescribeTable(n0,n7); }
}

ShowConstraints ShowConstraints(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
}
{
   n1=<SHOW_CONSTRAINTS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ON_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   
   { return new ShowConstraints(n0,n2,n4); }
}

ShowIndexes ShowIndexes(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
}
{
   n1=<SHOW_INDEXES_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<ON_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=TableName(prn)
   
   { return new ShowIndexes(n0,n2,n4); }
}

ShowUsers ShowUsers(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_USERS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowUsers(n0); }
}

ShowViews ShowViews(PrintStream prn) :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<SHOW_VIEWS_> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ShowViews(n0); }
}

Deallocate Deallocate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
}
{
   n1=<DEALLOCATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<PREPARE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Identifier(prn)
   
   { return new Deallocate(n0,n2,n5); }
}

CreateUser CreateUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1=<CREATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<USER_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   n6=<PASSWORD_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Identifier(prn)
   (
      (
         n11=<DBA_> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9 = new NodeChoice(n10, 0); }
      |
         n13=<RESOURCE_> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9 = new NodeChoice(n12, 1); }
      |
         n15=<STANDARD_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n9 = new NodeChoice(n14, 2); }
      )
      { n8.addNode(n9); }
   )?
   
   { return new CreateUser(n0,n2,n4,n5,n7,n8); }
}

DropUser DropUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
}
{
   n1=<DROP_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<USER_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   
   { return new DropUser(n0,n2,n4); }
}

AlterUser AlterUser(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeOptional n10 = new NodeOptional();
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   {
   }
}
{
   n1=<ALTER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<USER_> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Identifier(prn)
   (
      { n6 = new NodeSequence(2); }
      n8=<PASSWORD_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=Identifier(prn)
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   (
      (
         n13=<DBA_> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11 = new NodeChoice(n12, 0); }
      |
         n15=<RESOURCE_> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n11 = new NodeChoice(n14, 1); }
      |
         n17=<STANDARD_> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n11 = new NodeChoice(n16, 2); }
      )
      { n10.addNode(n11); }
   )?
   
   { return new AlterUser(n0,n2,n4,n5,n10); }
}

Grantee Grantee(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   {
   }
}
{
   (
      n2=<PUBLIC_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=Identifier(prn)
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Grantee(n0); }
}

GranteeList GranteeList(PrintStream prn) :
{
   Grantee n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Grantee n5;

   {
   }
}
{
   n0=Grantee(prn)
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Grantee(prn)
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new GranteeList(n0,n1); }
}

TableListForGrant TableListForGrant(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Identifier n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;

   {
   }
}
{
   (
      n2=<STAR_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      n4=Identifier(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Identifier(prn)
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new TableListForGrant(n0); }
}

Privilege Privilege(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
}
{
   (
      n2=<SELECT_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<INSERT_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<UPDATE_> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<DELETE_> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<REFERENCES_> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12=<INDEX_> { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14=<ALTER_> { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   )
   
   { return new Privilege(n0); }
}

PrivilegeList PrivilegeList(PrintStream prn) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Privilege n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Privilege n9;

   {
   }
}
{
   (
      n2=<ALL_> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(2); }
      n4=Privilege(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Privilege(prn)
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new PrivilegeList(n0); }
}

Grant Grant(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   PrivilegeList n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   TableListForGrant n8;
   NodeToken n9;
   Token n10;
   GranteeList n11;

   {
   }
}
{
   n1=<GRANT_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrivilegeList(prn)
   n4=<ON_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<TABLE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=TableListForGrant(prn)
   n10=<TO_> { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=GranteeList(prn)
   
   { return new Grant(n0,n2,n3,n5,n8,n9,n11); }
}

Revoke Revoke(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   PrivilegeList n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   TableListForGrant n8;
   NodeToken n9;
   Token n10;
   GranteeList n11;

   {
   }
}
{
   n1=<REVOKE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrivilegeList(prn)
   n4=<ON_> { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n7=<TABLE_> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n8=TableListForGrant(prn)
   n10=<FROM_> { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=GranteeList(prn)
   
   { return new Revoke(n0,n2,n3,n5,n8,n9,n11); }
}

Cluster Cluster(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;

   {
   }
}
{
   n1=<CLUSTER_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n4=Identifier(prn)
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8=<ON_> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=Identifier(prn)
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   
   { return new Cluster(n0,n2); }
}

Truncate Truncate(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableName n5;

   {
   }
}
{
   n1=<TRUNCATE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<TABLE_> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=TableName(prn)
   
   { return new Truncate(n0,n2,n5); }
}

Kill Kill(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1=<KILL_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new Kill(n0,n2); }
}

Unlisten Unlisten(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   {
   }
}
{
   n1=<UNLISTEN_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n4=Identifier(prn)
         { n3 = new NodeChoice(n4, 0); }
      |
         n6=<STAR_> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n3 = new NodeChoice(n5, 1); }
      )
      { n2.addNode(n3); }
   )?
   
   { return new Unlisten(n0,n2); }
}

DeclareCursor DeclareCursor(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Select n7;

   {
   }
}
{
   n1=<DECLARE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier(prn)
   n4=<CURSOR_> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6=<FOR_> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Select(prn)
   
   { return new DeclareCursor(n0,n2,n3,n5,n7); }
}

CloseCursor CloseCursor(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1=<CLOSE_> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=Identifier(prn)
         { n2 = new NodeChoice(n3, 0); }
      |
         n5=<ALL_> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new CloseCursor(n0,n2); }
}

FetchCursor FetchCursor(PrintStream prn) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;

   {
   }
}
{
   n1=<FETCH_> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INT_LITERAL> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<FROM_> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=Identifier(prn)
   
   { return new FetchCursor(n0,n2,n4,n6); }
}
