/* Generated By:JavaCC: Do not edit this line. CSQLParser.java */
package org.postgresql.stado.parser.core;

import java.io.PrintStream;
import org.postgresql.stado.parser.core.syntaxtree.*;
import java.util.Vector;


public class CSQLParser implements CSQLParserConstants {
   public static void main(String[] args) throws ParseException,TokenMgrError
   {
      CSQLParser parser = new CSQLParser(System.in);
      process rootnode = parser.process(System.out);
   }

  final public numberValue numberValue(PrintStream prn) throws ParseException {
   FloatingPointNumber n0;

   {
   }
    n0 = FloatingPointNumber(prn);
     {if (true) return new numberValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public stringLiteral stringLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(STRING_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new stringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnreservedWords UnreservedWords(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   NodeToken n43;
   Token n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   NodeToken n49;
   Token n50;
   NodeToken n51;
   Token n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   NodeToken n57;
   Token n58;
   NodeToken n59;
   Token n60;
   NodeToken n61;
   Token n62;
   NodeToken n63;
   Token n64;
   NodeToken n65;
   Token n66;
   NodeToken n67;
   Token n68;
   NodeToken n69;
   Token n70;
   NodeToken n71;
   Token n72;
   NodeToken n73;
   Token n74;
   NodeToken n75;
   Token n76;
   NodeToken n77;
   Token n78;
   NodeToken n79;
   Token n80;
   NodeToken n81;
   Token n82;
   NodeToken n83;
   Token n84;
   NodeToken n85;
   Token n86;
   NodeToken n87;
   Token n88;
   NodeToken n89;
   Token n90;
   NodeToken n91;
   Token n92;
   NodeToken n93;
   Token n94;
   NodeToken n95;
   Token n96;
   NodeToken n97;
   Token n98;
   NodeToken n99;
   Token n100;
   NodeToken n101;
   Token n102;
   NodeToken n103;
   Token n104;
   NodeToken n105;
   Token n106;
   NodeToken n107;
   Token n108;
   NodeToken n109;
   Token n110;
   NodeToken n111;
   Token n112;
   NodeToken n113;
   Token n114;
   NodeToken n115;
   Token n116;
   NodeToken n117;
   Token n118;
   NodeToken n119;
   Token n120;
   NodeToken n121;
   Token n122;
   NodeToken n123;
   Token n124;
   NodeToken n125;
   Token n126;
   NodeToken n127;
   Token n128;
   NodeToken n129;
   Token n130;
   NodeToken n131;
   Token n132;
   NodeToken n133;
   Token n134;
   NodeToken n135;
   Token n136;
   NodeToken n137;
   Token n138;
   NodeToken n139;
   Token n140;
   NodeToken n141;
   Token n142;
   NodeToken n143;
   Token n144;
   NodeToken n145;
   Token n146;
   NodeToken n147;
   Token n148;
   NodeToken n149;
   Token n150;
   NodeToken n151;
   Token n152;
   NodeToken n153;
   Token n154;
   NodeToken n155;
   Token n156;
   NodeToken n157;
   Token n158;
   NodeToken n159;
   Token n160;
   NodeToken n161;
   Token n162;
   NodeToken n163;
   Token n164;
   NodeToken n165;
   Token n166;
   NodeToken n167;
   Token n168;
   NodeToken n169;
   Token n170;
   NodeToken n171;
   Token n172;
   NodeToken n173;
   Token n174;
   NodeToken n175;
   Token n176;
   NodeToken n177;
   Token n178;
   NodeToken n179;
   Token n180;
   NodeToken n181;
   Token n182;
   NodeToken n183;
   Token n184;
   NodeToken n185;
   Token n186;
   NodeToken n187;
   Token n188;
   NodeToken n189;
   Token n190;
   NodeToken n191;
   Token n192;
   NodeToken n193;
   Token n194;
   NodeToken n195;
   Token n196;
   NodeToken n197;
   Token n198;
   NodeToken n199;
   Token n200;
   NodeToken n201;
   Token n202;
   NodeToken n203;
   Token n204;
   NodeToken n205;
   Token n206;
   NodeToken n207;
   Token n208;
   NodeToken n209;
   Token n210;
   NodeToken n211;
   Token n212;
   NodeToken n213;
   Token n214;
   NodeToken n215;
   Token n216;
   NodeToken n217;
   Token n218;
   NodeToken n219;
   Token n220;
   NodeToken n221;
   Token n222;
   NodeToken n223;
   Token n224;
   NodeToken n225;
   Token n226;
   NodeToken n227;
   Token n228;
   NodeToken n229;
   Token n230;
   NodeToken n231;
   Token n232;
   NodeToken n233;
   Token n234;
   NodeToken n235;
   Token n236;
   NodeToken n237;
   Token n238;
   NodeToken n239;
   Token n240;
   NodeToken n241;
   Token n242;
   NodeToken n243;
   Token n244;
   NodeToken n245;
   Token n246;
   NodeToken n247;
   Token n248;
   NodeToken n249;
   Token n250;
   NodeToken n251;
   Token n252;
   NodeToken n253;
   Token n254;
   NodeToken n255;
   Token n256;
   NodeToken n257;
   Token n258;
   NodeToken n259;
   Token n260;
   NodeToken n261;
   Token n262;
   NodeToken n263;
   Token n264;
   NodeToken n265;
   Token n266;
   NodeToken n267;
   Token n268;
   NodeToken n269;
   Token n270;
   NodeToken n271;
   Token n272;
   NodeToken n273;
   Token n274;
   NodeToken n275;
   Token n276;
   NodeToken n277;
   Token n278;
   NodeToken n279;
   Token n280;
   NodeToken n281;
   Token n282;
   NodeToken n283;
   Token n284;
   NodeToken n285;
   Token n286;
   NodeToken n287;
   Token n288;
   NodeToken n289;
   Token n290;
   NodeToken n291;
   Token n292;
   NodeToken n293;
   Token n294;
   NodeToken n295;
   Token n296;
   NodeToken n297;
   Token n298;
   NodeToken n299;
   Token n300;
   NodeToken n301;
   Token n302;
   NodeToken n303;
   Token n304;
   NodeToken n305;
   Token n306;
   NodeToken n307;
   Token n308;
   NodeToken n309;
   Token n310;
   NodeToken n311;
   Token n312;
   NodeToken n313;
   Token n314;
   NodeToken n315;
   Token n316;
   NodeToken n317;
   Token n318;
   NodeToken n319;
   Token n320;
   NodeToken n321;
   Token n322;
   NodeToken n323;
   Token n324;
   NodeToken n325;
   Token n326;
   NodeToken n327;
   Token n328;
   NodeToken n329;
   Token n330;
   NodeToken n331;
   Token n332;
   NodeToken n333;
   Token n334;
   NodeToken n335;
   Token n336;
   NodeToken n337;
   Token n338;
   NodeToken n339;
   Token n340;
   NodeToken n341;
   Token n342;
   NodeToken n343;
   Token n344;
   NodeToken n345;
   Token n346;
   NodeToken n347;
   Token n348;
   NodeToken n349;
   Token n350;
   NodeToken n351;
   Token n352;
   NodeToken n353;
   Token n354;
   NodeToken n355;
   Token n356;
   NodeToken n357;
   Token n358;
   NodeToken n359;
   Token n360;
   NodeToken n361;
   Token n362;
   NodeToken n363;
   Token n364;
   NodeToken n365;
   Token n366;
   NodeToken n367;
   Token n368;
   NodeToken n369;
   Token n370;
   NodeToken n371;
   Token n372;
   NodeToken n373;
   Token n374;
   NodeToken n375;
   Token n376;
   NodeToken n377;
   Token n378;
   NodeToken n379;
   Token n380;
   NodeToken n381;
   Token n382;
   NodeToken n383;
   Token n384;
   NodeToken n385;
   Token n386;
   NodeToken n387;
   Token n388;
   NodeToken n389;
   Token n390;
   NodeToken n391;
   Token n392;
   NodeToken n393;
   Token n394;
   NodeToken n395;
   Token n396;
   NodeToken n397;
   Token n398;
   NodeToken n399;
   Token n400;
   NodeToken n401;
   Token n402;
   NodeToken n403;
   Token n404;
   NodeToken n405;
   Token n406;
   NodeToken n407;
   Token n408;
   NodeToken n409;
   Token n410;
   NodeToken n411;
   Token n412;
   NodeToken n413;
   Token n414;
   NodeToken n415;
   Token n416;
   NodeToken n417;
   Token n418;
   NodeToken n419;
   Token n420;
   NodeToken n421;
   Token n422;
   NodeToken n423;
   Token n424;
   NodeToken n425;
   Token n426;
   NodeToken n427;
   Token n428;
   NodeToken n429;
   Token n430;
   NodeToken n431;
   Token n432;
   NodeToken n433;
   Token n434;
   NodeToken n435;
   Token n436;
   NodeToken n437;
   Token n438;
   NodeToken n439;
   Token n440;
   NodeToken n441;
   Token n442;
   NodeToken n443;
   Token n444;
   NodeToken n445;
   Token n446;
   NodeToken n447;
   Token n448;
   NodeToken n449;
   Token n450;
   NodeToken n451;
   Token n452;
   NodeToken n453;
   Token n454;
   NodeToken n455;
   Token n456;
   NodeToken n457;
   Token n458;
   NodeToken n459;
   Token n460;
   NodeToken n461;
   Token n462;
   NodeToken n463;
   Token n464;
   NodeToken n465;
   Token n466;
   NodeToken n467;
   Token n468;
   NodeToken n469;
   Token n470;
   NodeToken n471;
   Token n472;
   NodeToken n473;
   Token n474;
   NodeToken n475;
   Token n476;
   NodeToken n477;
   Token n478;
   NodeToken n479;
   Token n480;
   NodeToken n481;
   Token n482;
   NodeToken n483;
   Token n484;
   NodeToken n485;
   Token n486;
   NodeToken n487;
   Token n488;
   NodeToken n489;
   Token n490;
   NodeToken n491;
   Token n492;
   NodeToken n493;
   Token n494;
   NodeToken n495;
   Token n496;
   NodeToken n497;
   Token n498;
   NodeToken n499;
   Token n500;
   NodeToken n501;
   Token n502;
   NodeToken n503;
   Token n504;
   NodeToken n505;
   Token n506;
   NodeToken n507;
   Token n508;
   NodeToken n509;
   Token n510;
   NodeToken n511;
   Token n512;
   NodeToken n513;
   Token n514;
   NodeToken n515;
   Token n516;
   NodeToken n517;
   Token n518;
   NodeToken n519;
   Token n520;
   NodeToken n521;
   Token n522;
   NodeToken n523;
   Token n524;
   NodeToken n525;
   Token n526;
   NodeToken n527;
   Token n528;
   NodeToken n529;
   Token n530;
   NodeToken n531;
   Token n532;
   NodeToken n533;
   Token n534;
   NodeToken n535;
   Token n536;
   NodeToken n537;
   Token n538;
   NodeToken n539;
   Token n540;
   NodeToken n541;
   Token n542;
   NodeToken n543;
   Token n544;
   NodeToken n545;
   Token n546;
   NodeToken n547;
   Token n548;
   NodeToken n549;
   Token n550;
   NodeToken n551;
   Token n552;
   NodeToken n553;
   Token n554;
   NodeToken n555;
   Token n556;
   NodeToken n557;
   Token n558;
   NodeToken n559;
   Token n560;
   NodeToken n561;
   Token n562;
   NodeToken n563;
   Token n564;
   NodeToken n565;
   Token n566;
   NodeToken n567;
   Token n568;
   NodeToken n569;
   Token n570;
   NodeToken n571;
   Token n572;
   NodeToken n573;
   Token n574;
   NodeToken n575;
   Token n576;
   NodeToken n577;
   Token n578;
   NodeToken n579;
   Token n580;
   NodeToken n581;
   Token n582;
   NodeToken n583;
   Token n584;
   NodeToken n585;
   Token n586;
   NodeToken n587;
   Token n588;
   NodeToken n589;
   Token n590;
   NodeToken n591;
   Token n592;
   NodeToken n593;
   Token n594;
   NodeToken n595;
   Token n596;
   NodeToken n597;
   Token n598;
   NodeToken n599;
   Token n600;
   NodeToken n601;
   Token n602;
   NodeToken n603;
   Token n604;
   NodeToken n605;
   Token n606;
   NodeToken n607;
   Token n608;
   NodeToken n609;
   Token n610;
   NodeToken n611;
   Token n612;
   NodeToken n613;
   Token n614;
   NodeToken n615;
   Token n616;
   NodeToken n617;
   Token n618;
   NodeToken n619;
   Token n620;
   NodeToken n621;
   Token n622;
   NodeToken n623;
   Token n624;
   NodeToken n625;
   Token n626;
   NodeToken n627;
   Token n628;
   NodeToken n629;
   Token n630;
   NodeToken n631;
   Token n632;
   NodeToken n633;
   Token n634;
   NodeToken n635;
   Token n636;
   NodeToken n637;
   Token n638;
   NodeToken n639;
   Token n640;
   NodeToken n641;
   Token n642;
   NodeToken n643;
   Token n644;
   NodeToken n645;
   Token n646;
   NodeToken n647;
   Token n648;
   NodeToken n649;
   Token n650;
   NodeToken n651;
   Token n652;
   NodeToken n653;
   Token n654;
   NodeToken n655;
   Token n656;
   NodeToken n657;
   Token n658;
   NodeToken n659;
   Token n660;
   NodeToken n661;
   Token n662;
   NodeToken n663;
   Token n664;
   NodeToken n665;
   Token n666;
   NodeToken n667;
   Token n668;
   NodeToken n669;
   Token n670;
   NodeToken n671;
   Token n672;
   NodeToken n673;
   Token n674;
   NodeToken n675;
   Token n676;
   NodeToken n677;
   Token n678;
   NodeToken n679;
   Token n680;
   NodeToken n681;
   Token n682;
   NodeToken n683;
   Token n684;
   NodeToken n685;
   Token n686;
   NodeToken n687;
   Token n688;
   NodeToken n689;
   Token n690;
   NodeToken n691;
   Token n692;
   NodeToken n693;
   Token n694;
   NodeToken n695;
   Token n696;
   NodeToken n697;
   Token n698;
   NodeToken n699;
   Token n700;
   NodeToken n701;
   Token n702;
   NodeToken n703;
   Token n704;
   NodeToken n705;
   Token n706;
   NodeToken n707;
   Token n708;
   NodeToken n709;
   Token n710;
   NodeToken n711;
   Token n712;
   NodeToken n713;
   Token n714;
   NodeToken n715;
   Token n716;
   NodeToken n717;
   Token n718;
   NodeToken n719;
   Token n720;
   NodeToken n721;
   Token n722;
   NodeToken n723;
   Token n724;
   NodeToken n725;
   Token n726;
   NodeToken n727;
   Token n728;
   NodeToken n729;
   Token n730;
   NodeToken n731;
   Token n732;
   NodeToken n733;
   Token n734;
   NodeToken n735;
   Token n736;
   NodeToken n737;
   Token n738;
   NodeToken n739;
   Token n740;
   NodeToken n741;
   Token n742;
   NodeToken n743;
   Token n744;
   NodeToken n745;
   Token n746;
   NodeToken n747;
   Token n748;
   NodeToken n749;
   Token n750;
   NodeToken n751;
   Token n752;
   NodeToken n753;
   Token n754;
   NodeToken n755;
   Token n756;
   NodeToken n757;
   Token n758;
   NodeToken n759;
   Token n760;
   NodeToken n761;
   Token n762;
   NodeToken n763;
   Token n764;
   NodeToken n765;
   Token n766;
   NodeToken n767;
   Token n768;
   NodeToken n769;
   Token n770;
   NodeToken n771;
   Token n772;
   NodeToken n773;
   Token n774;
   NodeToken n775;
   Token n776;
   NodeToken n777;
   Token n778;
   NodeToken n779;
   Token n780;
   NodeToken n781;
   Token n782;
   NodeToken n783;
   Token n784;
   NodeToken n785;
   Token n786;
   NodeToken n787;
   Token n788;
   NodeToken n789;
   Token n790;
   NodeToken n791;
   Token n792;
   NodeToken n793;
   Token n794;
   NodeToken n795;
   Token n796;
   NodeToken n797;
   Token n798;
   NodeToken n799;
   Token n800;
   NodeToken n801;
   Token n802;
   NodeToken n803;
   Token n804;
   NodeToken n805;
   Token n806;
   NodeToken n807;
   Token n808;
   NodeToken n809;
   Token n810;
   NodeToken n811;
   Token n812;
   NodeToken n813;
   Token n814;
   NodeToken n815;
   Token n816;
   NodeToken n817;
   Token n818;
   NodeToken n819;
   Token n820;
   NodeToken n821;
   Token n822;
   NodeToken n823;
   Token n824;
   NodeToken n825;
   Token n826;
   NodeToken n827;
   Token n828;
   NodeToken n829;
   Token n830;
   NodeToken n831;
   Token n832;
   NodeToken n833;
   Token n834;
   NodeToken n835;
   Token n836;
   NodeToken n837;
   Token n838;
   NodeToken n839;
   Token n840;
   NodeToken n841;
   Token n842;
   NodeToken n843;
   Token n844;
   NodeToken n845;
   Token n846;
   NodeToken n847;
   Token n848;
   NodeToken n849;
   Token n850;
   NodeToken n851;
   Token n852;
   NodeToken n853;
   Token n854;
   NodeToken n855;
   Token n856;
   NodeToken n857;
   Token n858;
   NodeToken n859;
   Token n860;
   NodeToken n861;
   Token n862;
   NodeToken n863;
   Token n864;
   NodeToken n865;
   Token n866;
   NodeToken n867;
   Token n868;
   NodeToken n869;
   Token n870;
   NodeToken n871;
   Token n872;
   NodeToken n873;
   Token n874;
   NodeToken n875;
   Token n876;
   NodeToken n877;
   Token n878;
   NodeToken n879;
   Token n880;
   NodeToken n881;
   Token n882;
   NodeToken n883;
   Token n884;
   NodeToken n885;
   Token n886;
   NodeToken n887;
   Token n888;
   NodeToken n889;
   Token n890;
   NodeToken n891;
   Token n892;
   NodeToken n893;
   Token n894;
   NodeToken n895;
   Token n896;
   NodeToken n897;
   Token n898;
   NodeToken n899;
   Token n900;
   NodeToken n901;
   Token n902;
   NodeToken n903;
   Token n904;
   NodeToken n905;
   Token n906;
   NodeToken n907;
   Token n908;
   NodeToken n909;
   Token n910;
   NodeToken n911;
   Token n912;
   NodeToken n913;
   Token n914;
   NodeToken n915;
   Token n916;
   NodeToken n917;
   Token n918;
   NodeToken n919;
   Token n920;
   NodeToken n921;
   Token n922;
   NodeToken n923;
   Token n924;
   NodeToken n925;
   Token n926;
   NodeToken n927;
   Token n928;
   NodeToken n929;
   Token n930;
   NodeToken n931;
   Token n932;
   NodeToken n933;
   Token n934;
   NodeToken n935;
   Token n936;
   NodeToken n937;
   Token n938;
   NodeToken n939;
   Token n940;
   NodeToken n941;
   Token n942;
   NodeToken n943;
   Token n944;
   NodeToken n945;
   Token n946;
   NodeToken n947;
   Token n948;
   NodeToken n949;
   Token n950;
   NodeToken n951;
   Token n952;
   NodeToken n953;
   Token n954;
   NodeToken n955;
   Token n956;
   NodeToken n957;
   Token n958;
   NodeToken n959;
   Token n960;
   NodeToken n961;
   Token n962;
   NodeToken n963;
   Token n964;
   NodeToken n965;
   Token n966;
   NodeToken n967;
   Token n968;
   NodeToken n969;
   Token n970;
   NodeToken n971;
   Token n972;
   NodeToken n973;
   Token n974;
   NodeToken n975;
   Token n976;
   NodeToken n977;
   Token n978;
   NodeToken n979;
   Token n980;
   NodeToken n981;
   Token n982;
   NodeToken n983;
   Token n984;
   NodeToken n985;
   Token n986;
   NodeToken n987;
   Token n988;
   NodeToken n989;
   Token n990;
   NodeToken n991;
   Token n992;
   NodeToken n993;
   Token n994;
   NodeToken n995;
   Token n996;
   NodeToken n997;
   Token n998;
   NodeToken n999;
   Token n1000;
   NodeToken n1001;
   Token n1002;
   NodeToken n1003;
   Token n1004;
   NodeToken n1005;
   Token n1006;
   NodeToken n1007;
   Token n1008;
   NodeToken n1009;
   Token n1010;
   NodeToken n1011;
   Token n1012;
   NodeToken n1013;
   Token n1014;
   NodeToken n1015;
   Token n1016;
   NodeToken n1017;
   Token n1018;
   NodeToken n1019;
   Token n1020;
   NodeToken n1021;
   Token n1022;
   NodeToken n1023;
   Token n1024;

   {
   }
    switch (jj_nt.kind) {
    case POSITION_:
      n2 = jj_consume_token(POSITION_);
                       n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[0] = jj_gen;
      if (jj_2_1(2)) {
        n4 = jj_consume_token(DATE_);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      } else {
        switch (jj_nt.kind) {
        case DAY_:
          n6 = jj_consume_token(DAY_);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
          break;
        case QUARTER_:
          n8 = jj_consume_token(QUARTER_);
                      n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
          break;
        default:
          jj_la1[1] = jj_gen;
          if (jj_2_2(2)) {
            n10 = jj_consume_token(TIME_);
                    n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
          } else if (jj_2_3(2)) {
            n12 = jj_consume_token(TIMESTAMP_);
                         n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
          } else {
            switch (jj_nt.kind) {
            case WITH_TIMEZONE_:
              n14 = jj_consume_token(WITH_TIMEZONE_);
                             n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
              break;
            case WITHOUT_TIMEZONE_:
              n16 = jj_consume_token(WITHOUT_TIMEZONE_);
                                n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
              break;
            case DATETIME_:
              n18 = jj_consume_token(DATETIME_);
                        n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
              break;
            case SAMLLDATETIME_:
              n20 = jj_consume_token(SAMLLDATETIME_);
                             n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
              break;
            case PASSWORD_:
              n22 = jj_consume_token(PASSWORD_);
                        n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
              break;
            case AVERAGE_:
              n24 = jj_consume_token(AVERAGE_);
                       n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
              break;
            case SQRT_:
              n26 = jj_consume_token(SQRT_);
                    n25 = JTBToolkit.makeNodeToken(n26);
        n0 = new NodeChoice(n25, 12);
              break;
            case COUNT_:
              n28 = jj_consume_token(COUNT_);
                     n27 = JTBToolkit.makeNodeToken(n28);
        n0 = new NodeChoice(n27, 13);
              break;
            case EXTRACT_:
              n30 = jj_consume_token(EXTRACT_);
                       n29 = JTBToolkit.makeNodeToken(n30);
        n0 = new NodeChoice(n29, 14);
              break;
            case MAX_:
              n32 = jj_consume_token(MAX_);
                   n31 = JTBToolkit.makeNodeToken(n32);
        n0 = new NodeChoice(n31, 15);
              break;
            case CURRENTDATE_:
              n34 = jj_consume_token(CURRENTDATE_);
                           n33 = JTBToolkit.makeNodeToken(n34);
        n0 = new NodeChoice(n33, 16);
              break;
            case CURRENT_TIME_:
              n36 = jj_consume_token(CURRENT_TIME_);
                            n35 = JTBToolkit.makeNodeToken(n36);
        n0 = new NodeChoice(n35, 17);
              break;
            case CURRENT_TIMESTAMP_:
              n38 = jj_consume_token(CURRENT_TIMESTAMP_);
                                 n37 = JTBToolkit.makeNodeToken(n38);
        n0 = new NodeChoice(n37, 18);
              break;
            case TRUNC_:
              n40 = jj_consume_token(TRUNC_);
                     n39 = JTBToolkit.makeNodeToken(n40);
        n0 = new NodeChoice(n39, 19);
              break;
            case TRUNCATE_:
              n42 = jj_consume_token(TRUNCATE_);
                        n41 = JTBToolkit.makeNodeToken(n42);
        n0 = new NodeChoice(n41, 20);
              break;
            case USER_:
              n44 = jj_consume_token(USER_);
                    n43 = JTBToolkit.makeNodeToken(n44);
        n0 = new NodeChoice(n43, 21);
              break;
            case YEAR_:
              n46 = jj_consume_token(YEAR_);
                    n45 = JTBToolkit.makeNodeToken(n46);
        n0 = new NodeChoice(n45, 22);
              break;
            case LENGTH_:
              n48 = jj_consume_token(LENGTH_);
                      n47 = JTBToolkit.makeNodeToken(n48);
        n0 = new NodeChoice(n47, 23);
              break;
            case LOWER_:
              n50 = jj_consume_token(LOWER_);
                     n49 = JTBToolkit.makeNodeToken(n50);
        n0 = new NodeChoice(n49, 24);
              break;
            case MONTH_:
              n52 = jj_consume_token(MONTH_);
                     n51 = JTBToolkit.makeNodeToken(n52);
        n0 = new NodeChoice(n51, 25);
              break;
            case HOUR_:
              n54 = jj_consume_token(HOUR_);
                    n53 = JTBToolkit.makeNodeToken(n54);
        n0 = new NodeChoice(n53, 26);
              break;
            case MINUTE_:
              n56 = jj_consume_token(MINUTE_);
                      n55 = JTBToolkit.makeNodeToken(n56);
        n0 = new NodeChoice(n55, 27);
              break;
            case SECOND_:
              n58 = jj_consume_token(SECOND_);
                      n57 = JTBToolkit.makeNodeToken(n58);
        n0 = new NodeChoice(n57, 28);
              break;
            case SUBSTRING_:
              n60 = jj_consume_token(SUBSTRING_);
                         n59 = JTBToolkit.makeNodeToken(n60);
        n0 = new NodeChoice(n59, 29);
              break;
            case NOW_:
              n62 = jj_consume_token(NOW_);
                   n61 = JTBToolkit.makeNodeToken(n62);
        n0 = new NodeChoice(n61, 30);
              break;
            case ADDDATE_:
              n64 = jj_consume_token(ADDDATE_);
                       n63 = JTBToolkit.makeNodeToken(n64);
        n0 = new NodeChoice(n63, 31);
              break;
            case ADDTIME_:
              n66 = jj_consume_token(ADDTIME_);
                       n65 = JTBToolkit.makeNodeToken(n66);
        n0 = new NodeChoice(n65, 32);
              break;
            case DAYNAME_:
              n68 = jj_consume_token(DAYNAME_);
                       n67 = JTBToolkit.makeNodeToken(n68);
        n0 = new NodeChoice(n67, 33);
              break;
            case SUBDATE_:
              n70 = jj_consume_token(SUBDATE_);
                       n69 = JTBToolkit.makeNodeToken(n70);
        n0 = new NodeChoice(n69, 34);
              break;
            case SUBTIME_:
              n72 = jj_consume_token(SUBTIME_);
                       n71 = JTBToolkit.makeNodeToken(n72);
        n0 = new NodeChoice(n71, 35);
              break;
            case DATEDIFF_:
              n74 = jj_consume_token(DATEDIFF_);
                        n73 = JTBToolkit.makeNodeToken(n74);
        n0 = new NodeChoice(n73, 36);
              break;
            case MONTHNAME_:
              n76 = jj_consume_token(MONTHNAME_);
                         n75 = JTBToolkit.makeNodeToken(n76);
        n0 = new NodeChoice(n75, 37);
              break;
            case DAYOFWEEK_:
              n78 = jj_consume_token(DAYOFWEEK_);
                         n77 = JTBToolkit.makeNodeToken(n78);
        n0 = new NodeChoice(n77, 38);
              break;
            case DAYOFYEAR_:
              n80 = jj_consume_token(DAYOFYEAR_);
                         n79 = JTBToolkit.makeNodeToken(n80);
        n0 = new NodeChoice(n79, 39);
              break;
            case DAYOFMONTH_:
              n82 = jj_consume_token(DAYOFMONTH_);
                          n81 = JTBToolkit.makeNodeToken(n82);
        n0 = new NodeChoice(n81, 40);
              break;
            case WEEKOFYEAR_:
              n84 = jj_consume_token(WEEKOFYEAR_);
                          n83 = JTBToolkit.makeNodeToken(n84);
        n0 = new NodeChoice(n83, 41);
              break;
            case WEEK_:
              n86 = jj_consume_token(WEEK_);
                    n85 = JTBToolkit.makeNodeToken(n86);
        n0 = new NodeChoice(n85, 42);
              break;
            case ABS_:
              n88 = jj_consume_token(ABS_);
                   n87 = JTBToolkit.makeNodeToken(n88);
        n0 = new NodeChoice(n87, 43);
              break;
            case CEIL_:
              n90 = jj_consume_token(CEIL_);
                    n89 = JTBToolkit.makeNodeToken(n90);
        n0 = new NodeChoice(n89, 44);
              break;
            case CEILING_:
              n92 = jj_consume_token(CEILING_);
                       n91 = JTBToolkit.makeNodeToken(n92);
        n0 = new NodeChoice(n91, 45);
              break;
            case EXP_:
              n94 = jj_consume_token(EXP_);
                   n93 = JTBToolkit.makeNodeToken(n94);
        n0 = new NodeChoice(n93, 46);
              break;
            case FLOOR_:
              n96 = jj_consume_token(FLOOR_);
                     n95 = JTBToolkit.makeNodeToken(n96);
        n0 = new NodeChoice(n95, 47);
              break;
            case LN_:
              n98 = jj_consume_token(LN_);
                  n97 = JTBToolkit.makeNodeToken(n98);
        n0 = new NodeChoice(n97, 48);
              break;
            case LOG_:
              n100 = jj_consume_token(LOG_);
                    n99 = JTBToolkit.makeNodeToken(n100);
        n0 = new NodeChoice(n99, 49);
              break;
            case LOG10_:
              n102 = jj_consume_token(LOG10_);
                      n101 = JTBToolkit.makeNodeToken(n102);
        n0 = new NodeChoice(n101, 50);
              break;
            case PI_:
              n104 = jj_consume_token(PI_);
                   n103 = JTBToolkit.makeNodeToken(n104);
        n0 = new NodeChoice(n103, 51);
              break;
            case POWER_:
              n106 = jj_consume_token(POWER_);
                      n105 = JTBToolkit.makeNodeToken(n106);
        n0 = new NodeChoice(n105, 52);
              break;
            case ROUND_:
              n108 = jj_consume_token(ROUND_);
                      n107 = JTBToolkit.makeNodeToken(n108);
        n0 = new NodeChoice(n107, 53);
              break;
            case SIGN_:
              n110 = jj_consume_token(SIGN_);
                     n109 = JTBToolkit.makeNodeToken(n110);
        n0 = new NodeChoice(n109, 54);
              break;
            case ASIN_:
              n112 = jj_consume_token(ASIN_);
                     n111 = JTBToolkit.makeNodeToken(n112);
        n0 = new NodeChoice(n111, 55);
              break;
            case ATAN_:
              n114 = jj_consume_token(ATAN_);
                     n113 = JTBToolkit.makeNodeToken(n114);
        n0 = new NodeChoice(n113, 56);
              break;
            case ATAN2_:
              n116 = jj_consume_token(ATAN2_);
                      n115 = JTBToolkit.makeNodeToken(n116);
        n0 = new NodeChoice(n115, 57);
              break;
            case ATN2_:
              n118 = jj_consume_token(ATN2_);
                     n117 = JTBToolkit.makeNodeToken(n118);
        n0 = new NodeChoice(n117, 58);
              break;
            case COS_:
              n120 = jj_consume_token(COS_);
                    n119 = JTBToolkit.makeNodeToken(n120);
        n0 = new NodeChoice(n119, 59);
              break;
            case ACOS_:
              n122 = jj_consume_token(ACOS_);
                     n121 = JTBToolkit.makeNodeToken(n122);
        n0 = new NodeChoice(n121, 60);
              break;
            case COSH_:
              n124 = jj_consume_token(COSH_);
                     n123 = JTBToolkit.makeNodeToken(n124);
        n0 = new NodeChoice(n123, 61);
              break;
            case COT_:
              n126 = jj_consume_token(COT_);
                    n125 = JTBToolkit.makeNodeToken(n126);
        n0 = new NodeChoice(n125, 62);
              break;
            case DEGREE_:
              n128 = jj_consume_token(DEGREE_);
                       n127 = JTBToolkit.makeNodeToken(n128);
        n0 = new NodeChoice(n127, 63);
              break;
            case RADIANS_:
              n130 = jj_consume_token(RADIANS_);
                        n129 = JTBToolkit.makeNodeToken(n130);
        n0 = new NodeChoice(n129, 64);
              break;
            case SIN_:
              n132 = jj_consume_token(SIN_);
                    n131 = JTBToolkit.makeNodeToken(n132);
        n0 = new NodeChoice(n131, 65);
              break;
            case TAN_:
              n134 = jj_consume_token(TAN_);
                    n133 = JTBToolkit.makeNodeToken(n134);
        n0 = new NodeChoice(n133, 66);
              break;
            case DATABASE_:
              n136 = jj_consume_token(DATABASE_);
                         n135 = JTBToolkit.makeNodeToken(n136);
        n0 = new NodeChoice(n135, 67);
              break;
            case VALUE_:
              n138 = jj_consume_token(VALUE_);
                      n137 = JTBToolkit.makeNodeToken(n138);
        n0 = new NodeChoice(n137, 68);
              break;
            case VERSION_:
              n140 = jj_consume_token(VERSION_);
                        n139 = JTBToolkit.makeNodeToken(n140);
        n0 = new NodeChoice(n139, 69);
              break;
            case MIN_:
              n142 = jj_consume_token(MIN_);
                    n141 = JTBToolkit.makeNodeToken(n142);
        n0 = new NodeChoice(n141, 70);
              break;
            case STDDEV_:
              n144 = jj_consume_token(STDDEV_);
                       n143 = JTBToolkit.makeNodeToken(n144);
        n0 = new NodeChoice(n143, 71);
              break;
            case STDDEV_POP_:
              n146 = jj_consume_token(STDDEV_POP_);
                           n145 = JTBToolkit.makeNodeToken(n146);
        n0 = new NodeChoice(n145, 72);
              break;
            case STDDEV_SAMP_:
              n148 = jj_consume_token(STDDEV_SAMP_);
                            n147 = JTBToolkit.makeNodeToken(n148);
        n0 = new NodeChoice(n147, 73);
              break;
            case SUM_:
              n150 = jj_consume_token(SUM_);
                    n149 = JTBToolkit.makeNodeToken(n150);
        n0 = new NodeChoice(n149, 74);
              break;
            case VARIANCE_:
              n152 = jj_consume_token(VARIANCE_);
                         n151 = JTBToolkit.makeNodeToken(n152);
        n0 = new NodeChoice(n151, 75);
              break;
            case VARIANCE_POP_:
              n154 = jj_consume_token(VARIANCE_POP_);
                             n153 = JTBToolkit.makeNodeToken(n154);
        n0 = new NodeChoice(n153, 76);
              break;
            case VARIANCE_SAMP_:
              n156 = jj_consume_token(VARIANCE_SAMP_);
                              n155 = JTBToolkit.makeNodeToken(n156);
        n0 = new NodeChoice(n155, 77);
              break;
            case VAR_POP_:
              n158 = jj_consume_token(VAR_POP_);
                        n157 = JTBToolkit.makeNodeToken(n158);
        n0 = new NodeChoice(n157, 78);
              break;
            case VAR_SAMP_:
              n160 = jj_consume_token(VAR_SAMP_);
                         n159 = JTBToolkit.makeNodeToken(n160);
        n0 = new NodeChoice(n159, 79);
              break;
            case ASCII_:
              n162 = jj_consume_token(ASCII_);
                      n161 = JTBToolkit.makeNodeToken(n162);
        n0 = new NodeChoice(n161, 80);
              break;
            case LPAD_:
              n164 = jj_consume_token(LPAD_);
                     n163 = JTBToolkit.makeNodeToken(n164);
        n0 = new NodeChoice(n163, 81);
              break;
            case RPAD_:
              n166 = jj_consume_token(RPAD_);
                     n165 = JTBToolkit.makeNodeToken(n166);
        n0 = new NodeChoice(n165, 82);
              break;
            case LTRIM_:
              n168 = jj_consume_token(LTRIM_);
                      n167 = JTBToolkit.makeNodeToken(n168);
        n0 = new NodeChoice(n167, 83);
              break;
            case REPLACE_:
              n170 = jj_consume_token(REPLACE_);
                        n169 = JTBToolkit.makeNodeToken(n170);
        n0 = new NodeChoice(n169, 84);
              break;
            case RTRIM_:
              n172 = jj_consume_token(RTRIM_);
                      n171 = JTBToolkit.makeNodeToken(n172);
        n0 = new NodeChoice(n171, 85);
              break;
            case SUBSTR_:
              n174 = jj_consume_token(SUBSTR_);
                       n173 = JTBToolkit.makeNodeToken(n174);
        n0 = new NodeChoice(n173, 86);
              break;
            case TRIM_:
              n176 = jj_consume_token(TRIM_);
                     n175 = JTBToolkit.makeNodeToken(n176);
        n0 = new NodeChoice(n175, 87);
              break;
            case UPPER_:
              n178 = jj_consume_token(UPPER_);
                      n177 = JTBToolkit.makeNodeToken(n178);
        n0 = new NodeChoice(n177, 88);
              break;
            case FIXED_:
              n180 = jj_consume_token(FIXED_);
                      n179 = JTBToolkit.makeNodeToken(n180);
        n0 = new NodeChoice(n179, 89);
              break;
            case GREATEST_:
              n182 = jj_consume_token(GREATEST_);
                         n181 = JTBToolkit.makeNodeToken(n182);
        n0 = new NodeChoice(n181, 90);
              break;
            case LEAST_:
              n184 = jj_consume_token(LEAST_);
                      n183 = JTBToolkit.makeNodeToken(n184);
        n0 = new NodeChoice(n183, 91);
              break;
            case INSTR_:
              n186 = jj_consume_token(INSTR_);
                      n185 = JTBToolkit.makeNodeToken(n186);
        n0 = new NodeChoice(n185, 92);
              break;
            case SOUNDEX_:
              n188 = jj_consume_token(SOUNDEX_);
                        n187 = JTBToolkit.makeNodeToken(n188);
        n0 = new NodeChoice(n187, 93);
              break;
            case INITCAP_:
              n190 = jj_consume_token(INITCAP_);
                        n189 = JTBToolkit.makeNodeToken(n190);
        n0 = new NodeChoice(n189, 94);
              break;
            case LFILL_:
              n192 = jj_consume_token(LFILL_);
                      n191 = JTBToolkit.makeNodeToken(n192);
        n0 = new NodeChoice(n191, 95);
              break;
            case MAPCHAR_:
              n194 = jj_consume_token(MAPCHAR_);
                        n193 = JTBToolkit.makeNodeToken(n194);
        n0 = new NodeChoice(n193, 96);
              break;
            case NUM_:
              n196 = jj_consume_token(NUM_);
                    n195 = JTBToolkit.makeNodeToken(n196);
        n0 = new NodeChoice(n195, 97);
              break;
            case CONCAT_WORD:
              n198 = jj_consume_token(CONCAT_WORD);
                           n197 = JTBToolkit.makeNodeToken(n198);
        n0 = new NodeChoice(n197, 98);
              break;
            case CURTIME_:
              n200 = jj_consume_token(CURTIME_);
                        n199 = JTBToolkit.makeNodeToken(n200);
        n0 = new NodeChoice(n199, 99);
              break;
            case CURDATE_:
              n202 = jj_consume_token(CURDATE_);
                        n201 = JTBToolkit.makeNodeToken(n202);
        n0 = new NodeChoice(n201, 100);
              break;
            case TIMEOFDAY_:
              n204 = jj_consume_token(TIMEOFDAY_);
                          n203 = JTBToolkit.makeNodeToken(n204);
        n0 = new NodeChoice(n203, 101);
              break;
            case ISFINITE_:
              n206 = jj_consume_token(ISFINITE_);
                         n205 = JTBToolkit.makeNodeToken(n206);
        n0 = new NodeChoice(n205, 102);
              break;
            case DATETRUNC_:
              n208 = jj_consume_token(DATETRUNC_);
                          n207 = JTBToolkit.makeNodeToken(n208);
        n0 = new NodeChoice(n207, 103);
              break;
            case DATEPART_:
              n210 = jj_consume_token(DATEPART_);
                         n209 = JTBToolkit.makeNodeToken(n210);
        n0 = new NodeChoice(n209, 104);
              break;
            case AGE_:
              n212 = jj_consume_token(AGE_);
                    n211 = JTBToolkit.makeNodeToken(n212);
        n0 = new NodeChoice(n211, 105);
              break;
            case LOCALTIME_:
              n214 = jj_consume_token(LOCALTIME_);
                          n213 = JTBToolkit.makeNodeToken(n214);
        n0 = new NodeChoice(n213, 106);
              break;
            case LOCALTIMESTAMP_:
              n216 = jj_consume_token(LOCALTIMESTAMP_);
                               n215 = JTBToolkit.makeNodeToken(n216);
        n0 = new NodeChoice(n215, 107);
              break;
            case BIT_LENGTH_:
              n218 = jj_consume_token(BIT_LENGTH_);
                           n217 = JTBToolkit.makeNodeToken(n218);
        n0 = new NodeChoice(n217, 108);
              break;
            case CHAR_LENGTH_:
              n220 = jj_consume_token(CHAR_LENGTH_);
                            n219 = JTBToolkit.makeNodeToken(n220);
        n0 = new NodeChoice(n219, 109);
              break;
            case CHARACTER_LENGTH_:
              n222 = jj_consume_token(CHARACTER_LENGTH_);
                                 n221 = JTBToolkit.makeNodeToken(n222);
        n0 = new NodeChoice(n221, 110);
              break;
            case CONVERT_:
              n224 = jj_consume_token(CONVERT_);
                        n223 = JTBToolkit.makeNodeToken(n224);
        n0 = new NodeChoice(n223, 111);
              break;
            case OCTET_LENGTH_:
              n226 = jj_consume_token(OCTET_LENGTH_);
                             n225 = JTBToolkit.makeNodeToken(n226);
        n0 = new NodeChoice(n225, 112);
              break;
            case OVERLAY_:
              n228 = jj_consume_token(OVERLAY_);
                        n227 = JTBToolkit.makeNodeToken(n228);
        n0 = new NodeChoice(n227, 113);
              break;
            case PLACING_:
              n230 = jj_consume_token(PLACING_);
                        n229 = JTBToolkit.makeNodeToken(n230);
        n0 = new NodeChoice(n229, 114);
              break;
            case STORAGE_:
              n232 = jj_consume_token(STORAGE_);
                        n231 = JTBToolkit.makeNodeToken(n232);
        n0 = new NodeChoice(n231, 115);
              break;
            case TYPE_:
              n234 = jj_consume_token(TYPE_);
                     n233 = JTBToolkit.makeNodeToken(n234);
        n0 = new NodeChoice(n233, 116);
              break;
            case BTRIM_:
              n236 = jj_consume_token(BTRIM_);
                      n235 = JTBToolkit.makeNodeToken(n236);
        n0 = new NodeChoice(n235, 117);
              break;
            case CHR_:
              n238 = jj_consume_token(CHR_);
                    n237 = JTBToolkit.makeNodeToken(n238);
        n0 = new NodeChoice(n237, 118);
              break;
            case DECODE_:
              n240 = jj_consume_token(DECODE_);
                       n239 = JTBToolkit.makeNodeToken(n240);
        n0 = new NodeChoice(n239, 119);
              break;
            case ENCODE_:
              n242 = jj_consume_token(ENCODE_);
                       n241 = JTBToolkit.makeNodeToken(n242);
        n0 = new NodeChoice(n241, 120);
              break;
            case MD5_:
              n244 = jj_consume_token(MD5_);
                    n243 = JTBToolkit.makeNodeToken(n244);
        n0 = new NodeChoice(n243, 121);
              break;
            case PG_CLIENT_ENCODING_:
              n246 = jj_consume_token(PG_CLIENT_ENCODING_);
                                   n245 = JTBToolkit.makeNodeToken(n246);
        n0 = new NodeChoice(n245, 122);
              break;
            case QUOTE_IDENT_:
              n248 = jj_consume_token(QUOTE_IDENT_);
                            n247 = JTBToolkit.makeNodeToken(n248);
        n0 = new NodeChoice(n247, 123);
              break;
            case QUOTE_LITERAL_:
              n250 = jj_consume_token(QUOTE_LITERAL_);
                              n249 = JTBToolkit.makeNodeToken(n250);
        n0 = new NodeChoice(n249, 124);
              break;
            case REPEAT_:
              n252 = jj_consume_token(REPEAT_);
                       n251 = JTBToolkit.makeNodeToken(n252);
        n0 = new NodeChoice(n251, 125);
              break;
            case SPLIT_PART_:
              n254 = jj_consume_token(SPLIT_PART_);
                           n253 = JTBToolkit.makeNodeToken(n254);
        n0 = new NodeChoice(n253, 126);
              break;
            case STRPOS_:
              n256 = jj_consume_token(STRPOS_);
                       n255 = JTBToolkit.makeNodeToken(n256);
        n0 = new NodeChoice(n255, 127);
              break;
            case TO_ASCII_:
              n258 = jj_consume_token(TO_ASCII_);
                         n257 = JTBToolkit.makeNodeToken(n258);
        n0 = new NodeChoice(n257, 128);
              break;
            case TO_HEX_:
              n260 = jj_consume_token(TO_HEX_);
                       n259 = JTBToolkit.makeNodeToken(n260);
        n0 = new NodeChoice(n259, 129);
              break;
            case TRANSLATE_:
              n262 = jj_consume_token(TRANSLATE_);
                          n261 = JTBToolkit.makeNodeToken(n262);
        n0 = new NodeChoice(n261, 130);
              break;
            case WIDTH_BUCKET_:
              n264 = jj_consume_token(WIDTH_BUCKET_);
                             n263 = JTBToolkit.makeNodeToken(n264);
        n0 = new NodeChoice(n263, 131);
              break;
            case SETSEED_:
              n266 = jj_consume_token(SETSEED_);
                        n265 = JTBToolkit.makeNodeToken(n266);
        n0 = new NodeChoice(n265, 132);
              break;
            case RANDOM_:
              n268 = jj_consume_token(RANDOM_);
                       n267 = JTBToolkit.makeNodeToken(n268);
        n0 = new NodeChoice(n267, 133);
              break;
            case CBRT_:
              n270 = jj_consume_token(CBRT_);
                     n269 = JTBToolkit.makeNodeToken(n270);
        n0 = new NodeChoice(n269, 134);
              break;
            case GET_BIT_:
              n272 = jj_consume_token(GET_BIT_);
                        n271 = JTBToolkit.makeNodeToken(n272);
        n0 = new NodeChoice(n271, 135);
              break;
            case GET_BYTE_:
              n274 = jj_consume_token(GET_BYTE_);
                         n273 = JTBToolkit.makeNodeToken(n274);
        n0 = new NodeChoice(n273, 136);
              break;
            case TO_DATE_:
              n276 = jj_consume_token(TO_DATE_);
                        n275 = JTBToolkit.makeNodeToken(n276);
        n0 = new NodeChoice(n275, 137);
              break;
            case CLOCK_TIMESTAMP_:
              n278 = jj_consume_token(CLOCK_TIMESTAMP_);
                                n277 = JTBToolkit.makeNodeToken(n278);
        n0 = new NodeChoice(n277, 138);
              break;
            case STATEMENT_TIMESTAMP_:
              n280 = jj_consume_token(STATEMENT_TIMESTAMP_);
                                    n279 = JTBToolkit.makeNodeToken(n280);
        n0 = new NodeChoice(n279, 139);
              break;
            case TRANSACTION_TIMESTAMP_:
              n282 = jj_consume_token(TRANSACTION_TIMESTAMP_);
                                      n281 = JTBToolkit.makeNodeToken(n282);
        n0 = new NodeChoice(n281, 140);
              break;
            case SMALLINT_:
              n284 = jj_consume_token(SMALLINT_);
                         n283 = JTBToolkit.makeNodeToken(n284);
        n0 = new NodeChoice(n283, 141);
              break;
            case TINYINT_:
              n286 = jj_consume_token(TINYINT_);
                        n285 = JTBToolkit.makeNodeToken(n286);
        n0 = new NodeChoice(n285, 142);
              break;
            case INT2_:
              n288 = jj_consume_token(INT2_);
                     n287 = JTBToolkit.makeNodeToken(n288);
        n0 = new NodeChoice(n287, 143);
              break;
            case BYTEA_:
              n290 = jj_consume_token(BYTEA_);
                      n289 = JTBToolkit.makeNodeToken(n290);
        n0 = new NodeChoice(n289, 144);
              break;
            case BIGINT_:
              n292 = jj_consume_token(BIGINT_);
                       n291 = JTBToolkit.makeNodeToken(n292);
        n0 = new NodeChoice(n291, 145);
              break;
            case INT8_:
              n294 = jj_consume_token(INT8_);
                     n293 = JTBToolkit.makeNodeToken(n294);
        n0 = new NodeChoice(n293, 146);
              break;
            case BIGINTEGER_:
              n296 = jj_consume_token(BIGINTEGER_);
                           n295 = JTBToolkit.makeNodeToken(n296);
        n0 = new NodeChoice(n295, 147);
              break;
            case INT_:
              n298 = jj_consume_token(INT_);
                    n297 = JTBToolkit.makeNodeToken(n298);
        n0 = new NodeChoice(n297, 148);
              break;
            case INTEGER_:
              n300 = jj_consume_token(INTEGER_);
                        n299 = JTBToolkit.makeNodeToken(n300);
        n0 = new NodeChoice(n299, 149);
              break;
            case INT4_:
              n302 = jj_consume_token(INT4_);
                     n301 = JTBToolkit.makeNodeToken(n302);
        n0 = new NodeChoice(n301, 150);
              break;
            case REAL_:
              n304 = jj_consume_token(REAL_);
                     n303 = JTBToolkit.makeNodeToken(n304);
        n0 = new NodeChoice(n303, 151);
              break;
            case SMALLFLOAT_:
              n306 = jj_consume_token(SMALLFLOAT_);
                           n305 = JTBToolkit.makeNodeToken(n306);
        n0 = new NodeChoice(n305, 152);
              break;
            case FLOAT_:
              n308 = jj_consume_token(FLOAT_);
                      n307 = JTBToolkit.makeNodeToken(n308);
        n0 = new NodeChoice(n307, 153);
              break;
            case FLOAT4_:
              n310 = jj_consume_token(FLOAT4_);
                       n309 = JTBToolkit.makeNodeToken(n310);
        n0 = new NodeChoice(n309, 154);
              break;
            case FLOAT8_:
              n312 = jj_consume_token(FLOAT8_);
                       n311 = JTBToolkit.makeNodeToken(n312);
        n0 = new NodeChoice(n311, 155);
              break;
            case DECIMAL_:
              n314 = jj_consume_token(DECIMAL_);
                        n313 = JTBToolkit.makeNodeToken(n314);
        n0 = new NodeChoice(n313, 156);
              break;
            case NUMERIC_:
              n316 = jj_consume_token(NUMERIC_);
                        n315 = JTBToolkit.makeNodeToken(n316);
        n0 = new NodeChoice(n315, 157);
              break;
            case SMALLMONEY_:
              n318 = jj_consume_token(SMALLMONEY_);
                           n317 = JTBToolkit.makeNodeToken(n318);
        n0 = new NodeChoice(n317, 158);
              break;
            case MONEY_:
              n320 = jj_consume_token(MONEY_);
                      n319 = JTBToolkit.makeNodeToken(n320);
        n0 = new NodeChoice(n319, 159);
              break;
            case NUMBER_:
              n322 = jj_consume_token(NUMBER_);
                       n321 = JTBToolkit.makeNodeToken(n322);
        n0 = new NodeChoice(n321, 160);
              break;
            case CHAR_:
              n324 = jj_consume_token(CHAR_);
                     n323 = JTBToolkit.makeNodeToken(n324);
        n0 = new NodeChoice(n323, 161);
              break;
            case CHARACHTER_:
              n326 = jj_consume_token(CHARACHTER_);
                           n325 = JTBToolkit.makeNodeToken(n326);
        n0 = new NodeChoice(n325, 162);
              break;
            case VARCHAR_:
              n328 = jj_consume_token(VARCHAR_);
                        n327 = JTBToolkit.makeNodeToken(n328);
        n0 = new NodeChoice(n327, 163);
              break;
            case TINYTEXT_:
              n330 = jj_consume_token(TINYTEXT_);
                         n329 = JTBToolkit.makeNodeToken(n330);
        n0 = new NodeChoice(n329, 164);
              break;
            case VARCHAR2_:
              n332 = jj_consume_token(VARCHAR2_);
                         n331 = JTBToolkit.makeNodeToken(n332);
        n0 = new NodeChoice(n331, 165);
              break;
            case DATE_:
              n334 = jj_consume_token(DATE_);
                     n333 = JTBToolkit.makeNodeToken(n334);
        n0 = new NodeChoice(n333, 166);
              break;
            case TIME_:
              n336 = jj_consume_token(TIME_);
                     n335 = JTBToolkit.makeNodeToken(n336);
        n0 = new NodeChoice(n335, 167);
              break;
            case TIMESTAMP_:
              n338 = jj_consume_token(TIMESTAMP_);
                          n337 = JTBToolkit.makeNodeToken(n338);
        n0 = new NodeChoice(n337, 168);
              break;
            case DEC_:
              n340 = jj_consume_token(DEC_);
                    n339 = JTBToolkit.makeNodeToken(n340);
        n0 = new NodeChoice(n339, 169);
              break;
            case DOUBLE_PRECISION_:
              n342 = jj_consume_token(DOUBLE_PRECISION_);
                                 n341 = JTBToolkit.makeNodeToken(n342);
        n0 = new NodeChoice(n341, 170);
              break;
            case NCHAR_:
              n344 = jj_consume_token(NCHAR_);
                      n343 = JTBToolkit.makeNodeToken(n344);
        n0 = new NodeChoice(n343, 171);
              break;
            case NATIONAL_:
              n346 = jj_consume_token(NATIONAL_);
                         n345 = JTBToolkit.makeNodeToken(n346);
        n0 = new NodeChoice(n345, 172);
              break;
            case VARYING_:
              n348 = jj_consume_token(VARYING_);
                        n347 = JTBToolkit.makeNodeToken(n348);
        n0 = new NodeChoice(n347, 173);
              break;
            case BOOLEAN_:
              n350 = jj_consume_token(BOOLEAN_);
                        n349 = JTBToolkit.makeNodeToken(n350);
        n0 = new NodeChoice(n349, 174);
              break;
            case INTERVAL_:
              n352 = jj_consume_token(INTERVAL_);
                         n351 = JTBToolkit.makeNodeToken(n352);
        n0 = new NodeChoice(n351, 175);
              break;
            case TEXT_:
              n354 = jj_consume_token(TEXT_);
                     n353 = JTBToolkit.makeNodeToken(n354);
        n0 = new NodeChoice(n353, 176);
              break;
            case MEDIUMTEXT_:
              n356 = jj_consume_token(MEDIUMTEXT_);
                           n355 = JTBToolkit.makeNodeToken(n356);
        n0 = new NodeChoice(n355, 177);
              break;
            case LVARCHAR_:
              n358 = jj_consume_token(LVARCHAR_);
                         n357 = JTBToolkit.makeNodeToken(n358);
        n0 = new NodeChoice(n357, 178);
              break;
            case LONGTEXT_:
              n360 = jj_consume_token(LONGTEXT_);
                         n359 = JTBToolkit.makeNodeToken(n360);
        n0 = new NodeChoice(n359, 179);
              break;
            case LONG_VARCHAR_:
              n362 = jj_consume_token(LONG_VARCHAR_);
                             n361 = JTBToolkit.makeNodeToken(n362);
        n0 = new NodeChoice(n361, 180);
              break;
            case LONG_:
              n364 = jj_consume_token(LONG_);
                     n363 = JTBToolkit.makeNodeToken(n364);
        n0 = new NodeChoice(n363, 181);
              break;
            case CLOB_:
              n366 = jj_consume_token(CLOB_);
                     n365 = JTBToolkit.makeNodeToken(n366);
        n0 = new NodeChoice(n365, 182);
              break;
            case BLOB_:
              n368 = jj_consume_token(BLOB_);
                     n367 = JTBToolkit.makeNodeToken(n368);
        n0 = new NodeChoice(n367, 183);
              break;
            case BINARY_:
              n370 = jj_consume_token(BINARY_);
                       n369 = JTBToolkit.makeNodeToken(n370);
        n0 = new NodeChoice(n369, 184);
              break;
            case VARBINARY_:
              n372 = jj_consume_token(VARBINARY_);
                          n371 = JTBToolkit.makeNodeToken(n372);
        n0 = new NodeChoice(n371, 185);
              break;
            case RAW_:
              n374 = jj_consume_token(RAW_);
                    n373 = JTBToolkit.makeNodeToken(n374);
        n0 = new NodeChoice(n373, 186);
              break;
            case LONG_RAW_:
              n376 = jj_consume_token(LONG_RAW_);
                         n375 = JTBToolkit.makeNodeToken(n376);
        n0 = new NodeChoice(n375, 187);
              break;
            case IMAGE_:
              n378 = jj_consume_token(IMAGE_);
                      n377 = JTBToolkit.makeNodeToken(n378);
        n0 = new NodeChoice(n377, 188);
              break;
            case BYTE_:
              n380 = jj_consume_token(BYTE_);
                     n379 = JTBToolkit.makeNodeToken(n380);
        n0 = new NodeChoice(n379, 189);
              break;
            case CLUSTER_:
              n382 = jj_consume_token(CLUSTER_);
                        n381 = JTBToolkit.makeNodeToken(n382);
        n0 = new NodeChoice(n381, 190);
              break;
            case CURRENT_USER_:
              n384 = jj_consume_token(CURRENT_USER_);
                             n383 = JTBToolkit.makeNodeToken(n384);
        n0 = new NodeChoice(n383, 191);
              break;
            case NULLIF_:
              n386 = jj_consume_token(NULLIF_);
                       n385 = JTBToolkit.makeNodeToken(n386);
        n0 = new NodeChoice(n385, 192);
              break;
            case SET_BIT_:
              n388 = jj_consume_token(SET_BIT_);
                        n387 = JTBToolkit.makeNodeToken(n388);
        n0 = new NodeChoice(n387, 193);
              break;
            case SET_BYTE_:
              n390 = jj_consume_token(SET_BYTE_);
                         n389 = JTBToolkit.makeNodeToken(n390);
        n0 = new NodeChoice(n389, 194);
              break;
            case TO_CHAR_:
              n392 = jj_consume_token(TO_CHAR_);
                        n391 = JTBToolkit.makeNodeToken(n392);
        n0 = new NodeChoice(n391, 195);
              break;
            case TO_NUMBER_:
              n394 = jj_consume_token(TO_NUMBER_);
                          n393 = JTBToolkit.makeNodeToken(n394);
        n0 = new NodeChoice(n393, 196);
              break;
            case TO_TIMESTAMP_:
              n396 = jj_consume_token(TO_TIMESTAMP_);
                             n395 = JTBToolkit.makeNodeToken(n396);
        n0 = new NodeChoice(n395, 197);
              break;
            case ADD_MONTHS_:
              n398 = jj_consume_token(ADD_MONTHS_);
                           n397 = JTBToolkit.makeNodeToken(n398);
        n0 = new NodeChoice(n397, 198);
              break;
            case JUSTIFY_DAYS_:
              n400 = jj_consume_token(JUSTIFY_DAYS_);
                             n399 = JTBToolkit.makeNodeToken(n400);
        n0 = new NodeChoice(n399, 199);
              break;
            case JUSTIFY_HOURS_:
              n402 = jj_consume_token(JUSTIFY_HOURS_);
                              n401 = JTBToolkit.makeNodeToken(n402);
        n0 = new NodeChoice(n401, 200);
              break;
            case JUSTIFY_INTERVAL_:
              n404 = jj_consume_token(JUSTIFY_INTERVAL_);
                                 n403 = JTBToolkit.makeNodeToken(n404);
        n0 = new NodeChoice(n403, 201);
              break;
            case LAST_DAY_:
              n406 = jj_consume_token(LAST_DAY_);
                         n405 = JTBToolkit.makeNodeToken(n406);
        n0 = new NodeChoice(n405, 202);
              break;
            case MONTHS_BETWEEN_:
              n408 = jj_consume_token(MONTHS_BETWEEN_);
                               n407 = JTBToolkit.makeNodeToken(n408);
        n0 = new NodeChoice(n407, 203);
              break;
            case NEXT_DAY_:
              n410 = jj_consume_token(NEXT_DAY_);
                         n409 = JTBToolkit.makeNodeToken(n410);
        n0 = new NodeChoice(n409, 204);
              break;
            case CURRENT_DATABASE_:
              n412 = jj_consume_token(CURRENT_DATABASE_);
                                 n411 = JTBToolkit.makeNodeToken(n412);
        n0 = new NodeChoice(n411, 205);
              break;
            case CURRENT_SCHEMA_:
              n414 = jj_consume_token(CURRENT_SCHEMA_);
                               n413 = JTBToolkit.makeNodeToken(n414);
        n0 = new NodeChoice(n413, 206);
              break;
            case BIT_AND_:
              n416 = jj_consume_token(BIT_AND_);
                        n415 = JTBToolkit.makeNodeToken(n416);
        n0 = new NodeChoice(n415, 207);
              break;
            case BIT_OR_:
              n418 = jj_consume_token(BIT_OR_);
                       n417 = JTBToolkit.makeNodeToken(n418);
        n0 = new NodeChoice(n417, 208);
              break;
            case BOOL_AND_:
              n420 = jj_consume_token(BOOL_AND_);
                         n419 = JTBToolkit.makeNodeToken(n420);
        n0 = new NodeChoice(n419, 209);
              break;
            case BOOL_OR_:
              n422 = jj_consume_token(BOOL_OR_);
                        n421 = JTBToolkit.makeNodeToken(n422);
        n0 = new NodeChoice(n421, 210);
              break;
            case EVERY_:
              n424 = jj_consume_token(EVERY_);
                      n423 = JTBToolkit.makeNodeToken(n424);
        n0 = new NodeChoice(n423, 211);
              break;
            case CORR_:
              n426 = jj_consume_token(CORR_);
                     n425 = JTBToolkit.makeNodeToken(n426);
        n0 = new NodeChoice(n425, 212);
              break;
            case COVAR_POP_:
              n428 = jj_consume_token(COVAR_POP_);
                          n427 = JTBToolkit.makeNodeToken(n428);
        n0 = new NodeChoice(n427, 213);
              break;
            case COVAR_SAMP_:
              n430 = jj_consume_token(COVAR_SAMP_);
                           n429 = JTBToolkit.makeNodeToken(n430);
        n0 = new NodeChoice(n429, 214);
              break;
            case REGR_AVGX_:
              n432 = jj_consume_token(REGR_AVGX_);
                          n431 = JTBToolkit.makeNodeToken(n432);
        n0 = new NodeChoice(n431, 215);
              break;
            case REGR_AVGY_:
              n434 = jj_consume_token(REGR_AVGY_);
                          n433 = JTBToolkit.makeNodeToken(n434);
        n0 = new NodeChoice(n433, 216);
              break;
            case REGR_COUNT_:
              n436 = jj_consume_token(REGR_COUNT_);
                           n435 = JTBToolkit.makeNodeToken(n436);
        n0 = new NodeChoice(n435, 217);
              break;
            case REGR_INTERCEPT_:
              n438 = jj_consume_token(REGR_INTERCEPT_);
                               n437 = JTBToolkit.makeNodeToken(n438);
        n0 = new NodeChoice(n437, 218);
              break;
            case REGR_R2_:
              n440 = jj_consume_token(REGR_R2_);
                        n439 = JTBToolkit.makeNodeToken(n440);
        n0 = new NodeChoice(n439, 219);
              break;
            case REGR_SLOPE_:
              n442 = jj_consume_token(REGR_SLOPE_);
                           n441 = JTBToolkit.makeNodeToken(n442);
        n0 = new NodeChoice(n441, 220);
              break;
            case REGR_SXX_:
              n444 = jj_consume_token(REGR_SXX_);
                         n443 = JTBToolkit.makeNodeToken(n444);
        n0 = new NodeChoice(n443, 221);
              break;
            case REGR_SXY_:
              n446 = jj_consume_token(REGR_SXY_);
                         n445 = JTBToolkit.makeNodeToken(n446);
        n0 = new NodeChoice(n445, 222);
              break;
            case REGR_SYY_:
              n448 = jj_consume_token(REGR_SYY_);
                         n447 = JTBToolkit.makeNodeToken(n448);
        n0 = new NodeChoice(n447, 223);
              break;
            case REGEXP_REPLACE_:
              n450 = jj_consume_token(REGEXP_REPLACE_);
                               n449 = JTBToolkit.makeNodeToken(n450);
        n0 = new NodeChoice(n449, 224);
              break;
            case ABBREV_:
              n452 = jj_consume_token(ABBREV_);
                       n451 = JTBToolkit.makeNodeToken(n452);
        n0 = new NodeChoice(n451, 225);
              break;
            case BROADCAST_:
              n454 = jj_consume_token(BROADCAST_);
                          n453 = JTBToolkit.makeNodeToken(n454);
        n0 = new NodeChoice(n453, 226);
              break;
            case FAMILY_:
              n456 = jj_consume_token(FAMILY_);
                       n455 = JTBToolkit.makeNodeToken(n456);
        n0 = new NodeChoice(n455, 227);
              break;
            case HOST_:
              n458 = jj_consume_token(HOST_);
                     n457 = JTBToolkit.makeNodeToken(n458);
        n0 = new NodeChoice(n457, 228);
              break;
            case HOSTMASK_:
              n460 = jj_consume_token(HOSTMASK_);
                         n459 = JTBToolkit.makeNodeToken(n460);
        n0 = new NodeChoice(n459, 229);
              break;
            case MASKLEN_:
              n462 = jj_consume_token(MASKLEN_);
                        n461 = JTBToolkit.makeNodeToken(n462);
        n0 = new NodeChoice(n461, 230);
              break;
            case NETMASK_:
              n464 = jj_consume_token(NETMASK_);
                        n463 = JTBToolkit.makeNodeToken(n464);
        n0 = new NodeChoice(n463, 231);
              break;
            case NETWORK_:
              n466 = jj_consume_token(NETWORK_);
                        n465 = JTBToolkit.makeNodeToken(n466);
        n0 = new NodeChoice(n465, 232);
              break;
            case SET_MASKLEN_:
              n468 = jj_consume_token(SET_MASKLEN_);
                            n467 = JTBToolkit.makeNodeToken(n468);
        n0 = new NodeChoice(n467, 233);
              break;
            case GEOMETRY_:
              n470 = jj_consume_token(GEOMETRY_);
                         n469 = JTBToolkit.makeNodeToken(n470);
        n0 = new NodeChoice(n469, 234);
              break;
            case BOX2D_:
              n472 = jj_consume_token(BOX2D_);
                      n471 = JTBToolkit.makeNodeToken(n472);
        n0 = new NodeChoice(n471, 235);
              break;
            case BOX3D_:
              n474 = jj_consume_token(BOX3D_);
                      n473 = JTBToolkit.makeNodeToken(n474);
        n0 = new NodeChoice(n473, 236);
              break;
            case BOX3DEXTENT_:
              n476 = jj_consume_token(BOX3DEXTENT_);
                            n475 = JTBToolkit.makeNodeToken(n476);
        n0 = new NodeChoice(n475, 237);
              break;
            case REGCLASS_:
              n478 = jj_consume_token(REGCLASS_);
                         n477 = JTBToolkit.makeNodeToken(n478);
        n0 = new NodeChoice(n477, 238);
              break;
            case ST_ASTEXT_:
              n480 = jj_consume_token(ST_ASTEXT_);
                          n479 = JTBToolkit.makeNodeToken(n480);
        n0 = new NodeChoice(n479, 239);
              break;
            case ST_TRANSFORM_:
              n482 = jj_consume_token(ST_TRANSFORM_);
                             n481 = JTBToolkit.makeNodeToken(n482);
        n0 = new NodeChoice(n481, 240);
              break;
            case ST_DISTANCE_:
              n484 = jj_consume_token(ST_DISTANCE_);
                            n483 = JTBToolkit.makeNodeToken(n484);
        n0 = new NodeChoice(n483, 241);
              break;
            case ST_DWITHIN_:
              n486 = jj_consume_token(ST_DWITHIN_);
                           n485 = JTBToolkit.makeNodeToken(n486);
        n0 = new NodeChoice(n485, 242);
              break;
            case ST_LENGTH_:
              n488 = jj_consume_token(ST_LENGTH_);
                          n487 = JTBToolkit.makeNodeToken(n488);
        n0 = new NodeChoice(n487, 243);
              break;
            case ST_AREA_:
              n490 = jj_consume_token(ST_AREA_);
                        n489 = JTBToolkit.makeNodeToken(n490);
        n0 = new NodeChoice(n489, 244);
              break;
            case ST_ASBINARY_:
              n492 = jj_consume_token(ST_ASBINARY_);
                            n491 = JTBToolkit.makeNodeToken(n492);
        n0 = new NodeChoice(n491, 245);
              break;
            case ST_BOUNDARY_:
              n494 = jj_consume_token(ST_BOUNDARY_);
                            n493 = JTBToolkit.makeNodeToken(n494);
        n0 = new NodeChoice(n493, 246);
              break;
            case ST_BUFFER_:
              n496 = jj_consume_token(ST_BUFFER_);
                          n495 = JTBToolkit.makeNodeToken(n496);
        n0 = new NodeChoice(n495, 247);
              break;
            case ST_CENTROID_:
              n498 = jj_consume_token(ST_CENTROID_);
                            n497 = JTBToolkit.makeNodeToken(n498);
        n0 = new NodeChoice(n497, 248);
              break;
            case ST_ADDMEASURE_:
              n500 = jj_consume_token(ST_ADDMEASURE_);
                              n499 = JTBToolkit.makeNodeToken(n500);
        n0 = new NodeChoice(n499, 249);
              break;
            case ST_ADDPOINT_:
              n502 = jj_consume_token(ST_ADDPOINT_);
                            n501 = JTBToolkit.makeNodeToken(n502);
        n0 = new NodeChoice(n501, 250);
              break;
            case ST_AFFINE_:
              n504 = jj_consume_token(ST_AFFINE_);
                          n503 = JTBToolkit.makeNodeToken(n504);
        n0 = new NodeChoice(n503, 251);
              break;
            case ST_AREA2D_:
              n506 = jj_consume_token(ST_AREA2D_);
                          n505 = JTBToolkit.makeNodeToken(n506);
        n0 = new NodeChoice(n505, 252);
              break;
            case ST_ASEWKB_:
              n508 = jj_consume_token(ST_ASEWKB_);
                          n507 = JTBToolkit.makeNodeToken(n508);
        n0 = new NodeChoice(n507, 253);
              break;
            case ST_ASEWKT_:
              n510 = jj_consume_token(ST_ASEWKT_);
                          n509 = JTBToolkit.makeNodeToken(n510);
        n0 = new NodeChoice(n509, 254);
              break;
            case ST_ASGEOJSON_:
              n512 = jj_consume_token(ST_ASGEOJSON_);
                             n511 = JTBToolkit.makeNodeToken(n512);
        n0 = new NodeChoice(n511, 255);
              break;
            case ST_ASGML_:
              n514 = jj_consume_token(ST_ASGML_);
                         n513 = JTBToolkit.makeNodeToken(n514);
        n0 = new NodeChoice(n513, 256);
              break;
            case ST_ASHEXEWKB_:
              n516 = jj_consume_token(ST_ASHEXEWKB_);
                             n515 = JTBToolkit.makeNodeToken(n516);
        n0 = new NodeChoice(n515, 257);
              break;
            case ST_ASKML_:
              n518 = jj_consume_token(ST_ASKML_);
                         n517 = JTBToolkit.makeNodeToken(n518);
        n0 = new NodeChoice(n517, 258);
              break;
            case ST_ASSVG_:
              n520 = jj_consume_token(ST_ASSVG_);
                         n519 = JTBToolkit.makeNodeToken(n520);
        n0 = new NodeChoice(n519, 259);
              break;
            case ST_AZIMUTH_:
              n522 = jj_consume_token(ST_AZIMUTH_);
                           n521 = JTBToolkit.makeNodeToken(n522);
        n0 = new NodeChoice(n521, 260);
              break;
            case ST_BDMPOLYFROMTEXT_:
              n524 = jj_consume_token(ST_BDMPOLYFROMTEXT_);
                                   n523 = JTBToolkit.makeNodeToken(n524);
        n0 = new NodeChoice(n523, 261);
              break;
            case ST_BDPOLYFROMTEXT_:
              n526 = jj_consume_token(ST_BDPOLYFROMTEXT_);
                                  n525 = JTBToolkit.makeNodeToken(n526);
        n0 = new NodeChoice(n525, 262);
              break;
            case ST_BUILDAREA_:
              n528 = jj_consume_token(ST_BUILDAREA_);
                             n527 = JTBToolkit.makeNodeToken(n528);
        n0 = new NodeChoice(n527, 263);
              break;
            case ST_BYTEA_:
              n530 = jj_consume_token(ST_BYTEA_);
                         n529 = JTBToolkit.makeNodeToken(n530);
        n0 = new NodeChoice(n529, 264);
              break;
            case ST_CHIP_IN_:
              n532 = jj_consume_token(ST_CHIP_IN_);
                           n531 = JTBToolkit.makeNodeToken(n532);
        n0 = new NodeChoice(n531, 265);
              break;
            case ST_CHIP_OUT_:
              n534 = jj_consume_token(ST_CHIP_OUT_);
                            n533 = JTBToolkit.makeNodeToken(n534);
        n0 = new NodeChoice(n533, 266);
              break;
            case ST_CLOSESTPOINT_:
              n536 = jj_consume_token(ST_CLOSESTPOINT_);
                                n535 = JTBToolkit.makeNodeToken(n536);
        n0 = new NodeChoice(n535, 267);
              break;
            case ST_COLLECT_:
              n538 = jj_consume_token(ST_COLLECT_);
                           n537 = JTBToolkit.makeNodeToken(n538);
        n0 = new NodeChoice(n537, 268);
              break;
            case ST_COLLECTIONEXTRACT_:
              n540 = jj_consume_token(ST_COLLECTIONEXTRACT_);
                                     n539 = JTBToolkit.makeNodeToken(n540);
        n0 = new NodeChoice(n539, 269);
              break;
            case ST_COMBINE_BBOX_:
              n542 = jj_consume_token(ST_COMBINE_BBOX_);
                                n541 = JTBToolkit.makeNodeToken(n542);
        n0 = new NodeChoice(n541, 270);
              break;
            case ST_COMPRESSION_:
              n544 = jj_consume_token(ST_COMPRESSION_);
                               n543 = JTBToolkit.makeNodeToken(n544);
        n0 = new NodeChoice(n543, 271);
              break;
            case ST_CONTAINS_:
              n546 = jj_consume_token(ST_CONTAINS_);
                            n545 = JTBToolkit.makeNodeToken(n546);
        n0 = new NodeChoice(n545, 272);
              break;
            case ST_CONTAINSPROPERLY_:
              n548 = jj_consume_token(ST_CONTAINSPROPERLY_);
                                    n547 = JTBToolkit.makeNodeToken(n548);
        n0 = new NodeChoice(n547, 273);
              break;
            case ST_CONVEXHULL_:
              n550 = jj_consume_token(ST_CONVEXHULL_);
                              n549 = JTBToolkit.makeNodeToken(n550);
        n0 = new NodeChoice(n549, 274);
              break;
            case ST_COORDDIM_:
              n552 = jj_consume_token(ST_COORDDIM_);
                            n551 = JTBToolkit.makeNodeToken(n552);
        n0 = new NodeChoice(n551, 275);
              break;
            case ST_COVEREDBY_:
              n554 = jj_consume_token(ST_COVEREDBY_);
                             n553 = JTBToolkit.makeNodeToken(n554);
        n0 = new NodeChoice(n553, 276);
              break;
            case ST_COVERS_:
              n556 = jj_consume_token(ST_COVERS_);
                          n555 = JTBToolkit.makeNodeToken(n556);
        n0 = new NodeChoice(n555, 277);
              break;
            case ST_CROSSES_:
              n558 = jj_consume_token(ST_CROSSES_);
                           n557 = JTBToolkit.makeNodeToken(n558);
        n0 = new NodeChoice(n557, 278);
              break;
            case ST_CURVETOLINE_:
              n560 = jj_consume_token(ST_CURVETOLINE_);
                               n559 = JTBToolkit.makeNodeToken(n560);
        n0 = new NodeChoice(n559, 279);
              break;
            case ST_DATATYPE_:
              n562 = jj_consume_token(ST_DATATYPE_);
                            n561 = JTBToolkit.makeNodeToken(n562);
        n0 = new NodeChoice(n561, 280);
              break;
            case ST_DFULLYWITHIN_:
              n564 = jj_consume_token(ST_DFULLYWITHIN_);
                                n563 = JTBToolkit.makeNodeToken(n564);
        n0 = new NodeChoice(n563, 281);
              break;
            case ST_DIFFERENCE_:
              n566 = jj_consume_token(ST_DIFFERENCE_);
                              n565 = JTBToolkit.makeNodeToken(n566);
        n0 = new NodeChoice(n565, 282);
              break;
            case ST_DIMENSION_:
              n568 = jj_consume_token(ST_DIMENSION_);
                             n567 = JTBToolkit.makeNodeToken(n568);
        n0 = new NodeChoice(n567, 283);
              break;
            case ST_DISJOINT_:
              n570 = jj_consume_token(ST_DISJOINT_);
                            n569 = JTBToolkit.makeNodeToken(n570);
        n0 = new NodeChoice(n569, 284);
              break;
            case ST_DISTANCE_SPHERE_:
              n572 = jj_consume_token(ST_DISTANCE_SPHERE_);
                                   n571 = JTBToolkit.makeNodeToken(n572);
        n0 = new NodeChoice(n571, 285);
              break;
            case ST_DISTANCE_SPHEROID_:
              n574 = jj_consume_token(ST_DISTANCE_SPHEROID_);
                                     n573 = JTBToolkit.makeNodeToken(n574);
        n0 = new NodeChoice(n573, 286);
              break;
            case ST_ENDPOINT_:
              n576 = jj_consume_token(ST_ENDPOINT_);
                            n575 = JTBToolkit.makeNodeToken(n576);
        n0 = new NodeChoice(n575, 287);
              break;
            case ST_ENVELOPE_:
              n578 = jj_consume_token(ST_ENVELOPE_);
                            n577 = JTBToolkit.makeNodeToken(n578);
        n0 = new NodeChoice(n577, 288);
              break;
            case ST_EQUALS_:
              n580 = jj_consume_token(ST_EQUALS_);
                          n579 = JTBToolkit.makeNodeToken(n580);
        n0 = new NodeChoice(n579, 289);
              break;
            case ST_EXTERIORRING_:
              n582 = jj_consume_token(ST_EXTERIORRING_);
                                n581 = JTBToolkit.makeNodeToken(n582);
        n0 = new NodeChoice(n581, 290);
              break;
            case ST_EXTENT_:
              n584 = jj_consume_token(ST_EXTENT_);
                          n583 = JTBToolkit.makeNodeToken(n584);
        n0 = new NodeChoice(n583, 291);
              break;
            case ST_EXTENT3D_:
              n586 = jj_consume_token(ST_EXTENT3D_);
                            n585 = JTBToolkit.makeNodeToken(n586);
        n0 = new NodeChoice(n585, 292);
              break;
            case ST_FACTOR_:
              n588 = jj_consume_token(ST_FACTOR_);
                          n587 = JTBToolkit.makeNodeToken(n588);
        n0 = new NodeChoice(n587, 293);
              break;
            case ST_FIND_EXTENT_:
              n590 = jj_consume_token(ST_FIND_EXTENT_);
                               n589 = JTBToolkit.makeNodeToken(n590);
        n0 = new NodeChoice(n589, 294);
              break;
            case ST_FORCERHR_:
              n592 = jj_consume_token(ST_FORCERHR_);
                            n591 = JTBToolkit.makeNodeToken(n592);
        n0 = new NodeChoice(n591, 295);
              break;
            case ST_FORCE_2D_:
              n594 = jj_consume_token(ST_FORCE_2D_);
                            n593 = JTBToolkit.makeNodeToken(n594);
        n0 = new NodeChoice(n593, 296);
              break;
            case ST_FORCE_3D_:
              n596 = jj_consume_token(ST_FORCE_3D_);
                            n595 = JTBToolkit.makeNodeToken(n596);
        n0 = new NodeChoice(n595, 297);
              break;
            case ST_FORCE_3DM_:
              n598 = jj_consume_token(ST_FORCE_3DM_);
                             n597 = JTBToolkit.makeNodeToken(n598);
        n0 = new NodeChoice(n597, 298);
              break;
            case ST_FORCE_3DZ_:
              n600 = jj_consume_token(ST_FORCE_3DZ_);
                             n599 = JTBToolkit.makeNodeToken(n600);
        n0 = new NodeChoice(n599, 299);
              break;
            case ST_FORCE_4D_:
              n602 = jj_consume_token(ST_FORCE_4D_);
                            n601 = JTBToolkit.makeNodeToken(n602);
        n0 = new NodeChoice(n601, 300);
              break;
            case ST_FORCE_COLLECTION_:
              n604 = jj_consume_token(ST_FORCE_COLLECTION_);
                                    n603 = JTBToolkit.makeNodeToken(n604);
        n0 = new NodeChoice(n603, 301);
              break;
            case ST_GEOGFROMTEXT_:
              n606 = jj_consume_token(ST_GEOGFROMTEXT_);
                                n605 = JTBToolkit.makeNodeToken(n606);
        n0 = new NodeChoice(n605, 302);
              break;
            case ST_GEOGFROMWKB_:
              n608 = jj_consume_token(ST_GEOGFROMWKB_);
                               n607 = JTBToolkit.makeNodeToken(n608);
        n0 = new NodeChoice(n607, 303);
              break;
            case ST_GEOGRAPHYFROMTEXT_:
              n610 = jj_consume_token(ST_GEOGRAPHYFROMTEXT_);
                                     n609 = JTBToolkit.makeNodeToken(n610);
        n0 = new NodeChoice(n609, 304);
              break;
            case ST_GEOHASH_:
              n612 = jj_consume_token(ST_GEOHASH_);
                           n611 = JTBToolkit.makeNodeToken(n612);
        n0 = new NodeChoice(n611, 305);
              break;
            case ST_GEOMCOLLFROMTEXT_:
              n614 = jj_consume_token(ST_GEOMCOLLFROMTEXT_);
                                    n613 = JTBToolkit.makeNodeToken(n614);
        n0 = new NodeChoice(n613, 306);
              break;
            case ST_GEOMCOLLFROMWKB_:
              n616 = jj_consume_token(ST_GEOMCOLLFROMWKB_);
                                   n615 = JTBToolkit.makeNodeToken(n616);
        n0 = new NodeChoice(n615, 307);
              break;
            case ST_GEOMETRYTYPE_:
              n618 = jj_consume_token(ST_GEOMETRYTYPE_);
                                n617 = JTBToolkit.makeNodeToken(n618);
        n0 = new NodeChoice(n617, 308);
              break;
            case ST_GEOMFROMEWKB_:
              n620 = jj_consume_token(ST_GEOMFROMEWKB_);
                                n619 = JTBToolkit.makeNodeToken(n620);
        n0 = new NodeChoice(n619, 309);
              break;
            case ST_GEOMFROMEWKT_:
              n622 = jj_consume_token(ST_GEOMFROMEWKT_);
                                n621 = JTBToolkit.makeNodeToken(n622);
        n0 = new NodeChoice(n621, 310);
              break;
            case ST_GEOMFROMGML_:
              n624 = jj_consume_token(ST_GEOMFROMGML_);
                               n623 = JTBToolkit.makeNodeToken(n624);
        n0 = new NodeChoice(n623, 311);
              break;
            case ST_GEOMFROMKML_:
              n626 = jj_consume_token(ST_GEOMFROMKML_);
                               n625 = JTBToolkit.makeNodeToken(n626);
        n0 = new NodeChoice(n625, 312);
              break;
            case ST_GEOMFROMTEXT_:
              n628 = jj_consume_token(ST_GEOMFROMTEXT_);
                                n627 = JTBToolkit.makeNodeToken(n628);
        n0 = new NodeChoice(n627, 313);
              break;
            case ST_GEOMFROMWKB_:
              n630 = jj_consume_token(ST_GEOMFROMWKB_);
                               n629 = JTBToolkit.makeNodeToken(n630);
        n0 = new NodeChoice(n629, 314);
              break;
            case ST_GMLTOSQL_:
              n632 = jj_consume_token(ST_GMLTOSQL_);
                            n631 = JTBToolkit.makeNodeToken(n632);
        n0 = new NodeChoice(n631, 315);
              break;
            case ST_HASARC_:
              n634 = jj_consume_token(ST_HASARC_);
                          n633 = JTBToolkit.makeNodeToken(n634);
        n0 = new NodeChoice(n633, 316);
              break;
            case ST_HAUSDORFFDISTANCE_:
              n636 = jj_consume_token(ST_HAUSDORFFDISTANCE_);
                                     n635 = JTBToolkit.makeNodeToken(n636);
        n0 = new NodeChoice(n635, 317);
              break;
            case ST_HEIGHT_:
              n638 = jj_consume_token(ST_HEIGHT_);
                          n637 = JTBToolkit.makeNodeToken(n638);
        n0 = new NodeChoice(n637, 318);
              break;
            case ST_INTERIORRINGN_:
              n640 = jj_consume_token(ST_INTERIORRINGN_);
                                 n639 = JTBToolkit.makeNodeToken(n640);
        n0 = new NodeChoice(n639, 319);
              break;
            case ST_INTERSECTION_:
              n642 = jj_consume_token(ST_INTERSECTION_);
                                n641 = JTBToolkit.makeNodeToken(n642);
        n0 = new NodeChoice(n641, 320);
              break;
            case ST_INTERSECTS_:
              n644 = jj_consume_token(ST_INTERSECTS_);
                              n643 = JTBToolkit.makeNodeToken(n644);
        n0 = new NodeChoice(n643, 321);
              break;
            case ST_ISCLOSED_:
              n646 = jj_consume_token(ST_ISCLOSED_);
                            n645 = JTBToolkit.makeNodeToken(n646);
        n0 = new NodeChoice(n645, 322);
              break;
            case ST_ISEMPTY_:
              n648 = jj_consume_token(ST_ISEMPTY_);
                           n647 = JTBToolkit.makeNodeToken(n648);
        n0 = new NodeChoice(n647, 323);
              break;
            case ST_ISRING_:
              n650 = jj_consume_token(ST_ISRING_);
                          n649 = JTBToolkit.makeNodeToken(n650);
        n0 = new NodeChoice(n649, 324);
              break;
            case ST_ISSIMPLE_:
              n652 = jj_consume_token(ST_ISSIMPLE_);
                            n651 = JTBToolkit.makeNodeToken(n652);
        n0 = new NodeChoice(n651, 325);
              break;
            case ST_ISVALID_:
              n654 = jj_consume_token(ST_ISVALID_);
                           n653 = JTBToolkit.makeNodeToken(n654);
        n0 = new NodeChoice(n653, 326);
              break;
            case ST_ISVALIDREASON_:
              n656 = jj_consume_token(ST_ISVALIDREASON_);
                                 n655 = JTBToolkit.makeNodeToken(n656);
        n0 = new NodeChoice(n655, 327);
              break;
            case ST_LENGTH2D_:
              n658 = jj_consume_token(ST_LENGTH2D_);
                            n657 = JTBToolkit.makeNodeToken(n658);
        n0 = new NodeChoice(n657, 328);
              break;
            case ST_LENGTH2D_SPHEROID_:
              n660 = jj_consume_token(ST_LENGTH2D_SPHEROID_);
                                     n659 = JTBToolkit.makeNodeToken(n660);
        n0 = new NodeChoice(n659, 329);
              break;
            case ST_LENGTH3D_:
              n662 = jj_consume_token(ST_LENGTH3D_);
                            n661 = JTBToolkit.makeNodeToken(n662);
        n0 = new NodeChoice(n661, 330);
              break;
            case ST_LENGTH3D_SPHEROID_:
              n664 = jj_consume_token(ST_LENGTH3D_SPHEROID_);
                                     n663 = JTBToolkit.makeNodeToken(n664);
        n0 = new NodeChoice(n663, 331);
              break;
            case ST_LENGTH_SPHEROID_:
              n666 = jj_consume_token(ST_LENGTH_SPHEROID_);
                                   n665 = JTBToolkit.makeNodeToken(n666);
        n0 = new NodeChoice(n665, 332);
              break;
            case ST_LINECROSSINGDIRECTION_:
              n668 = jj_consume_token(ST_LINECROSSINGDIRECTION_);
                                         n667 = JTBToolkit.makeNodeToken(n668);
        n0 = new NodeChoice(n667, 333);
              break;
            case ST_LINEFROMMULTIPOINT_:
              n670 = jj_consume_token(ST_LINEFROMMULTIPOINT_);
                                      n669 = JTBToolkit.makeNodeToken(n670);
        n0 = new NodeChoice(n669, 334);
              break;
            case ST_LINEFROMTEXT_:
              n672 = jj_consume_token(ST_LINEFROMTEXT_);
                                n671 = JTBToolkit.makeNodeToken(n672);
        n0 = new NodeChoice(n671, 335);
              break;
            case ST_LINEFROMWKB_:
              n674 = jj_consume_token(ST_LINEFROMWKB_);
                               n673 = JTBToolkit.makeNodeToken(n674);
        n0 = new NodeChoice(n673, 336);
              break;
            case ST_LINEMERGE_:
              n676 = jj_consume_token(ST_LINEMERGE_);
                             n675 = JTBToolkit.makeNodeToken(n676);
        n0 = new NodeChoice(n675, 337);
              break;
            case ST_LINESTRINGFROMWKB_:
              n678 = jj_consume_token(ST_LINESTRINGFROMWKB_);
                                     n677 = JTBToolkit.makeNodeToken(n678);
        n0 = new NodeChoice(n677, 338);
              break;
            case ST_LINETOCURVE_:
              n680 = jj_consume_token(ST_LINETOCURVE_);
                               n679 = JTBToolkit.makeNodeToken(n680);
        n0 = new NodeChoice(n679, 339);
              break;
            case ST_LINE_INTERPOLATE_POINT_:
              n682 = jj_consume_token(ST_LINE_INTERPOLATE_POINT_);
                                          n681 = JTBToolkit.makeNodeToken(n682);
        n0 = new NodeChoice(n681, 340);
              break;
            case ST_LINE_LOCATE_POINT_:
              n684 = jj_consume_token(ST_LINE_LOCATE_POINT_);
                                     n683 = JTBToolkit.makeNodeToken(n684);
        n0 = new NodeChoice(n683, 341);
              break;
            case ST_LINE_SUBSTRING_:
              n686 = jj_consume_token(ST_LINE_SUBSTRING_);
                                  n685 = JTBToolkit.makeNodeToken(n686);
        n0 = new NodeChoice(n685, 342);
              break;
            case ST_LOCATEBETWEENELEVATIONS_:
              n688 = jj_consume_token(ST_LOCATEBETWEENELEVATIONS_);
                                           n687 = JTBToolkit.makeNodeToken(n688);
        n0 = new NodeChoice(n687, 343);
              break;
            case ST_LOCATE_ALONG_MEASURE_:
              n690 = jj_consume_token(ST_LOCATE_ALONG_MEASURE_);
                                        n689 = JTBToolkit.makeNodeToken(n690);
        n0 = new NodeChoice(n689, 344);
              break;
            case ST_LOCATE_BETWEEN_MEASURES_:
              n692 = jj_consume_token(ST_LOCATE_BETWEEN_MEASURES_);
                                           n691 = JTBToolkit.makeNodeToken(n692);
        n0 = new NodeChoice(n691, 345);
              break;
            case ST_LONGESTLINE_:
              n694 = jj_consume_token(ST_LONGESTLINE_);
                               n693 = JTBToolkit.makeNodeToken(n694);
        n0 = new NodeChoice(n693, 346);
              break;
            case ST_M_:
              n696 = jj_consume_token(ST_M_);
                     n695 = JTBToolkit.makeNodeToken(n696);
        n0 = new NodeChoice(n695, 347);
              break;
            case ST_MAKEENVELOPE_:
              n698 = jj_consume_token(ST_MAKEENVELOPE_);
                                n697 = JTBToolkit.makeNodeToken(n698);
        n0 = new NodeChoice(n697, 348);
              break;
            case ST_MAKEPOINT_:
              n700 = jj_consume_token(ST_MAKEPOINT_);
                             n699 = JTBToolkit.makeNodeToken(n700);
        n0 = new NodeChoice(n699, 349);
              break;
            case ST_MAKEPOINTM_:
              n702 = jj_consume_token(ST_MAKEPOINTM_);
                              n701 = JTBToolkit.makeNodeToken(n702);
        n0 = new NodeChoice(n701, 350);
              break;
            case ST_MAKEPOLYGON_:
              n704 = jj_consume_token(ST_MAKEPOLYGON_);
                               n703 = JTBToolkit.makeNodeToken(n704);
        n0 = new NodeChoice(n703, 351);
              break;
            case ST_MAXDISTANCE_:
              n706 = jj_consume_token(ST_MAXDISTANCE_);
                               n705 = JTBToolkit.makeNodeToken(n706);
        n0 = new NodeChoice(n705, 352);
              break;
            case ST_MEMCOLLECT_:
              n708 = jj_consume_token(ST_MEMCOLLECT_);
                              n707 = JTBToolkit.makeNodeToken(n708);
        n0 = new NodeChoice(n707, 353);
              break;
            case ST_MEM_SIZE_:
              n710 = jj_consume_token(ST_MEM_SIZE_);
                            n709 = JTBToolkit.makeNodeToken(n710);
        n0 = new NodeChoice(n709, 354);
              break;
            case ST_MINIMUMBOUNDINGCIRCLE_:
              n712 = jj_consume_token(ST_MINIMUMBOUNDINGCIRCLE_);
                                         n711 = JTBToolkit.makeNodeToken(n712);
        n0 = new NodeChoice(n711, 355);
              break;
            case ST_MLINEFROMTEXT_:
              n714 = jj_consume_token(ST_MLINEFROMTEXT_);
                                 n713 = JTBToolkit.makeNodeToken(n714);
        n0 = new NodeChoice(n713, 356);
              break;
            case ST_MLINEFROMWKB_:
              n716 = jj_consume_token(ST_MLINEFROMWKB_);
                                n715 = JTBToolkit.makeNodeToken(n716);
        n0 = new NodeChoice(n715, 357);
              break;
            case ST_MPOINTFROMTEXT_:
              n718 = jj_consume_token(ST_MPOINTFROMTEXT_);
                                  n717 = JTBToolkit.makeNodeToken(n718);
        n0 = new NodeChoice(n717, 358);
              break;
            case ST_MPOINTFROMWKB_:
              n720 = jj_consume_token(ST_MPOINTFROMWKB_);
                                 n719 = JTBToolkit.makeNodeToken(n720);
        n0 = new NodeChoice(n719, 359);
              break;
            case ST_MPOLYFROMTEXT_:
              n722 = jj_consume_token(ST_MPOLYFROMTEXT_);
                                 n721 = JTBToolkit.makeNodeToken(n722);
        n0 = new NodeChoice(n721, 360);
              break;
            case ST_MPOLYFROMWKB_:
              n724 = jj_consume_token(ST_MPOLYFROMWKB_);
                                n723 = JTBToolkit.makeNodeToken(n724);
        n0 = new NodeChoice(n723, 361);
              break;
            case ST_MULTI_:
              n726 = jj_consume_token(ST_MULTI_);
                         n725 = JTBToolkit.makeNodeToken(n726);
        n0 = new NodeChoice(n725, 362);
              break;
            case ST_MULTILINEFROMWKB_:
              n728 = jj_consume_token(ST_MULTILINEFROMWKB_);
                                    n727 = JTBToolkit.makeNodeToken(n728);
        n0 = new NodeChoice(n727, 363);
              break;
            case ST_MULTILINESTRINGFROMTEXT_:
              n730 = jj_consume_token(ST_MULTILINESTRINGFROMTEXT_);
                                           n729 = JTBToolkit.makeNodeToken(n730);
        n0 = new NodeChoice(n729, 364);
              break;
            case ST_MULTIPOINTFROMTEXT_:
              n732 = jj_consume_token(ST_MULTIPOINTFROMTEXT_);
                                      n731 = JTBToolkit.makeNodeToken(n732);
        n0 = new NodeChoice(n731, 365);
              break;
            case ST_MULTIPOINTFROMWKB_:
              n734 = jj_consume_token(ST_MULTIPOINTFROMWKB_);
                                     n733 = JTBToolkit.makeNodeToken(n734);
        n0 = new NodeChoice(n733, 366);
              break;
            case ST_MULTIPOLYFROMWKB_:
              n736 = jj_consume_token(ST_MULTIPOLYFROMWKB_);
                                    n735 = JTBToolkit.makeNodeToken(n736);
        n0 = new NodeChoice(n735, 367);
              break;
            case ST_MULTIPOLYGONFROMTEXT_:
              n738 = jj_consume_token(ST_MULTIPOLYGONFROMTEXT_);
                                        n737 = JTBToolkit.makeNodeToken(n738);
        n0 = new NodeChoice(n737, 368);
              break;
            case ST_NDIMS_:
              n740 = jj_consume_token(ST_NDIMS_);
                         n739 = JTBToolkit.makeNodeToken(n740);
        n0 = new NodeChoice(n739, 369);
              break;
            case ST_NPOINTS_:
              n742 = jj_consume_token(ST_NPOINTS_);
                           n741 = JTBToolkit.makeNodeToken(n742);
        n0 = new NodeChoice(n741, 370);
              break;
            case ST_NRINGS_:
              n744 = jj_consume_token(ST_NRINGS_);
                          n743 = JTBToolkit.makeNodeToken(n744);
        n0 = new NodeChoice(n743, 371);
              break;
            case ST_NUMGEOMETRIES_:
              n746 = jj_consume_token(ST_NUMGEOMETRIES_);
                                 n745 = JTBToolkit.makeNodeToken(n746);
        n0 = new NodeChoice(n745, 372);
              break;
            case ST_NUMINTERIORRING_:
              n748 = jj_consume_token(ST_NUMINTERIORRING_);
                                   n747 = JTBToolkit.makeNodeToken(n748);
        n0 = new NodeChoice(n747, 373);
              break;
            case ST_NUMINTERIORRINGS_:
              n750 = jj_consume_token(ST_NUMINTERIORRINGS_);
                                    n749 = JTBToolkit.makeNodeToken(n750);
        n0 = new NodeChoice(n749, 374);
              break;
            case ST_NUMPOINTS_:
              n752 = jj_consume_token(ST_NUMPOINTS_);
                             n751 = JTBToolkit.makeNodeToken(n752);
        n0 = new NodeChoice(n751, 375);
              break;
            case ST_ORDERINGEQUALS_:
              n754 = jj_consume_token(ST_ORDERINGEQUALS_);
                                  n753 = JTBToolkit.makeNodeToken(n754);
        n0 = new NodeChoice(n753, 376);
              break;
            case ST_OVERLAPS_:
              n756 = jj_consume_token(ST_OVERLAPS_);
                            n755 = JTBToolkit.makeNodeToken(n756);
        n0 = new NodeChoice(n755, 377);
              break;
            case ST_PERIMETER_:
              n758 = jj_consume_token(ST_PERIMETER_);
                             n757 = JTBToolkit.makeNodeToken(n758);
        n0 = new NodeChoice(n757, 378);
              break;
            case ST_PERIMETER2D_:
              n760 = jj_consume_token(ST_PERIMETER2D_);
                               n759 = JTBToolkit.makeNodeToken(n760);
        n0 = new NodeChoice(n759, 379);
              break;
            case ST_PERIMETER3D_:
              n762 = jj_consume_token(ST_PERIMETER3D_);
                               n761 = JTBToolkit.makeNodeToken(n762);
        n0 = new NodeChoice(n761, 380);
              break;
            case ST_POINT_:
              n764 = jj_consume_token(ST_POINT_);
                         n763 = JTBToolkit.makeNodeToken(n764);
        n0 = new NodeChoice(n763, 381);
              break;
            case ST_POINTFROMTEXT_:
              n766 = jj_consume_token(ST_POINTFROMTEXT_);
                                 n765 = JTBToolkit.makeNodeToken(n766);
        n0 = new NodeChoice(n765, 382);
              break;
            case ST_POINTFROMWKB_:
              n768 = jj_consume_token(ST_POINTFROMWKB_);
                                n767 = JTBToolkit.makeNodeToken(n768);
        n0 = new NodeChoice(n767, 383);
              break;
            case ST_POINTN_:
              n770 = jj_consume_token(ST_POINTN_);
                          n769 = JTBToolkit.makeNodeToken(n770);
        n0 = new NodeChoice(n769, 384);
              break;
            case ST_POINTONSURFACE_:
              n772 = jj_consume_token(ST_POINTONSURFACE_);
                                  n771 = JTBToolkit.makeNodeToken(n772);
        n0 = new NodeChoice(n771, 385);
              break;
            case ST_POINT_INSIDE_CIRCLE_:
              n774 = jj_consume_token(ST_POINT_INSIDE_CIRCLE_);
                                       n773 = JTBToolkit.makeNodeToken(n774);
        n0 = new NodeChoice(n773, 386);
              break;
            case ST_POLYFROMTEXT_:
              n776 = jj_consume_token(ST_POLYFROMTEXT_);
                                n775 = JTBToolkit.makeNodeToken(n776);
        n0 = new NodeChoice(n775, 387);
              break;
            case ST_POLYFROMWKB_:
              n778 = jj_consume_token(ST_POLYFROMWKB_);
                               n777 = JTBToolkit.makeNodeToken(n778);
        n0 = new NodeChoice(n777, 388);
              break;
            case ST_POLYGON_:
              n780 = jj_consume_token(ST_POLYGON_);
                           n779 = JTBToolkit.makeNodeToken(n780);
        n0 = new NodeChoice(n779, 389);
              break;
            case ST_POLYGONFROMTEXT_:
              n782 = jj_consume_token(ST_POLYGONFROMTEXT_);
                                   n781 = JTBToolkit.makeNodeToken(n782);
        n0 = new NodeChoice(n781, 390);
              break;
            case ST_POLYGONFROMWKB_:
              n784 = jj_consume_token(ST_POLYGONFROMWKB_);
                                  n783 = JTBToolkit.makeNodeToken(n784);
        n0 = new NodeChoice(n783, 391);
              break;
            case ST_POSTGIS_GIST_JOINSEL_:
              n786 = jj_consume_token(ST_POSTGIS_GIST_JOINSEL_);
                                        n785 = JTBToolkit.makeNodeToken(n786);
        n0 = new NodeChoice(n785, 392);
              break;
            case ST_POSTGIS_GIST_SEL_:
              n788 = jj_consume_token(ST_POSTGIS_GIST_SEL_);
                                    n787 = JTBToolkit.makeNodeToken(n788);
        n0 = new NodeChoice(n787, 393);
              break;
            case ST_RELATE_:
              n790 = jj_consume_token(ST_RELATE_);
                          n789 = JTBToolkit.makeNodeToken(n790);
        n0 = new NodeChoice(n789, 394);
              break;
            case ST_REMOVEPOINT_:
              n792 = jj_consume_token(ST_REMOVEPOINT_);
                               n791 = JTBToolkit.makeNodeToken(n792);
        n0 = new NodeChoice(n791, 395);
              break;
            case ST_REVERSE_:
              n794 = jj_consume_token(ST_REVERSE_);
                           n793 = JTBToolkit.makeNodeToken(n794);
        n0 = new NodeChoice(n793, 396);
              break;
            case ST_ROTATE_:
              n796 = jj_consume_token(ST_ROTATE_);
                          n795 = JTBToolkit.makeNodeToken(n796);
        n0 = new NodeChoice(n795, 397);
              break;
            case ST_ROTATEX_:
              n798 = jj_consume_token(ST_ROTATEX_);
                           n797 = JTBToolkit.makeNodeToken(n798);
        n0 = new NodeChoice(n797, 398);
              break;
            case ST_ROTATEY_:
              n800 = jj_consume_token(ST_ROTATEY_);
                           n799 = JTBToolkit.makeNodeToken(n800);
        n0 = new NodeChoice(n799, 399);
              break;
            case ST_ROTATEZ_:
              n802 = jj_consume_token(ST_ROTATEZ_);
                           n801 = JTBToolkit.makeNodeToken(n802);
        n0 = new NodeChoice(n801, 400);
              break;
            case ST_SCALE_:
              n804 = jj_consume_token(ST_SCALE_);
                         n803 = JTBToolkit.makeNodeToken(n804);
        n0 = new NodeChoice(n803, 401);
              break;
            case ST_SEGMENTIZE_:
              n806 = jj_consume_token(ST_SEGMENTIZE_);
                              n805 = JTBToolkit.makeNodeToken(n806);
        n0 = new NodeChoice(n805, 402);
              break;
            case ST_SETFACTOR_:
              n808 = jj_consume_token(ST_SETFACTOR_);
                             n807 = JTBToolkit.makeNodeToken(n808);
        n0 = new NodeChoice(n807, 403);
              break;
            case ST_SETPOINT_:
              n810 = jj_consume_token(ST_SETPOINT_);
                            n809 = JTBToolkit.makeNodeToken(n810);
        n0 = new NodeChoice(n809, 404);
              break;
            case ST_SETSRID_:
              n812 = jj_consume_token(ST_SETSRID_);
                           n811 = JTBToolkit.makeNodeToken(n812);
        n0 = new NodeChoice(n811, 405);
              break;
            case ST_SHIFT_LONGITUDE_:
              n814 = jj_consume_token(ST_SHIFT_LONGITUDE_);
                                   n813 = JTBToolkit.makeNodeToken(n814);
        n0 = new NodeChoice(n813, 406);
              break;
            case ST_SHORTESTLINE_:
              n816 = jj_consume_token(ST_SHORTESTLINE_);
                                n815 = JTBToolkit.makeNodeToken(n816);
        n0 = new NodeChoice(n815, 407);
              break;
            case ST_SIMPLIFY_:
              n818 = jj_consume_token(ST_SIMPLIFY_);
                            n817 = JTBToolkit.makeNodeToken(n818);
        n0 = new NodeChoice(n817, 408);
              break;
            case ST_SIMPLIFYPRESERVETOPOLOGY_:
              n820 = jj_consume_token(ST_SIMPLIFYPRESERVETOPOLOGY_);
                                            n819 = JTBToolkit.makeNodeToken(n820);
        n0 = new NodeChoice(n819, 409);
              break;
            case ST_SNAPTOGRID_:
              n822 = jj_consume_token(ST_SNAPTOGRID_);
                              n821 = JTBToolkit.makeNodeToken(n822);
        n0 = new NodeChoice(n821, 410);
              break;
            case ST_SRID_:
              n824 = jj_consume_token(ST_SRID_);
                        n823 = JTBToolkit.makeNodeToken(n824);
        n0 = new NodeChoice(n823, 411);
              break;
            case ST_STARTPOINT_:
              n826 = jj_consume_token(ST_STARTPOINT_);
                              n825 = JTBToolkit.makeNodeToken(n826);
        n0 = new NodeChoice(n825, 412);
              break;
            case ST_SUMMARY_:
              n828 = jj_consume_token(ST_SUMMARY_);
                           n827 = JTBToolkit.makeNodeToken(n828);
        n0 = new NodeChoice(n827, 413);
              break;
            case ST_SYMDIFFERENCE_:
              n830 = jj_consume_token(ST_SYMDIFFERENCE_);
                                 n829 = JTBToolkit.makeNodeToken(n830);
        n0 = new NodeChoice(n829, 414);
              break;
            case ST_SYMMETRICDIFFERENCE_:
              n832 = jj_consume_token(ST_SYMMETRICDIFFERENCE_);
                                       n831 = JTBToolkit.makeNodeToken(n832);
        n0 = new NodeChoice(n831, 415);
              break;
            case ST_TEXT_:
              n834 = jj_consume_token(ST_TEXT_);
                        n833 = JTBToolkit.makeNodeToken(n834);
        n0 = new NodeChoice(n833, 416);
              break;
            case ST_TOUCHES_:
              n836 = jj_consume_token(ST_TOUCHES_);
                           n835 = JTBToolkit.makeNodeToken(n836);
        n0 = new NodeChoice(n835, 417);
              break;
            case ST_TRANSLATE_:
              n838 = jj_consume_token(ST_TRANSLATE_);
                             n837 = JTBToolkit.makeNodeToken(n838);
        n0 = new NodeChoice(n837, 418);
              break;
            case ST_TRANSSCALE_:
              n840 = jj_consume_token(ST_TRANSSCALE_);
                              n839 = JTBToolkit.makeNodeToken(n840);
        n0 = new NodeChoice(n839, 419);
              break;
            case ST_WIDTH_:
              n842 = jj_consume_token(ST_WIDTH_);
                         n841 = JTBToolkit.makeNodeToken(n842);
        n0 = new NodeChoice(n841, 420);
              break;
            case ST_WITHIN_:
              n844 = jj_consume_token(ST_WITHIN_);
                          n843 = JTBToolkit.makeNodeToken(n844);
        n0 = new NodeChoice(n843, 421);
              break;
            case ST_WKBTOSQL_:
              n846 = jj_consume_token(ST_WKBTOSQL_);
                            n845 = JTBToolkit.makeNodeToken(n846);
        n0 = new NodeChoice(n845, 422);
              break;
            case ST_WKTTOSQL_:
              n848 = jj_consume_token(ST_WKTTOSQL_);
                            n847 = JTBToolkit.makeNodeToken(n848);
        n0 = new NodeChoice(n847, 423);
              break;
            case ST_X_:
              n850 = jj_consume_token(ST_X_);
                     n849 = JTBToolkit.makeNodeToken(n850);
        n0 = new NodeChoice(n849, 424);
              break;
            case ST_Y_:
              n852 = jj_consume_token(ST_Y_);
                     n851 = JTBToolkit.makeNodeToken(n852);
        n0 = new NodeChoice(n851, 425);
              break;
            case ST_Z_:
              n854 = jj_consume_token(ST_Z_);
                     n853 = JTBToolkit.makeNodeToken(n854);
        n0 = new NodeChoice(n853, 426);
              break;
            case ST_ZMFLAG_:
              n856 = jj_consume_token(ST_ZMFLAG_);
                          n855 = JTBToolkit.makeNodeToken(n856);
        n0 = new NodeChoice(n855, 427);
              break;
            case ST_BOX2D_:
              n858 = jj_consume_token(ST_BOX2D_);
                         n857 = JTBToolkit.makeNodeToken(n858);
        n0 = new NodeChoice(n857, 428);
              break;
            case ST_BOX3D_:
              n860 = jj_consume_token(ST_BOX3D_);
                         n859 = JTBToolkit.makeNodeToken(n860);
        n0 = new NodeChoice(n859, 429);
              break;
            case ST_GEOMETRY_:
              n862 = jj_consume_token(ST_GEOMETRY_);
                            n861 = JTBToolkit.makeNodeToken(n862);
        n0 = new NodeChoice(n861, 430);
              break;
            case ST_GEOMETRYN_:
              n864 = jj_consume_token(ST_GEOMETRYN_);
                             n863 = JTBToolkit.makeNodeToken(n864);
        n0 = new NodeChoice(n863, 431);
              break;
            case SETPOINT_:
              n866 = jj_consume_token(SETPOINT_);
                         n865 = JTBToolkit.makeNodeToken(n866);
        n0 = new NodeChoice(n865, 432);
              break;
            case ASEWKT_:
              n868 = jj_consume_token(ASEWKT_);
                       n867 = JTBToolkit.makeNodeToken(n868);
        n0 = new NodeChoice(n867, 433);
              break;
            case SIMPLIFY_:
              n870 = jj_consume_token(SIMPLIFY_);
                         n869 = JTBToolkit.makeNodeToken(n870);
        n0 = new NodeChoice(n869, 434);
              break;
            case ASTEXT_:
              n872 = jj_consume_token(ASTEXT_);
                       n871 = JTBToolkit.makeNodeToken(n872);
        n0 = new NodeChoice(n871, 435);
              break;
            case REMOVEPOINT_:
              n874 = jj_consume_token(REMOVEPOINT_);
                            n873 = JTBToolkit.makeNodeToken(n874);
        n0 = new NodeChoice(n873, 436);
              break;
            case NPOINTS_:
              n876 = jj_consume_token(NPOINTS_);
                        n875 = JTBToolkit.makeNodeToken(n876);
        n0 = new NodeChoice(n875, 437);
              break;
            case NRINGS_:
              n878 = jj_consume_token(NRINGS_);
                       n877 = JTBToolkit.makeNodeToken(n878);
        n0 = new NodeChoice(n877, 438);
              break;
            case MEM_SIZE_:
              n880 = jj_consume_token(MEM_SIZE_);
                         n879 = JTBToolkit.makeNodeToken(n880);
        n0 = new NodeChoice(n879, 439);
              break;
            case NUMGEOMETRIES_:
              n882 = jj_consume_token(NUMGEOMETRIES_);
                              n881 = JTBToolkit.makeNodeToken(n882);
        n0 = new NodeChoice(n881, 440);
              break;
            case POSTGIS_DROPBBOX_:
              n884 = jj_consume_token(POSTGIS_DROPBBOX_);
                                 n883 = JTBToolkit.makeNodeToken(n884);
        n0 = new NodeChoice(n883, 441);
              break;
            case DROPBBOX_:
              n886 = jj_consume_token(DROPBBOX_);
                         n885 = JTBToolkit.makeNodeToken(n886);
        n0 = new NodeChoice(n885, 442);
              break;
            case SETSRID_:
              n888 = jj_consume_token(SETSRID_);
                        n887 = JTBToolkit.makeNodeToken(n888);
        n0 = new NodeChoice(n887, 443);
              break;
            case MULTI_:
              n890 = jj_consume_token(MULTI_);
                      n889 = JTBToolkit.makeNodeToken(n890);
        n0 = new NodeChoice(n889, 444);
              break;
            case FORCE_2D_:
              n892 = jj_consume_token(FORCE_2D_);
                         n891 = JTBToolkit.makeNodeToken(n892);
        n0 = new NodeChoice(n891, 445);
              break;
            case FORCE_3D_:
              n894 = jj_consume_token(FORCE_3D_);
                         n893 = JTBToolkit.makeNodeToken(n894);
        n0 = new NodeChoice(n893, 446);
              break;
            case FORCE_3DM_:
              n896 = jj_consume_token(FORCE_3DM_);
                          n895 = JTBToolkit.makeNodeToken(n896);
        n0 = new NodeChoice(n895, 447);
              break;
            case FORCE_3DZ_:
              n898 = jj_consume_token(FORCE_3DZ_);
                          n897 = JTBToolkit.makeNodeToken(n898);
        n0 = new NodeChoice(n897, 448);
              break;
            case FORCE_4D_:
              n900 = jj_consume_token(FORCE_4D_);
                         n899 = JTBToolkit.makeNodeToken(n900);
        n0 = new NodeChoice(n899, 449);
              break;
            case SEGMENTIZE_:
              n902 = jj_consume_token(SEGMENTIZE_);
                           n901 = JTBToolkit.makeNodeToken(n902);
        n0 = new NodeChoice(n901, 450);
              break;
            case FORCE_COLLECTION_:
              n904 = jj_consume_token(FORCE_COLLECTION_);
                                 n903 = JTBToolkit.makeNodeToken(n904);
        n0 = new NodeChoice(n903, 451);
              break;
            case ASBINARY_:
              n906 = jj_consume_token(ASBINARY_);
                         n905 = JTBToolkit.makeNodeToken(n906);
        n0 = new NodeChoice(n905, 452);
              break;
            case EXTENT_:
              n908 = jj_consume_token(EXTENT_);
                       n907 = JTBToolkit.makeNodeToken(n908);
        n0 = new NodeChoice(n907, 453);
              break;
            case EXTENT3D_:
              n910 = jj_consume_token(EXTENT3D_);
                         n909 = JTBToolkit.makeNodeToken(n910);
        n0 = new NodeChoice(n909, 454);
              break;
            case COLLECT_:
              n912 = jj_consume_token(COLLECT_);
                        n911 = JTBToolkit.makeNodeToken(n912);
        n0 = new NodeChoice(n911, 455);
              break;
            case LOCATE_ALONG_MEASURE_:
              n914 = jj_consume_token(LOCATE_ALONG_MEASURE_);
                                     n913 = JTBToolkit.makeNodeToken(n914);
        n0 = new NodeChoice(n913, 456);
              break;
            case LOCATE_BETWEEN_MEASURES_:
              n916 = jj_consume_token(LOCATE_BETWEEN_MEASURES_);
                                        n915 = JTBToolkit.makeNodeToken(n916);
        n0 = new NodeChoice(n915, 457);
              break;
            case LINE_LOCATE_POINT_:
              n918 = jj_consume_token(LINE_LOCATE_POINT_);
                                  n917 = JTBToolkit.makeNodeToken(n918);
        n0 = new NodeChoice(n917, 458);
              break;
            case LINE_SUBSTRING_:
              n920 = jj_consume_token(LINE_SUBSTRING_);
                               n919 = JTBToolkit.makeNodeToken(n920);
        n0 = new NodeChoice(n919, 459);
              break;
            case LINE_INTERPOLATE_POINT_:
              n922 = jj_consume_token(LINE_INTERPOLATE_POINT_);
                                       n921 = JTBToolkit.makeNodeToken(n922);
        n0 = new NodeChoice(n921, 460);
              break;
            case GEOMFROMTEXT_:
              n924 = jj_consume_token(GEOMFROMTEXT_);
                             n923 = JTBToolkit.makeNodeToken(n924);
        n0 = new NodeChoice(n923, 461);
              break;
            case GEOMFROMEWKT_:
              n926 = jj_consume_token(GEOMFROMEWKT_);
                             n925 = JTBToolkit.makeNodeToken(n926);
        n0 = new NodeChoice(n925, 462);
              break;
            case ADDGEOMETRYCOLUMN_:
              n928 = jj_consume_token(ADDGEOMETRYCOLUMN_);
                                  n927 = JTBToolkit.makeNodeToken(n928);
        n0 = new NodeChoice(n927, 463);
              break;
            case GEOMETRYTYPE_:
              n930 = jj_consume_token(GEOMETRYTYPE_);
                             n929 = JTBToolkit.makeNodeToken(n930);
        n0 = new NodeChoice(n929, 464);
              break;
            case ZMFLAG_:
              n932 = jj_consume_token(ZMFLAG_);
                       n931 = JTBToolkit.makeNodeToken(n932);
        n0 = new NodeChoice(n931, 465);
              break;
            case ASEWKB_:
              n934 = jj_consume_token(ASEWKB_);
                       n933 = JTBToolkit.makeNodeToken(n934);
        n0 = new NodeChoice(n933, 466);
              break;
            case SNAPTOGRID_:
              n936 = jj_consume_token(SNAPTOGRID_);
                           n935 = JTBToolkit.makeNodeToken(n936);
        n0 = new NodeChoice(n935, 467);
              break;
            case SCALE_:
              n938 = jj_consume_token(SCALE_);
                      n937 = JTBToolkit.makeNodeToken(n938);
        n0 = new NodeChoice(n937, 468);
              break;
            case ROTATEZ_:
              n940 = jj_consume_token(ROTATEZ_);
                        n939 = JTBToolkit.makeNodeToken(n940);
        n0 = new NodeChoice(n939, 469);
              break;
            case ROTATE_:
              n942 = jj_consume_token(ROTATE_);
                       n941 = JTBToolkit.makeNodeToken(n942);
        n0 = new NodeChoice(n941, 470);
              break;
            case ROTATEX_:
              n944 = jj_consume_token(ROTATEX_);
                        n943 = JTBToolkit.makeNodeToken(n944);
        n0 = new NodeChoice(n943, 471);
              break;
            case ROTATEY_:
              n946 = jj_consume_token(ROTATEY_);
                        n945 = JTBToolkit.makeNodeToken(n946);
        n0 = new NodeChoice(n945, 472);
              break;
            case TRANSSCALE_:
              n948 = jj_consume_token(TRANSSCALE_);
                           n947 = JTBToolkit.makeNodeToken(n948);
        n0 = new NodeChoice(n947, 473);
              break;
            case AREA2D_:
              n950 = jj_consume_token(AREA2D_);
                       n949 = JTBToolkit.makeNodeToken(n950);
        n0 = new NodeChoice(n949, 474);
              break;
            case PERIMETER2D_:
              n952 = jj_consume_token(PERIMETER2D_);
                            n951 = JTBToolkit.makeNodeToken(n952);
        n0 = new NodeChoice(n951, 475);
              break;
            case PERIMETER3D_:
              n954 = jj_consume_token(PERIMETER3D_);
                            n953 = JTBToolkit.makeNodeToken(n954);
        n0 = new NodeChoice(n953, 476);
              break;
            case LENGTH2D_:
              n956 = jj_consume_token(LENGTH2D_);
                         n955 = JTBToolkit.makeNodeToken(n956);
        n0 = new NodeChoice(n955, 477);
              break;
            case LENGTH3D_:
              n958 = jj_consume_token(LENGTH3D_);
                         n957 = JTBToolkit.makeNodeToken(n958);
        n0 = new NodeChoice(n957, 478);
              break;
            case DISTANCE_:
              n960 = jj_consume_token(DISTANCE_);
                         n959 = JTBToolkit.makeNodeToken(n960);
        n0 = new NodeChoice(n959, 479);
              break;
            case SRID_:
              n962 = jj_consume_token(SRID_);
                     n961 = JTBToolkit.makeNodeToken(n962);
        n0 = new NodeChoice(n961, 480);
              break;
            case WITHIN_:
              n964 = jj_consume_token(WITHIN_);
                       n963 = JTBToolkit.makeNodeToken(n964);
        n0 = new NodeChoice(n963, 481);
              break;
            case DISJOINT_:
              n966 = jj_consume_token(DISJOINT_);
                         n965 = JTBToolkit.makeNodeToken(n966);
        n0 = new NodeChoice(n965, 482);
              break;
            case INTERSECTS_:
              n968 = jj_consume_token(INTERSECTS_);
                           n967 = JTBToolkit.makeNodeToken(n968);
        n0 = new NodeChoice(n967, 483);
              break;
            case CONTAINS_:
              n970 = jj_consume_token(CONTAINS_);
                         n969 = JTBToolkit.makeNodeToken(n970);
        n0 = new NodeChoice(n969, 484);
              break;
            case ASKML_:
              n972 = jj_consume_token(ASKML_);
                      n971 = JTBToolkit.makeNodeToken(n972);
        n0 = new NodeChoice(n971, 485);
              break;
            case NDIMS_:
              n974 = jj_consume_token(NDIMS_);
                      n973 = JTBToolkit.makeNodeToken(n974);
        n0 = new NodeChoice(n973, 486);
              break;
            case ISVALID_:
              n976 = jj_consume_token(ISVALID_);
                        n975 = JTBToolkit.makeNodeToken(n976);
        n0 = new NodeChoice(n975, 487);
              break;
            case DIMENSION_:
              n978 = jj_consume_token(DIMENSION_);
                          n977 = JTBToolkit.makeNodeToken(n978);
        n0 = new NodeChoice(n977, 488);
              break;
            case GEOMETRYN_:
              n980 = jj_consume_token(GEOMETRYN_);
                          n979 = JTBToolkit.makeNodeToken(n980);
        n0 = new NodeChoice(n979, 489);
              break;
            case ASHEXEWKB_:
              n982 = jj_consume_token(ASHEXEWKB_);
                          n981 = JTBToolkit.makeNodeToken(n982);
        n0 = new NodeChoice(n981, 490);
              break;
            case ISCLOSED_:
              n984 = jj_consume_token(ISCLOSED_);
                         n983 = JTBToolkit.makeNodeToken(n984);
        n0 = new NodeChoice(n983, 491);
              break;
            case ISSIMPLE_:
              n986 = jj_consume_token(ISSIMPLE_);
                         n985 = JTBToolkit.makeNodeToken(n986);
        n0 = new NodeChoice(n985, 492);
              break;
            case ISRING_:
              n988 = jj_consume_token(ISRING_);
                       n987 = JTBToolkit.makeNodeToken(n988);
        n0 = new NodeChoice(n987, 493);
              break;
            case DIFFERENCE_:
              n990 = jj_consume_token(DIFFERENCE_);
                           n989 = JTBToolkit.makeNodeToken(n990);
        n0 = new NodeChoice(n989, 494);
              break;
            case LINEMERGE_:
              n992 = jj_consume_token(LINEMERGE_);
                          n991 = JTBToolkit.makeNodeToken(n992);
        n0 = new NodeChoice(n991, 495);
              break;
            case INTERSECTION_:
              n994 = jj_consume_token(INTERSECTION_);
                             n993 = JTBToolkit.makeNodeToken(n994);
        n0 = new NodeChoice(n993, 496);
              break;
            case SYMDIFFERENCE_:
              n996 = jj_consume_token(SYMDIFFERENCE_);
                              n995 = JTBToolkit.makeNodeToken(n996);
        n0 = new NodeChoice(n995, 497);
              break;
            case WORD_EQUALS_:
              n998 = jj_consume_token(WORD_EQUALS_);
                            n997 = JTBToolkit.makeNodeToken(n998);
        n0 = new NodeChoice(n997, 498);
              break;
            case ENVELOPE_:
              n1000 = jj_consume_token(ENVELOPE_);
                          n999 = JTBToolkit.makeNodeToken(n1000);
        n0 = new NodeChoice(n999, 499);
              break;
            case ISEMPTY_:
              n1002 = jj_consume_token(ISEMPTY_);
                         n1001 = JTBToolkit.makeNodeToken(n1002);
        n0 = new NodeChoice(n1001, 500);
              break;
            case STARTPOINT_:
              n1004 = jj_consume_token(STARTPOINT_);
                            n1003 = JTBToolkit.makeNodeToken(n1004);
        n0 = new NodeChoice(n1003, 501);
              break;
            case ENDPOINT_:
              n1006 = jj_consume_token(ENDPOINT_);
                          n1005 = JTBToolkit.makeNodeToken(n1006);
        n0 = new NodeChoice(n1005, 502);
              break;
            case EXTERIORRING_:
              n1008 = jj_consume_token(EXTERIORRING_);
                              n1007 = JTBToolkit.makeNodeToken(n1008);
        n0 = new NodeChoice(n1007, 503);
              break;
            case NUMINTERIORRINGS_:
              n1010 = jj_consume_token(NUMINTERIORRINGS_);
                                  n1009 = JTBToolkit.makeNodeToken(n1010);
        n0 = new NodeChoice(n1009, 504);
              break;
            case INTERIORRINGN_:
              n1012 = jj_consume_token(INTERIORRINGN_);
                               n1011 = JTBToolkit.makeNodeToken(n1012);
        n0 = new NodeChoice(n1011, 505);
              break;
            case TRANSFORM_:
              n1014 = jj_consume_token(TRANSFORM_);
                           n1013 = JTBToolkit.makeNodeToken(n1014);
        n0 = new NodeChoice(n1013, 506);
              break;
            case X_:
              n1016 = jj_consume_token(X_);
                   n1015 = JTBToolkit.makeNodeToken(n1016);
        n0 = new NodeChoice(n1015, 507);
              break;
            case Y_:
              n1018 = jj_consume_token(Y_);
                   n1017 = JTBToolkit.makeNodeToken(n1018);
        n0 = new NodeChoice(n1017, 508);
              break;
            case Z_:
              n1020 = jj_consume_token(Z_);
                   n1019 = JTBToolkit.makeNodeToken(n1020);
        n0 = new NodeChoice(n1019, 509);
              break;
            case SPATIAL_:
              n1022 = jj_consume_token(SPATIAL_);
                         n1021 = JTBToolkit.makeNodeToken(n1022);
        n0 = new NodeChoice(n1021, 510);
              break;
            case PORT_:
              n1024 = jj_consume_token(PORT_);
                      n1023 = JTBToolkit.makeNodeToken(n1024);
        n0 = new NodeChoice(n1023, 511);
              break;
            default:
              jj_la1[2] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     {if (true) return new UnreservedWords(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Identifier Identifier(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   UnreservedWords n5;

   {
   }
    switch (jj_nt.kind) {
    case IDENTIFIER:
      n2 = jj_consume_token(IDENTIFIER);
                        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case QUOTED_IDENTIFIER:
      n4 = jj_consume_token(QUOTED_IDENTIFIER);
                               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
      n5 = UnreservedWords(prn);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public process process(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   VacuumDatabase n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   AnalyzeDatabase n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   createTable n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   CreateTablespace n17;
   NodeOptional n18 = new NodeOptional();
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   createIndex n22;
   NodeOptional n23 = new NodeOptional();
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   dropTable n27;
   NodeOptional n28 = new NodeOptional();
   NodeToken n29;
   Token n30;
   NodeSequence n31;
   DropTablespace n32;
   NodeOptional n33 = new NodeOptional();
   NodeToken n34;
   Token n35;
   NodeSequence n36;
   SelectAddGeometryColumn n37;
   NodeOptional n38 = new NodeOptional();
   NodeToken n39;
   Token n40;
   NodeSequence n41;
   SelectWithParenthesis n42;
   NodeOptional n43 = new NodeOptional();
   NodeToken n44;
   Token n45;
   NodeSequence n46;
   InsertTable n47;
   NodeOptional n48 = new NodeOptional();
   NodeToken n49;
   Token n50;
   NodeSequence n51;
   UpdateTable n52;
   NodeOptional n53 = new NodeOptional();
   NodeToken n54;
   Token n55;
   NodeSequence n56;
   Delete n57;
   NodeOptional n58 = new NodeOptional();
   NodeToken n59;
   Token n60;
   NodeSequence n61;
   Alter n62;
   NodeOptional n63 = new NodeOptional();
   NodeToken n64;
   Token n65;
   NodeSequence n66;
   DropIndex n67;
   NodeOptional n68 = new NodeOptional();
   NodeToken n69;
   Token n70;
   NodeSequence n71;
   RenameTable n72;
   NodeOptional n73 = new NodeOptional();
   NodeToken n74;
   Token n75;
   NodeSequence n76;
   UpdateStats n77;
   NodeOptional n78 = new NodeOptional();
   NodeToken n79;
   Token n80;
   NodeSequence n81;
   ShowAgents n82;
   NodeOptional n83 = new NodeOptional();
   NodeToken n84;
   Token n85;
   NodeSequence n86;
   ShowDatabases n87;
   NodeOptional n88 = new NodeOptional();
   NodeToken n89;
   Token n90;
   NodeSequence n91;
   ShowStatements n92;
   NodeOptional n93 = new NodeOptional();
   NodeToken n94;
   Token n95;
   NodeSequence n96;
   ShowTables n97;
   NodeOptional n98 = new NodeOptional();
   NodeToken n99;
   Token n100;
   NodeSequence n101;
   ShowTranIsolation n102;
   NodeOptional n103 = new NodeOptional();
   NodeToken n104;
   Token n105;
   NodeSequence n106;
   BeginTransaction n107;
   NodeOptional n108 = new NodeOptional();
   NodeToken n109;
   Token n110;
   NodeSequence n111;
   CommitTransaction n112;
   NodeOptional n113 = new NodeOptional();
   NodeToken n114;
   Token n115;
   NodeSequence n116;
   RollbackTransaction n117;
   NodeOptional n118 = new NodeOptional();
   NodeToken n119;
   Token n120;
   NodeSequence n121;
   DescribeTable n122;
   NodeOptional n123 = new NodeOptional();
   NodeToken n124;
   Token n125;
   NodeSequence n126;
   ShowConstraints n127;
   NodeOptional n128 = new NodeOptional();
   NodeToken n129;
   Token n130;
   NodeSequence n131;
   ShowIndexes n132;
   NodeOptional n133 = new NodeOptional();
   NodeToken n134;
   Token n135;
   NodeSequence n136;
   Deallocate n137;
   NodeOptional n138 = new NodeOptional();
   NodeToken n139;
   Token n140;
   NodeSequence n141;
   CreateUser n142;
   NodeOptional n143 = new NodeOptional();
   NodeToken n144;
   Token n145;
   NodeSequence n146;
   DropUser n147;
   NodeOptional n148 = new NodeOptional();
   NodeToken n149;
   Token n150;
   NodeSequence n151;
   AlterUser n152;
   NodeOptional n153 = new NodeOptional();
   NodeToken n154;
   Token n155;
   NodeSequence n156;
   Grant n157;
   NodeOptional n158 = new NodeOptional();
   NodeToken n159;
   Token n160;
   NodeSequence n161;
   Revoke n162;
   NodeOptional n163 = new NodeOptional();
   NodeToken n164;
   Token n165;
   NodeSequence n166;
   createView n167;
   NodeOptional n168 = new NodeOptional();
   NodeToken n169;
   Token n170;
   NodeSequence n171;
   DropView n172;
   NodeOptional n173 = new NodeOptional();
   NodeToken n174;
   Token n175;
   NodeSequence n176;
   ShowUsers n177;
   NodeOptional n178 = new NodeOptional();
   NodeToken n179;
   Token n180;
   NodeSequence n181;
   ShowViews n182;
   NodeOptional n183 = new NodeOptional();
   NodeToken n184;
   Token n185;
   NodeSequence n186;
   Cluster n187;
   NodeOptional n188 = new NodeOptional();
   NodeToken n189;
   Token n190;
   NodeSequence n191;
   Truncate n192;
   NodeOptional n193 = new NodeOptional();
   NodeToken n194;
   Token n195;
   NodeSequence n196;
   ExecDirect n197;
   NodeOptional n198 = new NodeOptional();
   NodeToken n199;
   Token n200;
   NodeSequence n201;
   Explain n202;
   NodeOptional n203 = new NodeOptional();
   NodeToken n204;
   Token n205;
   NodeSequence n206;
   SetProperty n207;
   NodeOptional n208 = new NodeOptional();
   NodeToken n209;
   Token n210;
   NodeSequence n211;
   ShowProperty n212;
   NodeOptional n213 = new NodeOptional();
   NodeToken n214;
   Token n215;
   NodeSequence n216;
   AddNodeToDB n217;
   NodeOptional n218 = new NodeOptional();
   NodeToken n219;
   Token n220;
   NodeSequence n221;
   DropNodeFromDB n222;
   NodeOptional n223 = new NodeOptional();
   NodeToken n224;
   Token n225;
   NodeSequence n226;
   StartDatabase n227;
   NodeOptional n228 = new NodeOptional();
   NodeToken n229;
   Token n230;
   NodeSequence n231;
   StopDatabase n232;
   NodeOptional n233 = new NodeOptional();
   NodeToken n234;
   Token n235;
   NodeSequence n236;
   ShutdownXDB n237;
   NodeOptional n238 = new NodeOptional();
   NodeToken n239;
   Token n240;
   NodeSequence n241;
   CreateDatabase n242;
   NodeOptional n243 = new NodeOptional();
   NodeToken n244;
   Token n245;
   NodeSequence n246;
   DropDatabase n247;
   NodeOptional n248 = new NodeOptional();
   NodeToken n249;
   Token n250;
   NodeSequence n251;
   CopyData n252;
   NodeOptional n253 = new NodeOptional();
   NodeToken n254;
   Token n255;
   NodeSequence n256;
   Kill n257;
   NodeOptional n258 = new NodeOptional();
   NodeToken n259;
   Token n260;
   NodeSequence n261;
   Unlisten n262;
   NodeOptional n263 = new NodeOptional();
   NodeToken n264;
   Token n265;
   NodeSequence n266;
   DeclareCursor n267;
   NodeOptional n268 = new NodeOptional();
   NodeToken n269;
   Token n270;
   NodeSequence n271;
   CloseCursor n272;
   NodeOptional n273 = new NodeOptional();
   NodeToken n274;
   Token n275;
   NodeSequence n276;
   FetchCursor n277;
   NodeOptional n278 = new NodeOptional();
   NodeToken n279;
   Token n280;
   NodeToken n281;
   Token n282;

   {
   }
    switch (jj_nt.kind) {
    case VACUUM_:
           n1 = new NodeSequence(2);
      n2 = VacuumDatabase(prn);
           n1.addNode(n2);
      switch (jj_nt.kind) {
      case SEMICOLON_:
        n5 = jj_consume_token(SEMICOLON_);
                              n4 = JTBToolkit.makeNodeToken(n5);
              n3.addNode(n4);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
           n1.addNode(n3);
           n0 = new NodeChoice(n1, 0);
      break;
    case ANALYZE_:
           n6 = new NodeSequence(2);
      n7 = AnalyzeDatabase(prn);
           n6.addNode(n7);
      switch (jj_nt.kind) {
      case SEMICOLON_:
        n10 = jj_consume_token(SEMICOLON_);
                               n9 = JTBToolkit.makeNodeToken(n10);
              n8.addNode(n9);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
           n6.addNode(n8);
           n0 = new NodeChoice(n6, 1);
      break;
    default:
      jj_la1[60] = jj_gen;
      if (jj_2_4(3)) {
           n11 = new NodeSequence(3);
        n12 = createTable(prn);
           n11.addNode(n12);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n15 = jj_consume_token(SEMICOLON_);
                               n14 = JTBToolkit.makeNodeToken(n15);
              n13.addNode(n14);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
           n11.addNode(n13);
           n0 = new NodeChoice(n11, 2);
      } else if (jj_2_5(3)) {
           n16 = new NodeSequence(3);
        n17 = CreateTablespace(prn);
           n16.addNode(n17);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n20 = jj_consume_token(SEMICOLON_);
                               n19 = JTBToolkit.makeNodeToken(n20);
              n18.addNode(n19);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
           n16.addNode(n18);
           n0 = new NodeChoice(n16, 3);
      } else if (jj_2_6(3)) {
           n21 = new NodeSequence(3);
        n22 = createIndex(prn);
           n21.addNode(n22);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n25 = jj_consume_token(SEMICOLON_);
                               n24 = JTBToolkit.makeNodeToken(n25);
              n23.addNode(n24);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
           n21.addNode(n23);
           n0 = new NodeChoice(n21, 4);
      } else if (jj_2_7(3)) {
           n26 = new NodeSequence(3);
        n27 = dropTable(prn);
           n26.addNode(n27);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n30 = jj_consume_token(SEMICOLON_);
                               n29 = JTBToolkit.makeNodeToken(n30);
              n28.addNode(n29);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
           n26.addNode(n28);
           n0 = new NodeChoice(n26, 5);
      } else if (jj_2_8(3)) {
           n31 = new NodeSequence(3);
        n32 = DropTablespace(prn);
           n31.addNode(n32);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n35 = jj_consume_token(SEMICOLON_);
                               n34 = JTBToolkit.makeNodeToken(n35);
              n33.addNode(n34);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
           n31.addNode(n33);
           n0 = new NodeChoice(n31, 6);
      } else if (jj_2_9(4)) {
           n36 = new NodeSequence(3);
        n37 = SelectAddGeometryColumn(prn);
           n36.addNode(n37);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n40 = jj_consume_token(SEMICOLON_);
                               n39 = JTBToolkit.makeNodeToken(n40);
              n38.addNode(n39);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
           n36.addNode(n38);
           n0 = new NodeChoice(n36, 7);
      } else if (jj_2_10(4)) {
           n41 = new NodeSequence(3);
        n42 = SelectWithParenthesis(prn);
           n41.addNode(n42);
        switch (jj_nt.kind) {
        case SEMICOLON_:
          n45 = jj_consume_token(SEMICOLON_);
                               n44 = JTBToolkit.makeNodeToken(n45);
              n43.addNode(n44);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
           n41.addNode(n43);
           n0 = new NodeChoice(n41, 8);
      } else {
        switch (jj_nt.kind) {
        case INSERT_:
           n46 = new NodeSequence(2);
          n47 = InsertTable(prn);
           n46.addNode(n47);
          switch (jj_nt.kind) {
          case SEMICOLON_:
            n50 = jj_consume_token(SEMICOLON_);
                               n49 = JTBToolkit.makeNodeToken(n50);
              n48.addNode(n49);
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
           n46.addNode(n48);
           n0 = new NodeChoice(n46, 9);
          break;
        default:
          jj_la1[61] = jj_gen;
          if (jj_2_11(2147483647)) {
           n51 = new NodeSequence(3);
            n52 = UpdateTable(prn);
           n51.addNode(n52);
            switch (jj_nt.kind) {
            case SEMICOLON_:
              n55 = jj_consume_token(SEMICOLON_);
                               n54 = JTBToolkit.makeNodeToken(n55);
              n53.addNode(n54);
              break;
            default:
              jj_la1[14] = jj_gen;
              ;
            }
           n51.addNode(n53);
           n0 = new NodeChoice(n51, 10);
          } else {
            switch (jj_nt.kind) {
            case DELETE_:
           n56 = new NodeSequence(2);
              n57 = Delete(prn);
           n56.addNode(n57);
              switch (jj_nt.kind) {
              case SEMICOLON_:
                n60 = jj_consume_token(SEMICOLON_);
                               n59 = JTBToolkit.makeNodeToken(n60);
              n58.addNode(n59);
                break;
              default:
                jj_la1[15] = jj_gen;
                ;
              }
           n56.addNode(n58);
           n0 = new NodeChoice(n56, 11);
              break;
            default:
              jj_la1[62] = jj_gen;
              if (jj_2_12(2)) {
           n61 = new NodeSequence(3);
                n62 = Alter(prn);
           n61.addNode(n62);
                switch (jj_nt.kind) {
                case SEMICOLON_:
                  n65 = jj_consume_token(SEMICOLON_);
                               n64 = JTBToolkit.makeNodeToken(n65);
              n63.addNode(n64);
                  break;
                default:
                  jj_la1[16] = jj_gen;
                  ;
                }
           n61.addNode(n63);
           n0 = new NodeChoice(n61, 12);
              } else if (jj_2_13(2)) {
           n66 = new NodeSequence(3);
                n67 = DropIndex(prn);
           n66.addNode(n67);
                switch (jj_nt.kind) {
                case SEMICOLON_:
                  n70 = jj_consume_token(SEMICOLON_);
                               n69 = JTBToolkit.makeNodeToken(n70);
              n68.addNode(n69);
                  break;
                default:
                  jj_la1[17] = jj_gen;
                  ;
                }
           n66.addNode(n68);
           n0 = new NodeChoice(n66, 13);
              } else {
                switch (jj_nt.kind) {
                case RENAME_:
           n71 = new NodeSequence(2);
                  n72 = RenameTable(prn);
           n71.addNode(n72);
                  switch (jj_nt.kind) {
                  case SEMICOLON_:
                    n75 = jj_consume_token(SEMICOLON_);
                               n74 = JTBToolkit.makeNodeToken(n75);
              n73.addNode(n74);
                    break;
                  default:
                    jj_la1[18] = jj_gen;
                    ;
                  }
           n71.addNode(n73);
           n0 = new NodeChoice(n71, 14);
                  break;
                case UPDATE_STAT_:
           n76 = new NodeSequence(2);
                  n77 = UpdateStats(prn);
           n76.addNode(n77);
                  switch (jj_nt.kind) {
                  case SEMICOLON_:
                    n80 = jj_consume_token(SEMICOLON_);
                               n79 = JTBToolkit.makeNodeToken(n80);
              n78.addNode(n79);
                    break;
                  default:
                    jj_la1[19] = jj_gen;
                    ;
                  }
           n76.addNode(n78);
           n0 = new NodeChoice(n76, 15);
                  break;
                default:
                  jj_la1[63] = jj_gen;
                  if (jj_2_14(2)) {
           n81 = new NodeSequence(3);
                    n82 = ShowAgents();
           n81.addNode(n82);
                    switch (jj_nt.kind) {
                    case SEMICOLON_:
                      n85 = jj_consume_token(SEMICOLON_);
                               n84 = JTBToolkit.makeNodeToken(n85);
              n83.addNode(n84);
                      break;
                    default:
                      jj_la1[20] = jj_gen;
                      ;
                    }
           n81.addNode(n83);
           n0 = new NodeChoice(n81, 16);
                  } else if (jj_2_15(2)) {
           n86 = new NodeSequence(3);
                    n87 = ShowDatabases();
           n86.addNode(n87);
                    switch (jj_nt.kind) {
                    case SEMICOLON_:
                      n90 = jj_consume_token(SEMICOLON_);
                               n89 = JTBToolkit.makeNodeToken(n90);
              n88.addNode(n89);
                      break;
                    default:
                      jj_la1[21] = jj_gen;
                      ;
                    }
           n86.addNode(n88);
           n0 = new NodeChoice(n86, 17);
                  } else if (jj_2_16(2)) {
           n91 = new NodeSequence(3);
                    n92 = ShowStatements();
           n91.addNode(n92);
                    switch (jj_nt.kind) {
                    case SEMICOLON_:
                      n95 = jj_consume_token(SEMICOLON_);
                               n94 = JTBToolkit.makeNodeToken(n95);
              n93.addNode(n94);
                      break;
                    default:
                      jj_la1[22] = jj_gen;
                      ;
                    }
           n91.addNode(n93);
           n0 = new NodeChoice(n91, 18);
                  } else if (jj_2_17(2)) {
           n96 = new NodeSequence(3);
                    n97 = ShowTables();
           n96.addNode(n97);
                    switch (jj_nt.kind) {
                    case SEMICOLON_:
                      n100 = jj_consume_token(SEMICOLON_);
                                n99 = JTBToolkit.makeNodeToken(n100);
              n98.addNode(n99);
                      break;
                    default:
                      jj_la1[23] = jj_gen;
                      ;
                    }
           n96.addNode(n98);
           n0 = new NodeChoice(n96, 19);
                  } else if (jj_2_18(2)) {
           n101 = new NodeSequence(3);
                    n102 = ShowTranIsolation();
           n101.addNode(n102);
                    switch (jj_nt.kind) {
                    case SEMICOLON_:
                      n105 = jj_consume_token(SEMICOLON_);
                                n104 = JTBToolkit.makeNodeToken(n105);
              n103.addNode(n104);
                      break;
                    default:
                      jj_la1[24] = jj_gen;
                      ;
                    }
           n101.addNode(n103);
           n0 = new NodeChoice(n101, 20);
                  } else {
                    switch (jj_nt.kind) {
                    case BEGIN_:
           n106 = new NodeSequence(2);
                      n107 = BeginTransaction();
           n106.addNode(n107);
                      switch (jj_nt.kind) {
                      case SEMICOLON_:
                        n110 = jj_consume_token(SEMICOLON_);
                                n109 = JTBToolkit.makeNodeToken(n110);
              n108.addNode(n109);
                        break;
                      default:
                        jj_la1[25] = jj_gen;
                        ;
                      }
           n106.addNode(n108);
           n0 = new NodeChoice(n106, 21);
                      break;
                    case END_:
                    case COMMIT_:
           n111 = new NodeSequence(2);
                      n112 = CommitTransaction();
           n111.addNode(n112);
                      switch (jj_nt.kind) {
                      case SEMICOLON_:
                        n115 = jj_consume_token(SEMICOLON_);
                                n114 = JTBToolkit.makeNodeToken(n115);
              n113.addNode(n114);
                        break;
                      default:
                        jj_la1[26] = jj_gen;
                        ;
                      }
           n111.addNode(n113);
           n0 = new NodeChoice(n111, 22);
                      break;
                    case ROLLBACK_:
           n116 = new NodeSequence(2);
                      n117 = RollbackTransaction();
           n116.addNode(n117);
                      switch (jj_nt.kind) {
                      case SEMICOLON_:
                        n120 = jj_consume_token(SEMICOLON_);
                                n119 = JTBToolkit.makeNodeToken(n120);
              n118.addNode(n119);
                        break;
                      default:
                        jj_la1[27] = jj_gen;
                        ;
                      }
           n116.addNode(n118);
           n0 = new NodeChoice(n116, 23);
                      break;
                    case DESCRIBE_:
                    case SHOW_TABLE_:
                    case SHOW_VIEW_:
           n121 = new NodeSequence(2);
                      n122 = DescribeTable(prn);
           n121.addNode(n122);
                      switch (jj_nt.kind) {
                      case SEMICOLON_:
                        n125 = jj_consume_token(SEMICOLON_);
                                n124 = JTBToolkit.makeNodeToken(n125);
              n123.addNode(n124);
                        break;
                      default:
                        jj_la1[28] = jj_gen;
                        ;
                      }
           n121.addNode(n123);
           n0 = new NodeChoice(n121, 24);
                      break;
                    default:
                      jj_la1[64] = jj_gen;
                      if (jj_2_19(2)) {
           n126 = new NodeSequence(3);
                        n127 = ShowConstraints(prn);
           n126.addNode(n127);
                        switch (jj_nt.kind) {
                        case SEMICOLON_:
                          n130 = jj_consume_token(SEMICOLON_);
                                n129 = JTBToolkit.makeNodeToken(n130);
              n128.addNode(n129);
                          break;
                        default:
                          jj_la1[29] = jj_gen;
                          ;
                        }
           n126.addNode(n128);
           n0 = new NodeChoice(n126, 25);
                      } else if (jj_2_20(2)) {
           n131 = new NodeSequence(3);
                        n132 = ShowIndexes(prn);
           n131.addNode(n132);
                        switch (jj_nt.kind) {
                        case SEMICOLON_:
                          n135 = jj_consume_token(SEMICOLON_);
                                n134 = JTBToolkit.makeNodeToken(n135);
              n133.addNode(n134);
                          break;
                        default:
                          jj_la1[30] = jj_gen;
                          ;
                        }
           n131.addNode(n133);
           n0 = new NodeChoice(n131, 26);
                      } else if (jj_2_21(3)) {
           n136 = new NodeSequence(3);
                        n137 = Deallocate(prn);
           n136.addNode(n137);
                        switch (jj_nt.kind) {
                        case SEMICOLON_:
                          n140 = jj_consume_token(SEMICOLON_);
                                n139 = JTBToolkit.makeNodeToken(n140);
              n138.addNode(n139);
                          break;
                        default:
                          jj_la1[31] = jj_gen;
                          ;
                        }
           n136.addNode(n138);
           n0 = new NodeChoice(n136, 27);
                      } else if (jj_2_22(3)) {
           n141 = new NodeSequence(3);
                        n142 = CreateUser(prn);
           n141.addNode(n142);
                        switch (jj_nt.kind) {
                        case SEMICOLON_:
                          n145 = jj_consume_token(SEMICOLON_);
                                n144 = JTBToolkit.makeNodeToken(n145);
              n143.addNode(n144);
                          break;
                        default:
                          jj_la1[32] = jj_gen;
                          ;
                        }
           n141.addNode(n143);
           n0 = new NodeChoice(n141, 28);
                      } else if (jj_2_23(3)) {
           n146 = new NodeSequence(3);
                        n147 = DropUser(prn);
           n146.addNode(n147);
                        switch (jj_nt.kind) {
                        case SEMICOLON_:
                          n150 = jj_consume_token(SEMICOLON_);
                                n149 = JTBToolkit.makeNodeToken(n150);
              n148.addNode(n149);
                          break;
                        default:
                          jj_la1[33] = jj_gen;
                          ;
                        }
           n146.addNode(n148);
           n0 = new NodeChoice(n146, 29);
                      } else if (jj_2_24(3)) {
           n151 = new NodeSequence(3);
                        n152 = AlterUser(prn);
           n151.addNode(n152);
                        switch (jj_nt.kind) {
                        case SEMICOLON_:
                          n155 = jj_consume_token(SEMICOLON_);
                                n154 = JTBToolkit.makeNodeToken(n155);
              n153.addNode(n154);
                          break;
                        default:
                          jj_la1[34] = jj_gen;
                          ;
                        }
           n151.addNode(n153);
           n0 = new NodeChoice(n151, 30);
                      } else {
                        switch (jj_nt.kind) {
                        case GRANT_:
           n156 = new NodeSequence(2);
                          n157 = Grant(prn);
           n156.addNode(n157);
                          switch (jj_nt.kind) {
                          case SEMICOLON_:
                            n160 = jj_consume_token(SEMICOLON_);
                                n159 = JTBToolkit.makeNodeToken(n160);
              n158.addNode(n159);
                            break;
                          default:
                            jj_la1[35] = jj_gen;
                            ;
                          }
           n156.addNode(n158);
           n0 = new NodeChoice(n156, 31);
                          break;
                        case REVOKE_:
           n161 = new NodeSequence(2);
                          n162 = Revoke(prn);
           n161.addNode(n162);
                          switch (jj_nt.kind) {
                          case SEMICOLON_:
                            n165 = jj_consume_token(SEMICOLON_);
                                n164 = JTBToolkit.makeNodeToken(n165);
              n163.addNode(n164);
                            break;
                          default:
                            jj_la1[36] = jj_gen;
                            ;
                          }
           n161.addNode(n163);
           n0 = new NodeChoice(n161, 32);
                          break;
                        case CREATE_:
                        case REPLACE_:
           n166 = new NodeSequence(2);
                          n167 = createView(prn);
           n166.addNode(n167);
                          switch (jj_nt.kind) {
                          case SEMICOLON_:
                            n170 = jj_consume_token(SEMICOLON_);
                                n169 = JTBToolkit.makeNodeToken(n170);
              n168.addNode(n169);
                            break;
                          default:
                            jj_la1[37] = jj_gen;
                            ;
                          }
           n166.addNode(n168);
           n0 = new NodeChoice(n166, 33);
                          break;
                        case DROP_:
           n171 = new NodeSequence(2);
                          n172 = DropView(prn);
           n171.addNode(n172);
                          switch (jj_nt.kind) {
                          case SEMICOLON_:
                            n175 = jj_consume_token(SEMICOLON_);
                                n174 = JTBToolkit.makeNodeToken(n175);
              n173.addNode(n174);
                            break;
                          default:
                            jj_la1[38] = jj_gen;
                            ;
                          }
           n171.addNode(n173);
           n0 = new NodeChoice(n171, 34);
                          break;
                        default:
                          jj_la1[65] = jj_gen;
                          if (jj_2_25(2)) {
           n176 = new NodeSequence(3);
                            n177 = ShowUsers(prn);
           n176.addNode(n177);
                            switch (jj_nt.kind) {
                            case SEMICOLON_:
                              n180 = jj_consume_token(SEMICOLON_);
                                n179 = JTBToolkit.makeNodeToken(n180);
              n178.addNode(n179);
                              break;
                            default:
                              jj_la1[39] = jj_gen;
                              ;
                            }
           n176.addNode(n178);
           n0 = new NodeChoice(n176, 35);
                          } else if (jj_2_26(2)) {
           n181 = new NodeSequence(3);
                            n182 = ShowViews(prn);
           n181.addNode(n182);
                            switch (jj_nt.kind) {
                            case SEMICOLON_:
                              n185 = jj_consume_token(SEMICOLON_);
                                n184 = JTBToolkit.makeNodeToken(n185);
              n183.addNode(n184);
                              break;
                            default:
                              jj_la1[40] = jj_gen;
                              ;
                            }
           n181.addNode(n183);
           n0 = new NodeChoice(n181, 36);
                          } else {
                            switch (jj_nt.kind) {
                            case CLUSTER_:
           n186 = new NodeSequence(2);
                              n187 = Cluster(prn);
           n186.addNode(n187);
                              switch (jj_nt.kind) {
                              case SEMICOLON_:
                                n190 = jj_consume_token(SEMICOLON_);
                                n189 = JTBToolkit.makeNodeToken(n190);
              n188.addNode(n189);
                                break;
                              default:
                                jj_la1[41] = jj_gen;
                                ;
                              }
           n186.addNode(n188);
           n0 = new NodeChoice(n186, 37);
                              break;
                            case TRUNCATE_:
           n191 = new NodeSequence(2);
                              n192 = Truncate(prn);
           n191.addNode(n192);
                              switch (jj_nt.kind) {
                              case SEMICOLON_:
                                n195 = jj_consume_token(SEMICOLON_);
                                n194 = JTBToolkit.makeNodeToken(n195);
              n193.addNode(n194);
                                break;
                              default:
                                jj_la1[42] = jj_gen;
                                ;
                              }
           n191.addNode(n193);
           n0 = new NodeChoice(n191, 38);
                              break;
                            case EXEC_:
           n196 = new NodeSequence(2);
                              n197 = ExecDirect(prn);
           n196.addNode(n197);
                              switch (jj_nt.kind) {
                              case SEMICOLON_:
                                n200 = jj_consume_token(SEMICOLON_);
                                n199 = JTBToolkit.makeNodeToken(n200);
              n198.addNode(n199);
                                break;
                              default:
                                jj_la1[43] = jj_gen;
                                ;
                              }
           n196.addNode(n198);
           n0 = new NodeChoice(n196, 39);
                              break;
                            case EXPLAIN_:
           n201 = new NodeSequence(2);
                              n202 = Explain(prn);
           n201.addNode(n202);
                              switch (jj_nt.kind) {
                              case SEMICOLON_:
                                n205 = jj_consume_token(SEMICOLON_);
                                n204 = JTBToolkit.makeNodeToken(n205);
              n203.addNode(n204);
                                break;
                              default:
                                jj_la1[44] = jj_gen;
                                ;
                              }
           n201.addNode(n203);
           n0 = new NodeChoice(n201, 40);
                              break;
                            default:
                              jj_la1[66] = jj_gen;
                              if (jj_2_27(2)) {
           n206 = new NodeSequence(3);
                                n207 = SetProperty(prn);
           n206.addNode(n207);
                                switch (jj_nt.kind) {
                                case SEMICOLON_:
                                  n210 = jj_consume_token(SEMICOLON_);
                                n209 = JTBToolkit.makeNodeToken(n210);
              n208.addNode(n209);
                                  break;
                                default:
                                  jj_la1[45] = jj_gen;
                                  ;
                                }
           n206.addNode(n208);
           n0 = new NodeChoice(n206, 41);
                              } else if (jj_2_28(2)) {
           n211 = new NodeSequence(3);
                                n212 = ShowProperty(prn);
           n211.addNode(n212);
                                switch (jj_nt.kind) {
                                case SEMICOLON_:
                                  n215 = jj_consume_token(SEMICOLON_);
                                n214 = JTBToolkit.makeNodeToken(n215);
              n213.addNode(n214);
                                  break;
                                default:
                                  jj_la1[46] = jj_gen;
                                  ;
                                }
           n211.addNode(n213);
           n0 = new NodeChoice(n211, 42);
                              } else {
                                switch (jj_nt.kind) {
                                case ADD_NODE_:
           n216 = new NodeSequence(2);
                                  n217 = AddNodeToDB(prn);
           n216.addNode(n217);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n220 = jj_consume_token(SEMICOLON_);
                                n219 = JTBToolkit.makeNodeToken(n220);
              n218.addNode(n219);
                                    break;
                                  default:
                                    jj_la1[47] = jj_gen;
                                    ;
                                  }
           n216.addNode(n218);
           n0 = new NodeChoice(n216, 43);
                                  break;
                                case DROP_NODE_:
           n221 = new NodeSequence(2);
                                  n222 = DropNodeFromDB(prn);
           n221.addNode(n222);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n225 = jj_consume_token(SEMICOLON_);
                                n224 = JTBToolkit.makeNodeToken(n225);
              n223.addNode(n224);
                                    break;
                                  default:
                                    jj_la1[48] = jj_gen;
                                    ;
                                  }
           n221.addNode(n223);
           n0 = new NodeChoice(n221, 44);
                                  break;
                                case START_DB_:
           n226 = new NodeSequence(2);
                                  n227 = StartDatabase(prn);
           n226.addNode(n227);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n230 = jj_consume_token(SEMICOLON_);
                                n229 = JTBToolkit.makeNodeToken(n230);
              n228.addNode(n229);
                                    break;
                                  default:
                                    jj_la1[49] = jj_gen;
                                    ;
                                  }
           n226.addNode(n228);
           n0 = new NodeChoice(n226, 45);
                                  break;
                                case STOP_DB_:
           n231 = new NodeSequence(2);
                                  n232 = StopDatabase(prn);
           n231.addNode(n232);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n235 = jj_consume_token(SEMICOLON_);
                                n234 = JTBToolkit.makeNodeToken(n235);
              n233.addNode(n234);
                                    break;
                                  default:
                                    jj_la1[50] = jj_gen;
                                    ;
                                  }
           n231.addNode(n233);
           n0 = new NodeChoice(n231, 46);
                                  break;
                                case SHUT_DOWN_:
           n236 = new NodeSequence(2);
                                  n237 = ShutdownXDB(prn);
           n236.addNode(n237);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n240 = jj_consume_token(SEMICOLON_);
                                n239 = JTBToolkit.makeNodeToken(n240);
              n238.addNode(n239);
                                    break;
                                  default:
                                    jj_la1[51] = jj_gen;
                                    ;
                                  }
           n236.addNode(n238);
           n0 = new NodeChoice(n236, 47);
                                  break;
                                case CREATE_DB_:
           n241 = new NodeSequence(2);
                                  n242 = CreateDatabase(prn);
           n241.addNode(n242);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n245 = jj_consume_token(SEMICOLON_);
                                n244 = JTBToolkit.makeNodeToken(n245);
              n243.addNode(n244);
                                    break;
                                  default:
                                    jj_la1[52] = jj_gen;
                                    ;
                                  }
           n241.addNode(n243);
           n0 = new NodeChoice(n241, 48);
                                  break;
                                case DROP_DB_:
           n246 = new NodeSequence(2);
                                  n247 = DropDatabase(prn);
           n246.addNode(n247);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n250 = jj_consume_token(SEMICOLON_);
                                n249 = JTBToolkit.makeNodeToken(n250);
              n248.addNode(n249);
                                    break;
                                  default:
                                    jj_la1[53] = jj_gen;
                                    ;
                                  }
           n246.addNode(n248);
           n0 = new NodeChoice(n246, 49);
                                  break;
                                case COPY_:
           n251 = new NodeSequence(2);
                                  n252 = CopyData(prn);
           n251.addNode(n252);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n255 = jj_consume_token(SEMICOLON_);
                                n254 = JTBToolkit.makeNodeToken(n255);
              n253.addNode(n254);
                                    break;
                                  default:
                                    jj_la1[54] = jj_gen;
                                    ;
                                  }
           n251.addNode(n253);
           n0 = new NodeChoice(n251, 50);
                                  break;
                                case KILL_:
           n256 = new NodeSequence(2);
                                  n257 = Kill(prn);
           n256.addNode(n257);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n260 = jj_consume_token(SEMICOLON_);
                                n259 = JTBToolkit.makeNodeToken(n260);
              n258.addNode(n259);
                                    break;
                                  default:
                                    jj_la1[55] = jj_gen;
                                    ;
                                  }
           n256.addNode(n258);
           n0 = new NodeChoice(n256, 51);
                                  break;
                                case UNLISTEN_:
           n261 = new NodeSequence(2);
                                  n262 = Unlisten(prn);
           n261.addNode(n262);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n265 = jj_consume_token(SEMICOLON_);
                                n264 = JTBToolkit.makeNodeToken(n265);
              n263.addNode(n264);
                                    break;
                                  default:
                                    jj_la1[56] = jj_gen;
                                    ;
                                  }
           n261.addNode(n263);
           n0 = new NodeChoice(n261, 52);
                                  break;
                                case DECLARE_:
           n266 = new NodeSequence(2);
                                  n267 = DeclareCursor(prn);
           n266.addNode(n267);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n270 = jj_consume_token(SEMICOLON_);
                                n269 = JTBToolkit.makeNodeToken(n270);
              n268.addNode(n269);
                                    break;
                                  default:
                                    jj_la1[57] = jj_gen;
                                    ;
                                  }
           n266.addNode(n268);
           n0 = new NodeChoice(n266, 53);
                                  break;
                                case CLOSE_:
           n271 = new NodeSequence(2);
                                  n272 = CloseCursor(prn);
           n271.addNode(n272);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n275 = jj_consume_token(SEMICOLON_);
                                n274 = JTBToolkit.makeNodeToken(n275);
              n273.addNode(n274);
                                    break;
                                  default:
                                    jj_la1[58] = jj_gen;
                                    ;
                                  }
           n271.addNode(n273);
           n0 = new NodeChoice(n271, 54);
                                  break;
                                case FETCH_:
           n276 = new NodeSequence(2);
                                  n277 = FetchCursor(prn);
           n276.addNode(n277);
                                  switch (jj_nt.kind) {
                                  case SEMICOLON_:
                                    n280 = jj_consume_token(SEMICOLON_);
                                n279 = JTBToolkit.makeNodeToken(n280);
              n278.addNode(n279);
                                    break;
                                  default:
                                    jj_la1[59] = jj_gen;
                                    ;
                                  }
           n276.addNode(n278);
           n0 = new NodeChoice(n276, 55);
                                  break;
                                default:
                                  jj_la1[67] = jj_gen;
                                  jj_consume_token(-1);
                                  throw new ParseException();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    n282 = jj_consume_token(0);
      n282.beginColumn++; n282.endColumn++;
      n281 = JTBToolkit.makeNodeToken(n282);
     {if (true) return new process(n0,n281);}
    throw new Error("Missing return statement in function");
  }

  final public CopyData CopyData(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   TableName n4;
   NodeOptional n5 = new NodeOptional();
   ColumnNameListWithParenthesis n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   Select n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeChoice n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeChoice n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   NodeSequence n31;
   NodeOptional n32;
   NodeToken n33;
   Token n34;
   NodeList n35;
   NodeChoice n36;
   FormatDefOIDS n37;
   FormatDefDelimiter n38;
   FormatDefNull n39;
   FormatDefCSV n40;

   {
   }
    n1 = jj_consume_token(COPY_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
           n3 = new NodeSequence(2);
      n4 = TableName(prn);
           n3.addNode(n4);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
        n6 = ColumnNameListWithParenthesis(prn);
              n5.addNode(n6);
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
           n3.addNode(n5);
           n2 = new NodeChoice(n3, 0);
      break;
    case PARENTHESIS_START_:
           n7 = new NodeSequence(3);
      n9 = jj_consume_token(PARENTHESIS_START_);
                                   n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
      n10 = Select(prn);
           n7.addNode(n10);
      n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                                    n11 = JTBToolkit.makeNodeToken(n12);
           n7.addNode(n11);
           n2 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case FROM_:
           n14 = new NodeSequence(2);
      n16 = jj_consume_token(FROM_);
                       n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
      switch (jj_nt.kind) {
      case STDIN_:
        n19 = jj_consume_token(STDIN_);
                              n18 = JTBToolkit.makeNodeToken(n19);
                 n17 = new NodeChoice(n18, 0);
        break;
      case STRING_LITERAL:
        n21 = jj_consume_token(STRING_LITERAL);
                                      n20 = JTBToolkit.makeNodeToken(n21);
                 n17 = new NodeChoice(n20, 1);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n14.addNode(n17);
           n13 = new NodeChoice(n14, 0);
      break;
    case TO_:
           n22 = new NodeSequence(2);
      n24 = jj_consume_token(TO_);
                     n23 = JTBToolkit.makeNodeToken(n24);
           n22.addNode(n23);
      switch (jj_nt.kind) {
      case STDOUT_:
        n27 = jj_consume_token(STDOUT_);
                               n26 = JTBToolkit.makeNodeToken(n27);
                 n25 = new NodeChoice(n26, 0);
        break;
      case STRING_LITERAL:
        n29 = jj_consume_token(STRING_LITERAL);
                                      n28 = JTBToolkit.makeNodeToken(n29);
                 n25 = new NodeChoice(n28, 1);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n22.addNode(n25);
           n13 = new NodeChoice(n22, 1);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case CSV_:
    case NULL_:
    case OIDS_:
    case WITH_:
    case DELIMITER_:
        n32 = new NodeOptional();
        n35 = new NodeList();
        n31 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case WITH_:
        n34 = jj_consume_token(WITH_);
                       n33 = JTBToolkit.makeNodeToken(n34);
           n32.addNode(n33);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
        n31.addNode(n32);
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case OIDS_:
          n37 = FormatDefOIDS(prn);
              n36 = new NodeChoice(n37, 0);
          break;
        case DELIMITER_:
          n38 = FormatDefDelimiter(prn);
              n36 = new NodeChoice(n38, 1);
          break;
        case NULL_:
          n39 = FormatDefNull(prn);
              n36 = new NodeChoice(n39, 2);
          break;
        case CSV_:
          n40 = FormatDefCSV(prn);
              n36 = new NodeChoice(n40, 3);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n35.addNode(n36);
        switch (jj_nt.kind) {
        case CSV_:
        case NULL_:
        case OIDS_:
        case DELIMITER_:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_1;
        }
      }
        n35.nodes.trimToSize();
        n31.addNode(n35);
        n30.addNode(n31);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
     {if (true) return new CopyData(n0,n2,n13,n30);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefOIDS FormatDefOIDS(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(OIDS_);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FormatDefOIDS(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefDelimiter FormatDefDelimiter(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DELIMITER_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case AS_:
      n4 = jj_consume_token(AS_);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    n6 = jj_consume_token(STRING_LITERAL);
                         n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new FormatDefDelimiter(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefNull FormatDefNull(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(NULL_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case AS_:
      n4 = jj_consume_token(AS_);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    n6 = jj_consume_token(STRING_LITERAL);
                         n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new FormatDefNull(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefCSV FormatDefCSV(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   NodeOptional n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   ColumnNameList n23;
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   ColumnNameList n27;

   {
   }
    n1 = jj_consume_token(CSV_);
               n0 = JTBToolkit.makeNodeToken(n1);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case QUOTE_STRING_:
      case ESCAPE_:
      case FORCE_NOT_NULL_:
      case FORCE_QUOTE_:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_2;
      }
        n7 = new NodeOptional();
        n15 = new NodeOptional();
      switch (jj_nt.kind) {
      case QUOTE_STRING_:
           n4 = new NodeSequence(3);
        n6 = jj_consume_token(QUOTE_STRING_);
                              n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        switch (jj_nt.kind) {
        case AS_:
          n9 = jj_consume_token(AS_);
                       n8 = JTBToolkit.makeNodeToken(n9);
              n7.addNode(n8);
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
           n4.addNode(n7);
        n11 = jj_consume_token(STRING_LITERAL);
                                n10 = JTBToolkit.makeNodeToken(n11);
           n4.addNode(n10);
           n3 = new NodeChoice(n4, 0);
        break;
      case ESCAPE_:
           n12 = new NodeSequence(3);
        n14 = jj_consume_token(ESCAPE_);
                         n13 = JTBToolkit.makeNodeToken(n14);
           n12.addNode(n13);
        switch (jj_nt.kind) {
        case AS_:
          n17 = jj_consume_token(AS_);
                        n16 = JTBToolkit.makeNodeToken(n17);
              n15.addNode(n16);
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
           n12.addNode(n15);
        n19 = jj_consume_token(STRING_LITERAL);
                                n18 = JTBToolkit.makeNodeToken(n19);
           n12.addNode(n18);
           n3 = new NodeChoice(n12, 1);
        break;
      case FORCE_QUOTE_:
           n20 = new NodeSequence(2);
        n22 = jj_consume_token(FORCE_QUOTE_);
                              n21 = JTBToolkit.makeNodeToken(n22);
           n20.addNode(n21);
        n23 = ColumnNameList(prn);
           n20.addNode(n23);
           n3 = new NodeChoice(n20, 2);
        break;
      case FORCE_NOT_NULL_:
           n24 = new NodeSequence(2);
        n26 = jj_consume_token(FORCE_NOT_NULL_);
                                 n25 = JTBToolkit.makeNodeToken(n26);
           n24.addNode(n25);
        n27 = ColumnNameList(prn);
           n24.addNode(n27);
           n3 = new NodeChoice(n24, 3);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new FormatDefCSV(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public AddNodeToDB AddNodeToDB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(ADD_NODE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_3;
      }
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(781);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(INT_LITERAL);
                         n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    switch (jj_nt.kind) {
    case MANUAL_:
      n12 = jj_consume_token(MANUAL_);
                      n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
     {if (true) return new AddNodeToDB(n0,n2,n4,n10);}
    throw new Error("Missing return statement in function");
  }

  final public DropNodeFromDB DropNodeFromDB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(DROP_NODE_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_4;
      }
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(781);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(INT_LITERAL);
                         n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    switch (jj_nt.kind) {
    case FORCE_:
      n12 = jj_consume_token(FORCE_);
                     n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
     {if (true) return new DropNodeFromDB(n0,n2,n4,n10);}
    throw new Error("Missing return statement in function");
  }

  final public StartDatabase StartDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   {
   }
    n1 = jj_consume_token(START_DB_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
    label_5:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_5;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(781);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Identifier(prn);
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    switch (jj_nt.kind) {
    case WAIT_TIMEOUT_:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(WAIT_TIMEOUT_);
                            n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(INT_LITERAL);
                          n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
     {if (true) return new StartDatabase(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public StopDatabase StopDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   {
   }
    n1 = jj_consume_token(STOP_DB_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_6;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(781);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Identifier(prn);
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new StopDatabase(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ShutdownXDB ShutdownXDB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(SHUT_DOWN_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case FORCE_:
      n4 = jj_consume_token(FORCE_);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
     {if (true) return new ShutdownXDB(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public CreateDatabase CreateDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeList n8;
   NodeChoice n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13;
   NodeToken n14;
   Token n15;
   Identifier n16;
   NodeToken n17;
   Token n18;
   NodeOptional n19 = new NodeOptional();
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeChoice n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeListOptional n31 = new NodeListOptional();
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;

   {
   }
    n1 = jj_consume_token(CREATE_DB_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
    switch (jj_nt.kind) {
    case WITH_:
    case OWNER_:
    case SPATIAL_:
        n5 = new NodeOptional();
        n8 = new NodeList();
        n4 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case WITH_:
        n7 = jj_consume_token(WITH_);
                      n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
        n4.addNode(n5);
      label_7:
      while (true) {
           n13 = new NodeOptional();
        switch (jj_nt.kind) {
        case OWNER_:
              n10 = new NodeSequence(3);
          n12 = jj_consume_token(OWNER_);
                           n11 = JTBToolkit.makeNodeToken(n12);
              n10.addNode(n11);
          switch (jj_nt.kind) {
          case EQUALS_:
            n15 = jj_consume_token(EQUALS_);
                         n14 = JTBToolkit.makeNodeToken(n15);
                 n13.addNode(n14);
            break;
          default:
            jj_la1[92] = jj_gen;
            ;
          }
              n10.addNode(n13);
          n16 = Identifier(prn);
              n10.addNode(n16);
              n9 = new NodeChoice(n10, 0);
          break;
        case SPATIAL_:
          n18 = jj_consume_token(SPATIAL_);
                             n17 = JTBToolkit.makeNodeToken(n18);
              n9 = new NodeChoice(n17, 1);
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n8.addNode(n9);
        switch (jj_nt.kind) {
        case OWNER_:
        case SPATIAL_:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_7;
        }
      }
        n8.nodes.trimToSize();
        n4.addNode(n8);
        n3.addNode(n4);
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case MANUAL_:
      n21 = jj_consume_token(MANUAL_);
                      n20 = JTBToolkit.makeNodeToken(n21);
        n19.addNode(n20);
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    n23 = jj_consume_token(ON_);
               n22 = JTBToolkit.makeNodeToken(n23);
    switch (jj_nt.kind) {
    case NODE_:
      n26 = jj_consume_token(NODE_);
                       n25 = JTBToolkit.makeNodeToken(n26);
           n24 = new NodeChoice(n25, 0);
      break;
    case NODES_:
      n28 = jj_consume_token(NODES_);
                        n27 = JTBToolkit.makeNodeToken(n28);
           n24 = new NodeChoice(n27, 1);
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n30 = jj_consume_token(INT_LITERAL);
                       n29 = JTBToolkit.makeNodeToken(n30);
    label_8:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_8;
      }
        n32 = new NodeSequence(2);
      n34 = jj_consume_token(781);
                n33 = JTBToolkit.makeNodeToken(n34);
        n32.addNode(n33);
      n36 = jj_consume_token(INT_LITERAL);
                          n35 = JTBToolkit.makeNodeToken(n36);
        n32.addNode(n35);
        n31.addNode(n32);
    }
     n31.nodes.trimToSize();
     {if (true) return new CreateDatabase(n0,n2,n3,n19,n22,n24,n29,n31);}
    throw new Error("Missing return statement in function");
  }

  final public DropDatabase DropDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(DROP_DB_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
    switch (jj_nt.kind) {
    case FORCE_:
      n5 = jj_consume_token(FORCE_);
                    n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
     {if (true) return new DropDatabase(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public CreateNode CreateNode(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeList n10;
   NodeChoice n11;
   FormatDefPort n12;
   FormatDefUser n13;
   FormatDefPassword n14;

   {
   }
    n1 = jj_consume_token(CREATE_NODE_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FOR_);
               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
    switch (jj_nt.kind) {
    case PORT_:
    case USER_:
    case WITH_:
    case PASSWORD_:
        n7 = new NodeOptional();
        n10 = new NodeList();
        n6 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case WITH_:
        n9 = jj_consume_token(WITH_);
                      n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
        n6.addNode(n7);
      label_9:
      while (true) {
        switch (jj_nt.kind) {
        case PORT_:
          n12 = FormatDefPort(prn);
              n11 = new NodeChoice(n12, 0);
          break;
        case USER_:
          n13 = FormatDefUser(prn);
              n11 = new NodeChoice(n13, 1);
          break;
        case PASSWORD_:
          n14 = FormatDefPassword(prn);
              n11 = new NodeChoice(n14, 2);
          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n10.addNode(n11);
        switch (jj_nt.kind) {
        case PORT_:
        case USER_:
        case PASSWORD_:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_9;
        }
      }
        n10.nodes.trimToSize();
        n6.addNode(n10);
        n5.addNode(n6);
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
     {if (true) return new CreateNode(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefPort FormatDefPort(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(PORT_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case EQUALS_:
      n4 = jj_consume_token(EQUALS_);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    n6 = jj_consume_token(INT_LITERAL);
                      n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new FormatDefPort(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefUser FormatDefUser(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
    n1 = jj_consume_token(USER_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case EQUALS_:
      n4 = jj_consume_token(EQUALS_);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    n5 = Identifier(prn);
     {if (true) return new FormatDefUser(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public FormatDefPassword FormatDefPassword(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
    n1 = jj_consume_token(PASSWORD_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case EQUALS_:
      n4 = jj_consume_token(EQUALS_);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    n5 = Identifier(prn);
     {if (true) return new FormatDefPassword(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ExecDirect ExecDirect(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17 = new NodeListOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   {
   }
    n1 = jj_consume_token(EXEC_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(DIRECT_);
                  n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(ON_);
              n4 = JTBToolkit.makeNodeToken(n5);
    switch (jj_nt.kind) {
    case ALL_:
      n8 = jj_consume_token(ALL_);
                     n7 = JTBToolkit.makeNodeToken(n8);
           n6 = new NodeChoice(n7, 0);
      break;
    case NODE_:
    case NODES_:
           n9 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case NODE_:
        n12 = jj_consume_token(NODE_);
                             n11 = JTBToolkit.makeNodeToken(n12);
                 n10 = new NodeChoice(n11, 0);
        break;
      case NODES_:
        n14 = jj_consume_token(NODES_);
                              n13 = JTBToolkit.makeNodeToken(n14);
                 n10 = new NodeChoice(n13, 1);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n9.addNode(n10);
      n16 = jj_consume_token(INT_LITERAL);
                             n15 = JTBToolkit.makeNodeToken(n16);
           n9.addNode(n15);
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case 781:
          ;
          break;
        default:
          jj_la1[108] = jj_gen;
          break label_10;
        }
              n18 = new NodeSequence(2);
        n20 = jj_consume_token(781);
                      n19 = JTBToolkit.makeNodeToken(n20);
              n18.addNode(n19);
        n22 = jj_consume_token(INT_LITERAL);
                                n21 = JTBToolkit.makeNodeToken(n22);
              n18.addNode(n21);
              n17.addNode(n18);
      }
           n17.nodes.trimToSize();
           n9.addNode(n17);
           n6 = new NodeChoice(n9, 1);
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n24 = jj_consume_token(STRING_LITERAL);
                          n23 = JTBToolkit.makeNodeToken(n24);
     {if (true) return new ExecDirect(n0,n2,n4,n6,n23);}
    throw new Error("Missing return statement in function");
  }

  final public Explain Explain(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Select n5;

   {
   }
    n1 = jj_consume_token(EXPLAIN_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case VERBOSE_:
      n4 = jj_consume_token(VERBOSE_);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    n5 = Select(prn);
     {if (true) return new Explain(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public VacuumDatabase VacuumDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   TableName n10;
   AnalyzeDatabase n11;

   {
   }
    n1 = jj_consume_token(VACUUM_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case FULL_:
    case FREEZE_:
      switch (jj_nt.kind) {
      case FULL_:
        n5 = jj_consume_token(FULL_);
                      n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
        break;
      case FREEZE_:
        n7 = jj_consume_token(FREEZE_);
                        n6 = JTBToolkit.makeNodeToken(n7);
           n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[112] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case ANALYZE_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      switch (jj_nt.kind) {
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TEMPDOT_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case PUBLICDOT_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case QPUBLICDOT_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n10 = TableName(prn);
           n9 = new NodeChoice(n10, 0);
        break;
      case ANALYZE_:
        n11 = AnalyzeDatabase(prn);
           n9 = new NodeChoice(n11, 1);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n8.addNode(n9);
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
     {if (true) return new VacuumDatabase(n0,n2,n8);}
    throw new Error("Missing return statement in function");
  }

  final public AnalyzeDatabase AnalyzeDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   TableName n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ColumnNameList n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(ANALYZE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
        n5 = new NodeOptional();
        n3 = new NodeSequence(2);
      n4 = TableName(prn);
        n3.addNode(n4);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
           n6 = new NodeSequence(3);
        n8 = jj_consume_token(PARENTHESIS_START_);
                                   n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = ColumnNameList(prn);
           n6.addNode(n9);
        n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                                    n10 = JTBToolkit.makeNodeToken(n11);
           n6.addNode(n10);
           n5.addNode(n6);
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
     {if (true) return new AnalyzeDatabase(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public CreateTablespace CreateTablespace(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   TablespaceLocation n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   TablespaceLocation n10;

   {
   }
    n1 = jj_consume_token(CREATE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(TABLESPACE_);
                      n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
    n5 = TablespaceLocation(prn);
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_11;
      }
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(781);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = TablespaceLocation(prn);
        n7.addNode(n10);
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
     {if (true) return new CreateTablespace(n0,n2,n4,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public DropTablespace DropTablespace(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(TABLESPACE_);
                      n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
     {if (true) return new DropTablespace(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TablespaceLocation TablespaceLocation(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   stringLiteral n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeListOptional n16 = new NodeListOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;

   {
   }
    n1 = jj_consume_token(LOCATION_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = stringLiteral(prn);
    n4 = jj_consume_token(ON_);
              n3 = JTBToolkit.makeNodeToken(n4);
    switch (jj_nt.kind) {
    case ALL_:
      n7 = jj_consume_token(ALL_);
                     n6 = JTBToolkit.makeNodeToken(n7);
           n5 = new NodeChoice(n6, 0);
      break;
    case NODE_:
    case NODES_:
           n8 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case NODE_:
        n11 = jj_consume_token(NODE_);
                             n10 = JTBToolkit.makeNodeToken(n11);
                 n9 = new NodeChoice(n10, 0);
        break;
      case NODES_:
        n13 = jj_consume_token(NODES_);
                              n12 = JTBToolkit.makeNodeToken(n13);
                 n9 = new NodeChoice(n12, 1);
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n8.addNode(n9);
      n15 = jj_consume_token(INT_LITERAL);
                             n14 = JTBToolkit.makeNodeToken(n15);
           n8.addNode(n14);
      label_12:
      while (true) {
        if (jj_2_29(2)) {
          ;
        } else {
          break label_12;
        }
              n17 = new NodeSequence(2);
        n19 = jj_consume_token(781);
                      n18 = JTBToolkit.makeNodeToken(n19);
              n17.addNode(n18);
        n21 = jj_consume_token(INT_LITERAL);
                                n20 = JTBToolkit.makeNodeToken(n21);
              n17.addNode(n20);
              n16.addNode(n17);
      }
           n16.nodes.trimToSize();
           n8.addNode(n16);
           n5 = new NodeChoice(n8, 1);
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TablespaceLocation(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public UpdateStats UpdateStats(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ColumnNameList n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   TableName n22;
   TableName n23;
   NodeToken n24;
   Token n25;

   {
   }
    n1 = jj_consume_token(UPDATE_STAT_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case COLUMN_:
           n3 = new NodeSequence(4);
      n5 = jj_consume_token(COLUMN_);
                        n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      if (jj_2_30(2)) {
                 n7 = new NodeSequence(4);
        n9 = jj_consume_token(PARENTHESIS_START_);
                                         n8 = JTBToolkit.makeNodeToken(n9);
                 n7.addNode(n8);
        n11 = jj_consume_token(STAR_);
                             n10 = JTBToolkit.makeNodeToken(n11);
                 n7.addNode(n10);
        n13 = jj_consume_token(PARENTHESIS_CLOSE_);
                                          n12 = JTBToolkit.makeNodeToken(n13);
                 n7.addNode(n12);
                 n6 = new NodeChoice(n7, 0);
      } else {
        switch (jj_nt.kind) {
        case PARENTHESIS_START_:
                 n14 = new NodeSequence(3);
          n16 = jj_consume_token(PARENTHESIS_START_);
                                          n15 = JTBToolkit.makeNodeToken(n16);
                 n14.addNode(n15);
          n17 = ColumnNameList(prn);
                 n14.addNode(n17);
          n19 = jj_consume_token(PARENTHESIS_CLOSE_);
                                          n18 = JTBToolkit.makeNodeToken(n19);
                 n14.addNode(n18);
                 n6 = new NodeChoice(n14, 1);
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
           n3.addNode(n6);
      n21 = jj_consume_token(FOR_);
                      n20 = JTBToolkit.makeNodeToken(n21);
           n3.addNode(n20);
      n22 = TableName(prn);
           n3.addNode(n22);
           n2 = new NodeChoice(n3, 0);
      break;
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n23 = TableName(prn);
           n2 = new NodeChoice(n23, 1);
      break;
    case STAR_:
      n25 = jj_consume_token(STAR_);
                       n24 = JTBToolkit.makeNodeToken(n25);
           n2 = new NodeChoice(n24, 2);
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UpdateStats(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public RenameTable RenameTable(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeToken n5;
   Token n6;
   TableName n7;

   {
   }
    n1 = jj_consume_token(RENAME_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(TABLE_);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
    n6 = jj_consume_token(TO_);
              n5 = JTBToolkit.makeNodeToken(n6);
    n7 = TableName(prn);
     {if (true) return new RenameTable(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public DropIndex DropIndex(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INDEX_);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
    switch (jj_nt.kind) {
    case ON_:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(ON_);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = TableName(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
     {if (true) return new DropIndex(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Alter Alter(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   AlterTable n3;
   AlterTableSpace n4;

   {
   }
    n1 = jj_consume_token(ALTER_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case TABLE_:
      n3 = AlterTable(prn);
           n2 = new NodeChoice(n3, 0);
      break;
    case TABLESPACE_:
      n4 = AlterTableSpace(prn);
           n2 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Alter(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableSpace AlterTableSpace(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;

   {
   }
    n1 = jj_consume_token(TABLESPACE_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
    n4 = jj_consume_token(RENAME_);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(TO_);
              n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier(prn);
     {if (true) return new AlterTableSpace(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public AlterTable AlterTable(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   TableName n2;
   AlterTableActon n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   AlterTableActon n8;

   {
   }
    n1 = jj_consume_token(TABLE_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TableName(prn);
    n3 = AlterTableActon(prn);
    label_13:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[124] = jj_gen;
        break label_13;
      }
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(781);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = AlterTableActon(prn);
        n5.addNode(n8);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
     {if (true) return new AlterTable(n0,n2,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableActon AlterTableActon(PrintStream prn) throws ParseException {
   NodeChoice n0;
   AddDef n1;
   DropDef n2;
   AlterDef n3;
   RenameDef n4;
   OwnerDef n5;
   SetTablespace n6;
   Inherit n7;

   {
   }
    switch (jj_nt.kind) {
    case ADD_:
      n1 = AddDef(prn);
        n0 = new NodeChoice(n1, 0);
      break;
    case DROP_:
      n2 = DropDef(prn);
        n0 = new NodeChoice(n2, 1);
      break;
    case ALTER_:
    case MODIFY_:
      n3 = AlterDef(prn);
        n0 = new NodeChoice(n3, 2);
      break;
    case RENAME_:
      n4 = RenameDef(prn);
        n0 = new NodeChoice(n4, 3);
      break;
    case OWNER_TO_:
      n5 = OwnerDef(prn);
        n0 = new NodeChoice(n5, 4);
      break;
    case SET_:
      n6 = SetTablespace(prn);
        n0 = new NodeChoice(n6, 5);
      break;
    case NO_:
    case INHERIT_:
      n7 = Inherit(prn);
        n0 = new NodeChoice(n7, 6);
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AlterTableActon(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Inherit Inherit(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   TableName n5;

   {
   }
    switch (jj_nt.kind) {
    case NO_:
      n2 = jj_consume_token(NO_);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    n4 = jj_consume_token(INHERIT_);
                   n3 = JTBToolkit.makeNodeToken(n4);
    n5 = TableName(prn);
     {if (true) return new Inherit(n0,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public SetTablespace SetTablespace(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
    n1 = jj_consume_token(SET_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(TABLESPACE_);
                      n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
     {if (true) return new SetTablespace(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public SetProperty SetProperty(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   IsolationLevel n26;

   {
   }
    n1 = jj_consume_token(SET_);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
           n3 = new NodeSequence(3);
      n4 = Identifier(prn);
           n3.addNode(n4);
      switch (jj_nt.kind) {
      case EQUALS_:
      case TO_:
        switch (jj_nt.kind) {
        case TO_:
          n8 = jj_consume_token(TO_);
                          n7 = JTBToolkit.makeNodeToken(n8);
                 n6 = new NodeChoice(n7, 0);
          break;
        case EQUALS_:
          n10 = jj_consume_token(EQUALS_);
                         n9 = JTBToolkit.makeNodeToken(n10);
                 n6 = new NodeChoice(n9, 1);
          break;
        default:
          jj_la1[127] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              n5.addNode(n6);
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
           n3.addNode(n5);
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        n13 = jj_consume_token(STRING_LITERAL);
                                      n12 = JTBToolkit.makeNodeToken(n13);
                 n11 = new NodeChoice(n12, 0);
        break;
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n14 = Identifier(prn);
                 n11 = new NodeChoice(n14, 1);
        break;
      case ON_:
        n16 = jj_consume_token(ON_);
                           n15 = JTBToolkit.makeNodeToken(n16);
                 n11 = new NodeChoice(n15, 2);
        break;
      case TRUE_:
        n18 = jj_consume_token(TRUE_);
                             n17 = JTBToolkit.makeNodeToken(n18);
                 n11 = new NodeChoice(n17, 3);
        break;
      case FALSE_:
        n20 = jj_consume_token(FALSE_);
                              n19 = JTBToolkit.makeNodeToken(n20);
                 n11 = new NodeChoice(n19, 4);
        break;
      default:
        jj_la1[129] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n3.addNode(n11);
           n2 = new NodeChoice(n3, 0);
      break;
    case TRANSACTION_:
           n21 = new NodeSequence(3);
      n23 = jj_consume_token(TRANSACTION_);
                              n22 = JTBToolkit.makeNodeToken(n23);
           n21.addNode(n22);
      n25 = jj_consume_token(ISOLATION_LEVEL_);
                                  n24 = JTBToolkit.makeNodeToken(n25);
           n21.addNode(n24);
      n26 = IsolationLevel(prn);
           n21.addNode(n26);
           n2 = new NodeChoice(n21, 1);
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SetProperty(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public IsolationLevel IsolationLevel(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    switch (jj_nt.kind) {
    case SERIALIZABLE_:
      n2 = jj_consume_token(SERIALIZABLE_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case REPEATABLE_READ_:
      n4 = jj_consume_token(REPEATABLE_READ_);
                                 n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case READ_COMMITTED_:
      n6 = jj_consume_token(READ_COMMITTED_);
                                n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case READ_UNCOMMITTED_:
      n8 = jj_consume_token(READ_UNCOMMITTED_);
                                  n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[131] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IsolationLevel(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowProperty ShowProperty(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(SHOW_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case IDENTIFIER:
      n4 = jj_consume_token(IDENTIFIER);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
      break;
    case ALL_:
      n6 = jj_consume_token(ALL_);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
      break;
    case QUOTED_IDENTIFIER:
      n8 = jj_consume_token(QUOTED_IDENTIFIER);
                                  n7 = JTBToolkit.makeNodeToken(n8);
           n2 = new NodeChoice(n7, 2);
      break;
    default:
      jj_la1[132] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ShowProperty(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public OwnerDef OwnerDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
    n1 = jj_consume_token(OWNER_TO_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PUBLIC_:
      n4 = jj_consume_token(PUBLIC_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
      break;
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n5 = Identifier(prn);
           n2 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OwnerDef(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Constraint Constraint(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
    n1 = jj_consume_token(CONSTRAINT_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
     {if (true) return new Constraint(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public AddDef AddDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   ColumnDeclare n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeSequence n16;
   NodeOptional n17 = new NodeOptional();
   Constraint n18;
   NodeChoice n19;
   PrimaryKeyDef n20;
   ForeignKeyDef n21;
   CheckDef n22;

   {
   }
    n1 = jj_consume_token(ADD_);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case COLUMN_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
           n3 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case COLUMN_:
        n6 = jj_consume_token(COLUMN_);
                           n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        break;
      default:
        jj_la1[134] = jj_gen;
        ;
      }
           n3.addNode(n4);
      n7 = ColumnDeclare(prn);
           n3.addNode(n7);
      switch (jj_nt.kind) {
      case AFTER_:
      case FIRST_:
        switch (jj_nt.kind) {
        case FIRST_:
          n11 = jj_consume_token(FIRST_);
                              n10 = JTBToolkit.makeNodeToken(n11);
                 n9 = new NodeChoice(n10, 0);
          break;
        case AFTER_:
                 n12 = new NodeSequence(2);
          n14 = jj_consume_token(AFTER_);
                              n13 = JTBToolkit.makeNodeToken(n14);
                 n12.addNode(n13);
          n15 = Identifier(prn);
                 n12.addNode(n15);
                 n9 = new NodeChoice(n12, 1);
          break;
        default:
          jj_la1[135] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              n8.addNode(n9);
        break;
      default:
        jj_la1[136] = jj_gen;
        ;
      }
           n3.addNode(n8);
           n2 = new NodeChoice(n3, 0);
      break;
    case CHECK_:
    case CONSTRAINT_:
    case PRIMARYKEY_:
    case FOREIGNKEY_:
           n16 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case CONSTRAINT_:
        n18 = Constraint(prn);
              n17.addNode(n18);
        break;
      default:
        jj_la1[137] = jj_gen;
        ;
      }
           n16.addNode(n17);
      switch (jj_nt.kind) {
      case PRIMARYKEY_:
        n20 = PrimaryKeyDef(prn);
                 n19 = new NodeChoice(n20, 0);
        break;
      case FOREIGNKEY_:
        n21 = ForeignKeyDef(prn);
                 n19 = new NodeChoice(n21, 1);
        break;
      case CHECK_:
        n22 = CheckDef(prn);
                 n19 = new NodeChoice(n22, 2);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n16.addNode(n19);
           n2 = new NodeChoice(n16, 1);
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AddDef(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public DropDef DropDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   Identifier n7;
   Constraint n8;
   NodeToken n9;
   Token n10;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case COLUMN_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
           n3 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case COLUMN_:
        n6 = jj_consume_token(COLUMN_);
                           n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        break;
      default:
        jj_la1[140] = jj_gen;
        ;
      }
           n3.addNode(n4);
      n7 = Identifier(prn);
           n3.addNode(n7);
           n2 = new NodeChoice(n3, 0);
      break;
    case CONSTRAINT_:
      n8 = Constraint(prn);
           n2 = new NodeChoice(n8, 1);
      break;
    case PRIMARYKEY_:
      n10 = jj_consume_token(PRIMARYKEY_);
                             n9 = JTBToolkit.makeNodeToken(n10);
           n2 = new NodeChoice(n9, 2);
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DropDef(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public RenameDef RenameDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   Identifier n8;

   {
   }
    n1 = jj_consume_token(RENAME_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case COLUMN_:
      n4 = jj_consume_token(COLUMN_);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    n5 = Identifier(prn);
    n7 = jj_consume_token(TO_);
              n6 = JTBToolkit.makeNodeToken(n7);
    n8 = Identifier(prn);
     {if (true) return new RenameDef(n0,n2,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  final public AlterDef AlterDef(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   AlterDefOperation n8;

   {
   }
    switch (jj_nt.kind) {
    case MODIFY_:
      n2 = jj_consume_token(MODIFY_);
                        n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ALTER_:
      n4 = jj_consume_token(ALTER_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case COLUMN_:
      n7 = jj_consume_token(COLUMN_);
                     n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    n8 = AlterDefOperation(prn);
     {if (true) return new AlterDef(n0,n5,n8);}
    throw new Error("Missing return statement in function");
  }

  final public AlterDefOperation AlterDefOperation(PrintStream prn) throws ParseException {
   Identifier n0;
   NodeChoice n1;
   AlterDefOperationType n2;
   AlterDefOperationSet n3;
   DropDefaultNotNull n4;

   {
   }
    n0 = Identifier(prn);
    switch (jj_nt.kind) {
    case TYPE_:
      n2 = AlterDefOperationType(prn);
           n1 = new NodeChoice(n2, 0);
      break;
    case SET_:
      n3 = AlterDefOperationSet(prn);
           n1 = new NodeChoice(n3, 1);
      break;
    case DROP_:
      n4 = DropDefaultNotNull(prn);
           n1 = new NodeChoice(n4, 2);
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AlterDefOperation(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AlterDefOperationType AlterDefOperationType(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   types n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   IntervalLiterals n22;

   {
   }
    n1 = jj_consume_token(TYPE_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = types();
    switch (jj_nt.kind) {
    case USING_:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(USING_);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        n9 = jj_consume_token(STRING_LITERAL);
                                  n8 = JTBToolkit.makeNodeToken(n9);
              n7 = new NodeChoice(n8, 0);
        break;
      case NULL_:
        n11 = jj_consume_token(NULL_);
                          n10 = JTBToolkit.makeNodeToken(n11);
              n7 = new NodeChoice(n10, 1);
        break;
      case DATE_:
        n13 = jj_consume_token(DATE_);
                          n12 = JTBToolkit.makeNodeToken(n13);
              n7 = new NodeChoice(n12, 2);
        break;
      case TIME_:
        n15 = jj_consume_token(TIME_);
                          n14 = JTBToolkit.makeNodeToken(n15);
              n7 = new NodeChoice(n14, 3);
        break;
      case TIMESTAMP_:
        n17 = jj_consume_token(TIMESTAMP_);
                               n16 = JTBToolkit.makeNodeToken(n17);
              n7 = new NodeChoice(n16, 4);
        break;
      case INT_LITERAL:
        n19 = jj_consume_token(INT_LITERAL);
                                n18 = JTBToolkit.makeNodeToken(n19);
              n7 = new NodeChoice(n18, 5);
        break;
      case DECIMAL_LITERAL:
        n21 = jj_consume_token(DECIMAL_LITERAL);
                                    n20 = JTBToolkit.makeNodeToken(n21);
              n7 = new NodeChoice(n20, 6);
        break;
      default:
        jj_la1[146] = jj_gen;
        if (jj_2_31(2)) {
          n22 = IntervalLiterals(prn);
              n7 = new NodeChoice(n22, 7);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
     {if (true) return new AlterDefOperationType(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public AlterDefOperationSet AlterDefOperationSet(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   DefaultSpec n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
    n1 = jj_consume_token(SET_);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case DEFAULT_:
      n3 = DefaultSpec(prn);
           n2 = new NodeChoice(n3, 0);
      break;
    case NOT_:
           n4 = new NodeSequence(2);
      n6 = jj_consume_token(NOT_);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
      n8 = jj_consume_token(NULL_);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
           n2 = new NodeChoice(n4, 1);
      break;
    case STATISTICS_:
           n9 = new NodeSequence(2);
      n11 = jj_consume_token(STATISTICS_);
                             n10 = JTBToolkit.makeNodeToken(n11);
           n9.addNode(n10);
      n13 = jj_consume_token(INT_LITERAL);
                             n12 = JTBToolkit.makeNodeToken(n13);
           n9.addNode(n12);
           n2 = new NodeChoice(n9, 2);
      break;
    case STORAGE_:
      n15 = jj_consume_token(STORAGE_);
                          n14 = JTBToolkit.makeNodeToken(n15);
           n2 = new NodeChoice(n14, 3);
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AlterDefOperationSet(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public DropDefaultNotNull DropDefaultNotNull(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case DEFAULT_:
      n4 = jj_consume_token(DEFAULT_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
      break;
    case NOT_:
           n5 = new NodeSequence(2);
      n7 = jj_consume_token(NOT_);
                     n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
      n9 = jj_consume_token(NULL_);
                      n8 = JTBToolkit.makeNodeToken(n9);
           n5.addNode(n8);
           n2 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DropDefaultNotNull(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Delete Delete(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeOptional n5 = new NodeOptional();
   WhereClause n6;

   {
   }
    n1 = jj_consume_token(DELETE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(FROM_);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
    switch (jj_nt.kind) {
    case WHERE_:
      n6 = WhereClause(prn);
        n5.addNode(n6);
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
     {if (true) return new Delete(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public UpdateTable UpdateTable(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   SetUpdateClause n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   SetUpdateClause n10;
   NodeOptional n11 = new NodeOptional();
   WhereClause n12;

   {
   }
    n1 = jj_consume_token(UPDATE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TableName(prn);
    n4 = jj_consume_token(SET_);
               n3 = JTBToolkit.makeNodeToken(n4);
    n5 = SetUpdateClause(prn);
    label_14:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[151] = jj_gen;
        break label_14;
      }
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(781);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = SetUpdateClause(prn);
        n7.addNode(n10);
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    switch (jj_nt.kind) {
    case WHERE_:
      n12 = WhereClause(prn);
        n11.addNode(n12);
      break;
    default:
      jj_la1[152] = jj_gen;
      ;
    }
     {if (true) return new UpdateTable(n0,n2,n3,n5,n6,n11);}
    throw new Error("Missing return statement in function");
  }

  final public SetUpdateClause SetUpdateClause(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   {
   }
    if (jj_2_32(2)) {
        n1 = new NodeSequence(2);
      n2 = TableName(prn);
        n1.addNode(n2);
      n4 = jj_consume_token(782);
               n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0.addNode(n1);
    } else {
      ;
    }
    n5 = Identifier(prn);
    n7 = jj_consume_token(EQUALS_);
            n6 = JTBToolkit.makeNodeToken(n7);
    n8 = SQLSimpleExpression(prn);
     {if (true) return new SetUpdateClause(n0,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  final public createIndex createIndex(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeToken n8;
   Token n9;
   TableName n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;
   columnListIndexSpec n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   tablespaceDef n22;
   NodeOptional n23 = new NodeOptional();
   WhereClause n24;

   {
   }
    n1 = jj_consume_token(CREATE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case UNIQUE_:
      n4 = jj_consume_token(UNIQUE_);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    n6 = jj_consume_token(INDEX_);
                 n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier(prn);
    n9 = jj_consume_token(ON_);
              n8 = JTBToolkit.makeNodeToken(n9);
    n10 = TableName(prn);
    switch (jj_nt.kind) {
    case USING_:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(USING_);
                     n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = Identifier(prn);
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    n17 = jj_consume_token(PARENTHESIS_START_);
                              n16 = JTBToolkit.makeNodeToken(n17);
    n18 = columnListIndexSpec(prn);
    n20 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n19 = JTBToolkit.makeNodeToken(n20);
    switch (jj_nt.kind) {
    case TABLESPACE_:
      n22 = tablespaceDef(prn);
        n21.addNode(n22);
      break;
    default:
      jj_la1[155] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case WHERE_:
      n24 = WhereClause(prn);
        n23.addNode(n24);
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
     {if (true) return new createIndex(n0,n2,n5,n7,n8,n10,n11,n16,n18,n19,n21,n23);}
    throw new Error("Missing return statement in function");
  }

  final public columnListIndexSpec columnListIndexSpec(PrintStream prn) throws ParseException {
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Identifier n14;
   NodeListOptional n15 = new NodeListOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   Identifier n20;
   NodeSequence n21;
   NodeToken n22;
   Token n23;
   SQLSimpleExpression n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   NodeChoice n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Identifier n33;

   {
   }
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n1 = Identifier(prn);
           n0 = new NodeChoice(n1, 0);
      break;
    case PARENTHESIS_START_:
           n2 = new NodeSequence(3);
      n4 = jj_consume_token(PARENTHESIS_START_);
                                   n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
      n5 = SQLSimpleExpression(prn);
           n2.addNode(n5);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                   n6 = JTBToolkit.makeNodeToken(n7);
           n2.addNode(n6);
           n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case ASC_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case DESC_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      switch (jj_nt.kind) {
      case ASC_:
        n11 = jj_consume_token(ASC_);
                      n10 = JTBToolkit.makeNodeToken(n11);
           n9 = new NodeChoice(n10, 0);
        break;
      case DESC_:
        n13 = jj_consume_token(DESC_);
                       n12 = JTBToolkit.makeNodeToken(n13);
           n9 = new NodeChoice(n12, 1);
        break;
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n14 = Identifier(prn);
           n9 = new NodeChoice(n14, 2);
        break;
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n8.addNode(n9);
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    label_15:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[160] = jj_gen;
        break label_15;
      }
        n27 = new NodeOptional();
        n16 = new NodeSequence(3);
      n18 = jj_consume_token(781);
                n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      switch (jj_nt.kind) {
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n20 = Identifier(prn);
              n19 = new NodeChoice(n20, 0);
        break;
      case PARENTHESIS_START_:
              n21 = new NodeSequence(3);
        n23 = jj_consume_token(PARENTHESIS_START_);
                                       n22 = JTBToolkit.makeNodeToken(n23);
              n21.addNode(n22);
        n24 = SQLSimpleExpression(prn);
              n21.addNode(n24);
        n26 = jj_consume_token(PARENTHESIS_CLOSE_);
                                       n25 = JTBToolkit.makeNodeToken(n26);
              n21.addNode(n25);
              n19 = new NodeChoice(n21, 1);
        break;
      default:
        jj_la1[161] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n16.addNode(n19);
      switch (jj_nt.kind) {
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case ASC_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case DESC_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        switch (jj_nt.kind) {
        case ASC_:
          n30 = jj_consume_token(ASC_);
                         n29 = JTBToolkit.makeNodeToken(n30);
              n28 = new NodeChoice(n29, 0);
          break;
        case DESC_:
          n32 = jj_consume_token(DESC_);
                          n31 = JTBToolkit.makeNodeToken(n32);
              n28 = new NodeChoice(n31, 1);
          break;
        case X_:
        case Y_:
        case Z_:
        case LN_:
        case PI_:
        case ABS_:
        case AGE_:
        case AVERAGE_:
        case CHR_:
        case COS_:
        case COT_:
        case DAY_:
        case DEC_:
        case EXP_:
        case INT_:
        case LOG_:
        case MAX_:
        case MD5_:
        case MIN_:
        case NOW_:
        case NUM_:
        case RAW_:
        case SIN_:
        case SUM_:
        case TAN_:
        case ACOS_:
        case ASIN_:
        case ATAN_:
        case ATN2_:
        case BLOB_:
        case BYTE_:
        case CBRT_:
        case CEIL_:
        case CHAR_:
        case CLOB_:
        case CORR_:
        case COSH_:
        case DATE_:
        case HOST_:
        case HOUR_:
        case INT2_:
        case INT4_:
        case INT8_:
        case LONG_:
        case LPAD_:
        case PORT_:
        case REAL_:
        case RPAD_:
        case SIGN_:
        case SQRT_:
        case SRID_:
        case ST_M_:
        case ST_X_:
        case ST_Y_:
        case ST_Z_:
        case TEXT_:
        case TIME_:
        case TRIM_:
        case TYPE_:
        case USER_:
        case WEEK_:
        case YEAR_:
        case ASCII_:
        case ASKML_:
        case ATAN2_:
        case BOX2D_:
        case BOX3D_:
        case BTRIM_:
        case BYTEA_:
        case COUNT_:
        case EVERY_:
        case FIXED_:
        case FLOAT_:
        case FLOOR_:
        case IMAGE_:
        case INSTR_:
        case LEAST_:
        case LFILL_:
        case LOG10_:
        case LOWER_:
        case LTRIM_:
        case MONEY_:
        case MONTH_:
        case MULTI_:
        case NCHAR_:
        case NDIMS_:
        case POWER_:
        case ROUND_:
        case RTRIM_:
        case SCALE_:
        case TRUNC_:
        case UPPER_:
        case VALUE_:
        case ABBREV_:
        case AREA2D_:
        case ASEWKB_:
        case ASEWKT_:
        case ASTEXT_:
        case BIGINT_:
        case BINARY_:
        case BIT_OR_:
        case CONCAT_WORD:
        case DECODE_:
        case ENCODE_:
        case WORD_EQUALS_:
        case EXTENT_:
        case FAMILY_:
        case FLOAT4_:
        case FLOAT8_:
        case ISRING_:
        case LENGTH_:
        case MINUTE_:
        case NRINGS_:
        case NULLIF_:
        case NUMBER_:
        case RANDOM_:
        case REPEAT_:
        case ROTATE_:
        case SECOND_:
        case STDDEV_:
        case STRPOS_:
        case SUBSTR_:
        case TO_HEX_:
        case WITHIN_:
        case ZMFLAG_:
        case ADDDATE_:
        case ADDTIME_:
        case BIT_AND_:
        case BOOL_OR_:
        case CEILING_:
        case CLUSTER_:
        case COLLECT_:
        case CONVERT_:
        case CURDATE_:
        case CURTIME_:
        case DAYNAME_:
        case DECIMAL_:
        case DEGREE_:
        case EXTRACT_:
        case GET_BIT_:
        case INITCAP_:
        case INTEGER_:
        case ISEMPTY_:
        case ISVALID_:
        case MAPCHAR_:
        case MASKLEN_:
        case NETMASK_:
        case NETWORK_:
        case NPOINTS_:
        case NUMERIC_:
        case OVERLAY_:
        case PLACING_:
        case QUARTER_:
        case RADIANS_:
        case REGR_R2_:
        case REPLACE_:
        case ROTATEX_:
        case ROTATEY_:
        case ROTATEZ_:
        case SET_BIT_:
        case SETSEED_:
        case SETSRID_:
        case SOUNDEX_:
        case SPATIAL_:
        case ST_AREA_:
        case STORAGE_:
        case ST_SRID_:
        case ST_TEXT_:
        case SUBDATE_:
        case SUBTIME_:
        case TINYINT_:
        case TO_CHAR_:
        case TO_DATE_:
        case VARCHAR_:
        case VAR_POP_:
        case VARYING_:
        case VERSION_:
        case ASBINARY_:
        case BOOL_AND_:
        case CONTAINS_:
        case DATABASE_:
        case DATEDIFF_:
        case DATETIME_:
        case DISJOINT_:
        case DISTANCE_:
        case DROPBBOX_:
        case ENDPOINT_:
        case ENVELOPE_:
        case EXTENT3D_:
        case FORCE_2D_:
        case FORCE_3D_:
        case FORCE_4D_:
        case GEOMETRY_:
        case GET_BYTE_:
        case GREATEST_:
        case HOSTMASK_:
        case INTERVAL_:
        case ISCLOSED_:
        case ISFINITE_:
        case ISSIMPLE_:
        case LAST_DAY_:
        case LENGTH2D_:
        case LENGTH3D_:
        case LONG_RAW_:
        case LONGTEXT_:
        case LVARCHAR_:
        case MEM_SIZE_:
        case NATIONAL_:
        case NEXT_DAY_:
        case PASSWORD_:
        case REGCLASS_:
        case REGR_SXX_:
        case REGR_SXY_:
        case REGR_SYY_:
        case SET_BYTE_:
        case SETPOINT_:
        case SIMPLIFY_:
        case SMALLINT_:
        case ST_ASGML_:
        case ST_ASKML_:
        case ST_ASSVG_:
        case ST_BOX2D_:
        case ST_BOX3D_:
        case ST_BYTEA_:
        case ST_MULTI_:
        case ST_NDIMS_:
        case ST_POINT_:
        case ST_SCALE_:
        case ST_WIDTH_:
        case TINYTEXT_:
        case TO_ASCII_:
        case TRUNCATE_:
        case VARCHAR2_:
        case VARIANCE_:
        case VAR_SAMP_:
        case ASHEXEWKB_:
        case BROADCAST_:
        case CHARACHTER_:
        case COVAR_POP_:
        case DATEPART_:
        case DAYOFWEEK_:
        case DAYOFYEAR_:
        case DIMENSION_:
        case FORCE_3DM_:
        case FORCE_3DZ_:
        case GEOMETRYN_:
        case LINEMERGE_:
        case LOCALTIME_:
        case MONTHNAME_:
        case REGR_AVGX_:
        case REGR_AVGY_:
        case ST_AFFINE_:
        case ST_AREA2D_:
        case ST_ASEWKB_:
        case ST_ASEWKT_:
        case ST_ASTEXT_:
        case ST_BUFFER_:
        case ST_COVERS_:
        case ST_EQUALS_:
        case ST_EXTENT_:
        case ST_FACTOR_:
        case ST_HASARC_:
        case ST_HEIGHT_:
        case ST_ISRING_:
        case ST_LENGTH_:
        case ST_NRINGS_:
        case ST_POINTN_:
        case ST_RELATE_:
        case ST_ROTATE_:
        case ST_WITHIN_:
        case ST_ZMFLAG_:
        case SUBSTRING_:
        case TIMEOFDAY_:
        case TIMESTAMP_:
        case TO_NUMBER_:
        case TRANSFORM_:
        case TRANSLATE_:
        case VARBINARY_:
        case ADD_MONTHS_:
        case BIGINTEGER_:
        case BIT_LENGTH_:
        case COVAR_SAMP_:
        case DATETRUNC_:
        case DAYOFMONTH_:
        case DIFFERENCE_:
        case INTERSECTS_:
        case MEDIUMTEXT_:
        case REGR_COUNT_:
        case REGR_SLOPE_:
        case SEGMENTIZE_:
        case SMALLFLOAT_:
        case SMALLMONEY_:
        case SNAPTOGRID_:
        case SPLIT_PART_:
        case STARTPOINT_:
        case ST_AZIMUTH_:
        case ST_CHIP_IN_:
        case ST_COLLECT_:
        case ST_CROSSES_:
        case STDDEV_POP_:
        case ST_DWITHIN_:
        case ST_GEOHASH_:
        case ST_ISEMPTY_:
        case ST_ISVALID_:
        case ST_NPOINTS_:
        case ST_POLYGON_:
        case ST_REVERSE_:
        case ST_ROTATEX_:
        case ST_ROTATEY_:
        case ST_ROTATEZ_:
        case ST_SETSRID_:
        case ST_SUMMARY_:
        case ST_TOUCHES_:
        case TRANSSCALE_:
        case WEEKOFYEAR_:
        case BOX3DEXTENT_:
        case CHAR_LENGTH_:
        case PERIMETER2D_:
        case PERIMETER3D_:
        case QUOTE_IDENT_:
        case REMOVEPOINT_:
        case SET_MASKLEN_:
        case ST_ADDPOINT_:
        case ST_ASBINARY_:
        case ST_BOUNDARY_:
        case ST_CENTROID_:
        case ST_CHIP_OUT_:
        case ST_CONTAINS_:
        case ST_COORDDIM_:
        case ST_DATATYPE_:
        case STDDEV_SAMP_:
        case ST_DISJOINT_:
        case ST_DISTANCE_:
        case ST_ENDPOINT_:
        case ST_ENVELOPE_:
        case ST_EXTENT3D_:
        case ST_FORCE_2D_:
        case ST_FORCE_3D_:
        case ST_FORCE_4D_:
        case ST_FORCERHR_:
        case ST_GEOMETRY_:
        case ST_GMLTOSQL_:
        case ST_ISCLOSED_:
        case ST_ISSIMPLE_:
        case ST_LENGTH2D_:
        case ST_LENGTH3D_:
        case ST_MEM_SIZE_:
        case ST_OVERLAPS_:
        case ST_SETPOINT_:
        case ST_SIMPLIFY_:
        case ST_WKBTOSQL_:
        case ST_WKTTOSQL_:
        case CURRENTDATE_:
        case CURRENT_TIME_:
        case CURRENT_USER_:
        case EXTERIORRING_:
        case GEOMETRYTYPE_:
        case GEOMFROMEWKT_:
        case GEOMFROMTEXT_:
        case INTERSECTION_:
        case JUSTIFY_DAYS_:
        case LONG_VARCHAR_:
        case OCTET_LENGTH_:
        case ST_ASGEOJSON_:
        case ST_ASHEXEWKB_:
        case ST_BUILDAREA_:
        case ST_COVEREDBY_:
        case ST_DIMENSION_:
        case ST_FORCE_3DM_:
        case ST_FORCE_3DZ_:
        case ST_GEOMETRYN_:
        case ST_LINEMERGE_:
        case ST_MAKEPOINT_:
        case ST_NUMPOINTS_:
        case ST_PERIMETER_:
        case ST_SETFACTOR_:
        case ST_TRANSFORM_:
        case ST_TRANSLATE_:
        case TO_TIMESTAMP_:
        case VARIANCE_POP_:
        case WIDTH_BUCKET_:
        case INTERIORRINGN_:
        case JUSTIFY_HOURS_:
        case NUMGEOMETRIES_:
        case QUOTE_LITERAL_:
        case SAMLLDATETIME_:
        case ST_ADDMEASURE_:
        case ST_CONVEXHULL_:
        case ST_DIFFERENCE_:
        case ST_INTERSECTS_:
        case ST_MAKEPOINTM_:
        case ST_MEMCOLLECT_:
        case ST_SEGMENTIZE_:
        case ST_SNAPTOGRID_:
        case ST_STARTPOINT_:
        case ST_TRANSSCALE_:
        case SYMDIFFERENCE_:
        case VARIANCE_SAMP_:
        case CURRENT_SCHEMA_:
        case LINE_SUBSTRING_:
        case LOCALTIMESTAMP_:
        case MONTHS_BETWEEN_:
        case REGEXP_REPLACE_:
        case REGR_INTERCEPT_:
        case ST_COMPRESSION_:
        case ST_CURVETOLINE_:
        case ST_FIND_EXTENT_:
        case ST_GEOGFROMWKB_:
        case ST_GEOMFROMGML_:
        case ST_GEOMFROMKML_:
        case ST_GEOMFROMWKB_:
        case ST_LINEFROMWKB_:
        case ST_LINETOCURVE_:
        case ST_LONGESTLINE_:
        case ST_MAKEPOLYGON_:
        case ST_MAXDISTANCE_:
        case ST_PERIMETER2D_:
        case ST_PERIMETER3D_:
        case ST_POLYFROMWKB_:
        case ST_REMOVEPOINT_:
        case CLOCK_TIMESTAMP_:
        case ST_CLOSESTPOINT_:
        case ST_COMBINE_BBOX_:
        case ST_DFULLYWITHIN_:
        case ST_EXTERIORRING_:
        case ST_GEOGFROMTEXT_:
        case ST_GEOMETRYTYPE_:
        case ST_GEOMFROMEWKB_:
        case ST_GEOMFROMEWKT_:
        case ST_GEOMFROMTEXT_:
        case ST_INTERSECTION_:
        case ST_LINEFROMTEXT_:
        case ST_MAKEENVELOPE_:
        case ST_MLINEFROMWKB_:
        case ST_MPOLYFROMWKB_:
        case ST_POINTFROMWKB_:
        case ST_POLYFROMTEXT_:
        case ST_SHORTESTLINE_:
        case CHARACTER_LENGTH_:
        case CURRENT_DATABASE_:
        case FORCE_COLLECTION_:
        case JUSTIFY_INTERVAL_:
        case NUMINTERIORRINGS_:
        case POSTGIS_DROPBBOX_:
        case ST_INTERIORRINGN_:
        case ST_ISVALIDREASON_:
        case ST_MLINEFROMTEXT_:
        case ST_MPOINTFROMWKB_:
        case ST_MPOLYFROMTEXT_:
        case ST_NUMGEOMETRIES_:
        case ST_POINTFROMTEXT_:
        case ST_SYMDIFFERENCE_:
        case ADDGEOMETRYCOLUMN_:
        case CURRENT_TIMESTAMP_:
        case LINE_LOCATE_POINT_:
        case ST_BDPOLYFROMTEXT_:
        case ST_LINE_SUBSTRING_:
        case ST_MPOINTFROMTEXT_:
        case ST_ORDERINGEQUALS_:
        case ST_POINTONSURFACE_:
        case ST_POLYGONFROMWKB_:
        case PG_CLIENT_ENCODING_:
        case ST_BDMPOLYFROMTEXT_:
        case ST_DISTANCE_SPHERE_:
        case ST_GEOMCOLLFROMWKB_:
        case ST_LENGTH_SPHEROID_:
        case ST_NUMINTERIORRING_:
        case ST_POLYGONFROMTEXT_:
        case ST_SHIFT_LONGITUDE_:
        case STATEMENT_TIMESTAMP_:
        case ST_CONTAINSPROPERLY_:
        case ST_FORCE_COLLECTION_:
        case ST_GEOMCOLLFROMTEXT_:
        case ST_MULTILINEFROMWKB_:
        case ST_MULTIPOLYFROMWKB_:
        case ST_NUMINTERIORRINGS_:
        case ST_POSTGIS_GIST_SEL_:
        case LOCATE_ALONG_MEASURE_:
        case ST_COLLECTIONEXTRACT_:
        case ST_DISTANCE_SPHEROID_:
        case ST_GEOGRAPHYFROMTEXT_:
        case ST_HAUSDORFFDISTANCE_:
        case ST_LENGTH2D_SPHEROID_:
        case ST_LENGTH3D_SPHEROID_:
        case ST_LINE_LOCATE_POINT_:
        case ST_LINESTRINGFROMWKB_:
        case ST_MULTIPOINTFROMWKB_:
        case ST_LINEFROMMULTIPOINT_:
        case ST_MULTIPOINTFROMTEXT_:
        case TRANSACTION_TIMESTAMP_:
        case LINE_INTERPOLATE_POINT_:
        case ST_POINT_INSIDE_CIRCLE_:
        case ST_SYMMETRICDIFFERENCE_:
        case LOCATE_BETWEEN_MEASURES_:
        case ST_LOCATE_ALONG_MEASURE_:
        case ST_MULTIPOLYGONFROMTEXT_:
        case ST_POSTGIS_GIST_JOINSEL_:
        case ST_LINECROSSINGDIRECTION_:
        case ST_MINIMUMBOUNDINGCIRCLE_:
        case ST_LINE_INTERPOLATE_POINT_:
        case ST_LOCATEBETWEENELEVATIONS_:
        case ST_LOCATE_BETWEEN_MEASURES_:
        case ST_MULTILINESTRINGFROMTEXT_:
        case ST_SIMPLIFYPRESERVETOPOLOGY_:
        case WITH_TIMEZONE_:
        case WITHOUT_TIMEZONE_:
        case DOUBLE_PRECISION_:
        case BOOLEAN_:
        case POSITION_:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
          n33 = Identifier(prn);
              n28 = new NodeChoice(n33, 2);
          break;
        default:
          jj_la1[162] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n27.addNode(n28);
        break;
      default:
        jj_la1[163] = jj_gen;
        ;
      }
        n16.addNode(n27);
        n15.addNode(n16);
    }
     n15.nodes.trimToSize();
     {if (true) return new columnListIndexSpec(n0,n8,n15);}
    throw new Error("Missing return statement in function");
  }

  final public createTable createTable(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeOptional n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   TableName n17;
   NodeChoice n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   CreateDefinition n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   CreateDefinition n27;
   NodeToken n28;
   Token n29;
   NodeOptional n30 = new NodeOptional();
   PartitionDeclare n31;
   NodeOptional n32 = new NodeOptional();
   inheritsDef n33;
   NodeOptional n34 = new NodeOptional();
   WithXRowID n35;
   NodeOptional n36 = new NodeOptional();
   OnCommitClause n37;
   NodeOptional n38 = new NodeOptional();
   tablespaceDef n39;
   NodeSequence n40;
   NodeOptional n41 = new NodeOptional();
   NodeSequence n42;
   NodeToken n43;
   Token n44;
   ColumnNameList n45;
   NodeToken n46;
   Token n47;
   NodeOptional n48 = new NodeOptional();
   PartitionDeclare n49;
   NodeOptional n50 = new NodeOptional();
   WithXRowID n51;
   NodeOptional n52 = new NodeOptional();
   OnCommitClause n53;
   NodeOptional n54 = new NodeOptional();
   tablespaceDef n55;
   NodeToken n56;
   Token n57;
   SelectWithoutOrderAndSet n58;

   {
   }
    n1 = jj_consume_token(CREATE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case TEMP_:
    case LOCAL_:
    case GLOBAL_:
    case TEMPORARY_:
        n4 = new NodeOptional();
        n3 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case LOCAL_:
      case GLOBAL_:
        switch (jj_nt.kind) {
        case LOCAL_:
          n7 = jj_consume_token(LOCAL_);
                          n6 = JTBToolkit.makeNodeToken(n7);
              n5 = new NodeChoice(n6, 0);
          break;
        case GLOBAL_:
          n9 = jj_consume_token(GLOBAL_);
                           n8 = JTBToolkit.makeNodeToken(n9);
              n5 = new NodeChoice(n8, 1);
          break;
        default:
          jj_la1[164] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n4.addNode(n5);
        break;
      default:
        jj_la1[165] = jj_gen;
        ;
      }
        n3.addNode(n4);
      switch (jj_nt.kind) {
      case TEMP_:
        n12 = jj_consume_token(TEMP_);
                          n11 = JTBToolkit.makeNodeToken(n12);
              n10 = new NodeChoice(n11, 0);
        break;
      case TEMPORARY_:
        n14 = jj_consume_token(TEMPORARY_);
                               n13 = JTBToolkit.makeNodeToken(n14);
              n10 = new NodeChoice(n13, 1);
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n3.addNode(n10);
        n2.addNode(n3);
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    n16 = jj_consume_token(TABLE_);
                  n15 = JTBToolkit.makeNodeToken(n16);
    n17 = TableName(prn);
    if (jj_2_33(3)) {
           n19 = new NodeSequence(10);
      n21 = jj_consume_token(PARENTHESIS_START_);
                                    n20 = JTBToolkit.makeNodeToken(n21);
           n19.addNode(n20);
      n22 = CreateDefinition(prn);
           n19.addNode(n22);
      label_16:
      while (true) {
        switch (jj_nt.kind) {
        case 781:
          ;
          break;
        default:
          jj_la1[168] = jj_gen;
          break label_16;
        }
              n24 = new NodeSequence(2);
        n26 = jj_consume_token(781);
                      n25 = JTBToolkit.makeNodeToken(n26);
              n24.addNode(n25);
        n27 = CreateDefinition(prn);
              n24.addNode(n27);
              n23.addNode(n24);
      }
           n23.nodes.trimToSize();
           n19.addNode(n23);
      n29 = jj_consume_token(PARENTHESIS_CLOSE_);
                                    n28 = JTBToolkit.makeNodeToken(n29);
           n19.addNode(n28);
      switch (jj_nt.kind) {
      case ON_:
      case REPLICATED_:
      case PARTITIONINGKEY_:
      case ROUND_ROBIN_:
      case PARTITION_WITH_:
        n31 = PartitionDeclare(prn);
              n30.addNode(n31);
        break;
      default:
        jj_la1[169] = jj_gen;
        ;
      }
           n19.addNode(n30);
      switch (jj_nt.kind) {
      case INHERITS_:
        n33 = inheritsDef(prn);
              n32.addNode(n33);
        break;
      default:
        jj_la1[170] = jj_gen;
        ;
      }
           n19.addNode(n32);
      switch (jj_nt.kind) {
      case WITH_XROWID_:
      case WITHOUT_XROWID_:
        n35 = WithXRowID(prn);
              n34.addNode(n35);
        break;
      default:
        jj_la1[171] = jj_gen;
        ;
      }
           n19.addNode(n34);
      switch (jj_nt.kind) {
      case ON_COMMIT_:
        n37 = OnCommitClause(prn);
              n36.addNode(n37);
        break;
      default:
        jj_la1[172] = jj_gen;
        ;
      }
           n19.addNode(n36);
      switch (jj_nt.kind) {
      case TABLESPACE_:
        n39 = tablespaceDef(prn);
              n38.addNode(n39);
        break;
      default:
        jj_la1[173] = jj_gen;
        ;
      }
           n19.addNode(n38);
           n18 = new NodeChoice(n19, 0);
    } else if (jj_2_34(2)) {
           n40 = new NodeSequence(8);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
              n42 = new NodeSequence(3);
        n44 = jj_consume_token(PARENTHESIS_START_);
                                       n43 = JTBToolkit.makeNodeToken(n44);
              n42.addNode(n43);
        n45 = ColumnNameList(prn);
              n42.addNode(n45);
        n47 = jj_consume_token(PARENTHESIS_CLOSE_);
                                       n46 = JTBToolkit.makeNodeToken(n47);
              n42.addNode(n46);
              n41.addNode(n42);
        break;
      default:
        jj_la1[174] = jj_gen;
        ;
      }
           n40.addNode(n41);
      switch (jj_nt.kind) {
      case ON_:
      case REPLICATED_:
      case PARTITIONINGKEY_:
      case ROUND_ROBIN_:
      case PARTITION_WITH_:
        n49 = PartitionDeclare(prn);
              n48.addNode(n49);
        break;
      default:
        jj_la1[175] = jj_gen;
        ;
      }
           n40.addNode(n48);
      switch (jj_nt.kind) {
      case WITH_XROWID_:
      case WITHOUT_XROWID_:
        n51 = WithXRowID(prn);
              n50.addNode(n51);
        break;
      default:
        jj_la1[176] = jj_gen;
        ;
      }
           n40.addNode(n50);
      switch (jj_nt.kind) {
      case ON_COMMIT_:
        n53 = OnCommitClause(prn);
              n52.addNode(n53);
        break;
      default:
        jj_la1[177] = jj_gen;
        ;
      }
           n40.addNode(n52);
      switch (jj_nt.kind) {
      case TABLESPACE_:
        n55 = tablespaceDef(prn);
              n54.addNode(n55);
        break;
      default:
        jj_la1[178] = jj_gen;
        ;
      }
           n40.addNode(n54);
      n57 = jj_consume_token(AS_);
                     n56 = JTBToolkit.makeNodeToken(n57);
           n40.addNode(n56);
      n58 = SelectWithoutOrderAndSet(prn);
           n40.addNode(n58);
           n18 = new NodeChoice(n40, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new createTable(n0,n2,n15,n17,n18);}
    throw new Error("Missing return statement in function");
  }

  final public OnCommitClause OnCommitClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(ON_COMMIT_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PRESERVE_ROWS_:
      n4 = jj_consume_token(PRESERVE_ROWS_);
                               n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
      break;
    case DELETE_ROWS_:
      n6 = jj_consume_token(DELETE_ROWS_);
                             n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
      break;
    case DROP_:
      n8 = jj_consume_token(DROP_);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n2 = new NodeChoice(n7, 2);
      break;
    default:
      jj_la1[179] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OnCommitClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public WithXRowID WithXRowID(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
    switch (jj_nt.kind) {
    case WITH_XROWID_:
      n2 = jj_consume_token(WITH_XROWID_);
                          n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case WITHOUT_XROWID_:
      n4 = jj_consume_token(WITHOUT_XROWID_);
                             n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new WithXRowID(n0);}
    throw new Error("Missing return statement in function");
  }

  final public tablespaceDef tablespaceDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
    n1 = jj_consume_token(TABLESPACE_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
     {if (true) return new tablespaceDef(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public inheritsDef inheritsDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(INHERITS_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
    label_17:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[181] = jj_gen;
        break label_17;
      }
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = TableName(prn);
        n6.addNode(n9);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new inheritsDef(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public createView createView(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TableName n7;
   NodeOptional n8 = new NodeOptional();
   ColumnNameListWithParenthesis n9;
   NodeToken n10;
   Token n11;
   SelectWithoutOrder n12;

   {
   }
    switch (jj_nt.kind) {
    case CREATE_:
      n2 = jj_consume_token(CREATE_);
                        n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case REPLACE_:
      n4 = jj_consume_token(REPLACE_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[182] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(VIEW_);
                n5 = JTBToolkit.makeNodeToken(n6);
    n7 = TableName(prn);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n9 = ColumnNameListWithParenthesis(prn);
        n8.addNode(n9);
      break;
    default:
      jj_la1[183] = jj_gen;
      ;
    }
    n11 = jj_consume_token(AS_);
               n10 = JTBToolkit.makeNodeToken(n11);
    n12 = SelectWithoutOrder(prn);
     {if (true) return new createView(n0,n5,n7,n8,n10,n12);}
    throw new Error("Missing return statement in function");
  }

  final public ColumnNameListWithParenthesis ColumnNameListWithParenthesis(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   ColumnNameList n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(PARENTHESIS_START_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ColumnNameList(prn);
    n4 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ColumnNameListWithParenthesis(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public DropView DropView(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(VIEW_);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
     {if (true) return new DropView(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public dropTable dropTable(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   TableName n9;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(TABLE_);
                 n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
    label_18:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[184] = jj_gen;
        break label_18;
      }
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = TableName(prn);
        n6.addNode(n9);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
     {if (true) return new dropTable(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public InsertTable InsertTable(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableName n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   ColumnNameList n10;
   NodeToken n11;
   Token n12;
   NodeChoice n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   SQLExpressionList n19;
   NodeToken n20;
   Token n21;
   SelectWithoutOrderWithParenthesis n22;

   {
   }
    n1 = jj_consume_token(INSERT_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case INTO_:
      n4 = jj_consume_token(INTO_);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[185] = jj_gen;
      ;
    }
    n5 = TableName(prn);
    if (jj_2_35(2147483647)) {
        n7 = new NodeSequence(3);
      n9 = jj_consume_token(PARENTHESIS_START_);
                                n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = ColumnNameList(prn);
        n7.addNode(n10);
      n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                                 n11 = JTBToolkit.makeNodeToken(n12);
        n7.addNode(n11);
        n6.addNode(n7);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case VALUES_:
           n14 = new NodeSequence(4);
      n16 = jj_consume_token(VALUES_);
                         n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
      n18 = jj_consume_token(PARENTHESIS_START_);
                                    n17 = JTBToolkit.makeNodeToken(n18);
           n14.addNode(n17);
      n19 = SQLExpressionList(prn);
           n14.addNode(n19);
      n21 = jj_consume_token(PARENTHESIS_CLOSE_);
                                    n20 = JTBToolkit.makeNodeToken(n21);
           n14.addNode(n20);
           n13 = new NodeChoice(n14, 0);
      break;
    case PARENTHESIS_START_:
    case SELECT_:
      n22 = SelectWithoutOrderWithParenthesis(prn);
           n13 = new NodeChoice(n22, 1);
      break;
    default:
      jj_la1[186] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new InsertTable(n0,n2,n5,n6,n13);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryKeyDef PrimaryKeyDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNameList n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(PRIMARYKEY_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ColumnNameList(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new PrimaryKeyDef(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public CheckDef CheckDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   skip_to_matching_brace n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(CHECK_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = skip_to_matching_brace(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new CheckDef(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  skip_to_matching_brace skip_to_matching_brace(PrintStream prn) throws ParseException {
   Token tok;
   int nesting = 1;
   String str = new String();
   while ( true )
   {
      tok = getToken(1);
      if ( tok.kind == PARENTHESIS_START_ )
         nesting++;
      if ( tok.kind == PARENTHESIS_CLOSE_ )
      {
         nesting--;
         if ( nesting == 0 )
            break;
      }
      str += tok.image + " ";
      tok = getNextToken();
   }
   return new skip_to_matching_brace(str);
  }

  final public CreateDefinition CreateDefinition(PrintStream prn) throws ParseException {
   NodeChoice n0;
   ColumnDeclare n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   Constraint n4;
   NodeChoice n5;
   PrimaryKeyDef n6;
   ForeignKeyDef n7;
   CheckDef n8;

   {
   }
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n1 = ColumnDeclare(prn);
        n0 = new NodeChoice(n1, 0);
      break;
    case CHECK_:
    case CONSTRAINT_:
    case PRIMARYKEY_:
    case FOREIGNKEY_:
        n2 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case CONSTRAINT_:
        n4 = Constraint(prn);
           n3.addNode(n4);
        break;
      default:
        jj_la1[187] = jj_gen;
        ;
      }
        n2.addNode(n3);
      switch (jj_nt.kind) {
      case PRIMARYKEY_:
        n6 = PrimaryKeyDef(prn);
              n5 = new NodeChoice(n6, 0);
        break;
      case FOREIGNKEY_:
        n7 = ForeignKeyDef(prn);
              n5 = new NodeChoice(n7, 1);
        break;
      case CHECK_:
        n8 = CheckDef(prn);
              n5 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[188] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n5);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[189] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new CreateDefinition(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ColumnDeclare ColumnDeclare(PrintStream prn) throws ParseException {
   Identifier n0;
   types n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   DefaultSpec n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   SQLComplexExpression n22;
   NodeToken n23;
   Token n24;

   {
   }
    n0 = Identifier(prn);
    n1 = types();
    switch (jj_nt.kind) {
    case NOT_:
    case NULL_:
      switch (jj_nt.kind) {
      case NOT_:
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(NOT_);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n8 = jj_consume_token(NULL_);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
           n3 = new NodeChoice(n4, 0);
        break;
      case NULL_:
        n10 = jj_consume_token(NULL_);
                       n9 = JTBToolkit.makeNodeToken(n10);
           n3 = new NodeChoice(n9, 1);
        break;
      default:
        jj_la1[190] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[191] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case DEFAULT_:
      n12 = DefaultSpec(prn);
        n11.addNode(n12);
      break;
    default:
      jj_la1[192] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PRIMARYKEY_:
      n15 = jj_consume_token(PRIMARYKEY_);
                          n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      break;
    default:
      jj_la1[193] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case CHECK_:
        n17 = new NodeSequence(4);
      n19 = jj_consume_token(CHECK_);
                     n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n21 = jj_consume_token(PARENTHESIS_START_);
                                 n20 = JTBToolkit.makeNodeToken(n21);
        n17.addNode(n20);
      n22 = SQLComplexExpression(prn);
        n17.addNode(n22);
      n24 = jj_consume_token(PARENTHESIS_CLOSE_);
                                 n23 = JTBToolkit.makeNodeToken(n24);
        n17.addNode(n23);
        n16.addNode(n17);
      break;
    default:
      jj_la1[194] = jj_gen;
      ;
    }
     {if (true) return new ColumnDeclare(n0,n1,n2,n11,n13,n16);}
    throw new Error("Missing return statement in function");
  }

  final public ForeignKeyDef ForeignKeyDef(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   ColumnNameList n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   TableName n9;
   NodeToken n10;
   Token n11;
   ColumnNameList n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(FOREIGNKEY_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ColumnNameList(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(REFERENCES_);
                      n7 = JTBToolkit.makeNodeToken(n8);
    n9 = TableName(prn);
    n11 = jj_consume_token(PARENTHESIS_START_);
                              n10 = JTBToolkit.makeNodeToken(n11);
    n12 = ColumnNameList(prn);
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new ForeignKeyDef(n0,n2,n4,n5,n7,n9,n10,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  final public DefaultSpec DefaultSpec(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SQLSimpleExpression n2;

   {
   }
    n1 = jj_consume_token(DEFAULT_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SQLSimpleExpression(prn);
     {if (true) return new DefaultSpec(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PartitionDeclare PartitionDeclare(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   Identifier n5;
   NodeToken n6;
   Token n7;
   PartitionChoice n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeSequence n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   PartitionChoice n31;

   {
   }
    switch (jj_nt.kind) {
    case PARTITIONINGKEY_:
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(PARTITIONINGKEY_);
                              n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      switch (jj_nt.kind) {
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n5 = Identifier(prn);
           n4.addNode(n5);
        break;
      default:
        jj_la1[195] = jj_gen;
        ;
      }
        n1.addNode(n4);
      n7 = jj_consume_token(ON_);
                 n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      n8 = PartitionChoice(prn);
        n1.addNode(n8);
        n0 = new NodeChoice(n1, 0);
      break;
    case PARTITION_WITH_:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(PARTITION_WITH_);
                              n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n13 = jj_consume_token(PARENT_);
                      n12 = JTBToolkit.makeNodeToken(n13);
        n9.addNode(n12);
        n0 = new NodeChoice(n9, 1);
      break;
    case REPLICATED_:
      n15 = jj_consume_token(REPLICATED_);
                          n14 = JTBToolkit.makeNodeToken(n15);
        n0 = new NodeChoice(n14, 2);
      break;
    case ON_:
        n16 = new NodeSequence(3);
      n18 = jj_consume_token(ON_);
                  n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      switch (jj_nt.kind) {
      case NODE_:
        n21 = jj_consume_token(NODE_);
                          n20 = JTBToolkit.makeNodeToken(n21);
              n19 = new NodeChoice(n20, 0);
        break;
      case NODES_:
        n23 = jj_consume_token(NODES_);
                           n22 = JTBToolkit.makeNodeToken(n23);
              n19 = new NodeChoice(n22, 1);
        break;
      default:
        jj_la1[196] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n16.addNode(n19);
      n25 = jj_consume_token(INT_LITERAL);
                          n24 = JTBToolkit.makeNodeToken(n25);
        n16.addNode(n24);
        n0 = new NodeChoice(n16, 3);
      break;
    case ROUND_ROBIN_:
        n26 = new NodeSequence(3);
      n28 = jj_consume_token(ROUND_ROBIN_);
                           n27 = JTBToolkit.makeNodeToken(n28);
        n26.addNode(n27);
      n30 = jj_consume_token(ON_);
                  n29 = JTBToolkit.makeNodeToken(n30);
        n26.addNode(n29);
      n31 = PartitionChoice(prn);
        n26.addNode(n31);
        n0 = new NodeChoice(n26, 4);
      break;
    default:
      jj_la1[197] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PartitionDeclare(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PartitionChoice PartitionChoice(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodePartitionList n9;

   {
   }
    switch (jj_nt.kind) {
    case ALL_:
      n2 = jj_consume_token(ALL_);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case NODE_:
    case NODES_:
        n3 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case NODE_:
        n6 = jj_consume_token(NODE_);
                         n5 = JTBToolkit.makeNodeToken(n6);
              n4 = new NodeChoice(n5, 0);
        break;
      case NODES_:
        n8 = jj_consume_token(NODES_);
                          n7 = JTBToolkit.makeNodeToken(n8);
              n4 = new NodeChoice(n7, 1);
        break;
      default:
        jj_la1[198] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n3.addNode(n4);
      n9 = NodePartitionList(prn);
        n3.addNode(n9);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[199] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PartitionChoice(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NodePartitionList NodePartitionList(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(INT_LITERAL);
                      n0 = JTBToolkit.makeNodeToken(n1);
    label_19:
    while (true) {
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(781);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(INT_LITERAL);
                         n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      if (jj_2_36(2)) {
        ;
      } else {
        break label_19;
      }
    }
     n2.nodes.trimToSize();
     {if (true) return new NodePartitionList(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public types types() throws ParseException {
   NodeChoice n0;
   IntegerDataType n1;
   SmallIntDataType n2;
   RealDataType n3;
   DoublePrecision n4;
   FloatDataType n5;
   DecimalDataType n6;
   NumericDataType n7;
   FixedDataType n8;
   CharachterDataType n9;
   VarCharDataType n10;
   DateDataType n11;
   TimeDataType n12;
   TimeStampDataType n13;
   BooleanDataType n14;
   NationalCharDataType n15;
   SerialDataType n16;
   BigSerialDataType n17;
   BigIntDataType n18;
   IntervalDataType n19;
   TextDataType n20;
   BLOBDataType n21;
   BitDataType n22;
   VarBitDataType n23;
   MacAddrDataType n24;
   CidrDataType n25;
   InetDataType n26;
   GeometryDataType n27;
   Box2DDataType n28;
   Box3DDataType n29;
   Box3DExtentDataType n30;
   RegClassDataType n31;

   {
   }
    switch (jj_nt.kind) {
    case INT_:
    case INT4_:
    case INTEGER_:
      n1 = IntegerDataType();
        n0 = new NodeChoice(n1, 0);
      break;
    case INT2_:
    case TINYINT_:
    case SMALLINT_:
      n2 = SmallIntDataType();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[200] = jj_gen;
      if (jj_2_37(2)) {
        n3 = RealDataType();
        n0 = new NodeChoice(n3, 2);
      } else {
        switch (jj_nt.kind) {
        case FLOAT8_:
        case DOUBLE_PRECISION_:
          n4 = DoublePrecision();
        n0 = new NodeChoice(n4, 3);
          break;
        case FLOAT_:
          n5 = FloatDataType();
        n0 = new NodeChoice(n5, 4);
          break;
        default:
          jj_la1[201] = jj_gen;
          if (jj_2_38(2)) {
            n6 = DecimalDataType();
        n0 = new NodeChoice(n6, 5);
          } else {
            switch (jj_nt.kind) {
            case YEAR_:
            case MONEY_:
            case NUMBER_:
            case NUMERIC_:
            case SMALLMONEY_:
              n7 = NumericDataType();
        n0 = new NodeChoice(n7, 6);
              break;
            case FIXED_:
              n8 = FixedDataType();
        n0 = new NodeChoice(n8, 7);
              break;
            case CHAR_:
            case CHARACHTER_:
              n9 = CharachterDataType();
        n0 = new NodeChoice(n9, 8);
              break;
            case VARCHAR_:
            case TINYTEXT_:
            case VARCHAR2_:
              n10 = VarCharDataType();
        n0 = new NodeChoice(n10, 9);
              break;
            case DATE_:
              n11 = DateDataType();
        n0 = new NodeChoice(n11, 10);
              break;
            case TIME_:
              n12 = TimeDataType();
        n0 = new NodeChoice(n12, 11);
              break;
            case DATETIME_:
            case TIMESTAMP_:
            case SAMLLDATETIME_:
              n13 = TimeStampDataType();
        n0 = new NodeChoice(n13, 12);
              break;
            case BOOLEAN_:
              n14 = BooleanDataType();
        n0 = new NodeChoice(n14, 13);
              break;
            case NCHAR_:
            case NATIONAL_:
              n15 = NationalCharDataType();
        n0 = new NodeChoice(n15, 14);
              break;
            case SERIAL_:
              n16 = SerialDataType();
        n0 = new NodeChoice(n16, 15);
              break;
            case BIGSERIAL_:
              n17 = BigSerialDataType();
        n0 = new NodeChoice(n17, 16);
              break;
            case INT8_:
            case BIGINT_:
            case BIGINTEGER_:
              n18 = BigIntDataType();
        n0 = new NodeChoice(n18, 17);
              break;
            case INTERVAL_:
              n19 = IntervalDataType();
        n0 = new NodeChoice(n19, 18);
              break;
            case CLOB_:
            case LONG_:
            case TEXT_:
            case LONGTEXT_:
            case LVARCHAR_:
            case MEDIUMTEXT_:
            case LONG_VARCHAR_:
              n20 = TextDataType();
        n0 = new NodeChoice(n20, 19);
              break;
            case RAW_:
            case BLOB_:
            case BYTE_:
            case BYTEA_:
            case IMAGE_:
            case BINARY_:
            case LONG_RAW_:
            case VARBINARY_:
              n21 = BLOBDataType();
        n0 = new NodeChoice(n21, 20);
              break;
            case BIT_:
              n22 = BitDataType();
        n0 = new NodeChoice(n22, 21);
              break;
            case VARBIT_:
              n23 = VarBitDataType();
        n0 = new NodeChoice(n23, 22);
              break;
            case MACADDR_:
              n24 = MacAddrDataType();
        n0 = new NodeChoice(n24, 23);
              break;
            case CIDR_:
              n25 = CidrDataType();
        n0 = new NodeChoice(n25, 24);
              break;
            case INET_:
              n26 = InetDataType();
        n0 = new NodeChoice(n26, 25);
              break;
            case GEOMETRY_:
              n27 = GeometryDataType();
        n0 = new NodeChoice(n27, 26);
              break;
            case BOX2D_:
              n28 = Box2DDataType();
        n0 = new NodeChoice(n28, 27);
              break;
            case BOX3D_:
              n29 = Box3DDataType();
        n0 = new NodeChoice(n29, 28);
              break;
            case BOX3DEXTENT_:
              n30 = Box3DExtentDataType();
        n0 = new NodeChoice(n30, 29);
              break;
            case REGCLASS_:
              n31 = RegClassDataType();
        n0 = new NodeChoice(n31, 30);
              break;
            default:
              jj_la1[202] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
     {if (true) return new types(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DatetimeField DatetimeField() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
    switch (jj_nt.kind) {
    case YEAR_:
      n2 = jj_consume_token(YEAR_);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case QUARTER_:
      n4 = jj_consume_token(QUARTER_);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case MONTH_:
      n6 = jj_consume_token(MONTH_);
                    n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case WEEK_:
      n8 = jj_consume_token(WEEK_);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case DAY_:
      n10 = jj_consume_token(DAY_);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case HOUR_:
      n12 = jj_consume_token(HOUR_);
                    n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case MINUTE_:
      n14 = jj_consume_token(MINUTE_);
                      n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case SECOND_:
      n16 = jj_consume_token(SECOND_);
                      n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[203] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DatetimeField(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntervalQualifier IntervalQualifier() throws ParseException {
   DatetimeField n0;
   NodeToken n1;
   Token n2;
   DatetimeField n3;

   {
   }
    n0 = DatetimeField();
    n2 = jj_consume_token(TO_);
              n1 = JTBToolkit.makeNodeToken(n2);
    n3 = DatetimeField();
     {if (true) return new IntervalQualifier(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  final public IntervalDataType IntervalDataType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   IntervalQualifier n3;

   {
   }
    n1 = jj_consume_token(INTERVAL_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_39(2)) {
      n3 = IntervalQualifier();
        n2.addNode(n3);
    } else {
      ;
    }
     {if (true) return new IntervalDataType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public TextDataType TextDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case TEXT_:
      n2 = jj_consume_token(TEXT_);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CLOB_:
      n4 = jj_consume_token(CLOB_);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case LONG_:
      n6 = jj_consume_token(LONG_);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case LONG_VARCHAR_:
      n8 = jj_consume_token(LONG_VARCHAR_);
                           n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case LONGTEXT_:
      n10 = jj_consume_token(LONGTEXT_);
                        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LVARCHAR_:
      n12 = jj_consume_token(LVARCHAR_);
                        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case MEDIUMTEXT_:
      n14 = jj_consume_token(MEDIUMTEXT_);
                          n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    default:
      jj_la1[204] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TextDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BLOBDataType BLOBDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   {
   }
    switch (jj_nt.kind) {
    case BLOB_:
      n2 = jj_consume_token(BLOB_);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case BYTEA_:
      n4 = jj_consume_token(BYTEA_);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case BYTE_:
      n6 = jj_consume_token(BYTE_);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case BINARY_:
      n8 = jj_consume_token(BINARY_);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case IMAGE_:
      n10 = jj_consume_token(IMAGE_);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LONG_RAW_:
      n12 = jj_consume_token(LONG_RAW_);
                        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case RAW_:
      n14 = jj_consume_token(RAW_);
                   n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case VARBINARY_:
      n16 = jj_consume_token(VARBINARY_);
                         n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_la1[205] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BLOBDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BitDataType BitDataType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;

   {
   }
    n1 = jj_consume_token(BIT_);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n3 = LengthSpec();
        n2.addNode(n3);
      break;
    default:
      jj_la1[206] = jj_gen;
      ;
    }
     {if (true) return new BitDataType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public VarBitDataType VarBitDataType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;

   {
   }
    n1 = jj_consume_token(VARBIT_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n3 = LengthSpec();
        n2.addNode(n3);
      break;
    default:
      jj_la1[207] = jj_gen;
      ;
    }
     {if (true) return new VarBitDataType(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public MacAddrDataType MacAddrDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(MACADDR_);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new MacAddrDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CidrDataType CidrDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(CIDR_);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new CidrDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InetDataType InetDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INET_);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new InetDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public GeometryDataType GeometryDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(GEOMETRY_);
                    n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new GeometryDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Box2DDataType Box2DDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BOX2D_);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Box2DDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Box3DDataType Box3DDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BOX3D_);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Box3DDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Box3DExtentDataType Box3DExtentDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BOX3DEXTENT_);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Box3DExtentDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RegClassDataType RegClassDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(REGCLASS_);
                    n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new RegClassDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanDataType BooleanDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BOOLEAN_);
                   n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SmallIntDataType SmallIntDataType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case INT2_:
    case SMALLINT_:
        n1 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case SMALLINT_:
        n4 = jj_consume_token(SMALLINT_);
                             n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case INT2_:
        n6 = jj_consume_token(INT2_);
                         n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[208] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      switch (jj_nt.kind) {
      case SERIAL_:
        n9 = jj_consume_token(SERIAL_);
                        n8 = JTBToolkit.makeNodeToken(n9);
           n7.addNode(n8);
        break;
      default:
        jj_la1[209] = jj_gen;
        ;
      }
        n1.addNode(n7);
      n10 = UnsignedZeroFillSpecs();
        n1.addNode(n10);
        n0 = new NodeChoice(n1, 0);
      break;
    case TINYINT_:
      n12 = jj_consume_token(TINYINT_);
                       n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 1);
      break;
    default:
      jj_la1[210] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SmallIntDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BigIntDataType BigIntDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;

   {
   }
    switch (jj_nt.kind) {
    case BIGINT_:
      n2 = jj_consume_token(BIGINT_);
                        n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case BIGINTEGER_:
      n4 = jj_consume_token(BIGINTEGER_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case INT8_:
      n6 = jj_consume_token(INT8_);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[211] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case SERIAL_:
      n9 = jj_consume_token(SERIAL_);
                     n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      break;
    default:
      jj_la1[212] = jj_gen;
      ;
    }
    n10 = UnsignedZeroFillSpecs();
     {if (true) return new BigIntDataType(n0,n7,n10);}
    throw new Error("Missing return statement in function");
  }

  final public SerialDataType SerialDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SERIAL_);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new SerialDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BigSerialDataType BigSerialDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BIGSERIAL_);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BigSerialDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RealDataType RealDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnsignedZeroFillSpecs n7;

   {
   }
    switch (jj_nt.kind) {
    case REAL_:
      n2 = jj_consume_token(REAL_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SMALLFLOAT_:
      n4 = jj_consume_token(SMALLFLOAT_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case FLOAT4_:
      n6 = jj_consume_token(FLOAT4_);
                        n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[213] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n7 = UnsignedZeroFillSpecs();
     {if (true) return new RealDataType(n0,n7);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerDataType IntegerDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   UnsignedZeroFillSpecs n10;

   {
   }
    switch (jj_nt.kind) {
    case INT_:
      n2 = jj_consume_token(INT_);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTEGER_:
      n4 = jj_consume_token(INTEGER_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case INT4_:
      n6 = jj_consume_token(INT4_);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[214] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case SERIAL_:
      n9 = jj_consume_token(SERIAL_);
                     n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      break;
    default:
      jj_la1[215] = jj_gen;
      ;
    }
    n10 = UnsignedZeroFillSpecs();
     {if (true) return new IntegerDataType(n0,n7,n10);}
    throw new Error("Missing return statement in function");
  }

  final public FloatDataType FloatDataType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;
   UnsignedZeroFillSpecs n4;

   {
   }
    n1 = jj_consume_token(FLOAT_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n3 = LengthSpec();
        n2.addNode(n3);
      break;
    default:
      jj_la1[216] = jj_gen;
      ;
    }
    n4 = UnsignedZeroFillSpecs();
     {if (true) return new FloatDataType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TimeStampDataType TimeStampDataType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   LengthSpec n5;
   NodeOptional n6 = new NodeOptional();
   NodeChoice n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch (jj_nt.kind) {
    case TIMESTAMP_:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(TIMESTAMP_);
                        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
        n5 = LengthSpec();
           n4.addNode(n5);
        break;
      default:
        jj_la1[217] = jj_gen;
        ;
      }
        n1.addNode(n4);
      if (jj_2_40(2)) {
        switch (jj_nt.kind) {
        case WITH_TIMEZONE_:
          n9 = jj_consume_token(WITH_TIMEZONE_);
                                     n8 = JTBToolkit.makeNodeToken(n9);
                 n7 = new NodeChoice(n8, 0);
          break;
        case WITHOUT_TIMEZONE_:
          n11 = jj_consume_token(WITHOUT_TIMEZONE_);
                                         n10 = JTBToolkit.makeNodeToken(n11);
                 n7 = new NodeChoice(n10, 1);
          break;
        default:
          jj_la1[218] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n6.addNode(n7);
      } else {
        ;
      }
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0);
      break;
    case DATETIME_:
      n13 = jj_consume_token(DATETIME_);
                        n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 1);
      break;
    case SAMLLDATETIME_:
      n15 = jj_consume_token(SAMLLDATETIME_);
                             n14 = JTBToolkit.makeNodeToken(n15);
        n0 = new NodeChoice(n14, 2);
      break;
    default:
      jj_la1[219] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TimeStampDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TimeDataType TimeDataType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   LengthSpec n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(TIME_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n3 = LengthSpec();
        n2.addNode(n3);
      break;
    default:
      jj_la1[220] = jj_gen;
      ;
    }
    if (jj_2_41(2)) {
      switch (jj_nt.kind) {
      case WITH_TIMEZONE_:
        n7 = jj_consume_token(WITH_TIMEZONE_);
                                  n6 = JTBToolkit.makeNodeToken(n7);
              n5 = new NodeChoice(n6, 0);
        break;
      case WITHOUT_TIMEZONE_:
        n9 = jj_consume_token(WITHOUT_TIMEZONE_);
                                     n8 = JTBToolkit.makeNodeToken(n9);
              n5 = new NodeChoice(n8, 1);
        break;
      default:
        jj_la1[221] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n4.addNode(n5);
    } else {
      ;
    }
     {if (true) return new TimeDataType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public DateDataType DateDataType() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(DATE_);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DateDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VarCharDataType VarCharDataType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   LengthSpec n8;
   NodeToken n9;
   Token n10;

   {
   }
    switch (jj_nt.kind) {
    case VARCHAR_:
    case VARCHAR2_:
        n1 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case VARCHAR_:
        n4 = jj_consume_token(VARCHAR_);
                            n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case VARCHAR2_:
        n6 = jj_consume_token(VARCHAR2_);
                             n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[222] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
        n8 = LengthSpec();
           n7.addNode(n8);
        break;
      default:
        jj_la1[223] = jj_gen;
        ;
      }
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    case TINYTEXT_:
      n10 = jj_consume_token(TINYTEXT_);
                        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 1);
      break;
    default:
      jj_la1[224] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new VarCharDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NumericDataType NumericDataType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   PrecisionSpec n8;
   UnsignedZeroFillSpecs n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
    if (jj_2_42(2)) {
        n1 = new NodeSequence(4);
      switch (jj_nt.kind) {
      case NUMERIC_:
        n4 = jj_consume_token(NUMERIC_);
                            n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case NUMBER_:
        n6 = jj_consume_token(NUMBER_);
                           n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[225] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
        n8 = PrecisionSpec();
           n7.addNode(n8);
        break;
      default:
        jj_la1[226] = jj_gen;
        ;
      }
        n1.addNode(n7);
      n9 = UnsignedZeroFillSpecs();
        n1.addNode(n9);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch (jj_nt.kind) {
      case MONEY_:
        n11 = jj_consume_token(MONEY_);
                     n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 1);
        break;
      case SMALLMONEY_:
        n13 = jj_consume_token(SMALLMONEY_);
                          n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 2);
        break;
      case YEAR_:
        n15 = jj_consume_token(YEAR_);
                    n14 = JTBToolkit.makeNodeToken(n15);
        n0 = new NodeChoice(n14, 3);
        break;
      default:
        jj_la1[227] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new NumericDataType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DecimalDataType DecimalDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   PrecisionSpec n6;
   UnsignedZeroFillSpecs n7;

   {
   }
    switch (jj_nt.kind) {
    case DECIMAL_:
      n2 = jj_consume_token(DECIMAL_);
                         n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DEC_:
      n4 = jj_consume_token(DEC_);
                     n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[228] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n6 = PrecisionSpec();
        n5.addNode(n6);
      break;
    default:
      jj_la1[229] = jj_gen;
      ;
    }
    n7 = UnsignedZeroFillSpecs();
     {if (true) return new DecimalDataType(n0,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public FixedDataType FixedDataType() throws ParseException {
   NodeToken n0;
   Token n1;
   PrecisionSpec n2;
   UnsignedZeroFillSpecs n3;

   {
   }
    n1 = jj_consume_token(FIXED_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrecisionSpec();
    n3 = UnsignedZeroFillSpecs();
     {if (true) return new FixedDataType(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public NationalCharDataType NationalCharDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   LengthSpec n15;

   {
   }
    switch (jj_nt.kind) {
    case NCHAR_:
      n2 = jj_consume_token(NCHAR_);
                       n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NATIONAL_:
           n3 = new NodeSequence(2);
      n5 = jj_consume_token(NATIONAL_);
                          n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
      switch (jj_nt.kind) {
      case CHAR_:
        n8 = jj_consume_token(CHAR_);
                            n7 = JTBToolkit.makeNodeToken(n8);
                 n6 = new NodeChoice(n7, 0);
        break;
      case CHARACHTER_:
        n10 = jj_consume_token(CHARACHTER_);
                                   n9 = JTBToolkit.makeNodeToken(n10);
                 n6 = new NodeChoice(n9, 1);
        break;
      default:
        jj_la1[230] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n3.addNode(n6);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[231] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_43(2)) {
      n13 = jj_consume_token(VARYING_);
                       n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n15 = LengthSpec();
        n14.addNode(n15);
      break;
    default:
      jj_la1[232] = jj_gen;
      ;
    }
     {if (true) return new NationalCharDataType(n0,n11,n14);}
    throw new Error("Missing return statement in function");
  }

  final public DoublePrecision DoublePrecision() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
    switch (jj_nt.kind) {
    case DOUBLE_PRECISION_:
      n2 = jj_consume_token(DOUBLE_PRECISION_);
                               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOAT8_:
      n4 = jj_consume_token(FLOAT8_);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[233] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DoublePrecision(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CharachterDataType CharachterDataType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   LengthSpec n9;

   {
   }
    switch (jj_nt.kind) {
    case CHARACHTER_:
      n2 = jj_consume_token(CHARACHTER_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CHAR_:
      n4 = jj_consume_token(CHAR_);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[234] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_44(2)) {
      n7 = jj_consume_token(VARYING_);
                      n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
      n9 = LengthSpec();
        n8.addNode(n9);
      break;
    default:
      jj_la1[235] = jj_gen;
      ;
    }
     {if (true) return new CharachterDataType(n0,n5,n8);}
    throw new Error("Missing return statement in function");
  }

  final public LengthSpec LengthSpec() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(PARENTHESIS_START_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new LengthSpec(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public UnsignedZeroFillSpecs UnsignedZeroFillSpecs() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
    switch (jj_nt.kind) {
    case UNSIGNED_:
      n2 = jj_consume_token(UNSIGNED_);
                       n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[236] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case ZEROFILL_:
      n5 = jj_consume_token(ZEROFILL_);
                       n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      break;
    default:
      jj_la1[237] = jj_gen;
      ;
    }
     {if (true) return new UnsignedZeroFillSpecs(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public PrecisionSpec PrecisionSpec() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(PARENTHESIS_START_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case 781:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(781);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(INT_LITERAL);
                         n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
        n4.addNode(n5);
      break;
    default:
      jj_la1[238] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new PrecisionSpec(n0,n2,n4,n10);}
    throw new Error("Missing return statement in function");
  }

  final public SelectAddGeometryColumn SelectAddGeometryColumn(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;
   SQLArgument n18;
   NodeOptional n19 = new NodeOptional();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   SQLArgument n23;
   NodeOptional n24 = new NodeOptional();
   NodeSequence n25;
   NodeToken n26;
   Token n27;
   SQLArgument n28;
   NodeToken n29;
   Token n30;

   {
   }
    n1 = jj_consume_token(SELECT_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ADDGEOMETRYCOLUMN_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_START_);
                             n4 = JTBToolkit.makeNodeToken(n5);
    n6 = SQLArgument(prn);
    n8 = jj_consume_token(781);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = SQLArgument(prn);
    n11 = jj_consume_token(781);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = SQLArgument(prn);
    n14 = jj_consume_token(781);
             n13 = JTBToolkit.makeNodeToken(n14);
    n15 = SQLArgument(prn);
    n17 = jj_consume_token(781);
             n16 = JTBToolkit.makeNodeToken(n17);
    n18 = SQLArgument(prn);
    if (jj_2_45(3)) {
        n20 = new NodeSequence(2);
      n22 = jj_consume_token(781);
                n21 = JTBToolkit.makeNodeToken(n22);
        n20.addNode(n21);
      n23 = SQLArgument(prn);
        n20.addNode(n23);
        n19.addNode(n20);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n25 = new NodeSequence(2);
      n27 = jj_consume_token(781);
                n26 = JTBToolkit.makeNodeToken(n27);
        n25.addNode(n26);
      n28 = SQLArgument(prn);
        n25.addNode(n28);
        n24.addNode(n25);
      break;
    default:
      jj_la1[239] = jj_gen;
      ;
    }
    n30 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n29 = JTBToolkit.makeNodeToken(n30);
     {if (true) return new SelectAddGeometryColumn(n0,n2,n4,n6,n7,n9,n10,n12,n13,n15,n16,n18,n19,n24,n29);}
    throw new Error("Missing return statement in function");
  }

  final public SelectWithParenthesis SelectWithParenthesis(PrintStream prn) throws ParseException {
   Select n0;

   {
   }
    n0 = Select(prn);
     {if (true) return new SelectWithParenthesis(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Select Select(PrintStream prn) throws ParseException {
   SelectWithoutOrderWithParenthesis n0;
   NodeOptional n1 = new NodeOptional();
   OrderByClause n2;
   NodeOptional n3 = new NodeOptional();
   LimitClause n4;
   NodeOptional n5 = new NodeOptional();
   OffsetClause n6;

   {
   }
    n0 = SelectWithoutOrderWithParenthesis(prn);
    switch (jj_nt.kind) {
    case ORDER_BY_:
      n2 = OrderByClause(prn);
        n1.addNode(n2);
      break;
    default:
      jj_la1[240] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case LIMIT_:
      n4 = LimitClause(prn);
        n3.addNode(n4);
      break;
    default:
      jj_la1[241] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case OFFSET_:
      n6 = OffsetClause(prn);
        n5.addNode(n6);
      break;
    default:
      jj_la1[242] = jj_gen;
      ;
    }
     {if (true) return new Select(n0,n1,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public SelectWithoutOrderWithParenthesis SelectWithoutOrderWithParenthesis(PrintStream prn) throws ParseException {
   SelectWithoutOrder n0;

   {
   }
    n0 = SelectWithoutOrder(prn);
     {if (true) return new SelectWithoutOrderWithParenthesis(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelectWithoutOrder SelectWithoutOrder(PrintStream prn) throws ParseException {
   SelectWithoutOrderAndSetWithParenthesis n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   SelectWithoutOrderAndSet n9;
   UnionSpec n10;

   {
   }
    n0 = SelectWithoutOrderAndSetWithParenthesis(prn);
    label_20:
    while (true) {
      switch (jj_nt.kind) {
      case UNION_:
        ;
        break;
      default:
        jj_la1[243] = jj_gen;
        break label_20;
      }
        n5 = new NodeOptional();
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(UNION_);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      switch (jj_nt.kind) {
      case ALL_:
        n7 = jj_consume_token(ALL_);
                     n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
        break;
      default:
        jj_la1[244] = jj_gen;
        ;
      }
        n2.addNode(n5);
      switch (jj_nt.kind) {
      case SELECT_:
        n9 = SelectWithoutOrderAndSet(prn);
              n8 = new NodeChoice(n9, 0);
        break;
      case PARENTHESIS_START_:
        n10 = UnionSpec(prn);
              n8 = new NodeChoice(n10, 1);
        break;
      default:
        jj_la1[245] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SelectWithoutOrder(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SelectWithoutOrderAndSetWithParenthesis SelectWithoutOrderAndSetWithParenthesis(PrintStream prn) throws ParseException {
   NodeChoice n0;
   SelectWithoutOrderAndSet n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectWithoutOrderAndSetWithParenthesis n5;
   NodeToken n6;
   Token n7;

   {
   }
    switch (jj_nt.kind) {
    case SELECT_:
      n1 = SelectWithoutOrderAndSet(prn);
        n0 = new NodeChoice(n1, 0);
      break;
    case PARENTHESIS_START_:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(PARENTHESIS_START_);
                                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = SelectWithoutOrderAndSetWithParenthesis(prn);
        n2.addNode(n5);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[246] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SelectWithoutOrderAndSetWithParenthesis(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnionSpec UnionSpec(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SelectWithoutOrder n2;
   NodeToken n3;
   Token n4;

   {
   }
    n1 = jj_consume_token(PARENTHESIS_START_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SelectWithoutOrder(prn);
    n4 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new UnionSpec(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public SelectWithoutOrderAndSet SelectWithoutOrderAndSet(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SelectList n10;
   NodeOptional n11 = new NodeOptional();
   IntoClause n12;
   NodeOptional n13 = new NodeOptional();
   FromClause n14;
   NodeOptional n15 = new NodeOptional();
   WhereClause n16;
   NodeOptional n17 = new NodeOptional();
   GroupByClause n18;
   NodeOptional n19 = new NodeOptional();
   HavingClause n20;

   {
   }
    n1 = jj_consume_token(SELECT_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case ALL_:
    case UNIQUE_:
    case DISTINCT_:
      switch (jj_nt.kind) {
      case ALL_:
        n5 = jj_consume_token(ALL_);
                     n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
        break;
      case DISTINCT_:
        n7 = jj_consume_token(DISTINCT_);
                          n6 = JTBToolkit.makeNodeToken(n7);
           n3 = new NodeChoice(n6, 1);
        break;
      case UNIQUE_:
        n9 = jj_consume_token(UNIQUE_);
                        n8 = JTBToolkit.makeNodeToken(n9);
           n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[247] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[248] = jj_gen;
      ;
    }
    n10 = SelectList(prn);
    switch (jj_nt.kind) {
    case INTO_:
      n12 = IntoClause(prn);
        n11.addNode(n12);
      break;
    default:
      jj_la1[249] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case FROM_:
      n14 = FromClause(prn);
        n13.addNode(n14);
      break;
    default:
      jj_la1[250] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case WHERE_:
      n16 = WhereClause(prn);
        n15.addNode(n16);
      break;
    default:
      jj_la1[251] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case GROUP_BY_:
      n18 = GroupByClause(prn);
        n17.addNode(n18);
      break;
    default:
      jj_la1[252] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case HAVING_:
      n20 = HavingClause(prn);
        n19.addNode(n20);
      break;
    default:
      jj_la1[253] = jj_gen;
      ;
    }
     {if (true) return new SelectWithoutOrderAndSet(n0,n2,n10,n11,n13,n15,n17,n19);}
    throw new Error("Missing return statement in function");
  }

  final public SelectList SelectList(PrintStream prn) throws ParseException {
   SelectTupleSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectTupleSpec n5;

   {
   }
    n0 = SelectTupleSpec(prn);
    label_21:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[254] = jj_gen;
        break label_21;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(781);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = SelectTupleSpec(prn);
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SelectList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SelectTupleSpec SelectTupleSpec(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   TableName n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   SQLSimpleExpression n10;
   NodeOptional n11 = new NodeOptional();
   SelectAliasSpec n12;

   {
   }
    switch (jj_nt.kind) {
    case STAR_:
      n2 = jj_consume_token(STAR_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    default:
      jj_la1[255] = jj_gen;
      if (jj_2_47(2147483647)) {
           n3 = new NodeSequence(4);
        n4 = TableName(prn);
           n3.addNode(n4);
        n6 = jj_consume_token(782);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n3.addNode(n5);
        n8 = jj_consume_token(STAR_);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n0 = new NodeChoice(n3, 1);
      } else {
        switch (jj_nt.kind) {
        case NOT_BITWISE_:
        case MINUS_:
        case PARENTHESIS_START_:
        case ABSOLUTE_:
        case PLUS_:
        case X_:
        case Y_:
        case Z_:
        case SQUARE_ROOT_:
        case FACTORIAL_PREFIX_:
        case LN_:
        case PI_:
        case CUBE_ROOT_:
        case ABS_:
        case AGE_:
        case AVERAGE_:
        case CHR_:
        case COS_:
        case COT_:
        case DAY_:
        case DEC_:
        case EXP_:
        case INT_:
        case LOG_:
        case MAX_:
        case MD5_:
        case MIN_:
        case MOD_:
        case NOW_:
        case NUM_:
        case RAW_:
        case SIN_:
        case SUM_:
        case TAN_:
        case ACOS_:
        case ASIN_:
        case ATAN_:
        case ATN2_:
        case BLOB_:
        case BYTE_:
        case CASE_:
        case CAST_:
        case CBRT_:
        case CEIL_:
        case CHAR_:
        case CLOB_:
        case CORR_:
        case COSH_:
        case DATE_:
        case HOST_:
        case HOUR_:
        case INT2_:
        case INT4_:
        case INT8_:
        case LEFT_:
        case LONG_:
        case LPAD_:
        case NULL_:
        case PORT_:
        case REAL_:
        case RPAD_:
        case SIGN_:
        case SQRT_:
        case SRID_:
        case ST_M_:
        case ST_X_:
        case ST_Y_:
        case ST_Z_:
        case TEXT_:
        case TIME_:
        case TRIM_:
        case TRUE_:
        case TYPE_:
        case USER_:
        case WEEK_:
        case YEAR_:
        case ASCII_:
        case ASKML_:
        case ATAN2_:
        case BOX2D_:
        case BOX3D_:
        case BTRIM_:
        case BYTEA_:
        case COUNT_:
        case EVERY_:
        case FALSE_:
        case FIXED_:
        case FLOAT_:
        case FLOOR_:
        case IMAGE_:
        case INDEX_:
        case INSTR_:
        case LEAST_:
        case LFILL_:
        case LOG10_:
        case LOWER_:
        case LTRIM_:
        case MONEY_:
        case MONTH_:
        case MULTI_:
        case NCHAR_:
        case NDIMS_:
        case POWER_:
        case RIGHT_:
        case ROUND_:
        case RTRIM_:
        case SCALE_:
        case TEMPDOT_:
        case TRUNC_:
        case UPPER_:
        case VALUE_:
        case ABBREV_:
        case AREA2D_:
        case ASEWKB_:
        case ASEWKT_:
        case ASTEXT_:
        case BIGINT_:
        case BINARY_:
        case BIT_OR_:
        case CONCAT_WORD:
        case DECODE_:
        case ENCODE_:
        case WORD_EQUALS_:
        case EXTENT_:
        case FAMILY_:
        case FLOAT4_:
        case FLOAT8_:
        case ISRING_:
        case LENGTH_:
        case MINUTE_:
        case MODULE_:
        case NRINGS_:
        case NULLIF_:
        case NUMBER_:
        case RANDOM_:
        case REPEAT_:
        case ROTATE_:
        case SECOND_:
        case STDDEV_:
        case STRPOS_:
        case SUBSTR_:
        case TO_HEX_:
        case WITHIN_:
        case ZMFLAG_:
        case ADDDATE_:
        case ADDTIME_:
        case BIT_AND_:
        case BOOL_OR_:
        case CEILING_:
        case CLUSTER_:
        case COLLECT_:
        case CONVERT_:
        case CURDATE_:
        case CURTIME_:
        case DAYNAME_:
        case DECIMAL_:
        case DEGREE_:
        case EXTRACT_:
        case GET_BIT_:
        case INITCAP_:
        case INTEGER_:
        case ISEMPTY_:
        case ISVALID_:
        case MAPCHAR_:
        case MASKLEN_:
        case NETMASK_:
        case NETWORK_:
        case NPOINTS_:
        case NUMERIC_:
        case OVERLAY_:
        case PLACING_:
        case PUBLICDOT_:
        case QUARTER_:
        case RADIANS_:
        case REGR_R2_:
        case REPLACE_:
        case ROTATEX_:
        case ROTATEY_:
        case ROTATEZ_:
        case SET_BIT_:
        case SETSEED_:
        case SETSRID_:
        case SOUNDEX_:
        case SPATIAL_:
        case ST_AREA_:
        case STORAGE_:
        case ST_SRID_:
        case ST_TEXT_:
        case SUBDATE_:
        case SUBTIME_:
        case TINYINT_:
        case TO_CHAR_:
        case TO_DATE_:
        case VARCHAR_:
        case VAR_POP_:
        case VARYING_:
        case VERSION_:
        case ASBINARY_:
        case BOOL_AND_:
        case COALESCE_:
        case CONTAINS_:
        case DATABASE_:
        case DATEDIFF_:
        case DATETIME_:
        case DISJOINT_:
        case DISTANCE_:
        case DROPBBOX_:
        case ENDPOINT_:
        case ENVELOPE_:
        case EXTENT3D_:
        case FORCE_2D_:
        case FORCE_3D_:
        case FORCE_4D_:
        case GEOMETRY_:
        case GET_BYTE_:
        case GREATEST_:
        case HOSTMASK_:
        case INTERVAL_:
        case ISCLOSED_:
        case ISFINITE_:
        case ISSIMPLE_:
        case LAST_DAY_:
        case LENGTH2D_:
        case LENGTH3D_:
        case LONG_RAW_:
        case LONGTEXT_:
        case LVARCHAR_:
        case MEM_SIZE_:
        case NATIONAL_:
        case NEXT_DAY_:
        case OVERLAPS_:
        case PASSWORD_:
        case REGCLASS_:
        case REGR_SXX_:
        case REGR_SXY_:
        case REGR_SYY_:
        case SET_BYTE_:
        case SETPOINT_:
        case SIMPLIFY_:
        case SMALLINT_:
        case ST_ASGML_:
        case ST_ASKML_:
        case ST_ASSVG_:
        case ST_BOX2D_:
        case ST_BOX3D_:
        case ST_BYTEA_:
        case ST_MULTI_:
        case ST_NDIMS_:
        case ST_POINT_:
        case ST_SCALE_:
        case ST_WIDTH_:
        case TINYTEXT_:
        case TO_ASCII_:
        case TRUNCATE_:
        case VARCHAR2_:
        case VARIANCE_:
        case VAR_SAMP_:
        case ASHEXEWKB_:
        case BROADCAST_:
        case CHARACHTER_:
        case COVAR_POP_:
        case DATEPART_:
        case DAYOFWEEK_:
        case DAYOFYEAR_:
        case DIMENSION_:
        case FORCE_3DM_:
        case FORCE_3DZ_:
        case GEOMETRYN_:
        case LINEMERGE_:
        case LOCALTIME_:
        case MONTHNAME_:
        case QPUBLICDOT_:
        case REGR_AVGX_:
        case REGR_AVGY_:
        case ST_AFFINE_:
        case ST_AREA2D_:
        case ST_ASEWKB_:
        case ST_ASEWKT_:
        case ST_ASTEXT_:
        case ST_BUFFER_:
        case ST_COVERS_:
        case ST_EQUALS_:
        case ST_EXTENT_:
        case ST_FACTOR_:
        case ST_HASARC_:
        case ST_HEIGHT_:
        case ST_ISRING_:
        case ST_LENGTH_:
        case ST_NRINGS_:
        case ST_POINTN_:
        case ST_RELATE_:
        case ST_ROTATE_:
        case ST_WITHIN_:
        case ST_ZMFLAG_:
        case SUBSTRING_:
        case TIMEOFDAY_:
        case TIMESTAMP_:
        case TO_NUMBER_:
        case TRANSFORM_:
        case TRANSLATE_:
        case VARBINARY_:
        case ADD_MONTHS_:
        case BIGINTEGER_:
        case BIT_LENGTH_:
        case COVAR_SAMP_:
        case DATETRUNC_:
        case DAYOFMONTH_:
        case DIFFERENCE_:
        case INTERSECTS_:
        case MEDIUMTEXT_:
        case REGR_COUNT_:
        case REGR_SLOPE_:
        case SEGMENTIZE_:
        case SMALLFLOAT_:
        case SMALLMONEY_:
        case SNAPTOGRID_:
        case SPLIT_PART_:
        case STARTPOINT_:
        case ST_AZIMUTH_:
        case ST_CHIP_IN_:
        case ST_COLLECT_:
        case ST_CROSSES_:
        case STDDEV_POP_:
        case ST_DWITHIN_:
        case ST_GEOHASH_:
        case ST_ISEMPTY_:
        case ST_ISVALID_:
        case ST_NPOINTS_:
        case ST_POLYGON_:
        case ST_REVERSE_:
        case ST_ROTATEX_:
        case ST_ROTATEY_:
        case ST_ROTATEZ_:
        case ST_SETSRID_:
        case ST_SUMMARY_:
        case ST_TOUCHES_:
        case TRANSSCALE_:
        case WEEKOFYEAR_:
        case BOX3DEXTENT_:
        case CHAR_LENGTH_:
        case PERIMETER2D_:
        case PERIMETER3D_:
        case QUOTE_IDENT_:
        case REMOVEPOINT_:
        case SET_MASKLEN_:
        case ST_ADDPOINT_:
        case ST_ASBINARY_:
        case ST_BOUNDARY_:
        case ST_CENTROID_:
        case ST_CHIP_OUT_:
        case ST_CONTAINS_:
        case ST_COORDDIM_:
        case ST_DATATYPE_:
        case STDDEV_SAMP_:
        case ST_DISJOINT_:
        case ST_DISTANCE_:
        case ST_ENDPOINT_:
        case ST_ENVELOPE_:
        case ST_EXTENT3D_:
        case ST_FORCE_2D_:
        case ST_FORCE_3D_:
        case ST_FORCE_4D_:
        case ST_FORCERHR_:
        case ST_GEOMETRY_:
        case ST_GMLTOSQL_:
        case ST_ISCLOSED_:
        case ST_ISSIMPLE_:
        case ST_LENGTH2D_:
        case ST_LENGTH3D_:
        case ST_MEM_SIZE_:
        case ST_OVERLAPS_:
        case ST_SETPOINT_:
        case ST_SIMPLIFY_:
        case ST_WKBTOSQL_:
        case ST_WKTTOSQL_:
        case CURRENTDATE_:
        case CURRENT_TIME_:
        case CURRENT_USER_:
        case EXTERIORRING_:
        case GEOMETRYTYPE_:
        case GEOMFROMEWKT_:
        case GEOMFROMTEXT_:
        case INTERSECTION_:
        case JUSTIFY_DAYS_:
        case LONG_VARCHAR_:
        case OCTET_LENGTH_:
        case ST_ASGEOJSON_:
        case ST_ASHEXEWKB_:
        case ST_BUILDAREA_:
        case ST_COVEREDBY_:
        case ST_DIMENSION_:
        case ST_FORCE_3DM_:
        case ST_FORCE_3DZ_:
        case ST_GEOMETRYN_:
        case ST_LINEMERGE_:
        case ST_MAKEPOINT_:
        case ST_NUMPOINTS_:
        case ST_PERIMETER_:
        case ST_SETFACTOR_:
        case ST_TRANSFORM_:
        case ST_TRANSLATE_:
        case TO_TIMESTAMP_:
        case VARIANCE_POP_:
        case WIDTH_BUCKET_:
        case INTERIORRINGN_:
        case JUSTIFY_HOURS_:
        case NUMGEOMETRIES_:
        case QUOTE_LITERAL_:
        case SAMLLDATETIME_:
        case ST_ADDMEASURE_:
        case ST_CONVEXHULL_:
        case ST_DIFFERENCE_:
        case ST_INTERSECTS_:
        case ST_MAKEPOINTM_:
        case ST_MEMCOLLECT_:
        case ST_SEGMENTIZE_:
        case ST_SNAPTOGRID_:
        case ST_STARTPOINT_:
        case ST_TRANSSCALE_:
        case SYMDIFFERENCE_:
        case VARIANCE_SAMP_:
        case CURRENT_SCHEMA_:
        case LINE_SUBSTRING_:
        case LOCALTIMESTAMP_:
        case MONTHS_BETWEEN_:
        case REGEXP_REPLACE_:
        case REGR_INTERCEPT_:
        case ST_COMPRESSION_:
        case ST_CURVETOLINE_:
        case ST_FIND_EXTENT_:
        case ST_GEOGFROMWKB_:
        case ST_GEOMFROMGML_:
        case ST_GEOMFROMKML_:
        case ST_GEOMFROMWKB_:
        case ST_LINEFROMWKB_:
        case ST_LINETOCURVE_:
        case ST_LONGESTLINE_:
        case ST_MAKEPOLYGON_:
        case ST_MAXDISTANCE_:
        case ST_PERIMETER2D_:
        case ST_PERIMETER3D_:
        case ST_POLYFROMWKB_:
        case ST_REMOVEPOINT_:
        case CLOCK_TIMESTAMP_:
        case ST_CLOSESTPOINT_:
        case ST_COMBINE_BBOX_:
        case ST_DFULLYWITHIN_:
        case ST_EXTERIORRING_:
        case ST_GEOGFROMTEXT_:
        case ST_GEOMETRYTYPE_:
        case ST_GEOMFROMEWKB_:
        case ST_GEOMFROMEWKT_:
        case ST_GEOMFROMTEXT_:
        case ST_INTERSECTION_:
        case ST_LINEFROMTEXT_:
        case ST_MAKEENVELOPE_:
        case ST_MLINEFROMWKB_:
        case ST_MPOLYFROMWKB_:
        case ST_POINTFROMWKB_:
        case ST_POLYFROMTEXT_:
        case ST_SHORTESTLINE_:
        case CHARACTER_LENGTH_:
        case CURRENT_DATABASE_:
        case FORCE_COLLECTION_:
        case JUSTIFY_INTERVAL_:
        case NUMINTERIORRINGS_:
        case POSTGIS_DROPBBOX_:
        case ST_INTERIORRINGN_:
        case ST_ISVALIDREASON_:
        case ST_MLINEFROMTEXT_:
        case ST_MPOINTFROMWKB_:
        case ST_MPOLYFROMTEXT_:
        case ST_NUMGEOMETRIES_:
        case ST_POINTFROMTEXT_:
        case ST_SYMDIFFERENCE_:
        case ADDGEOMETRYCOLUMN_:
        case CURRENT_TIMESTAMP_:
        case LINE_LOCATE_POINT_:
        case ST_BDPOLYFROMTEXT_:
        case ST_LINE_SUBSTRING_:
        case ST_MPOINTFROMTEXT_:
        case ST_ORDERINGEQUALS_:
        case ST_POINTONSURFACE_:
        case ST_POLYGONFROMWKB_:
        case PG_CLIENT_ENCODING_:
        case ST_BDMPOLYFROMTEXT_:
        case ST_DISTANCE_SPHERE_:
        case ST_GEOMCOLLFROMWKB_:
        case ST_LENGTH_SPHEROID_:
        case ST_NUMINTERIORRING_:
        case ST_POLYGONFROMTEXT_:
        case ST_SHIFT_LONGITUDE_:
        case STATEMENT_TIMESTAMP_:
        case ST_CONTAINSPROPERLY_:
        case ST_FORCE_COLLECTION_:
        case ST_GEOMCOLLFROMTEXT_:
        case ST_MULTILINEFROMWKB_:
        case ST_MULTIPOLYFROMWKB_:
        case ST_NUMINTERIORRINGS_:
        case ST_POSTGIS_GIST_SEL_:
        case LOCATE_ALONG_MEASURE_:
        case ST_COLLECTIONEXTRACT_:
        case ST_DISTANCE_SPHEROID_:
        case ST_GEOGRAPHYFROMTEXT_:
        case ST_HAUSDORFFDISTANCE_:
        case ST_LENGTH2D_SPHEROID_:
        case ST_LENGTH3D_SPHEROID_:
        case ST_LINE_LOCATE_POINT_:
        case ST_LINESTRINGFROMWKB_:
        case ST_MULTIPOINTFROMWKB_:
        case ST_LINEFROMMULTIPOINT_:
        case ST_MULTIPOINTFROMTEXT_:
        case TRANSACTION_TIMESTAMP_:
        case LINE_INTERPOLATE_POINT_:
        case ST_POINT_INSIDE_CIRCLE_:
        case ST_SYMMETRICDIFFERENCE_:
        case LOCATE_BETWEEN_MEASURES_:
        case ST_LOCATE_ALONG_MEASURE_:
        case ST_MULTIPOLYGONFROMTEXT_:
        case ST_POSTGIS_GIST_JOINSEL_:
        case ST_LINECROSSINGDIRECTION_:
        case ST_MINIMUMBOUNDINGCIRCLE_:
        case ST_LINE_INTERPOLATE_POINT_:
        case ST_LOCATEBETWEENELEVATIONS_:
        case ST_LOCATE_BETWEEN_MEASURES_:
        case ST_MULTILINESTRINGFROMTEXT_:
        case ST_SIMPLIFYPRESERVETOPOLOGY_:
        case WITH_TIMEZONE_:
        case WITHOUT_TIMEZONE_:
        case DOUBLE_PRECISION_:
        case BOOLEAN_:
        case POSITION_:
        case INT_LITERAL:
        case DECIMAL_LITERAL:
        case SCIENTIFIC_LITERAL:
        case STRING_LITERAL:
        case PARAM_PLACE_HOLDER:
        case INTERVAL_LITERAL:
        case DATE_LITERAL:
        case TIME_LITERAL:
        case TIMESTAMP_LITERAL:
        case TEXT_LITERAL:
        case INTEGER_LITERAL:
        case MACADDR_LITERAL:
        case CIDR_LITERAL:
        case INET_LITERAL:
        case BINARY_LITERAL:
        case HEXDECIMAL_LITERAL:
        case IDENTIFIER:
        case QUOTED_IDENTIFIER:
           n9 = new NodeSequence(2);
          n10 = SQLSimpleExpression(prn);
           n9.addNode(n10);
          if (jj_2_46(2)) {
            n12 = SelectAliasSpec(prn);
              n11.addNode(n12);
          } else {
            ;
          }
           n9.addNode(n11);
           n0 = new NodeChoice(n9, 2);
          break;
        default:
          jj_la1[256] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new SelectTupleSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SQLSimpleExpression SQLSimpleExpression(PrintStream prn) throws ParseException {
   SQLPrecedenceLevel1Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLPrecedenceLevel1Operand n2;

   {
   }
    n0 = SQLPrecedenceLevel1Expression(prn);
    label_22:
    while (true) {
      if (jj_2_48(2)) {
        ;
      } else {
        break label_22;
      }
      n2 = SQLPrecedenceLevel1Operand(prn);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SQLSimpleExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrecedenceLevel1Expression SQLPrecedenceLevel1Expression(PrintStream prn) throws ParseException {
   SQLPrecedenceLevel2Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLPrecedenceLevel2Operand n2;

   {
   }
    n0 = SQLPrecedenceLevel2Expression(prn);
    label_23:
    while (true) {
      if (jj_2_49(2)) {
        ;
      } else {
        break label_23;
      }
      n2 = SQLPrecedenceLevel2Operand(prn);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SQLPrecedenceLevel1Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrecedenceLevel1Operand SQLPrecedenceLevel1Operand(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   SQLSimpleExpression n39;

   {
   }
    switch (jj_nt.kind) {
    case CONTAINED_WITHIN_OR_EQUALS_:
      n2 = jj_consume_token(CONTAINED_WITHIN_OR_EQUALS_);
                                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CONTAINS_OR_EQUALS_:
      n4 = jj_consume_token(CONTAINS_OR_EQUALS_);
                                    n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case GREATER_:
      n6 = jj_consume_token(GREATER_);
                         n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case GREATER_EQUALS_:
      n8 = jj_consume_token(GREATER_EQUALS_);
                                n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case LESS_:
      n10 = jj_consume_token(LESS_);
                       n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case LESS_EQUALS_:
      n12 = jj_consume_token(LESS_EQUALS_);
                              n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case EQUALS_:
      n14 = jj_consume_token(EQUALS_);
                         n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case NOT_EQUALS_:
      n16 = jj_consume_token(NOT_EQUALS_);
                             n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case NOT_EQUALS_2_:
      n18 = jj_consume_token(NOT_EQUALS_2_);
                               n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case GIS_OVERLAPS_:
      n20 = jj_consume_token(GIS_OVERLAPS_);
                               n19 = JTBToolkit.makeNodeToken(n20);
           n0 = new NodeChoice(n19, 9);
      break;
    case GIS_OVERLAPS_RIGHT_:
      n22 = jj_consume_token(GIS_OVERLAPS_RIGHT_);
                                     n21 = JTBToolkit.makeNodeToken(n22);
           n0 = new NodeChoice(n21, 10);
      break;
    case GIS_OVERLAPS_LEFT_:
      n24 = jj_consume_token(GIS_OVERLAPS_LEFT_);
                                    n23 = JTBToolkit.makeNodeToken(n24);
           n0 = new NodeChoice(n23, 11);
      break;
    case GIS_OVERLAPS_BELOW_:
      n26 = jj_consume_token(GIS_OVERLAPS_BELOW_);
                                     n25 = JTBToolkit.makeNodeToken(n26);
           n0 = new NodeChoice(n25, 12);
      break;
    case GIS_OVERLAPS_ABOVE_:
      n28 = jj_consume_token(GIS_OVERLAPS_ABOVE_);
                                     n27 = JTBToolkit.makeNodeToken(n28);
           n0 = new NodeChoice(n27, 13);
      break;
    case GIS_SAME_:
      n30 = jj_consume_token(GIS_SAME_);
                           n29 = JTBToolkit.makeNodeToken(n30);
           n0 = new NodeChoice(n29, 14);
      break;
    case GIS_STRICT_BELOW_:
      n32 = jj_consume_token(GIS_STRICT_BELOW_);
                                   n31 = JTBToolkit.makeNodeToken(n32);
           n0 = new NodeChoice(n31, 15);
      break;
    case GIS_STRICT_ABOVE_:
      n34 = jj_consume_token(GIS_STRICT_ABOVE_);
                                   n33 = JTBToolkit.makeNodeToken(n34);
           n0 = new NodeChoice(n33, 16);
      break;
    case NOT_BITWISE_:
      n36 = jj_consume_token(NOT_BITWISE_);
                              n35 = JTBToolkit.makeNodeToken(n36);
           n0 = new NodeChoice(n35, 17);
      break;
    case ABSOLUTE_:
      n38 = jj_consume_token(ABSOLUTE_);
                           n37 = JTBToolkit.makeNodeToken(n38);
           n0 = new NodeChoice(n37, 18);
      break;
    default:
      jj_la1[257] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n39 = SQLSimpleExpression(prn);
     {if (true) return new SQLPrecedenceLevel1Operand(n0,n39);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrecedenceLevel2Expression SQLPrecedenceLevel2Expression(PrintStream prn) throws ParseException {
   SQLPrecedenceLevel3Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLPrecedenceLevel3Operand n2;

   {
   }
    n0 = SQLPrecedenceLevel3Expression(prn);
    label_24:
    while (true) {
      if (jj_2_50(2)) {
        ;
      } else {
        break label_24;
      }
      n2 = SQLPrecedenceLevel3Operand(prn);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SQLPrecedenceLevel2Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrecedenceLevel2Operand SQLPrecedenceLevel2Operand(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLPrecedenceLevel1Expression n7;

   {
   }
    switch (jj_nt.kind) {
    case PLUS_:
      n2 = jj_consume_token(PLUS_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MINUS_:
      n4 = jj_consume_token(MINUS_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case CONCAT_:
      n6 = jj_consume_token(CONCAT_);
                        n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[258] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n7 = SQLPrecedenceLevel1Expression(prn);
     {if (true) return new SQLPrecedenceLevel2Operand(n0,n7);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrecedenceLevel3Expression SQLPrecedenceLevel3Expression(PrintStream prn) throws ParseException {
   SQLPrimaryExpression n0;

   {
   }
    n0 = SQLPrimaryExpression(prn);
     {if (true) return new SQLPrecedenceLevel3Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrecedenceLevel3Operand SQLPrecedenceLevel3Operand(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   SQLPrecedenceLevel2Expression n21;

   {
   }
    switch (jj_nt.kind) {
    case STAR_:
      n2 = jj_consume_token(STAR_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DIVIDE_:
      n4 = jj_consume_token(DIVIDE_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case MOD_:
      n6 = jj_consume_token(MOD_);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case DIV_:
      n8 = jj_consume_token(DIV_);
                     n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case MODULO_:
      n10 = jj_consume_token(MODULO_);
                         n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case AND_BITWISE_:
      n12 = jj_consume_token(AND_BITWISE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case OR_BITWISE_:
      n14 = jj_consume_token(OR_BITWISE_);
                             n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case XOR_BITWISE_:
      n16 = jj_consume_token(XOR_BITWISE_);
                              n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case SHIFT_LEFT_BITWISE_:
      n18 = jj_consume_token(SHIFT_LEFT_BITWISE_);
                                     n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case SHIFT_RIGHT_BITWISE_:
      n20 = jj_consume_token(SHIFT_RIGHT_BITWISE_);
                                      n19 = JTBToolkit.makeNodeToken(n20);
           n0 = new NodeChoice(n19, 9);
      break;
    default:
      jj_la1[259] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n21 = SQLPrecedenceLevel2Expression(prn);
     {if (true) return new SQLPrecedenceLevel3Operand(n0,n21);}
    throw new Error("Missing return statement in function");
  }

  final public SQLPrimaryExpression SQLPrimaryExpression(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   NodeChoice n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   FunctionCall n19;
   TableColumn n20;
   PseudoColumn n21;
   numberValue n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   SQLComplexExpression n26;
   NodeToken n27;
   Token n28;
   booleanLiteral n29;
   stringLiteral n30;
   NullLiterals n31;
   IntervalLiterals n32;
   TextLiterals n33;
   PreparedStmtParameter n34;
   TimeStampLiteral n35;
   TimeLiteral n36;
   DateLiteral n37;
   binaryLiteral n38;
   hex_decimalLiteral n39;
   IntegerLiteral n40;
   MacaddrLiteral n41;
   CidrLiteral n42;
   InetLiteral n43;
   NodeOptional n44 = new NodeOptional();
   NodeToken n45;
   Token n46;
   NodeOptional n47 = new NodeOptional();
   NodeSequence n48;
   NodeToken n49;
   Token n50;
   types n51;

   {
   }
    switch (jj_nt.kind) {
    case NOT_BITWISE_:
    case ABSOLUTE_:
    case SQUARE_ROOT_:
    case FACTORIAL_PREFIX_:
    case CUBE_ROOT_:
      switch (jj_nt.kind) {
      case SQUARE_ROOT_:
        n3 = jj_consume_token(SQUARE_ROOT_);
                             n2 = JTBToolkit.makeNodeToken(n3);
           n1 = new NodeChoice(n2, 0);
        break;
      case CUBE_ROOT_:
        n5 = jj_consume_token(CUBE_ROOT_);
                           n4 = JTBToolkit.makeNodeToken(n5);
           n1 = new NodeChoice(n4, 1);
        break;
      case FACTORIAL_PREFIX_:
        n7 = jj_consume_token(FACTORIAL_PREFIX_);
                                  n6 = JTBToolkit.makeNodeToken(n7);
           n1 = new NodeChoice(n6, 2);
        break;
      case ABSOLUTE_:
        n9 = jj_consume_token(ABSOLUTE_);
                          n8 = JTBToolkit.makeNodeToken(n9);
           n1 = new NodeChoice(n8, 3);
        break;
      case NOT_BITWISE_:
        n11 = jj_consume_token(NOT_BITWISE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
           n1 = new NodeChoice(n10, 4);
        break;
      default:
        jj_la1[260] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
      break;
    default:
      jj_la1[261] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case MINUS_:
    case PLUS_:
      switch (jj_nt.kind) {
      case PLUS_:
        n15 = jj_consume_token(PLUS_);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n13 = new NodeChoice(n14, 0);
        break;
      case MINUS_:
        n17 = jj_consume_token(MINUS_);
                        n16 = JTBToolkit.makeNodeToken(n17);
           n13 = new NodeChoice(n16, 1);
        break;
      default:
        jj_la1[262] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n12.addNode(n13);
      break;
    default:
      jj_la1[263] = jj_gen;
      ;
    }
    if (jj_2_51(2)) {
      n19 = FunctionCall(prn);
           n18 = new NodeChoice(n19, 0);
    } else if (jj_2_52(2)) {
      n20 = TableColumn(prn);
           n18 = new NodeChoice(n20, 1);
    } else if (jj_2_53(2)) {
      n21 = PseudoColumn(prn);
           n18 = new NodeChoice(n21, 2);
    } else {
      switch (jj_nt.kind) {
      case INT_LITERAL:
      case DECIMAL_LITERAL:
      case SCIENTIFIC_LITERAL:
        n22 = numberValue(prn);
           n18 = new NodeChoice(n22, 3);
        break;
      default:
        jj_la1[264] = jj_gen;
        if (jj_2_54(2)) {
           n23 = new NodeSequence(4);
          n25 = jj_consume_token(PARENTHESIS_START_);
                                    n24 = JTBToolkit.makeNodeToken(n25);
           n23.addNode(n24);
          n26 = SQLComplexExpression(prn);
           n23.addNode(n26);
          n28 = jj_consume_token(PARENTHESIS_CLOSE_);
                                    n27 = JTBToolkit.makeNodeToken(n28);
           n23.addNode(n27);
           n18 = new NodeChoice(n23, 4);
        } else {
          switch (jj_nt.kind) {
          case TRUE_:
          case FALSE_:
            n29 = booleanLiteral(prn);
           n18 = new NodeChoice(n29, 5);
            break;
          case STRING_LITERAL:
            n30 = stringLiteral(prn);
           n18 = new NodeChoice(n30, 6);
            break;
          case NULL_:
            n31 = NullLiterals(prn);
           n18 = new NodeChoice(n31, 7);
            break;
          default:
            jj_la1[265] = jj_gen;
            if (jj_2_55(2)) {
              n32 = IntervalLiterals(prn);
           n18 = new NodeChoice(n32, 8);
            } else if (jj_2_56(2)) {
              n33 = TextLiterals(prn);
           n18 = new NodeChoice(n33, 9);
            } else if (jj_2_57(2)) {
              n34 = PreparedStmtParameter(prn);
           n18 = new NodeChoice(n34, 10);
            } else {
              switch (jj_nt.kind) {
              case TIMESTAMP_LITERAL:
                n35 = TimeStampLiteral(prn);
           n18 = new NodeChoice(n35, 11);
                break;
              case TIME_LITERAL:
                n36 = TimeLiteral(prn);
           n18 = new NodeChoice(n36, 12);
                break;
              case DATE_LITERAL:
                n37 = DateLiteral(prn);
           n18 = new NodeChoice(n37, 13);
                break;
              case BINARY_LITERAL:
                n38 = binaryLiteral(prn);
           n18 = new NodeChoice(n38, 14);
                break;
              case HEXDECIMAL_LITERAL:
                n39 = hex_decimalLiteral(prn);
           n18 = new NodeChoice(n39, 15);
                break;
              case INTEGER_LITERAL:
                n40 = IntegerLiteral(prn);
           n18 = new NodeChoice(n40, 16);
                break;
              case MACADDR_LITERAL:
                n41 = MacaddrLiteral(prn);
           n18 = new NodeChoice(n41, 17);
                break;
              case CIDR_LITERAL:
                n42 = CidrLiteral(prn);
           n18 = new NodeChoice(n42, 18);
                break;
              case INET_LITERAL:
                n43 = InetLiteral(prn);
           n18 = new NodeChoice(n43, 19);
                break;
              default:
                jj_la1[266] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
    switch (jj_nt.kind) {
    case FACTORIAL_:
      n46 = jj_consume_token(FACTORIAL_);
                         n45 = JTBToolkit.makeNodeToken(n46);
        n44.addNode(n45);
      break;
    default:
      jj_la1[267] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case 783:
        n48 = new NodeSequence(2);
      n50 = jj_consume_token(783);
                 n49 = JTBToolkit.makeNodeToken(n50);
        n48.addNode(n49);
      n51 = types();
        n48.addNode(n51);
        n47.addNode(n48);
      break;
    default:
      jj_la1[268] = jj_gen;
      ;
    }
     {if (true) return new SQLPrimaryExpression(n0,n12,n18,n44,n47);}
    throw new Error("Missing return statement in function");
  }

  final public IsNullExpression IsNullExpression(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(IS_);
              n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case NOT_:
      n4 = jj_consume_token(NOT_);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[269] = jj_gen;
      ;
    }
    n6 = jj_consume_token(NULL_);
                n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new IsNullExpression(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public IsBooleanExpression IsBooleanExpression(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(IS_);
              n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case NOT_:
      n4 = jj_consume_token(NOT_);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[270] = jj_gen;
      ;
    }
    n6 = jj_consume_token(BINARY_LITERAL);
                         n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new IsBooleanExpression(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public PreparedStmtParameter PreparedStmtParameter(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(PARAM_PLACE_HOLDER);
                             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new PreparedStmtParameter(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TimeStampLiteral TimeStampLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(TIMESTAMP_LITERAL);
                            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TimeStampLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TimeLiteral TimeLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(TIME_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TimeLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DateLiteral DateLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(DATE_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new DateLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntervalLiterals IntervalLiterals(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INTERVAL_LITERAL);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntervalLiterals(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TextLiterals TextLiterals(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(TEXT_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TextLiterals(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NullLiterals NullLiterals(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(NULL_);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NullLiterals(n0);}
    throw new Error("Missing return statement in function");
  }

  final public booleanLiteral booleanLiteral(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
    switch (jj_nt.kind) {
    case TRUE_:
      n2 = jj_consume_token(TRUE_);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE_:
      n4 = jj_consume_token(FALSE_);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[271] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new booleanLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public binaryLiteral binaryLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(BINARY_LITERAL);
                         n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new binaryLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public hex_decimalLiteral hex_decimalLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(HEXDECIMAL_LITERAL);
                             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new hex_decimalLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IntegerLiteral IntegerLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INTEGER_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new IntegerLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MacaddrLiteral MacaddrLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(MACADDR_LITERAL);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new MacaddrLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CidrLiteral CidrLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(CIDR_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new CidrLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InetLiteral InetLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INET_LITERAL);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new InetLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public GeometryLiteral GeometryLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(GEOMETRY_LITERAL);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new GeometryLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PseudoColumn PseudoColumn(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   SelectList n10;
   NodeOptional n11 = new NodeOptional();
   FromClause n12;
   NodeOptional n13 = new NodeOptional();
   WhereClause n14;
   NodeOptional n15 = new NodeOptional();
   LimitClause n16;
   NodeToken n17;
   Token n18;

   {
   }
    n1 = jj_consume_token(PARENTHESIS_START_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(SELECT_);
                  n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case ALL_:
    case DISTINCT_:
      switch (jj_nt.kind) {
      case ALL_:
        n7 = jj_consume_token(ALL_);
                     n6 = JTBToolkit.makeNodeToken(n7);
           n5 = new NodeChoice(n6, 0);
        break;
      case DISTINCT_:
        n9 = jj_consume_token(DISTINCT_);
                          n8 = JTBToolkit.makeNodeToken(n9);
           n5 = new NodeChoice(n8, 1);
        break;
      default:
        jj_la1[272] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n4.addNode(n5);
      break;
    default:
      jj_la1[273] = jj_gen;
      ;
    }
    n10 = SelectList(prn);
    switch (jj_nt.kind) {
    case FROM_:
      n12 = FromClause(prn);
        n11.addNode(n12);
      break;
    default:
      jj_la1[274] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case WHERE_:
      n14 = WhereClause(prn);
        n13.addNode(n14);
      break;
    default:
      jj_la1[275] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case LIMIT_:
      n16 = LimitClause(prn);
        n15.addNode(n16);
      break;
    default:
      jj_la1[276] = jj_gen;
      ;
    }
    n18 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n17 = JTBToolkit.makeNodeToken(n18);
     {if (true) return new PseudoColumn(n0,n2,n4,n10,n11,n13,n15,n17);}
    throw new Error("Missing return statement in function");
  }

  final public SQLArgumentList SQLArgumentList(PrintStream prn) throws ParseException {
   SQLArgument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLArgument n5;

   {
   }
    n0 = SQLArgument(prn);
    label_25:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[277] = jj_gen;
        break label_25;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(781);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = SQLArgument(prn);
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SQLArgumentList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SQLArgument SQLArgument(PrintStream prn) throws ParseException {
   SQLSimpleExpression n0;

   {
   }
    n0 = SQLSimpleExpression(prn);
     {if (true) return new SQLArgument(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CharString CharString(PrintStream prn) throws ParseException {
   extendbObject n0;

   {
   }
    n0 = extendbObject(prn);
     {if (true) return new CharString(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionCall FunctionCall(PrintStream prn) throws ParseException {
   NodeChoice n0;
   Func_Trunc n1;
   Func_Date n2;
   Func_Time n3;
   Func_TimeStamp n4;
   Func_CurrentDate n5;
   Func_PgCurrentDate n6;
   Func_CurrentTime n7;
   Func_PgCurrentTime n8;
   Func_PgCurrentTimeStamp n9;
   Func_Year n10;
   Func_Month n11;
   Func_Hour n12;
   Func_Minute n13;
   Func_Second n14;
   Func_AddDate n15;
   Func_AddTime n16;
   Func_DateDiff n17;
   Func_Day n18;
   Func_DayName n19;
   Func_DayOfMonth n20;
   Func_DayOfWeek n21;
   Func_DayOfYear n22;
   Func_MonthName n23;
   Func_SubDate n24;
   Func_SubTime n25;
   Func_WeekOfYear n26;
   Func_Now n27;
   Func_Abs n28;
   Func_Ceil n29;
   Func_Ceiling n30;
   Func_Exp n31;
   Func_Floor n32;
   Func_LN n33;
   Func_Log n34;
   Func_PI n35;
   Func_Power n36;
   Func_Round n37;
   Func_Sign n38;
   Func_TAsin n39;
   Func_TAtan n40;
   Func_TCos n41;
   Func_TCot n42;
   Func_TDegree n43;
   Func_Radians n44;
   Func_Sin n45;
   Func_Tan n46;
   Func_Avg n47;
   Func_Count n48;
   Func_Max n49;
   Func_Min n50;
   Func_Stdev n51;
   Func_Sum n52;
   Func_Variance n53;
   Func_Ascii n54;
   Func_Index n55;
   Func_Left n56;
   Func_Length n57;
   Func_Lower n58;
   Func_Lpad n59;
   Func_Rpad n60;
   Func_Ltrim n61;
   Func_Replace n62;
   Func_Right n63;
   Func_Rtrim n64;
   Func_SubStr n65;
   Func_Trim n66;
   Func_Upper n67;
   Func_Database n68;
   Func_Value n69;
   Func_Version n70;
   Func_Case n71;
   Func_TACos n72;
   Func_Log10 n73;
   Func_Mod n74;
   Func_Sqrt n75;
   Func_Least n76;
   Func_TCosh n77;
   Func_Float n78;
   Func_Greatest n79;
   Func_TATan2 n80;
   Func_TATn2 n81;
   Func_SoundEx n82;
   Func_InitCap n83;
   Func_LFill n84;
   Func_MapChar n85;
   Func_NUM n86;
   Func_Concat n87;
   Func_User n88;
   Func_Cast n89;
   Func_TimeOfDay n90;
   Func_Custom n91;
   Func_IsFinite n92;
   Func_Extract n93;
   Func_DateTrunc n94;
   Func_DatePart n95;
   Func_Age n96;
   Func_LocalTime n97;
   Func_LocalTimeStamp n98;
   Func_BitLength n99;
   Func_CharLength n100;
   Func_Convert n101;
   Func_OctetLength n102;
   Func_Overlay n103;
   Func_Position n104;
   Func_Substring n105;
   Func_ToHex n106;
   Func_QuoteLiteral n107;
   Func_QuoteIdent n108;
   Func_Md5 n109;
   Func_Chr n110;
   Func_PgClientEncoding n111;
   Func_Translate n112;
   Func_ToAscii n113;
   Func_StrPos n114;
   Func_SplitPart n115;
   Func_Repeat n116;
   Func_Encode n117;
   Func_Decode n118;
   Func_Btrim n119;
   Func_Width_bucket n120;
   Func_Setseed n121;
   Func_Random n122;
   Func_Cbrt n123;
   Func_GetBit n124;
   Func_GetByte n125;
   Func_ToDate n126;
   Func_ClockTimeStamp n127;
   Func_StatementTimeStamp n128;
   Func_TransactionTimeStamp n129;
   Func_NullIf n130;
   Func_SetBit n131;
   Func_SetByte n132;
   Func_ToChar n133;
   Func_ToNumber n134;
   Func_ToTimestamp n135;
   Func_AddMonths n136;
   Func_JustifyDays n137;
   Func_JustifyHours n138;
   Func_JustifyInterval n139;
   Func_LastDay n140;
   Func_MonthsBetween n141;
   Func_NextDay n142;
   Func_CurrentDatabase n143;
   Func_CurrentSchema n144;
   Func_BitAnd n145;
   Func_BitOr n146;
   Func_BoolAnd n147;
   Func_BoolOr n148;
   Func_CorrCov n149;
   Func_Regr n150;
   Func_RegexReplace n151;
   Func_Coalesce n152;
   Func_Abbrev n153;
   Func_Broadcast n154;
   Func_Family n155;
   Func_Host n156;
   Func_Hostmask n157;
   Func_Masklen n158;
   Func_Netmask n159;
   Func_Network n160;
   Func_Set_Masklen n161;
   Func_Text n162;
   Func_ST_AsText n163;
   Func_ST_Transform n164;
   Func_ST_Distance n165;
   Func_ST_DWithin n166;
   Func_ST_Length n167;
   Func_ST_Area n168;
   Func_ST_Boundary n169;
   Func_ST_Buffer n170;
   Func_ST_Centroid n171;
   Func_ST_AsBinary n172;
   Func_ST_ADDMEASURE n173;
   Func_ST_ADDPOINT n174;
   Func_ST_AFFINE n175;
   Func_ST_AREA2D n176;
   Func_ST_ASEWKB n177;
   Func_ST_ASEWKT n178;
   Func_ST_ASGEOJSON n179;
   Func_ST_ASGML n180;
   Func_ST_ASHEXEWKB n181;
   Func_ST_ASKML n182;
   Func_ST_ASSVG n183;
   Func_ST_AZIMUTH n184;
   Func_ST_BDMPOLYFROMTEXT n185;
   Func_ST_BDPOLYFROMTEXT n186;
   Func_ST_BUILDAREA n187;
   Func_ST_BYTEA n188;
   Func_ST_CHIP_IN n189;
   Func_ST_CHIP_OUT n190;
   Func_ST_CLOSESTPOINT n191;
   Func_ST_COLLECT n192;
   Func_ST_COLLECTIONEXTRACT n193;
   Func_ST_COMBINE_BBOX n194;
   Func_ST_COMPRESSION n195;
   Func_ST_CONTAINS n196;
   Func_ST_CONTAINSPROPERLY n197;
   Func_ST_CONVEXHULL n198;
   Func_ST_COORDDIM n199;
   Func_ST_COVEREDBY n200;
   Func_ST_COVERS n201;
   Func_ST_CROSSES n202;
   Func_ST_CURVETOLINE n203;
   Func_ST_DATATYPE n204;
   Func_ST_DFULLYWITHIN n205;
   Func_ST_DIFFERENCE n206;
   Func_ST_DIMENSION n207;
   Func_ST_DISJOINT n208;
   Func_ST_DISTANCE_SPHERE n209;
   Func_ST_DISTANCE_SPHEROID n210;
   Func_ST_ENDPOINT n211;
   Func_ST_ENVELOPE n212;
   Func_ST_EQUALS n213;
   Func_ST_EXTENT n214;
   Func_ST_EXTENT3D n215;
   Func_ST_EXTERIORRING n216;
   Func_ST_FACTOR n217;
   Func_ST_FIND_EXTENT n218;
   Func_ST_FORCERHR n219;
   Func_ST_FORCE_2D n220;
   Func_ST_FORCE_3D n221;
   Func_ST_FORCE_3DM n222;
   Func_ST_FORCE_3DZ n223;
   Func_ST_FORCE_4D n224;
   Func_ST_FORCE_COLLECTION n225;
   Func_ST_GEOMETRYTYPE n226;
   Func_ST_GEOGFROMTEXT n227;
   Func_ST_GEOGFROMWKB n228;
   Func_ST_GEOGRAPHYFROMTEXT n229;
   Func_ST_GEOHASH n230;
   Func_ST_GEOMCOLLFROMTEXT n231;
   Func_ST_GEOMCOLLFROMWKB n232;
   Func_ST_GEOMFROMEWKB n233;
   Func_ST_GEOMFROMEWKT n234;
   Func_ST_GEOMFROMGML n235;
   Func_ST_GEOMFROMKML n236;
   Func_ST_GEOMFROMTEXT n237;
   Func_ST_GEOMFROMWKB n238;
   Func_ST_GMLTOSQL n239;
   Func_ST_HASARC n240;
   Func_ST_HAUSDORFFDISTANCE n241;
   Func_ST_HEIGHT n242;
   Func_ST_INTERIORRINGN n243;
   Func_ST_INTERSECTION n244;
   Func_ST_INTERSECTS n245;
   Func_ST_ISCLOSED n246;
   Func_ST_ISEMPTY n247;
   Func_ST_ISRING n248;
   Func_ST_ISSIMPLE n249;
   Func_ST_ISVALID n250;
   Func_ST_ISVALIDREASON n251;
   Func_ST_LENGTH2D n252;
   Func_ST_LENGTH2D_SPHEROID n253;
   Func_ST_LENGTH3D n254;
   Func_ST_LENGTH3D_SPHEROID n255;
   Func_ST_LENGTH_SPHEROID n256;
   Func_ST_LINECROSSINGDIRECTION n257;
   Func_ST_LINEFROMMULTIPOINT n258;
   Func_ST_LINEFROMTEXT n259;
   Func_ST_LINEFROMWKB n260;
   Func_ST_LINEMERGE n261;
   Func_ST_LINESTRINGFROMWKB n262;
   Func_ST_LINETOCURVE n263;
   Func_ST_LINE_INTERPOLATE_POINT n264;
   Func_ST_LINE_LOCATE_POINT n265;
   Func_ST_LINE_SUBSTRING n266;
   Func_ST_LOCATEBETWEENELEVATIONS n267;
   Func_ST_LOCATE_ALONG_MEASURE n268;
   Func_ST_LOCATE_BETWEEN_MEASURES n269;
   Func_ST_LONGESTLINE n270;
   Func_ST_M n271;
   Func_ST_MAKEENVELOPE n272;
   Func_ST_MAKEPOINT n273;
   Func_ST_MAKEPOINTM n274;
   Func_ST_MAKEPOLYGON n275;
   Func_ST_MAXDISTANCE n276;
   Func_ST_MEMCOLLECT n277;
   Func_ST_MEM_SIZE n278;
   Func_ST_MINIMUMBOUNDINGCIRCLE n279;
   Func_ST_MLINEFROMTEXT n280;
   Func_ST_MLINEFROMWKB n281;
   Func_ST_MPOINTFROMTEXT n282;
   Func_ST_MPOINTFROMWKB n283;
   Func_ST_MPOLYFROMTEXT n284;
   Func_ST_MPOLYFROMWKB n285;
   Func_ST_MULTI n286;
   Func_ST_MULTILINEFROMWKB n287;
   Func_ST_MULTILINESTRINGFROMTEXT n288;
   Func_ST_MULTIPOINTFROMTEXT n289;
   Func_ST_MULTIPOINTFROMWKB n290;
   Func_ST_MULTIPOLYFROMWKB n291;
   Func_ST_MULTIPOLYGONFROMTEXT n292;
   Func_ST_NDIMS n293;
   Func_ST_NPOINTS n294;
   Func_ST_NRINGS n295;
   Func_ST_NUMGEOMETRIES n296;
   Func_ST_NUMINTERIORRING n297;
   Func_ST_NUMINTERIORRINGS n298;
   Func_ST_NUMPOINTS n299;
   Func_ST_ORDERINGEQUALS n300;
   Func_ST_OVERLAPS n301;
   Func_ST_PERIMETER n302;
   Func_ST_PERIMETER2D n303;
   Func_ST_PERIMETER3D n304;
   Func_ST_POINT n305;
   Func_ST_POINTFROMTEXT n306;
   Func_ST_POINTFROMWKB n307;
   Func_ST_POINTN n308;
   Func_ST_POINTONSURFACE n309;
   Func_ST_POINT_INSIDE_CIRCLE n310;
   Func_ST_POLYFROMTEXT n311;
   Func_ST_POLYFROMWKB n312;
   Func_ST_POLYGON n313;
   Func_ST_POLYGONFROMTEXT n314;
   Func_ST_POLYGONFROMWKB n315;
   Func_ST_POSTGIS_GIST_JOINSEL n316;
   Func_ST_POSTGIS_GIST_SEL n317;
   Func_ST_RELATE n318;
   Func_ST_REMOVEPOINT n319;
   Func_ST_REVERSE n320;
   Func_ST_ROTATEX n321;
   Func_ST_ROTATEY n322;
   Func_ST_ROTATEZ n323;
   Func_ST_SCALE n324;
   Func_ST_SEGMENTIZE n325;
   Func_ST_SETFACTOR n326;
   Func_ST_SETPOINT n327;
   Func_ST_SETSRID n328;
   Func_ST_SHIFT_LONGITUDE n329;
   Func_ST_SHORTESTLINE n330;
   Func_ST_SIMPLIFY n331;
   Func_ST_SIMPLIFYPRESERVETOPOLOGY n332;
   Func_ST_SNAPTOGRID n333;
   Func_ST_SRID n334;
   Func_ST_STARTPOINT n335;
   Func_ST_SUMMARY n336;
   Func_ST_SYMDIFFERENCE n337;
   Func_ST_SYMMETRICDIFFERENCE n338;
   Func_ST_TEXT n339;
   Func_ST_TOUCHES n340;
   Func_ST_TRANSLATE n341;
   Func_ST_TRANSSCALE n342;
   Func_ST_WIDTH n343;
   Func_ST_WITHIN n344;
   Func_ST_WKBTOSQL n345;
   Func_ST_WKTTOSQL n346;
   Func_ST_X n347;
   Func_ST_Y n348;
   Func_ST_Z n349;
   Func_ST_ZMFLAG n350;
   Func_ST_BOX2D n351;
   Func_ST_BOX3D n352;
   Func_ST_GEOMETRY n353;
   Func_ST_GEOMETRYN n354;
   Func_POSTGIS_DROPBBOX n355;

   {
   }
    if (jj_2_58(2)) {
      n1 = Func_Trunc(prn);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_59(2)) {
      n2 = Func_Date(prn);
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_60(2)) {
      n3 = Func_Time(prn);
        n0 = new NodeChoice(n3, 2);
    } else if (jj_2_61(2)) {
      n4 = Func_TimeStamp(prn);
        n0 = new NodeChoice(n4, 3);
    } else if (jj_2_62(2)) {
      n5 = Func_CurrentDate(prn);
        n0 = new NodeChoice(n5, 4);
    } else if (jj_2_63(2)) {
      n6 = Func_PgCurrentDate(prn);
        n0 = new NodeChoice(n6, 5);
    } else if (jj_2_64(2)) {
      n7 = Func_CurrentTime(prn);
        n0 = new NodeChoice(n7, 6);
    } else if (jj_2_65(2)) {
      n8 = Func_PgCurrentTime(prn);
        n0 = new NodeChoice(n8, 7);
    } else if (jj_2_66(2)) {
      n9 = Func_PgCurrentTimeStamp(prn);
        n0 = new NodeChoice(n9, 8);
    } else if (jj_2_67(2)) {
      n10 = Func_Year(prn);
        n0 = new NodeChoice(n10, 9);
    } else if (jj_2_68(2)) {
      n11 = Func_Month(prn);
        n0 = new NodeChoice(n11, 10);
    } else if (jj_2_69(2)) {
      n12 = Func_Hour(prn);
        n0 = new NodeChoice(n12, 11);
    } else if (jj_2_70(2)) {
      n13 = Func_Minute(prn);
        n0 = new NodeChoice(n13, 12);
    } else if (jj_2_71(2)) {
      n14 = Func_Second(prn);
        n0 = new NodeChoice(n14, 13);
    } else if (jj_2_72(2)) {
      n15 = Func_AddDate(prn);
        n0 = new NodeChoice(n15, 14);
    } else if (jj_2_73(2)) {
      n16 = Func_AddTime(prn);
        n0 = new NodeChoice(n16, 15);
    } else if (jj_2_74(2)) {
      n17 = Func_DateDiff(prn);
        n0 = new NodeChoice(n17, 16);
    } else if (jj_2_75(4)) {
      n18 = Func_Day(prn);
        n0 = new NodeChoice(n18, 17);
    } else if (jj_2_76(2)) {
      n19 = Func_DayName(prn);
        n0 = new NodeChoice(n19, 18);
    } else if (jj_2_77(2)) {
      n20 = Func_DayOfMonth(prn);
        n0 = new NodeChoice(n20, 19);
    } else if (jj_2_78(2)) {
      n21 = Func_DayOfWeek(prn);
        n0 = new NodeChoice(n21, 20);
    } else if (jj_2_79(2)) {
      n22 = Func_DayOfYear(prn);
        n0 = new NodeChoice(n22, 21);
    } else if (jj_2_80(2)) {
      n23 = Func_MonthName(prn);
        n0 = new NodeChoice(n23, 22);
    } else if (jj_2_81(2)) {
      n24 = Func_SubDate(prn);
        n0 = new NodeChoice(n24, 23);
    } else if (jj_2_82(2)) {
      n25 = Func_SubTime(prn);
        n0 = new NodeChoice(n25, 24);
    } else if (jj_2_83(2)) {
      n26 = Func_WeekOfYear(prn);
        n0 = new NodeChoice(n26, 25);
    } else if (jj_2_84(2)) {
      n27 = Func_Now(prn);
        n0 = new NodeChoice(n27, 26);
    } else if (jj_2_85(2)) {
      n28 = Func_Abs(prn);
        n0 = new NodeChoice(n28, 27);
    } else if (jj_2_86(2)) {
      n29 = Func_Ceil(prn);
        n0 = new NodeChoice(n29, 28);
    } else if (jj_2_87(2)) {
      n30 = Func_Ceiling(prn);
        n0 = new NodeChoice(n30, 29);
    } else if (jj_2_88(2)) {
      n31 = Func_Exp(prn);
        n0 = new NodeChoice(n31, 30);
    } else if (jj_2_89(2)) {
      n32 = Func_Floor(prn);
        n0 = new NodeChoice(n32, 31);
    } else if (jj_2_90(2)) {
      n33 = Func_LN(prn);
        n0 = new NodeChoice(n33, 32);
    } else if (jj_2_91(2)) {
      n34 = Func_Log(prn);
        n0 = new NodeChoice(n34, 33);
    } else if (jj_2_92(2)) {
      n35 = Func_PI(prn);
        n0 = new NodeChoice(n35, 34);
    } else if (jj_2_93(2)) {
      n36 = Func_Power(prn);
        n0 = new NodeChoice(n36, 35);
    } else if (jj_2_94(2)) {
      n37 = Func_Round(prn);
        n0 = new NodeChoice(n37, 36);
    } else if (jj_2_95(2)) {
      n38 = Func_Sign(prn);
        n0 = new NodeChoice(n38, 37);
    } else if (jj_2_96(2)) {
      n39 = Func_TAsin(prn);
        n0 = new NodeChoice(n39, 38);
    } else if (jj_2_97(2)) {
      n40 = Func_TAtan(prn);
        n0 = new NodeChoice(n40, 39);
    } else if (jj_2_98(2)) {
      n41 = Func_TCos(prn);
        n0 = new NodeChoice(n41, 40);
    } else if (jj_2_99(2)) {
      n42 = Func_TCot(prn);
        n0 = new NodeChoice(n42, 41);
    } else if (jj_2_100(2)) {
      n43 = Func_TDegree(prn);
        n0 = new NodeChoice(n43, 42);
    } else if (jj_2_101(2)) {
      n44 = Func_Radians(prn);
        n0 = new NodeChoice(n44, 43);
    } else if (jj_2_102(2)) {
      n45 = Func_Sin(prn);
        n0 = new NodeChoice(n45, 44);
    } else if (jj_2_103(2)) {
      n46 = Func_Tan(prn);
        n0 = new NodeChoice(n46, 45);
    } else if (jj_2_104(2)) {
      n47 = Func_Avg(prn);
        n0 = new NodeChoice(n47, 46);
    } else if (jj_2_105(2)) {
      n48 = Func_Count(prn);
        n0 = new NodeChoice(n48, 47);
    } else if (jj_2_106(2)) {
      n49 = Func_Max(prn);
        n0 = new NodeChoice(n49, 48);
    } else if (jj_2_107(2)) {
      n50 = Func_Min(prn);
        n0 = new NodeChoice(n50, 49);
    } else if (jj_2_108(2)) {
      n51 = Func_Stdev(prn);
        n0 = new NodeChoice(n51, 50);
    } else if (jj_2_109(2)) {
      n52 = Func_Sum(prn);
        n0 = new NodeChoice(n52, 51);
    } else if (jj_2_110(2)) {
      n53 = Func_Variance(prn);
        n0 = new NodeChoice(n53, 52);
    } else if (jj_2_111(2)) {
      n54 = Func_Ascii(prn);
        n0 = new NodeChoice(n54, 53);
    } else if (jj_2_112(2)) {
      n55 = Func_Index(prn);
        n0 = new NodeChoice(n55, 54);
    } else if (jj_2_113(2)) {
      n56 = Func_Left(prn);
        n0 = new NodeChoice(n56, 55);
    } else if (jj_2_114(2)) {
      n57 = Func_Length(prn);
        n0 = new NodeChoice(n57, 56);
    } else if (jj_2_115(2)) {
      n58 = Func_Lower(prn);
        n0 = new NodeChoice(n58, 57);
    } else if (jj_2_116(2)) {
      n59 = Func_Lpad(prn);
        n0 = new NodeChoice(n59, 58);
    } else if (jj_2_117(2)) {
      n60 = Func_Rpad(prn);
        n0 = new NodeChoice(n60, 59);
    } else if (jj_2_118(2)) {
      n61 = Func_Ltrim(prn);
        n0 = new NodeChoice(n61, 60);
    } else if (jj_2_119(2)) {
      n62 = Func_Replace(prn);
        n0 = new NodeChoice(n62, 61);
    } else if (jj_2_120(2)) {
      n63 = Func_Right(prn);
        n0 = new NodeChoice(n63, 62);
    } else if (jj_2_121(2)) {
      n64 = Func_Rtrim(prn);
        n0 = new NodeChoice(n64, 63);
    } else if (jj_2_122(2)) {
      n65 = Func_SubStr(prn);
        n0 = new NodeChoice(n65, 64);
    } else if (jj_2_123(2)) {
      n66 = Func_Trim(prn);
        n0 = new NodeChoice(n66, 65);
    } else if (jj_2_124(2)) {
      n67 = Func_Upper(prn);
        n0 = new NodeChoice(n67, 66);
    } else if (jj_2_125(2)) {
      n68 = Func_Database(prn);
        n0 = new NodeChoice(n68, 67);
    } else if (jj_2_126(2)) {
      n69 = Func_Value(prn);
        n0 = new NodeChoice(n69, 68);
    } else if (jj_2_127(2)) {
      n70 = Func_Version(prn);
        n0 = new NodeChoice(n70, 69);
    } else if (jj_2_128(2)) {
      n71 = Func_Case(prn);
        n0 = new NodeChoice(n71, 70);
    } else if (jj_2_129(2)) {
      n72 = Func_TACos(prn);
        n0 = new NodeChoice(n72, 71);
    } else if (jj_2_130(2)) {
      n73 = Func_Log10(prn);
        n0 = new NodeChoice(n73, 72);
    } else if (jj_2_131(2)) {
      n74 = Func_Mod(prn);
        n0 = new NodeChoice(n74, 73);
    } else if (jj_2_132(2)) {
      n75 = Func_Sqrt(prn);
        n0 = new NodeChoice(n75, 74);
    } else if (jj_2_133(2)) {
      n76 = Func_Least(prn);
        n0 = new NodeChoice(n76, 75);
    } else if (jj_2_134(2)) {
      n77 = Func_TCosh(prn);
        n0 = new NodeChoice(n77, 76);
    } else if (jj_2_135(2)) {
      n78 = Func_Float(prn);
        n0 = new NodeChoice(n78, 77);
    } else if (jj_2_136(2)) {
      n79 = Func_Greatest(prn);
        n0 = new NodeChoice(n79, 78);
    } else if (jj_2_137(2)) {
      n80 = Func_TATan2(prn);
        n0 = new NodeChoice(n80, 79);
    } else if (jj_2_138(2)) {
      n81 = Func_TATn2(prn);
        n0 = new NodeChoice(n81, 80);
    } else if (jj_2_139(2)) {
      n82 = Func_SoundEx(prn);
        n0 = new NodeChoice(n82, 81);
    } else if (jj_2_140(2)) {
      n83 = Func_InitCap(prn);
        n0 = new NodeChoice(n83, 82);
    } else if (jj_2_141(2)) {
      n84 = Func_LFill(prn);
        n0 = new NodeChoice(n84, 83);
    } else if (jj_2_142(2)) {
      n85 = Func_MapChar(prn);
        n0 = new NodeChoice(n85, 84);
    } else if (jj_2_143(2)) {
      n86 = Func_NUM(prn);
        n0 = new NodeChoice(n86, 85);
    } else if (jj_2_144(2)) {
      n87 = Func_Concat(prn);
        n0 = new NodeChoice(n87, 86);
    } else if (jj_2_145(2)) {
      n88 = Func_User(prn);
        n0 = new NodeChoice(n88, 87);
    } else if (jj_2_146(2)) {
      n89 = Func_Cast(prn);
        n0 = new NodeChoice(n89, 88);
    } else if (jj_2_147(2)) {
      n90 = Func_TimeOfDay(prn);
        n0 = new NodeChoice(n90, 89);
    } else if (jj_2_148(3)) {
      n91 = Func_Custom(prn);
        n0 = new NodeChoice(n91, 90);
    } else if (jj_2_149(2)) {
      n92 = Func_IsFinite(prn);
        n0 = new NodeChoice(n92, 91);
    } else if (jj_2_150(2)) {
      n93 = Func_Extract(prn);
        n0 = new NodeChoice(n93, 92);
    } else if (jj_2_151(2)) {
      n94 = Func_DateTrunc(prn);
        n0 = new NodeChoice(n94, 93);
    } else if (jj_2_152(2)) {
      n95 = Func_DatePart(prn);
        n0 = new NodeChoice(n95, 94);
    } else if (jj_2_153(2)) {
      n96 = Func_Age(prn);
        n0 = new NodeChoice(n96, 95);
    } else if (jj_2_154(2)) {
      n97 = Func_LocalTime(prn);
        n0 = new NodeChoice(n97, 96);
    } else if (jj_2_155(2)) {
      n98 = Func_LocalTimeStamp(prn);
        n0 = new NodeChoice(n98, 97);
    } else if (jj_2_156(2)) {
      n99 = Func_BitLength(prn);
        n0 = new NodeChoice(n99, 98);
    } else if (jj_2_157(2)) {
      n100 = Func_CharLength(prn);
        n0 = new NodeChoice(n100, 99);
    } else if (jj_2_158(2)) {
      n101 = Func_Convert(prn);
        n0 = new NodeChoice(n101, 100);
    } else if (jj_2_159(2)) {
      n102 = Func_OctetLength(prn);
        n0 = new NodeChoice(n102, 101);
    } else if (jj_2_160(2)) {
      n103 = Func_Overlay(prn);
        n0 = new NodeChoice(n103, 102);
    } else if (jj_2_161(2)) {
      n104 = Func_Position(prn);
        n0 = new NodeChoice(n104, 103);
    } else if (jj_2_162(2)) {
      n105 = Func_Substring(prn);
        n0 = new NodeChoice(n105, 104);
    } else if (jj_2_163(2)) {
      n106 = Func_ToHex(prn);
        n0 = new NodeChoice(n106, 105);
    } else if (jj_2_164(2)) {
      n107 = Func_QuoteLiteral(prn);
        n0 = new NodeChoice(n107, 106);
    } else if (jj_2_165(2)) {
      n108 = Func_QuoteIdent(prn);
        n0 = new NodeChoice(n108, 107);
    } else if (jj_2_166(2)) {
      n109 = Func_Md5(prn);
        n0 = new NodeChoice(n109, 108);
    } else if (jj_2_167(2)) {
      n110 = Func_Chr(prn);
        n0 = new NodeChoice(n110, 109);
    } else if (jj_2_168(2)) {
      n111 = Func_PgClientEncoding(prn);
        n0 = new NodeChoice(n111, 110);
    } else if (jj_2_169(2)) {
      n112 = Func_Translate(prn);
        n0 = new NodeChoice(n112, 111);
    } else if (jj_2_170(2)) {
      n113 = Func_ToAscii(prn);
        n0 = new NodeChoice(n113, 112);
    } else if (jj_2_171(2)) {
      n114 = Func_StrPos(prn);
        n0 = new NodeChoice(n114, 113);
    } else if (jj_2_172(2)) {
      n115 = Func_SplitPart(prn);
        n0 = new NodeChoice(n115, 114);
    } else if (jj_2_173(2)) {
      n116 = Func_Repeat(prn);
        n0 = new NodeChoice(n116, 115);
    } else if (jj_2_174(2)) {
      n117 = Func_Encode(prn);
        n0 = new NodeChoice(n117, 116);
    } else if (jj_2_175(2)) {
      n118 = Func_Decode(prn);
        n0 = new NodeChoice(n118, 117);
    } else if (jj_2_176(2)) {
      n119 = Func_Btrim(prn);
        n0 = new NodeChoice(n119, 118);
    } else if (jj_2_177(2)) {
      n120 = Func_Width_bucket(prn);
        n0 = new NodeChoice(n120, 119);
    } else if (jj_2_178(2)) {
      n121 = Func_Setseed(prn);
        n0 = new NodeChoice(n121, 120);
    } else if (jj_2_179(2)) {
      n122 = Func_Random(prn);
        n0 = new NodeChoice(n122, 121);
    } else if (jj_2_180(2)) {
      n123 = Func_Cbrt(prn);
        n0 = new NodeChoice(n123, 122);
    } else if (jj_2_181(2)) {
      n124 = Func_GetBit(prn);
        n0 = new NodeChoice(n124, 123);
    } else if (jj_2_182(2)) {
      n125 = Func_GetByte(prn);
        n0 = new NodeChoice(n125, 124);
    } else if (jj_2_183(2)) {
      n126 = Func_ToDate(prn);
        n0 = new NodeChoice(n126, 125);
    } else if (jj_2_184(2)) {
      n127 = Func_ClockTimeStamp(prn);
        n0 = new NodeChoice(n127, 126);
    } else if (jj_2_185(2)) {
      n128 = Func_StatementTimeStamp(prn);
        n0 = new NodeChoice(n128, 127);
    } else if (jj_2_186(2)) {
      n129 = Func_TransactionTimeStamp(prn);
        n0 = new NodeChoice(n129, 128);
    } else if (jj_2_187(2)) {
      n130 = Func_NullIf(prn);
        n0 = new NodeChoice(n130, 129);
    } else if (jj_2_188(2)) {
      n131 = Func_SetBit(prn);
        n0 = new NodeChoice(n131, 130);
    } else if (jj_2_189(2)) {
      n132 = Func_SetByte(prn);
        n0 = new NodeChoice(n132, 131);
    } else if (jj_2_190(2)) {
      n133 = Func_ToChar(prn);
        n0 = new NodeChoice(n133, 132);
    } else if (jj_2_191(2)) {
      n134 = Func_ToNumber(prn);
        n0 = new NodeChoice(n134, 133);
    } else if (jj_2_192(2)) {
      n135 = Func_ToTimestamp(prn);
        n0 = new NodeChoice(n135, 134);
    } else if (jj_2_193(2)) {
      n136 = Func_AddMonths(prn);
        n0 = new NodeChoice(n136, 135);
    } else if (jj_2_194(2)) {
      n137 = Func_JustifyDays(prn);
        n0 = new NodeChoice(n137, 136);
    } else if (jj_2_195(2)) {
      n138 = Func_JustifyHours(prn);
        n0 = new NodeChoice(n138, 137);
    } else if (jj_2_196(2)) {
      n139 = Func_JustifyInterval(prn);
        n0 = new NodeChoice(n139, 138);
    } else if (jj_2_197(2)) {
      n140 = Func_LastDay(prn);
        n0 = new NodeChoice(n140, 139);
    } else if (jj_2_198(2)) {
      n141 = Func_MonthsBetween(prn);
        n0 = new NodeChoice(n141, 140);
    } else if (jj_2_199(2)) {
      n142 = Func_NextDay(prn);
        n0 = new NodeChoice(n142, 141);
    } else if (jj_2_200(2)) {
      n143 = Func_CurrentDatabase(prn);
        n0 = new NodeChoice(n143, 142);
    } else if (jj_2_201(2)) {
      n144 = Func_CurrentSchema(prn);
        n0 = new NodeChoice(n144, 143);
    } else if (jj_2_202(2)) {
      n145 = Func_BitAnd(prn);
        n0 = new NodeChoice(n145, 144);
    } else if (jj_2_203(2)) {
      n146 = Func_BitOr(prn);
        n0 = new NodeChoice(n146, 145);
    } else if (jj_2_204(2)) {
      n147 = Func_BoolAnd(prn);
        n0 = new NodeChoice(n147, 146);
    } else if (jj_2_205(2)) {
      n148 = Func_BoolOr(prn);
        n0 = new NodeChoice(n148, 147);
    } else if (jj_2_206(2)) {
      n149 = Func_CorrCov(prn);
        n0 = new NodeChoice(n149, 148);
    } else if (jj_2_207(2)) {
      n150 = Func_Regr(prn);
        n0 = new NodeChoice(n150, 149);
    } else if (jj_2_208(2)) {
      n151 = Func_RegexReplace(prn);
        n0 = new NodeChoice(n151, 150);
    } else if (jj_2_209(2)) {
      n152 = Func_Coalesce(prn);
        n0 = new NodeChoice(n152, 151);
    } else if (jj_2_210(2)) {
      n153 = Func_Abbrev(prn);
        n0 = new NodeChoice(n153, 152);
    } else if (jj_2_211(2)) {
      n154 = Func_Broadcast(prn);
        n0 = new NodeChoice(n154, 153);
    } else if (jj_2_212(2)) {
      n155 = Func_Family(prn);
        n0 = new NodeChoice(n155, 154);
    } else if (jj_2_213(2)) {
      n156 = Func_Host(prn);
        n0 = new NodeChoice(n156, 155);
    } else if (jj_2_214(2)) {
      n157 = Func_Hostmask(prn);
        n0 = new NodeChoice(n157, 156);
    } else if (jj_2_215(2)) {
      n158 = Func_Masklen(prn);
        n0 = new NodeChoice(n158, 157);
    } else if (jj_2_216(2)) {
      n159 = Func_Netmask(prn);
        n0 = new NodeChoice(n159, 158);
    } else if (jj_2_217(2)) {
      n160 = Func_Network(prn);
        n0 = new NodeChoice(n160, 159);
    } else if (jj_2_218(2)) {
      n161 = Func_Set_Masklen(prn);
        n0 = new NodeChoice(n161, 160);
    } else if (jj_2_219(2)) {
      n162 = Func_Text(prn);
        n0 = new NodeChoice(n162, 161);
    } else if (jj_2_220(2)) {
      n163 = Func_ST_AsText(prn);
        n0 = new NodeChoice(n163, 162);
    } else if (jj_2_221(2)) {
      n164 = Func_ST_Transform(prn);
        n0 = new NodeChoice(n164, 163);
    } else if (jj_2_222(2)) {
      n165 = Func_ST_Distance(prn);
        n0 = new NodeChoice(n165, 164);
    } else if (jj_2_223(2)) {
      n166 = Func_ST_DWithin(prn);
        n0 = new NodeChoice(n166, 165);
    } else if (jj_2_224(2)) {
      n167 = Func_ST_Length(prn);
        n0 = new NodeChoice(n167, 166);
    } else if (jj_2_225(2)) {
      n168 = Func_ST_Area(prn);
        n0 = new NodeChoice(n168, 167);
    } else if (jj_2_226(2)) {
      n169 = Func_ST_Boundary(prn);
        n0 = new NodeChoice(n169, 168);
    } else if (jj_2_227(2)) {
      n170 = Func_ST_Buffer(prn);
        n0 = new NodeChoice(n170, 169);
    } else if (jj_2_228(2)) {
      n171 = Func_ST_Centroid(prn);
        n0 = new NodeChoice(n171, 170);
    } else if (jj_2_229(2)) {
      n172 = Func_ST_AsBinary(prn);
        n0 = new NodeChoice(n172, 171);
    } else if (jj_2_230(2)) {
      n173 = Func_ST_ADDMEASURE(prn);
        n0 = new NodeChoice(n173, 172);
    } else if (jj_2_231(2)) {
      n174 = Func_ST_ADDPOINT(prn);
        n0 = new NodeChoice(n174, 173);
    } else if (jj_2_232(2)) {
      n175 = Func_ST_AFFINE(prn);
        n0 = new NodeChoice(n175, 174);
    } else if (jj_2_233(2)) {
      n176 = Func_ST_AREA2D(prn);
        n0 = new NodeChoice(n176, 175);
    } else if (jj_2_234(2)) {
      n177 = Func_ST_ASEWKB(prn);
        n0 = new NodeChoice(n177, 176);
    } else if (jj_2_235(2)) {
      n178 = Func_ST_ASEWKT(prn);
        n0 = new NodeChoice(n178, 177);
    } else if (jj_2_236(2)) {
      n179 = Func_ST_ASGEOJSON(prn);
        n0 = new NodeChoice(n179, 178);
    } else if (jj_2_237(2)) {
      n180 = Func_ST_ASGML(prn);
        n0 = new NodeChoice(n180, 179);
    } else if (jj_2_238(2)) {
      n181 = Func_ST_ASHEXEWKB(prn);
        n0 = new NodeChoice(n181, 180);
    } else if (jj_2_239(2)) {
      n182 = Func_ST_ASKML(prn);
        n0 = new NodeChoice(n182, 181);
    } else if (jj_2_240(2)) {
      n183 = Func_ST_ASSVG(prn);
        n0 = new NodeChoice(n183, 182);
    } else if (jj_2_241(2)) {
      n184 = Func_ST_AZIMUTH(prn);
        n0 = new NodeChoice(n184, 183);
    } else if (jj_2_242(2)) {
      n185 = Func_ST_BDMPOLYFROMTEXT(prn);
        n0 = new NodeChoice(n185, 184);
    } else if (jj_2_243(2)) {
      n186 = Func_ST_BDPOLYFROMTEXT(prn);
        n0 = new NodeChoice(n186, 185);
    } else if (jj_2_244(2)) {
      n187 = Func_ST_BUILDAREA(prn);
        n0 = new NodeChoice(n187, 186);
    } else if (jj_2_245(2)) {
      n188 = Func_ST_BYTEA(prn);
        n0 = new NodeChoice(n188, 187);
    } else if (jj_2_246(2)) {
      n189 = Func_ST_CHIP_IN(prn);
        n0 = new NodeChoice(n189, 188);
    } else if (jj_2_247(2)) {
      n190 = Func_ST_CHIP_OUT(prn);
        n0 = new NodeChoice(n190, 189);
    } else if (jj_2_248(2)) {
      n191 = Func_ST_CLOSESTPOINT(prn);
        n0 = new NodeChoice(n191, 190);
    } else if (jj_2_249(2)) {
      n192 = Func_ST_COLLECT(prn);
        n0 = new NodeChoice(n192, 191);
    } else if (jj_2_250(2)) {
      n193 = Func_ST_COLLECTIONEXTRACT(prn);
        n0 = new NodeChoice(n193, 192);
    } else if (jj_2_251(2)) {
      n194 = Func_ST_COMBINE_BBOX(prn);
        n0 = new NodeChoice(n194, 193);
    } else if (jj_2_252(2)) {
      n195 = Func_ST_COMPRESSION(prn);
        n0 = new NodeChoice(n195, 194);
    } else if (jj_2_253(2)) {
      n196 = Func_ST_CONTAINS(prn);
        n0 = new NodeChoice(n196, 195);
    } else if (jj_2_254(2)) {
      n197 = Func_ST_CONTAINSPROPERLY(prn);
        n0 = new NodeChoice(n197, 196);
    } else if (jj_2_255(2)) {
      n198 = Func_ST_CONVEXHULL(prn);
        n0 = new NodeChoice(n198, 197);
    } else if (jj_2_256(2)) {
      n199 = Func_ST_COORDDIM(prn);
        n0 = new NodeChoice(n199, 198);
    } else if (jj_2_257(2)) {
      n200 = Func_ST_COVEREDBY(prn);
        n0 = new NodeChoice(n200, 199);
    } else if (jj_2_258(2)) {
      n201 = Func_ST_COVERS(prn);
        n0 = new NodeChoice(n201, 200);
    } else if (jj_2_259(2)) {
      n202 = Func_ST_CROSSES(prn);
        n0 = new NodeChoice(n202, 201);
    } else if (jj_2_260(2)) {
      n203 = Func_ST_CURVETOLINE(prn);
        n0 = new NodeChoice(n203, 202);
    } else if (jj_2_261(2)) {
      n204 = Func_ST_DATATYPE(prn);
        n0 = new NodeChoice(n204, 203);
    } else if (jj_2_262(2)) {
      n205 = Func_ST_DFULLYWITHIN(prn);
        n0 = new NodeChoice(n205, 204);
    } else if (jj_2_263(2)) {
      n206 = Func_ST_DIFFERENCE(prn);
        n0 = new NodeChoice(n206, 205);
    } else if (jj_2_264(2)) {
      n207 = Func_ST_DIMENSION(prn);
        n0 = new NodeChoice(n207, 206);
    } else if (jj_2_265(2)) {
      n208 = Func_ST_DISJOINT(prn);
        n0 = new NodeChoice(n208, 207);
    } else if (jj_2_266(2)) {
      n209 = Func_ST_DISTANCE_SPHERE(prn);
        n0 = new NodeChoice(n209, 208);
    } else if (jj_2_267(2)) {
      n210 = Func_ST_DISTANCE_SPHEROID(prn);
        n0 = new NodeChoice(n210, 209);
    } else if (jj_2_268(2)) {
      n211 = Func_ST_ENDPOINT(prn);
        n0 = new NodeChoice(n211, 210);
    } else if (jj_2_269(2)) {
      n212 = Func_ST_ENVELOPE(prn);
        n0 = new NodeChoice(n212, 211);
    } else if (jj_2_270(2)) {
      n213 = Func_ST_EQUALS(prn);
        n0 = new NodeChoice(n213, 212);
    } else if (jj_2_271(2)) {
      n214 = Func_ST_EXTENT(prn);
        n0 = new NodeChoice(n214, 213);
    } else if (jj_2_272(2)) {
      n215 = Func_ST_EXTENT3D(prn);
        n0 = new NodeChoice(n215, 214);
    } else if (jj_2_273(2)) {
      n216 = Func_ST_EXTERIORRING(prn);
        n0 = new NodeChoice(n216, 215);
    } else if (jj_2_274(2)) {
      n217 = Func_ST_FACTOR(prn);
        n0 = new NodeChoice(n217, 216);
    } else if (jj_2_275(2)) {
      n218 = Func_ST_FIND_EXTENT(prn);
        n0 = new NodeChoice(n218, 217);
    } else if (jj_2_276(2)) {
      n219 = Func_ST_FORCERHR(prn);
        n0 = new NodeChoice(n219, 218);
    } else if (jj_2_277(2)) {
      n220 = Func_ST_FORCE_2D(prn);
        n0 = new NodeChoice(n220, 219);
    } else if (jj_2_278(2)) {
      n221 = Func_ST_FORCE_3D(prn);
        n0 = new NodeChoice(n221, 220);
    } else if (jj_2_279(2)) {
      n222 = Func_ST_FORCE_3DM(prn);
        n0 = new NodeChoice(n222, 221);
    } else if (jj_2_280(2)) {
      n223 = Func_ST_FORCE_3DZ(prn);
        n0 = new NodeChoice(n223, 222);
    } else if (jj_2_281(2)) {
      n224 = Func_ST_FORCE_4D(prn);
        n0 = new NodeChoice(n224, 223);
    } else if (jj_2_282(2)) {
      n225 = Func_ST_FORCE_COLLECTION(prn);
        n0 = new NodeChoice(n225, 224);
    } else if (jj_2_283(2)) {
      n226 = Func_ST_GEOMETRYTYPE(prn);
        n0 = new NodeChoice(n226, 225);
    } else if (jj_2_284(2)) {
      n227 = Func_ST_GEOGFROMTEXT(prn);
        n0 = new NodeChoice(n227, 226);
    } else if (jj_2_285(2)) {
      n228 = Func_ST_GEOGFROMWKB(prn);
        n0 = new NodeChoice(n228, 227);
    } else if (jj_2_286(2)) {
      n229 = Func_ST_GEOGRAPHYFROMTEXT(prn);
        n0 = new NodeChoice(n229, 228);
    } else if (jj_2_287(2)) {
      n230 = Func_ST_GEOHASH(prn);
        n0 = new NodeChoice(n230, 229);
    } else if (jj_2_288(2)) {
      n231 = Func_ST_GEOMCOLLFROMTEXT(prn);
        n0 = new NodeChoice(n231, 230);
    } else if (jj_2_289(2)) {
      n232 = Func_ST_GEOMCOLLFROMWKB(prn);
        n0 = new NodeChoice(n232, 231);
    } else if (jj_2_290(2)) {
      n233 = Func_ST_GEOMFROMEWKB(prn);
        n0 = new NodeChoice(n233, 232);
    } else if (jj_2_291(2)) {
      n234 = Func_ST_GEOMFROMEWKT(prn);
        n0 = new NodeChoice(n234, 233);
    } else if (jj_2_292(2)) {
      n235 = Func_ST_GEOMFROMGML(prn);
        n0 = new NodeChoice(n235, 234);
    } else if (jj_2_293(2)) {
      n236 = Func_ST_GEOMFROMKML(prn);
        n0 = new NodeChoice(n236, 235);
    } else if (jj_2_294(2)) {
      n237 = Func_ST_GEOMFROMTEXT(prn);
        n0 = new NodeChoice(n237, 236);
    } else if (jj_2_295(2)) {
      n238 = Func_ST_GEOMFROMWKB(prn);
        n0 = new NodeChoice(n238, 237);
    } else if (jj_2_296(2)) {
      n239 = Func_ST_GMLTOSQL(prn);
        n0 = new NodeChoice(n239, 238);
    } else if (jj_2_297(2)) {
      n240 = Func_ST_HASARC(prn);
        n0 = new NodeChoice(n240, 239);
    } else if (jj_2_298(2)) {
      n241 = Func_ST_HAUSDORFFDISTANCE(prn);
        n0 = new NodeChoice(n241, 240);
    } else if (jj_2_299(2)) {
      n242 = Func_ST_HEIGHT(prn);
        n0 = new NodeChoice(n242, 241);
    } else if (jj_2_300(2)) {
      n243 = Func_ST_INTERIORRINGN(prn);
        n0 = new NodeChoice(n243, 242);
    } else if (jj_2_301(2)) {
      n244 = Func_ST_INTERSECTION(prn);
        n0 = new NodeChoice(n244, 243);
    } else if (jj_2_302(2)) {
      n245 = Func_ST_INTERSECTS(prn);
        n0 = new NodeChoice(n245, 244);
    } else if (jj_2_303(2)) {
      n246 = Func_ST_ISCLOSED(prn);
        n0 = new NodeChoice(n246, 245);
    } else if (jj_2_304(2)) {
      n247 = Func_ST_ISEMPTY(prn);
        n0 = new NodeChoice(n247, 246);
    } else if (jj_2_305(2)) {
      n248 = Func_ST_ISRING(prn);
        n0 = new NodeChoice(n248, 247);
    } else if (jj_2_306(2)) {
      n249 = Func_ST_ISSIMPLE(prn);
        n0 = new NodeChoice(n249, 248);
    } else if (jj_2_307(2)) {
      n250 = Func_ST_ISVALID(prn);
        n0 = new NodeChoice(n250, 249);
    } else if (jj_2_308(2)) {
      n251 = Func_ST_ISVALIDREASON(prn);
        n0 = new NodeChoice(n251, 250);
    } else if (jj_2_309(2)) {
      n252 = Func_ST_LENGTH2D(prn);
        n0 = new NodeChoice(n252, 251);
    } else if (jj_2_310(2)) {
      n253 = Func_ST_LENGTH2D_SPHEROID(prn);
        n0 = new NodeChoice(n253, 252);
    } else if (jj_2_311(2)) {
      n254 = Func_ST_LENGTH3D(prn);
        n0 = new NodeChoice(n254, 253);
    } else if (jj_2_312(2)) {
      n255 = Func_ST_LENGTH3D_SPHEROID(prn);
        n0 = new NodeChoice(n255, 254);
    } else if (jj_2_313(2)) {
      n256 = Func_ST_LENGTH_SPHEROID(prn);
        n0 = new NodeChoice(n256, 255);
    } else if (jj_2_314(2)) {
      n257 = Func_ST_LINECROSSINGDIRECTION(prn);
        n0 = new NodeChoice(n257, 256);
    } else if (jj_2_315(2)) {
      n258 = Func_ST_LINEFROMMULTIPOINT(prn);
        n0 = new NodeChoice(n258, 257);
    } else if (jj_2_316(2)) {
      n259 = Func_ST_LINEFROMTEXT(prn);
        n0 = new NodeChoice(n259, 258);
    } else if (jj_2_317(2)) {
      n260 = Func_ST_LINEFROMWKB(prn);
        n0 = new NodeChoice(n260, 259);
    } else if (jj_2_318(2)) {
      n261 = Func_ST_LINEMERGE(prn);
        n0 = new NodeChoice(n261, 260);
    } else if (jj_2_319(2)) {
      n262 = Func_ST_LINESTRINGFROMWKB(prn);
        n0 = new NodeChoice(n262, 261);
    } else if (jj_2_320(2)) {
      n263 = Func_ST_LINETOCURVE(prn);
        n0 = new NodeChoice(n263, 262);
    } else if (jj_2_321(2)) {
      n264 = Func_ST_LINE_INTERPOLATE_POINT(prn);
        n0 = new NodeChoice(n264, 263);
    } else if (jj_2_322(2)) {
      n265 = Func_ST_LINE_LOCATE_POINT(prn);
        n0 = new NodeChoice(n265, 264);
    } else if (jj_2_323(2)) {
      n266 = Func_ST_LINE_SUBSTRING(prn);
        n0 = new NodeChoice(n266, 265);
    } else if (jj_2_324(2)) {
      n267 = Func_ST_LOCATEBETWEENELEVATIONS(prn);
        n0 = new NodeChoice(n267, 266);
    } else if (jj_2_325(2)) {
      n268 = Func_ST_LOCATE_ALONG_MEASURE(prn);
        n0 = new NodeChoice(n268, 267);
    } else if (jj_2_326(2)) {
      n269 = Func_ST_LOCATE_BETWEEN_MEASURES(prn);
        n0 = new NodeChoice(n269, 268);
    } else if (jj_2_327(2)) {
      n270 = Func_ST_LONGESTLINE(prn);
        n0 = new NodeChoice(n270, 269);
    } else if (jj_2_328(2)) {
      n271 = Func_ST_M(prn);
        n0 = new NodeChoice(n271, 270);
    } else if (jj_2_329(2)) {
      n272 = Func_ST_MAKEENVELOPE(prn);
        n0 = new NodeChoice(n272, 271);
    } else if (jj_2_330(2)) {
      n273 = Func_ST_MAKEPOINT(prn);
        n0 = new NodeChoice(n273, 272);
    } else if (jj_2_331(2)) {
      n274 = Func_ST_MAKEPOINTM(prn);
        n0 = new NodeChoice(n274, 273);
    } else if (jj_2_332(2)) {
      n275 = Func_ST_MAKEPOLYGON(prn);
        n0 = new NodeChoice(n275, 274);
    } else if (jj_2_333(2)) {
      n276 = Func_ST_MAXDISTANCE(prn);
        n0 = new NodeChoice(n276, 275);
    } else if (jj_2_334(2)) {
      n277 = Func_ST_MEMCOLLECT(prn);
        n0 = new NodeChoice(n277, 276);
    } else if (jj_2_335(2)) {
      n278 = Func_ST_MEM_SIZE(prn);
        n0 = new NodeChoice(n278, 277);
    } else if (jj_2_336(2)) {
      n279 = Func_ST_MINIMUMBOUNDINGCIRCLE(prn);
        n0 = new NodeChoice(n279, 278);
    } else if (jj_2_337(2)) {
      n280 = Func_ST_MLINEFROMTEXT(prn);
        n0 = new NodeChoice(n280, 279);
    } else if (jj_2_338(2)) {
      n281 = Func_ST_MLINEFROMWKB(prn);
        n0 = new NodeChoice(n281, 280);
    } else if (jj_2_339(2)) {
      n282 = Func_ST_MPOINTFROMTEXT(prn);
        n0 = new NodeChoice(n282, 281);
    } else if (jj_2_340(2)) {
      n283 = Func_ST_MPOINTFROMWKB(prn);
        n0 = new NodeChoice(n283, 282);
    } else if (jj_2_341(2)) {
      n284 = Func_ST_MPOLYFROMTEXT(prn);
        n0 = new NodeChoice(n284, 283);
    } else if (jj_2_342(2)) {
      n285 = Func_ST_MPOLYFROMWKB(prn);
        n0 = new NodeChoice(n285, 284);
    } else if (jj_2_343(2)) {
      n286 = Func_ST_MULTI(prn);
        n0 = new NodeChoice(n286, 285);
    } else if (jj_2_344(2)) {
      n287 = Func_ST_MULTILINEFROMWKB(prn);
        n0 = new NodeChoice(n287, 286);
    } else if (jj_2_345(2)) {
      n288 = Func_ST_MULTILINESTRINGFROMTEXT(prn);
        n0 = new NodeChoice(n288, 287);
    } else if (jj_2_346(2)) {
      n289 = Func_ST_MULTIPOINTFROMTEXT(prn);
        n0 = new NodeChoice(n289, 288);
    } else if (jj_2_347(2)) {
      n290 = Func_ST_MULTIPOINTFROMWKB(prn);
        n0 = new NodeChoice(n290, 289);
    } else if (jj_2_348(2)) {
      n291 = Func_ST_MULTIPOLYFROMWKB(prn);
        n0 = new NodeChoice(n291, 290);
    } else if (jj_2_349(2)) {
      n292 = Func_ST_MULTIPOLYGONFROMTEXT(prn);
        n0 = new NodeChoice(n292, 291);
    } else if (jj_2_350(2)) {
      n293 = Func_ST_NDIMS(prn);
        n0 = new NodeChoice(n293, 292);
    } else if (jj_2_351(2)) {
      n294 = Func_ST_NPOINTS(prn);
        n0 = new NodeChoice(n294, 293);
    } else if (jj_2_352(2)) {
      n295 = Func_ST_NRINGS(prn);
        n0 = new NodeChoice(n295, 294);
    } else if (jj_2_353(2)) {
      n296 = Func_ST_NUMGEOMETRIES(prn);
        n0 = new NodeChoice(n296, 295);
    } else if (jj_2_354(2)) {
      n297 = Func_ST_NUMINTERIORRING(prn);
        n0 = new NodeChoice(n297, 296);
    } else if (jj_2_355(2)) {
      n298 = Func_ST_NUMINTERIORRINGS(prn);
        n0 = new NodeChoice(n298, 297);
    } else if (jj_2_356(2)) {
      n299 = Func_ST_NUMPOINTS(prn);
        n0 = new NodeChoice(n299, 298);
    } else if (jj_2_357(2)) {
      n300 = Func_ST_ORDERINGEQUALS(prn);
        n0 = new NodeChoice(n300, 299);
    } else if (jj_2_358(2)) {
      n301 = Func_ST_OVERLAPS(prn);
        n0 = new NodeChoice(n301, 300);
    } else if (jj_2_359(2)) {
      n302 = Func_ST_PERIMETER(prn);
        n0 = new NodeChoice(n302, 301);
    } else if (jj_2_360(2)) {
      n303 = Func_ST_PERIMETER2D(prn);
        n0 = new NodeChoice(n303, 302);
    } else if (jj_2_361(2)) {
      n304 = Func_ST_PERIMETER3D(prn);
        n0 = new NodeChoice(n304, 303);
    } else if (jj_2_362(2)) {
      n305 = Func_ST_POINT(prn);
        n0 = new NodeChoice(n305, 304);
    } else if (jj_2_363(2)) {
      n306 = Func_ST_POINTFROMTEXT(prn);
        n0 = new NodeChoice(n306, 305);
    } else if (jj_2_364(2)) {
      n307 = Func_ST_POINTFROMWKB(prn);
        n0 = new NodeChoice(n307, 306);
    } else if (jj_2_365(2)) {
      n308 = Func_ST_POINTN(prn);
        n0 = new NodeChoice(n308, 307);
    } else if (jj_2_366(2)) {
      n309 = Func_ST_POINTONSURFACE(prn);
        n0 = new NodeChoice(n309, 308);
    } else if (jj_2_367(2)) {
      n310 = Func_ST_POINT_INSIDE_CIRCLE(prn);
        n0 = new NodeChoice(n310, 309);
    } else if (jj_2_368(2)) {
      n311 = Func_ST_POLYFROMTEXT(prn);
        n0 = new NodeChoice(n311, 310);
    } else if (jj_2_369(2)) {
      n312 = Func_ST_POLYFROMWKB(prn);
        n0 = new NodeChoice(n312, 311);
    } else if (jj_2_370(2)) {
      n313 = Func_ST_POLYGON(prn);
        n0 = new NodeChoice(n313, 312);
    } else if (jj_2_371(2)) {
      n314 = Func_ST_POLYGONFROMTEXT(prn);
        n0 = new NodeChoice(n314, 313);
    } else if (jj_2_372(2)) {
      n315 = Func_ST_POLYGONFROMWKB(prn);
        n0 = new NodeChoice(n315, 314);
    } else if (jj_2_373(2)) {
      n316 = Func_ST_POSTGIS_GIST_JOINSEL(prn);
        n0 = new NodeChoice(n316, 315);
    } else if (jj_2_374(2)) {
      n317 = Func_ST_POSTGIS_GIST_SEL(prn);
        n0 = new NodeChoice(n317, 316);
    } else if (jj_2_375(2)) {
      n318 = Func_ST_RELATE(prn);
        n0 = new NodeChoice(n318, 317);
    } else if (jj_2_376(2)) {
      n319 = Func_ST_REMOVEPOINT(prn);
        n0 = new NodeChoice(n319, 318);
    } else if (jj_2_377(2)) {
      n320 = Func_ST_REVERSE(prn);
        n0 = new NodeChoice(n320, 319);
    } else if (jj_2_378(2)) {
      n321 = Func_ST_ROTATEX(prn);
        n0 = new NodeChoice(n321, 320);
    } else if (jj_2_379(2)) {
      n322 = Func_ST_ROTATEY(prn);
        n0 = new NodeChoice(n322, 321);
    } else if (jj_2_380(2)) {
      n323 = Func_ST_ROTATEZ(prn);
        n0 = new NodeChoice(n323, 322);
    } else if (jj_2_381(2)) {
      n324 = Func_ST_SCALE(prn);
        n0 = new NodeChoice(n324, 323);
    } else if (jj_2_382(2)) {
      n325 = Func_ST_SEGMENTIZE(prn);
        n0 = new NodeChoice(n325, 324);
    } else if (jj_2_383(2)) {
      n326 = Func_ST_SETFACTOR(prn);
        n0 = new NodeChoice(n326, 325);
    } else if (jj_2_384(2)) {
      n327 = Func_ST_SETPOINT(prn);
        n0 = new NodeChoice(n327, 326);
    } else if (jj_2_385(2)) {
      n328 = Func_ST_SETSRID(prn);
        n0 = new NodeChoice(n328, 327);
    } else if (jj_2_386(2)) {
      n329 = Func_ST_SHIFT_LONGITUDE(prn);
        n0 = new NodeChoice(n329, 328);
    } else if (jj_2_387(2)) {
      n330 = Func_ST_SHORTESTLINE(prn);
        n0 = new NodeChoice(n330, 329);
    } else if (jj_2_388(2)) {
      n331 = Func_ST_SIMPLIFY(prn);
        n0 = new NodeChoice(n331, 330);
    } else if (jj_2_389(2)) {
      n332 = Func_ST_SIMPLIFYPRESERVETOPOLOGY(prn);
        n0 = new NodeChoice(n332, 331);
    } else if (jj_2_390(2)) {
      n333 = Func_ST_SNAPTOGRID(prn);
        n0 = new NodeChoice(n333, 332);
    } else if (jj_2_391(2)) {
      n334 = Func_ST_SRID(prn);
        n0 = new NodeChoice(n334, 333);
    } else if (jj_2_392(2)) {
      n335 = Func_ST_STARTPOINT(prn);
        n0 = new NodeChoice(n335, 334);
    } else if (jj_2_393(2)) {
      n336 = Func_ST_SUMMARY(prn);
        n0 = new NodeChoice(n336, 335);
    } else if (jj_2_394(2)) {
      n337 = Func_ST_SYMDIFFERENCE(prn);
        n0 = new NodeChoice(n337, 336);
    } else if (jj_2_395(2)) {
      n338 = Func_ST_SYMMETRICDIFFERENCE(prn);
        n0 = new NodeChoice(n338, 337);
    } else if (jj_2_396(2)) {
      n339 = Func_ST_TEXT(prn);
        n0 = new NodeChoice(n339, 338);
    } else if (jj_2_397(2)) {
      n340 = Func_ST_TOUCHES(prn);
        n0 = new NodeChoice(n340, 339);
    } else if (jj_2_398(2)) {
      n341 = Func_ST_TRANSLATE(prn);
        n0 = new NodeChoice(n341, 340);
    } else if (jj_2_399(2)) {
      n342 = Func_ST_TRANSSCALE(prn);
        n0 = new NodeChoice(n342, 341);
    } else if (jj_2_400(2)) {
      n343 = Func_ST_WIDTH(prn);
        n0 = new NodeChoice(n343, 342);
    } else if (jj_2_401(2)) {
      n344 = Func_ST_WITHIN(prn);
        n0 = new NodeChoice(n344, 343);
    } else if (jj_2_402(2)) {
      n345 = Func_ST_WKBTOSQL(prn);
        n0 = new NodeChoice(n345, 344);
    } else if (jj_2_403(2)) {
      n346 = Func_ST_WKTTOSQL(prn);
        n0 = new NodeChoice(n346, 345);
    } else if (jj_2_404(2)) {
      n347 = Func_ST_X(prn);
        n0 = new NodeChoice(n347, 346);
    } else if (jj_2_405(2)) {
      n348 = Func_ST_Y(prn);
        n0 = new NodeChoice(n348, 347);
    } else if (jj_2_406(2)) {
      n349 = Func_ST_Z(prn);
        n0 = new NodeChoice(n349, 348);
    } else if (jj_2_407(2)) {
      n350 = Func_ST_ZMFLAG(prn);
        n0 = new NodeChoice(n350, 349);
    } else if (jj_2_408(2)) {
      n351 = Func_ST_BOX2D(prn);
        n0 = new NodeChoice(n351, 350);
    } else if (jj_2_409(2)) {
      n352 = Func_ST_BOX3D(prn);
        n0 = new NodeChoice(n352, 351);
    } else if (jj_2_410(2)) {
      n353 = Func_ST_GEOMETRY(prn);
        n0 = new NodeChoice(n353, 352);
    } else if (jj_2_411(2)) {
      n354 = Func_ST_GEOMETRYN(prn);
        n0 = new NodeChoice(n354, 353);
    } else if (jj_2_412(2)) {
      n355 = Func_POSTGIS_DROPBBOX(prn);
        n0 = new NodeChoice(n355, 354);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new FunctionCall(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Cbrt Func_Cbrt(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(CBRT_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Cbrt(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_GetBit Func_GetBit(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(GET_BIT_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_GetBit(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_GetByte Func_GetByte(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(GET_BYTE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_GetByte(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ToDate Func_ToDate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(TO_DATE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[278] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ToDate(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ClockTimeStamp Func_ClockTimeStamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(CLOCK_TIMESTAMP_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[279] = jj_gen;
      ;
    }
     {if (true) return new Func_ClockTimeStamp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_StatementTimeStamp Func_StatementTimeStamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(STATEMENT_TIMESTAMP_);
                               n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[280] = jj_gen;
      ;
    }
     {if (true) return new Func_StatementTimeStamp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TransactionTimeStamp Func_TransactionTimeStamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(TRANSACTION_TIMESTAMP_);
                                 n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[281] = jj_gen;
      ;
    }
     {if (true) return new Func_TransactionTimeStamp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_NullIf Func_NullIf(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(NULLIF_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_NullIf(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SetBit Func_SetBit(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(SET_BIT_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_SetBit(n0,n2,n4,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SetByte Func_SetByte(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(SET_BYTE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_SetByte(n0,n2,n4,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ToChar Func_ToChar(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(TO_CHAR_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[282] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ToChar(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ToNumber Func_ToNumber(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(TO_NUMBER_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ToNumber(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ToTimestamp Func_ToTimestamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(TO_TIMESTAMP_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ToTimestamp(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_AddMonths Func_AddMonths(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ADD_MONTHS_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_AddMonths(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_JustifyDays Func_JustifyDays(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(JUSTIFY_DAYS_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_413(2)) {
      n6 = jj_consume_token(INTERVAL_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
    } else {
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_JustifyDays(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_JustifyHours Func_JustifyHours(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(JUSTIFY_HOURS_);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_414(2)) {
      n6 = jj_consume_token(INTERVAL_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
    } else {
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_JustifyHours(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_JustifyInterval Func_JustifyInterval(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(JUSTIFY_INTERVAL_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_415(2)) {
      n6 = jj_consume_token(INTERVAL_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
    } else {
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_JustifyInterval(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_LastDay Func_LastDay(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LAST_DAY_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_LastDay(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_MonthsBetween Func_MonthsBetween(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(MONTHS_BETWEEN_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_MonthsBetween(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_NextDay Func_NextDay(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(NEXT_DAY_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_NextDay(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_CurrentDatabase Func_CurrentDatabase(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(CURRENT_DATABASE_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[283] = jj_gen;
      ;
    }
     {if (true) return new Func_CurrentDatabase(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_CurrentSchema Func_CurrentSchema(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(CURRENT_SCHEMA_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
      break;
    default:
      jj_la1[284] = jj_gen;
      ;
    }
     {if (true) return new Func_CurrentSchema(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_BitAnd Func_BitAnd(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(BIT_AND_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[285] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_BitAnd(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_BitOr Func_BitOr(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(BIT_OR_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[286] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_BitOr(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_BoolAnd Func_BoolAnd(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case BOOL_AND_:
      n2 = jj_consume_token(BOOL_AND_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case EVERY_:
      n4 = jj_consume_token(EVERY_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[287] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n9 = jj_consume_token(DISTINCT_);
                       n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      break;
    default:
      jj_la1[288] = jj_gen;
      ;
    }
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_BoolAnd(n0,n5,n7,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_BoolOr Func_BoolOr(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(BOOL_OR_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[289] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_BoolOr(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_CorrCov Func_CorrCov(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case CORR_:
      n2 = jj_consume_token(CORR_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case COVAR_POP_:
      n4 = jj_consume_token(COVAR_POP_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case COVAR_SAMP_:
      n6 = jj_consume_token(COVAR_SAMP_);
                            n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[290] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n8 = jj_consume_token(PARENTHESIS_START_);
                             n7 = JTBToolkit.makeNodeToken(n8);
    n9 = SQLArgument(prn);
    n11 = jj_consume_token(781);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = SQLArgument(prn);
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_CorrCov(n0,n7,n9,n10,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Regr Func_Regr(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   SQLArgument n21;
   NodeToken n22;
   Token n23;
   SQLArgument n24;
   NodeToken n25;
   Token n26;

   {
   }
    switch (jj_nt.kind) {
    case REGR_AVGX_:
      n2 = jj_consume_token(REGR_AVGX_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case REGR_AVGY_:
      n4 = jj_consume_token(REGR_AVGY_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case REGR_COUNT_:
      n6 = jj_consume_token(REGR_COUNT_);
                            n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case REGR_INTERCEPT_:
      n8 = jj_consume_token(REGR_INTERCEPT_);
                                n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case REGR_R2_:
      n10 = jj_consume_token(REGR_R2_);
                          n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case REGR_SLOPE_:
      n12 = jj_consume_token(REGR_SLOPE_);
                             n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case REGR_SXX_:
      n14 = jj_consume_token(REGR_SXX_);
                           n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case REGR_SXY_:
      n16 = jj_consume_token(REGR_SXY_);
                           n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case REGR_SYY_:
      n18 = jj_consume_token(REGR_SYY_);
                           n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    default:
      jj_la1[291] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n20 = jj_consume_token(PARENTHESIS_START_);
                              n19 = JTBToolkit.makeNodeToken(n20);
    n21 = SQLArgument(prn);
    n23 = jj_consume_token(781);
             n22 = JTBToolkit.makeNodeToken(n23);
    n24 = SQLArgument(prn);
    n26 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n25 = JTBToolkit.makeNodeToken(n26);
     {if (true) return new Func_Regr(n0,n19,n21,n22,n24,n25);}
    throw new Error("Missing return statement in function");
  }

  final public Func_RegexReplace Func_RegexReplace(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(REGEXP_REPLACE_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(781);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = SQLArgument(prn);
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[292] = jj_gen;
      ;
    }
    n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Func_RegexReplace(n0,n2,n4,n5,n7,n8,n10,n11,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Coalesce Func_Coalesce(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(COALESCE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgumentList(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Coalesce(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Random Func_Random(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(RANDOM_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_Random(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Setseed Func_Setseed(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(SETSEED_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Setseed(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Width_bucket Func_Width_bucket(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
    n1 = jj_consume_token(WIDTH_BUCKET_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    n15 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new Func_Width_bucket(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Btrim Func_Btrim(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(BTRIM_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[293] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Btrim(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Decode Func_Decode(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(DECODE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[294] = jj_gen;
        break label_26;
      }
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_Decode(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Encode Func_Encode(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ENCODE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Encode(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Repeat Func_Repeat(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(REPEAT_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Repeat(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SplitPart Func_SplitPart(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(SPLIT_PART_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_SplitPart(n0,n2,n4,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_StrPos Func_StrPos(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(STRPOS_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_StrPos(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ToAscii Func_ToAscii(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(TO_ASCII_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[295] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ToAscii(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Translate Func_Translate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(TRANSLATE_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(781);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = SQLArgument(prn);
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[296] = jj_gen;
      ;
    }
    n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Func_Translate(n0,n2,n4,n5,n7,n8,n10,n11,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Func_PgClientEncoding Func_PgClientEncoding(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(PG_CLIENT_ENCODING_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_PgClientEncoding(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Chr Func_Chr(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(CHR_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Chr(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Md5 Func_Md5(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(MD5_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Md5(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_QuoteIdent Func_QuoteIdent(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(QUOTE_IDENT_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_QuoteIdent(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_QuoteLiteral Func_QuoteLiteral(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(QUOTE_LITERAL_);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_QuoteLiteral(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ToHex Func_ToHex(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(TO_HEX_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ToHex(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Substring Func_Substring(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
    n1 = jj_consume_token(SUBSTRING_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case FROM_:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(FROM_);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[297] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case FOR_:
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(FOR_);
                   n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n14 = SQLArgument(prn);
        n11.addNode(n14);
        n10.addNode(n11);
      break;
    default:
      jj_la1[298] = jj_gen;
      ;
    }
    n16 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new Func_Substring(n0,n2,n4,n5,n10,n15);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Position Func_Position(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(POSITION_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(IN_);
              n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Position(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Overlay Func_Overlay(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(OVERLAY_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PLACING_);
                   n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(FROM_);
                n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case FOR_:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(FOR_);
                   n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = SQLArgument(prn);
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[299] = jj_gen;
      ;
    }
    n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Func_Overlay(n0,n2,n4,n5,n7,n8,n10,n11,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Func_OctetLength Func_OctetLength(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(OCTET_LENGTH_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_OctetLength(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Convert Func_Convert(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeChoice n10;
   NodeToken n11;
   Token n12;
   Identifier n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   Identifier n21;
   NodeToken n22;
   Token n23;

   {
   }
    n1 = jj_consume_token(CONVERT_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case USING_:
      n7 = jj_consume_token(USING_);
                       n6 = JTBToolkit.makeNodeToken(n7);
           n5 = new NodeChoice(n6, 0);
      break;
    case 781:
      n9 = jj_consume_token(781);
                  n8 = JTBToolkit.makeNodeToken(n9);
           n5 = new NodeChoice(n8, 1);
      break;
    default:
      jj_la1[300] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case STRING_LITERAL:
      n12 = jj_consume_token(STRING_LITERAL);
                                n11 = JTBToolkit.makeNodeToken(n12);
           n10 = new NodeChoice(n11, 0);
      break;
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n13 = Identifier(prn);
           n10 = new NodeChoice(n13, 1);
      break;
    default:
      jj_la1[301] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case 781:
        n15 = new NodeSequence(2);
      n17 = jj_consume_token(781);
                n16 = JTBToolkit.makeNodeToken(n17);
        n15.addNode(n16);
      switch (jj_nt.kind) {
      case STRING_LITERAL:
        n20 = jj_consume_token(STRING_LITERAL);
                                   n19 = JTBToolkit.makeNodeToken(n20);
              n18 = new NodeChoice(n19, 0);
        break;
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n21 = Identifier(prn);
              n18 = new NodeChoice(n21, 1);
        break;
      default:
        jj_la1[302] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n15.addNode(n18);
        n14.addNode(n15);
      break;
    default:
      jj_la1[303] = jj_gen;
      ;
    }
    n23 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n22 = JTBToolkit.makeNodeToken(n23);
     {if (true) return new Func_Convert(n0,n2,n4,n5,n10,n14,n22);}
    throw new Error("Missing return statement in function");
  }

  final public Func_CharLength Func_CharLength(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case CHAR_LENGTH_:
      n2 = jj_consume_token(CHAR_LENGTH_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CHARACTER_LENGTH_:
      n4 = jj_consume_token(CHARACTER_LENGTH_);
                                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[304] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_CharLength(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_BitLength Func_BitLength(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(BIT_LENGTH_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_BitLength(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_LocalTime Func_LocalTime(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(LOCALTIME_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = SQLArgument(prn);
        n3.addNode(n6);
      n8 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n2.addNode(n3);
      break;
    default:
      jj_la1[305] = jj_gen;
      ;
    }
     {if (true) return new Func_LocalTime(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_LocalTimeStamp Func_LocalTimeStamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(LOCALTIMESTAMP_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = SQLArgument(prn);
        n3.addNode(n6);
      n8 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n2.addNode(n3);
      break;
    default:
      jj_la1[306] = jj_gen;
      ;
    }
     {if (true) return new Func_LocalTimeStamp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Age Func_Age(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(AGE_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[307] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Age(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DatePart Func_DatePart(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(DATEPART_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_DatePart(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DateTrunc Func_DateTrunc(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(DATETRUNC_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_DateTrunc(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Extract Func_Extract(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   SQLArgument n37;
   NodeToken n38;
   Token n39;

   {
   }
    n1 = jj_consume_token(EXTRACT_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case YEAR_FROM:
      n6 = jj_consume_token(YEAR_FROM);
                          n5 = JTBToolkit.makeNodeToken(n6);
           n4 = new NodeChoice(n5, 0);
      break;
    case QUARTER_FROM:
      n8 = jj_consume_token(QUARTER_FROM);
                             n7 = JTBToolkit.makeNodeToken(n8);
           n4 = new NodeChoice(n7, 1);
      break;
    case MONTH_FROM:
      n10 = jj_consume_token(MONTH_FROM);
                            n9 = JTBToolkit.makeNodeToken(n10);
           n4 = new NodeChoice(n9, 2);
      break;
    case WEEK_FROM:
      n12 = jj_consume_token(WEEK_FROM);
                           n11 = JTBToolkit.makeNodeToken(n12);
           n4 = new NodeChoice(n11, 3);
      break;
    case DAY_FROM:
      n14 = jj_consume_token(DAY_FROM);
                          n13 = JTBToolkit.makeNodeToken(n14);
           n4 = new NodeChoice(n13, 4);
      break;
    case HOUR_FROM:
      n16 = jj_consume_token(HOUR_FROM);
                           n15 = JTBToolkit.makeNodeToken(n16);
           n4 = new NodeChoice(n15, 5);
      break;
    case MINUTE_FROM:
      n18 = jj_consume_token(MINUTE_FROM);
                             n17 = JTBToolkit.makeNodeToken(n18);
           n4 = new NodeChoice(n17, 6);
      break;
    case SECOND_FROM:
      n20 = jj_consume_token(SECOND_FROM);
                             n19 = JTBToolkit.makeNodeToken(n20);
           n4 = new NodeChoice(n19, 7);
      break;
    case DOY_FROM:
      n22 = jj_consume_token(DOY_FROM);
                          n21 = JTBToolkit.makeNodeToken(n22);
           n4 = new NodeChoice(n21, 8);
      break;
    case DOW_FROM:
      n24 = jj_consume_token(DOW_FROM);
                          n23 = JTBToolkit.makeNodeToken(n24);
           n4 = new NodeChoice(n23, 9);
      break;
    case DECADE_FROM:
      n26 = jj_consume_token(DECADE_FROM);
                             n25 = JTBToolkit.makeNodeToken(n26);
           n4 = new NodeChoice(n25, 10);
      break;
    case CENTURY_FROM:
      n28 = jj_consume_token(CENTURY_FROM);
                              n27 = JTBToolkit.makeNodeToken(n28);
           n4 = new NodeChoice(n27, 11);
      break;
    case MILLISECOND_FROM:
      n30 = jj_consume_token(MILLISECOND_FROM);
                                  n29 = JTBToolkit.makeNodeToken(n30);
           n4 = new NodeChoice(n29, 12);
      break;
    case MILLENNIUM_FROM:
      n32 = jj_consume_token(MILLENNIUM_FROM);
                                 n31 = JTBToolkit.makeNodeToken(n32);
           n4 = new NodeChoice(n31, 13);
      break;
    case MICROSECONDS_FROM:
      n34 = jj_consume_token(MICROSECONDS_FROM);
                                   n33 = JTBToolkit.makeNodeToken(n34);
           n4 = new NodeChoice(n33, 14);
      break;
    case EPOCH_FROM:
      n36 = jj_consume_token(EPOCH_FROM);
                            n35 = JTBToolkit.makeNodeToken(n36);
           n4 = new NodeChoice(n35, 15);
      break;
    default:
      jj_la1[308] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n37 = SQLArgument(prn);
    n39 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n38 = JTBToolkit.makeNodeToken(n39);
     {if (true) return new Func_Extract(n0,n2,n4,n37,n38);}
    throw new Error("Missing return statement in function");
  }

  final public Func_IsFinite Func_IsFinite(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ISFINITE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_IsFinite(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TimeOfDay Func_TimeOfDay(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(TIMEOFDAY_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_TimeOfDay(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_User Func_User(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   {
   }
    switch (jj_nt.kind) {
    case USER_:
      n2 = jj_consume_token(USER_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CURRENT_USER_:
      n4 = jj_consume_token(CURRENT_USER_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[309] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(PARENTHESIS_START_);
                                n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n10 = jj_consume_token(PARENTHESIS_CLOSE_);
                                 n9 = JTBToolkit.makeNodeToken(n10);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[310] = jj_gen;
      ;
    }
     {if (true) return new Func_User(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Custom Func_Custom(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLArgumentList n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case NOT_BITWISE_:
    case MINUS_:
    case PARENTHESIS_START_:
    case ABSOLUTE_:
    case PLUS_:
    case X_:
    case Y_:
    case Z_:
    case SQUARE_ROOT_:
    case FACTORIAL_PREFIX_:
    case LN_:
    case PI_:
    case CUBE_ROOT_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case MOD_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CASE_:
    case CAST_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LEFT_:
    case LONG_:
    case LPAD_:
    case NULL_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TRUE_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FALSE_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INDEX_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case RIGHT_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case MODULE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case COALESCE_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case OVERLAPS_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case INT_LITERAL:
    case DECIMAL_LITERAL:
    case SCIENTIFIC_LITERAL:
    case STRING_LITERAL:
    case PARAM_PLACE_HOLDER:
    case INTERVAL_LITERAL:
    case DATE_LITERAL:
    case TIME_LITERAL:
    case TIMESTAMP_LITERAL:
    case TEXT_LITERAL:
    case INTEGER_LITERAL:
    case MACADDR_LITERAL:
    case CIDR_LITERAL:
    case INET_LITERAL:
    case BINARY_LITERAL:
    case HEXDECIMAL_LITERAL:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n5 = SQLArgumentList(prn);
        n4.addNode(n5);
      break;
    default:
      jj_la1[311] = jj_gen;
      ;
    }
    n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Func_Custom(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Concat Func_Concat(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(CONCAT_WORD);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Concat(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Case Func_Case(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLSimpleExpression n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLSimpleExpression n9;
   NodeToken n10;
   Token n11;
   SQLSimpleExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLSimpleExpression n17;
   NodeToken n18;
   Token n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeListOptional n23 = new NodeListOptional();
   NodeSequence n24;
   NodeToken n25;
   Token n26;
   SQLComplexExpression n27;
   NodeToken n28;
   Token n29;
   SQLSimpleExpression n30;
   NodeOptional n31 = new NodeOptional();
   NodeSequence n32;
   NodeToken n33;
   Token n34;
   SQLSimpleExpression n35;
   NodeToken n36;
   Token n37;

   {
   }
    if (jj_2_416(2)) {
        n1 = new NodeSequence(6);
      n3 = jj_consume_token(CASE_);
                   n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = SQLSimpleExpression(prn);
        n1.addNode(n4);
      label_27:
      while (true) {
        switch (jj_nt.kind) {
        case WHEN_:
          ;
          break;
        default:
          jj_la1[312] = jj_gen;
          break label_27;
        }
           n6 = new NodeSequence(4);
        n8 = jj_consume_token(WHEN_);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = SQLSimpleExpression(prn);
           n6.addNode(n9);
        n11 = jj_consume_token(THEN_);
                       n10 = JTBToolkit.makeNodeToken(n11);
           n6.addNode(n10);
        n12 = SQLSimpleExpression(prn);
           n6.addNode(n12);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n1.addNode(n5);
      switch (jj_nt.kind) {
      case ELSE_:
           n14 = new NodeSequence(2);
        n16 = jj_consume_token(ELSE_);
                       n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        n17 = SQLSimpleExpression(prn);
           n14.addNode(n17);
           n13.addNode(n14);
        break;
      default:
        jj_la1[313] = jj_gen;
        ;
      }
        n1.addNode(n13);
      n19 = jj_consume_token(END_);
                   n18 = JTBToolkit.makeNodeToken(n19);
        n1.addNode(n18);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch (jj_nt.kind) {
      case CASE_:
        n20 = new NodeSequence(4);
        n22 = jj_consume_token(CASE_);
                    n21 = JTBToolkit.makeNodeToken(n22);
        n20.addNode(n21);
        label_28:
        while (true) {
          switch (jj_nt.kind) {
          case WHEN_:
            ;
            break;
          default:
            jj_la1[314] = jj_gen;
            break label_28;
          }
           n24 = new NodeSequence(4);
          n26 = jj_consume_token(WHEN_);
                       n25 = JTBToolkit.makeNodeToken(n26);
           n24.addNode(n25);
          n27 = SQLComplexExpression(prn);
           n24.addNode(n27);
          n29 = jj_consume_token(THEN_);
                       n28 = JTBToolkit.makeNodeToken(n29);
           n24.addNode(n28);
          n30 = SQLSimpleExpression(prn);
           n24.addNode(n30);
           n23.addNode(n24);
        }
        n23.nodes.trimToSize();
        n20.addNode(n23);
        switch (jj_nt.kind) {
        case ELSE_:
           n32 = new NodeSequence(2);
          n34 = jj_consume_token(ELSE_);
                       n33 = JTBToolkit.makeNodeToken(n34);
           n32.addNode(n33);
          n35 = SQLSimpleExpression(prn);
           n32.addNode(n35);
           n31.addNode(n32);
          break;
        default:
          jj_la1[315] = jj_gen;
          ;
        }
        n20.addNode(n31);
        n37 = jj_consume_token(END_);
                   n36 = JTBToolkit.makeNodeToken(n37);
        n20.addNode(n36);
        n0 = new NodeChoice(n20, 1);
        break;
      default:
        jj_la1[316] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Func_Case(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Abs Func_Abs(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ABS_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Abs(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Ceil Func_Ceil(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(CEIL_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Ceil(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Ceiling Func_Ceiling(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(CEILING_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Ceiling(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Exp Func_Exp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(EXP_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Exp(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Floor Func_Floor(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(FLOOR_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Floor(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_LN Func_LN(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LN_);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_LN(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Log Func_Log(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(LOG_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[317] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Log(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Log10 Func_Log10(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LOG10_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Log10(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_PI Func_PI(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(PI_);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_PI(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Power Func_Power(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(POWER_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Power(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Sign Func_Sign(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(SIGN_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Sign(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TAsin Func_TAsin(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ASIN_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TAsin(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TATan2 Func_TATan2(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ATAN2_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_TATan2(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TATn2 Func_TATn2(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ATN2_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_TATn2(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TAtan Func_TAtan(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ATAN_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TAtan(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TCos Func_TCos(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(COS_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TCos(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TCosh Func_TCosh(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(COSH_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TCosh(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TCot Func_TCot(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(COT_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TCot(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TACos Func_TACos(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ACOS_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TACos(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TDegree Func_TDegree(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DEGREE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_TDegree(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Radians Func_Radians(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(RADIANS_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Radians(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Sin Func_Sin(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(SIN_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Sin(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Tan Func_Tan(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(TAN_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Tan(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Round Func_Round(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(ROUND_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[318] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Round(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Mod Func_Mod(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case MOD_:
      n2 = jj_consume_token(MOD_);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MODULE_:
      n4 = jj_consume_token(MODULE_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[319] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_Mod(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Float Func_Float(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(FLOAT_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Float(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Greatest Func_Greatest(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(GREATEST_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgumentList(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Greatest(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Sqrt Func_Sqrt(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(SQRT_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Sqrt(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Least Func_Least(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgumentList n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LEAST_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgumentList(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Least(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Ascii Func_Ascii(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ASCII_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Ascii(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Index Func_Index(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   SQLArgument n20;
   NodeToken n21;
   Token n22;

   {
   }
    switch (jj_nt.kind) {
    case INDEX_:
      n2 = jj_consume_token(INDEX_);
                       n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INSTR_:
      n4 = jj_consume_token(INSTR_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[320] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    if (jj_2_417(3)) {
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(781);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = SQLArgument(prn);
        n12.addNode(n15);
        n11.addNode(n12);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n17 = new NodeSequence(2);
      n19 = jj_consume_token(781);
                n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n20 = SQLArgument(prn);
        n17.addNode(n20);
        n16.addNode(n17);
      break;
    default:
      jj_la1[321] = jj_gen;
      ;
    }
    n22 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n21 = JTBToolkit.makeNodeToken(n22);
     {if (true) return new Func_Index(n0,n5,n7,n8,n10,n11,n16,n21);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Left Func_Left(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(LEFT_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Left(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Right Func_Right(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(RIGHT_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Right(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Length Func_Length(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LENGTH_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Length(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Lower Func_Lower(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LOWER_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Lower(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Lpad Func_Lpad(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(LPAD_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[322] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_Lpad(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Ltrim Func_Ltrim(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(LTRIM_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[323] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Ltrim(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Replace Func_Replace(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(REPLACE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[324] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_Replace(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Trunc Func_Trunc(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(TRUNC_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[325] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Trunc(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Trim Func_Trim(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   SQLArgument n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(TRIM_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case BOTH:
      n6 = jj_consume_token(BOTH);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n4 = new NodeChoice(n5, 0);
      break;
    case LEADING:
      n8 = jj_consume_token(LEADING);
                        n7 = JTBToolkit.makeNodeToken(n8);
           n4 = new NodeChoice(n7, 1);
      break;
    case TRAILING:
      n10 = jj_consume_token(TRAILING);
                          n9 = JTBToolkit.makeNodeToken(n10);
           n4 = new NodeChoice(n9, 2);
      break;
    default:
      jj_la1[326] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case NOT_BITWISE_:
    case MINUS_:
    case PARENTHESIS_START_:
    case ABSOLUTE_:
    case PLUS_:
    case X_:
    case Y_:
    case Z_:
    case SQUARE_ROOT_:
    case FACTORIAL_PREFIX_:
    case LN_:
    case PI_:
    case CUBE_ROOT_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case MOD_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CASE_:
    case CAST_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LEFT_:
    case LONG_:
    case LPAD_:
    case NULL_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TRUE_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FALSE_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INDEX_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case RIGHT_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case MODULE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case COALESCE_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case OVERLAPS_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case INT_LITERAL:
    case DECIMAL_LITERAL:
    case SCIENTIFIC_LITERAL:
    case STRING_LITERAL:
    case PARAM_PLACE_HOLDER:
    case INTERVAL_LITERAL:
    case DATE_LITERAL:
    case TIME_LITERAL:
    case TIMESTAMP_LITERAL:
    case TEXT_LITERAL:
    case INTEGER_LITERAL:
    case MACADDR_LITERAL:
    case CIDR_LITERAL:
    case INET_LITERAL:
    case BINARY_LITERAL:
    case HEXDECIMAL_LITERAL:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n12 = SQLArgument(prn);
        n11.addNode(n12);
      break;
    default:
      jj_la1[327] = jj_gen;
      ;
    }
    n14 = jj_consume_token(FROM_);
                 n13 = JTBToolkit.makeNodeToken(n14);
    n15 = SQLArgument(prn);
    n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Func_Trim(n0,n2,n4,n11,n13,n15,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Rpad Func_Rpad(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(RPAD_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[328] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_Rpad(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Rtrim Func_Rtrim(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(RTRIM_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[329] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_Rtrim(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SubStr Func_SubStr(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(SUBSTR_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[330] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_SubStr(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Database Func_Database(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(DATABASE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_Database(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Version Func_Version(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(VERSION_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_Version(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Value Func_Value(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeListOptional n8 = new NodeListOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(VALUE_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    label_29:
    while (true) {
      if (jj_2_418(2)) {
        ;
      } else {
        break label_29;
      }
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
    }
     n8.nodes.trimToSize();
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_Value(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Avg Func_Avg(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(AVERAGE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[331] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Avg(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Count Func_Count(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
    n1 = jj_consume_token(COUNT_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case STAR_:
      n6 = jj_consume_token(STAR_);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n4 = new NodeChoice(n5, 0);
      break;
    case NOT_BITWISE_:
    case MINUS_:
    case PARENTHESIS_START_:
    case ABSOLUTE_:
    case PLUS_:
    case X_:
    case Y_:
    case Z_:
    case SQUARE_ROOT_:
    case FACTORIAL_PREFIX_:
    case LN_:
    case PI_:
    case CUBE_ROOT_:
    case ABS_:
    case AGE_:
    case ALL_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case MOD_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CASE_:
    case CAST_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LEFT_:
    case LONG_:
    case LPAD_:
    case NULL_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TRUE_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FALSE_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INDEX_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case RIGHT_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case MODULE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case COALESCE_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DISTINCT_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case OVERLAPS_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case INT_LITERAL:
    case DECIMAL_LITERAL:
    case SCIENTIFIC_LITERAL:
    case STRING_LITERAL:
    case PARAM_PLACE_HOLDER:
    case INTERVAL_LITERAL:
    case DATE_LITERAL:
    case TIME_LITERAL:
    case TIMESTAMP_LITERAL:
    case TEXT_LITERAL:
    case INTEGER_LITERAL:
    case MACADDR_LITERAL:
    case CIDR_LITERAL:
    case INET_LITERAL:
    case BINARY_LITERAL:
    case HEXDECIMAL_LITERAL:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
           n7 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case ALL_:
      case DISTINCT_:
        switch (jj_nt.kind) {
        case DISTINCT_:
          n11 = jj_consume_token(DISTINCT_);
                                 n10 = JTBToolkit.makeNodeToken(n11);
                 n9 = new NodeChoice(n10, 0);
          break;
        case ALL_:
          n13 = jj_consume_token(ALL_);
                            n12 = JTBToolkit.makeNodeToken(n13);
                 n9 = new NodeChoice(n12, 1);
          break;
        default:
          jj_la1[332] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              n8.addNode(n9);
        break;
      default:
        jj_la1[333] = jj_gen;
        ;
      }
           n7.addNode(n8);
      n14 = SQLArgument(prn);
           n7.addNode(n14);
           n4 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[334] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n16 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new Func_Count(n0,n2,n4,n15);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Max Func_Max(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(MAX_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[335] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Max(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Min Func_Min(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(MIN_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[336] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Min(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Stdev Func_Stdev(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case STDDEV_:
      n2 = jj_consume_token(STDDEV_);
                        n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case STDDEV_POP_:
      n4 = jj_consume_token(STDDEV_POP_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case STDDEV_SAMP_:
      n6 = jj_consume_token(STDDEV_SAMP_);
                             n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[337] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n8 = jj_consume_token(PARENTHESIS_START_);
                             n7 = JTBToolkit.makeNodeToken(n8);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n11 = jj_consume_token(DISTINCT_);
                        n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      break;
    default:
      jj_la1[338] = jj_gen;
      ;
    }
    n12 = SQLArgument(prn);
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_Stdev(n0,n7,n9,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Variance Func_Variance(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeToken n14;
   Token n15;
   SQLArgument n16;
   NodeToken n17;
   Token n18;

   {
   }
    switch (jj_nt.kind) {
    case VARIANCE_:
      n2 = jj_consume_token(VARIANCE_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case VARIANCE_POP_:
      n4 = jj_consume_token(VARIANCE_POP_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case VARIANCE_SAMP_:
      n6 = jj_consume_token(VARIANCE_SAMP_);
                               n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case VAR_POP_:
      n8 = jj_consume_token(VAR_POP_);
                         n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case VAR_SAMP_:
      n10 = jj_consume_token(VAR_SAMP_);
                           n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[339] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n12 = jj_consume_token(PARENTHESIS_START_);
                              n11 = JTBToolkit.makeNodeToken(n12);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n15 = jj_consume_token(DISTINCT_);
                        n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      break;
    default:
      jj_la1[340] = jj_gen;
      ;
    }
    n16 = SQLArgument(prn);
    n18 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n17 = JTBToolkit.makeNodeToken(n18);
     {if (true) return new Func_Variance(n0,n11,n13,n16,n17);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Sum Func_Sum(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(SUM_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case DISTINCT_:
      n6 = jj_consume_token(DISTINCT_);
                       n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      break;
    default:
      jj_la1[341] = jj_gen;
      ;
    }
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Sum(n0,n2,n4,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Upper Func_Upper(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(UPPER_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Upper(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Abbrev Func_Abbrev(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ABBREV_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Abbrev(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Broadcast Func_Broadcast(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(BROADCAST_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Broadcast(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Family Func_Family(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(FAMILY_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Family(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Host Func_Host(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(HOST_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Host(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Hostmask Func_Hostmask(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(HOSTMASK_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Hostmask(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Masklen Func_Masklen(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(MASKLEN_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Masklen(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Netmask Func_Netmask(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(NETMASK_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Netmask(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Network Func_Network(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(NETWORK_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Network(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Set_Masklen Func_Set_Masklen(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(SET_MASKLEN_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_Set_Masklen(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Text Func_Text(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(TEXT_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Text(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_AsText Func_ST_AsText(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ASTEXT_:
      n2 = jj_consume_token(ST_ASTEXT_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ASTEXT_:
      n4 = jj_consume_token(ASTEXT_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[342] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_AsText(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Transform Func_ST_Transform(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_TRANSFORM_:
      n2 = jj_consume_token(ST_TRANSFORM_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case TRANSFORM_:
      n4 = jj_consume_token(TRANSFORM_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[343] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_Transform(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Distance Func_ST_Distance(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_DISTANCE_:
      n2 = jj_consume_token(ST_DISTANCE_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DISTANCE_:
      n4 = jj_consume_token(DISTANCE_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[344] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_Distance(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DWithin Func_ST_DWithin(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(ST_DWITHIN_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_DWithin(n0,n2,n4,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Length Func_ST_Length(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(ST_LENGTH_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[345] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ST_Length(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Area Func_ST_Area(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(ST_AREA_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[346] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ST_Area(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_AsBinary Func_ST_AsBinary(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case ST_ASBINARY_:
      n2 = jj_consume_token(ST_ASBINARY_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ASBINARY_:
      n4 = jj_consume_token(ASBINARY_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[347] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[348] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_AsBinary(n0,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Boundary Func_ST_Boundary(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_BOUNDARY_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_Boundary(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Buffer Func_ST_Buffer(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(ST_BUFFER_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[349] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_Buffer(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Centroid Func_ST_Centroid(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_CENTROID_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_Centroid(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ADDMEASURE Func_ST_ADDMEASURE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_ADDMEASURE_);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_ADDMEASURE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ADDPOINT Func_ST_ADDPOINT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_ADDPOINT_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_ADDPOINT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_AFFINE Func_ST_AFFINE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_AFFINE_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_AFFINE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_AREA2D Func_ST_AREA2D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_AREA2D_:
      n2 = jj_consume_token(ST_AREA2D_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case AREA2D_:
      n4 = jj_consume_token(AREA2D_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[350] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_AREA2D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASEWKB Func_ST_ASEWKB(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case ST_ASEWKB_:
      n2 = jj_consume_token(ST_ASEWKB_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ASEWKB_:
      n4 = jj_consume_token(ASEWKB_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[351] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[352] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_ASEWKB(n0,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASEWKT Func_ST_ASEWKT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ASEWKT_:
      n2 = jj_consume_token(ST_ASEWKT_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ASEWKT_:
      n4 = jj_consume_token(ASEWKT_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[353] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ASEWKT(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASGEOJSON Func_ST_ASGEOJSON(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   SQLArgument n19;
   NodeToken n20;
   Token n21;

   {
   }
    n1 = jj_consume_token(ST_ASGEOJSON_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    if (jj_2_419(3)) {
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
    } else {
      ;
    }
    if (jj_2_420(3)) {
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(781);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n14 = SQLArgument(prn);
        n11.addNode(n14);
        n10.addNode(n11);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n16 = new NodeSequence(2);
      n18 = jj_consume_token(781);
                n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      n19 = SQLArgument(prn);
        n16.addNode(n19);
        n15.addNode(n16);
      break;
    default:
      jj_la1[354] = jj_gen;
      ;
    }
    n21 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n20 = JTBToolkit.makeNodeToken(n21);
     {if (true) return new Func_ST_ASGEOJSON(n0,n2,n4,n5,n10,n15,n20);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASGML Func_ST_ASGML(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeOptional n15 = new NodeOptional();
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   SQLArgument n19;
   NodeToken n20;
   Token n21;

   {
   }
    n1 = jj_consume_token(ST_ASGML_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    if (jj_2_421(3)) {
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
    } else {
      ;
    }
    if (jj_2_422(3)) {
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(781);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n14 = SQLArgument(prn);
        n11.addNode(n14);
        n10.addNode(n11);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n16 = new NodeSequence(2);
      n18 = jj_consume_token(781);
                n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
      n19 = SQLArgument(prn);
        n16.addNode(n19);
        n15.addNode(n16);
      break;
    default:
      jj_la1[355] = jj_gen;
      ;
    }
    n21 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n20 = JTBToolkit.makeNodeToken(n21);
     {if (true) return new Func_ST_ASGML(n0,n2,n4,n5,n10,n15,n20);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASHEXEWKB Func_ST_ASHEXEWKB(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case ST_ASHEXEWKB_:
      n2 = jj_consume_token(ST_ASHEXEWKB_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ASHEXEWKB_:
      n4 = jj_consume_token(ASHEXEWKB_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[356] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[357] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_ASHEXEWKB(n0,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASKML Func_ST_ASKML(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLArgument n17;
   NodeToken n18;
   Token n19;

   {
   }
    switch (jj_nt.kind) {
    case ST_ASKML_:
      n2 = jj_consume_token(ST_ASKML_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ASKML_:
      n4 = jj_consume_token(ASKML_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[358] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    if (jj_2_423(3)) {
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(781);
                n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n17 = SQLArgument(prn);
        n14.addNode(n17);
        n13.addNode(n14);
      break;
    default:
      jj_la1[359] = jj_gen;
      ;
    }
    n19 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n18 = JTBToolkit.makeNodeToken(n19);
     {if (true) return new Func_ST_ASKML(n0,n5,n7,n8,n13,n18);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ASSVG Func_ST_ASSVG(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeOptional n10 = new NodeOptional();
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
    n1 = jj_consume_token(ST_ASSVG_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    if (jj_2_424(3)) {
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(781);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n14 = SQLArgument(prn);
        n11.addNode(n14);
        n10.addNode(n11);
      break;
    default:
      jj_la1[360] = jj_gen;
      ;
    }
    n16 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new Func_ST_ASSVG(n0,n2,n4,n5,n10,n15);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_AZIMUTH Func_ST_AZIMUTH(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_AZIMUTH_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_AZIMUTH(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_BDMPOLYFROMTEXT Func_ST_BDMPOLYFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_BDMPOLYFROMTEXT_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_BDMPOLYFROMTEXT(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_BDPOLYFROMTEXT Func_ST_BDPOLYFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_BDPOLYFROMTEXT_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_BDPOLYFROMTEXT(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_BUILDAREA Func_ST_BUILDAREA(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_BUILDAREA_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_BUILDAREA(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_BYTEA Func_ST_BYTEA(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_BYTEA_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_BYTEA(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CHIP_IN Func_ST_CHIP_IN(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_CHIP_IN_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_CHIP_IN(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CHIP_OUT Func_ST_CHIP_OUT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_CHIP_OUT_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_CHIP_OUT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CLOSESTPOINT Func_ST_CLOSESTPOINT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_CLOSESTPOINT_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_CLOSESTPOINT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COLLECT Func_ST_COLLECT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case ST_COLLECT_:
      n2 = jj_consume_token(ST_COLLECT_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case COLLECT_:
      n4 = jj_consume_token(COLLECT_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[361] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[362] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_COLLECT(n0,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COLLECTIONEXTRACT Func_ST_COLLECTIONEXTRACT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_COLLECTIONEXTRACT_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_COLLECTIONEXTRACT(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COMBINE_BBOX Func_ST_COMBINE_BBOX(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_COMBINE_BBOX_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_COMBINE_BBOX(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COMPRESSION Func_ST_COMPRESSION(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_COMPRESSION_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_COMPRESSION(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CONTAINS Func_ST_CONTAINS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_CONTAINS_:
      n2 = jj_consume_token(ST_CONTAINS_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case CONTAINS_:
      n4 = jj_consume_token(CONTAINS_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[363] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_CONTAINS(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CONTAINSPROPERLY Func_ST_CONTAINSPROPERLY(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_CONTAINSPROPERLY_);
                               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_CONTAINSPROPERLY(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CONVEXHULL Func_ST_CONVEXHULL(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_CONVEXHULL_);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_CONVEXHULL(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COORDDIM Func_ST_COORDDIM(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_COORDDIM_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_COORDDIM(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COVEREDBY Func_ST_COVEREDBY(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_COVEREDBY_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_COVEREDBY(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_COVERS Func_ST_COVERS(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_COVERS_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_COVERS(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CROSSES Func_ST_CROSSES(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_CROSSES_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_CROSSES(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_CURVETOLINE Func_ST_CURVETOLINE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(ST_CURVETOLINE_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[364] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ST_CURVETOLINE(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DATATYPE Func_ST_DATATYPE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_DATATYPE_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_DATATYPE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DFULLYWITHIN Func_ST_DFULLYWITHIN(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_DFULLYWITHIN_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_DFULLYWITHIN(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DIFFERENCE Func_ST_DIFFERENCE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_DIFFERENCE_:
      n2 = jj_consume_token(ST_DIFFERENCE_);
                               n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DIFFERENCE_:
      n4 = jj_consume_token(DIFFERENCE_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[365] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_DIFFERENCE(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DIMENSION Func_ST_DIMENSION(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_DIMENSION_:
      n2 = jj_consume_token(ST_DIMENSION_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DIMENSION_:
      n4 = jj_consume_token(DIMENSION_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[366] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_DIMENSION(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DISJOINT Func_ST_DISJOINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_DISJOINT_:
      n2 = jj_consume_token(ST_DISJOINT_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DISJOINT_:
      n4 = jj_consume_token(DISJOINT_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[367] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_DISJOINT(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DISTANCE_SPHERE Func_ST_DISTANCE_SPHERE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_DISTANCE_SPHERE_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_DISTANCE_SPHERE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_DISTANCE_SPHEROID Func_ST_DISTANCE_SPHEROID(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_DISTANCE_SPHEROID_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_DISTANCE_SPHEROID(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ENDPOINT Func_ST_ENDPOINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ENDPOINT_:
      n2 = jj_consume_token(ST_ENDPOINT_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ENDPOINT_:
      n4 = jj_consume_token(ENDPOINT_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[368] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ENDPOINT(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ENVELOPE Func_ST_ENVELOPE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ENVELOPE_:
      n2 = jj_consume_token(ST_ENVELOPE_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ENVELOPE_:
      n4 = jj_consume_token(ENVELOPE_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[369] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ENVELOPE(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_EQUALS Func_ST_EQUALS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_EQUALS_:
      n2 = jj_consume_token(ST_EQUALS_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case WORD_EQUALS_:
      n4 = jj_consume_token(WORD_EQUALS_);
                             n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[370] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_EQUALS(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_EXTENT Func_ST_EXTENT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_EXTENT_:
      n2 = jj_consume_token(ST_EXTENT_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case EXTENT_:
      n4 = jj_consume_token(EXTENT_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[371] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_EXTENT(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_EXTENT3D Func_ST_EXTENT3D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_EXTENT3D_:
      n2 = jj_consume_token(ST_EXTENT3D_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case EXTENT3D_:
      n4 = jj_consume_token(EXTENT3D_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[372] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_EXTENT3D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_EXTERIORRING Func_ST_EXTERIORRING(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_EXTERIORRING_:
      n2 = jj_consume_token(ST_EXTERIORRING_);
                                 n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case EXTERIORRING_:
      n4 = jj_consume_token(EXTERIORRING_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[373] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_EXTERIORRING(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FACTOR Func_ST_FACTOR(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_FACTOR_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_FACTOR(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FIND_EXTENT Func_ST_FIND_EXTENT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_FIND_EXTENT_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_FIND_EXTENT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCERHR Func_ST_FORCERHR(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_FORCERHR_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_FORCERHR(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCE_2D Func_ST_FORCE_2D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_FORCE_2D_:
      n2 = jj_consume_token(ST_FORCE_2D_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORCE_2D_:
      n4 = jj_consume_token(FORCE_2D_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[374] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_FORCE_2D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCE_3D Func_ST_FORCE_3D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_FORCE_3D_:
      n2 = jj_consume_token(ST_FORCE_3D_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORCE_3D_:
      n4 = jj_consume_token(FORCE_3D_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[375] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_FORCE_3D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCE_3DM Func_ST_FORCE_3DM(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_FORCE_3DM_:
      n2 = jj_consume_token(ST_FORCE_3DM_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORCE_3DM_:
      n4 = jj_consume_token(FORCE_3DM_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[376] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_FORCE_3DM(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCE_3DZ Func_ST_FORCE_3DZ(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_FORCE_3DZ_:
      n2 = jj_consume_token(ST_FORCE_3DZ_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORCE_3DZ_:
      n4 = jj_consume_token(FORCE_3DZ_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[377] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_FORCE_3DZ(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCE_4D Func_ST_FORCE_4D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_FORCE_4D_:
      n2 = jj_consume_token(ST_FORCE_4D_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORCE_4D_:
      n4 = jj_consume_token(FORCE_4D_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[378] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_FORCE_4D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_FORCE_COLLECTION Func_ST_FORCE_COLLECTION(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_FORCE_COLLECTION_:
      n2 = jj_consume_token(ST_FORCE_COLLECTION_);
                                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORCE_COLLECTION_:
      n4 = jj_consume_token(FORCE_COLLECTION_);
                                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[379] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_FORCE_COLLECTION(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMETRYTYPE Func_ST_GEOMETRYTYPE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_GEOMETRYTYPE_:
      n2 = jj_consume_token(ST_GEOMETRYTYPE_);
                                 n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case GEOMETRYTYPE_:
      n4 = jj_consume_token(GEOMETRYTYPE_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[380] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_GEOMETRYTYPE(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOGFROMTEXT Func_ST_GEOGFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOGFROMTEXT_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOGFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOGFROMWKB Func_ST_GEOGFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOGFROMWKB_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOGFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOGRAPHYFROMTEXT Func_ST_GEOGRAPHYFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOGRAPHYFROMTEXT_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOGRAPHYFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOHASH Func_ST_GEOHASH(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOHASH_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOHASH(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMCOLLFROMTEXT Func_ST_GEOMCOLLFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOMCOLLFROMTEXT_);
                               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOMCOLLFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMCOLLFROMWKB Func_ST_GEOMCOLLFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOMCOLLFROMWKB_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOMCOLLFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMFROMEWKB Func_ST_GEOMFROMEWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOMFROMEWKB_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOMFROMEWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMFROMEWKT Func_ST_GEOMFROMEWKT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_GEOMFROMEWKT_:
      n2 = jj_consume_token(ST_GEOMFROMEWKT_);
                                 n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case GEOMFROMEWKT_:
      n4 = jj_consume_token(GEOMFROMEWKT_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[381] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_GEOMFROMEWKT(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMFROMGML Func_ST_GEOMFROMGML(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOMFROMGML_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOMFROMGML(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMFROMKML Func_ST_GEOMFROMKML(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOMFROMKML_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOMFROMKML(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMFROMTEXT Func_ST_GEOMFROMTEXT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case ST_GEOMFROMTEXT_:
      n2 = jj_consume_token(ST_GEOMFROMTEXT_);
                                 n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case GEOMFROMTEXT_:
      n4 = jj_consume_token(GEOMFROMTEXT_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[382] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[383] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_GEOMFROMTEXT(n0,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMFROMWKB Func_ST_GEOMFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GEOMFROMWKB_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GEOMFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GMLTOSQL Func_ST_GMLTOSQL(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_GMLTOSQL_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_GMLTOSQL(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_HASARC Func_ST_HASARC(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_HASARC_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_HASARC(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_HAUSDORFFDISTANCE Func_ST_HAUSDORFFDISTANCE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(ST_HAUSDORFFDISTANCE_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[384] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_HAUSDORFFDISTANCE(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_HEIGHT Func_ST_HEIGHT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_HEIGHT_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_HEIGHT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_INTERIORRINGN Func_ST_INTERIORRINGN(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_INTERIORRINGN_:
      n2 = jj_consume_token(ST_INTERIORRINGN_);
                                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTERIORRINGN_:
      n4 = jj_consume_token(INTERIORRINGN_);
                               n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[385] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_INTERIORRINGN(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_INTERSECTION Func_ST_INTERSECTION(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_INTERSECTION_:
      n2 = jj_consume_token(ST_INTERSECTION_);
                                 n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTERSECTION_:
      n4 = jj_consume_token(INTERSECTION_);
                              n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[386] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_INTERSECTION(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_INTERSECTS Func_ST_INTERSECTS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_INTERSECTS_:
      n2 = jj_consume_token(ST_INTERSECTS_);
                               n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTERSECTS_:
      n4 = jj_consume_token(INTERSECTS_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[387] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_INTERSECTS(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ISCLOSED Func_ST_ISCLOSED(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ISCLOSED_:
      n2 = jj_consume_token(ST_ISCLOSED_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ISCLOSED_:
      n4 = jj_consume_token(ISCLOSED_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[388] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ISCLOSED(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ISEMPTY Func_ST_ISEMPTY(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ISEMPTY_:
      n2 = jj_consume_token(ST_ISEMPTY_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ISEMPTY_:
      n4 = jj_consume_token(ISEMPTY_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[389] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ISEMPTY(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ISRING Func_ST_ISRING(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ISRING_:
      n2 = jj_consume_token(ST_ISRING_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ISRING_:
      n4 = jj_consume_token(ISRING_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[390] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ISRING(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ISSIMPLE Func_ST_ISSIMPLE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ISSIMPLE_:
      n2 = jj_consume_token(ST_ISSIMPLE_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ISSIMPLE_:
      n4 = jj_consume_token(ISSIMPLE_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[391] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ISSIMPLE(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ISVALID Func_ST_ISVALID(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ISVALID_:
      n2 = jj_consume_token(ST_ISVALID_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ISVALID_:
      n4 = jj_consume_token(ISVALID_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[392] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ISVALID(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ISVALIDREASON Func_ST_ISVALIDREASON(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_ISVALIDREASON_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_ISVALIDREASON(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LENGTH2D Func_ST_LENGTH2D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_LENGTH2D_:
      n2 = jj_consume_token(ST_LENGTH2D_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LENGTH2D_:
      n4 = jj_consume_token(LENGTH2D_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[393] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_LENGTH2D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LENGTH2D_SPHEROID Func_ST_LENGTH2D_SPHEROID(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LENGTH2D_SPHEROID_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LENGTH2D_SPHEROID(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LENGTH3D Func_ST_LENGTH3D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_LENGTH3D_:
      n2 = jj_consume_token(ST_LENGTH3D_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LENGTH3D_:
      n4 = jj_consume_token(LENGTH3D_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[394] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_LENGTH3D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LENGTH3D_SPHEROID Func_ST_LENGTH3D_SPHEROID(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LENGTH3D_SPHEROID_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LENGTH3D_SPHEROID(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LENGTH_SPHEROID Func_ST_LENGTH_SPHEROID(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_LENGTH_SPHEROID_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_LENGTH_SPHEROID(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINECROSSINGDIRECTION Func_ST_LINECROSSINGDIRECTION(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LINECROSSINGDIRECTION_);
                                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LINECROSSINGDIRECTION(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINEFROMMULTIPOINT Func_ST_LINEFROMMULTIPOINT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LINEFROMMULTIPOINT_);
                                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LINEFROMMULTIPOINT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINEFROMTEXT Func_ST_LINEFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LINEFROMTEXT_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LINEFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINEFROMWKB Func_ST_LINEFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LINEFROMWKB_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LINEFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINEMERGE Func_ST_LINEMERGE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_LINEMERGE_:
      n2 = jj_consume_token(ST_LINEMERGE_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LINEMERGE_:
      n4 = jj_consume_token(LINEMERGE_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[395] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_LINEMERGE(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINESTRINGFROMWKB Func_ST_LINESTRINGFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LINESTRINGFROMWKB_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LINESTRINGFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINETOCURVE Func_ST_LINETOCURVE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LINETOCURVE_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LINETOCURVE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINE_INTERPOLATE_POINT Func_ST_LINE_INTERPOLATE_POINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_LINE_INTERPOLATE_POINT_:
      n2 = jj_consume_token(ST_LINE_INTERPOLATE_POINT_);
                                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LINE_INTERPOLATE_POINT_:
      n4 = jj_consume_token(LINE_INTERPOLATE_POINT_);
                                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[396] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_LINE_INTERPOLATE_POINT(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINE_LOCATE_POINT Func_ST_LINE_LOCATE_POINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_LINE_LOCATE_POINT_:
      n2 = jj_consume_token(ST_LINE_LOCATE_POINT_);
                                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LINE_LOCATE_POINT_:
      n4 = jj_consume_token(LINE_LOCATE_POINT_);
                                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[397] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_LINE_LOCATE_POINT(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LINE_SUBSTRING Func_ST_LINE_SUBSTRING(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch (jj_nt.kind) {
    case ST_LINE_SUBSTRING_:
      n2 = jj_consume_token(ST_LINE_SUBSTRING_);
                                   n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LINE_SUBSTRING_:
      n4 = jj_consume_token(LINE_SUBSTRING_);
                                n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[398] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    n15 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new Func_ST_LINE_SUBSTRING(n0,n5,n7,n8,n10,n11,n13,n14);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LOCATEBETWEENELEVATIONS Func_ST_LOCATEBETWEENELEVATIONS(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_LOCATEBETWEENELEVATIONS_);
                                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_LOCATEBETWEENELEVATIONS(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LOCATE_ALONG_MEASURE Func_ST_LOCATE_ALONG_MEASURE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_LOCATE_ALONG_MEASURE_:
      n2 = jj_consume_token(ST_LOCATE_ALONG_MEASURE_);
                                         n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LOCATE_ALONG_MEASURE_:
      n4 = jj_consume_token(LOCATE_ALONG_MEASURE_);
                                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[399] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_LOCATE_ALONG_MEASURE(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LOCATE_BETWEEN_MEASURES Func_ST_LOCATE_BETWEEN_MEASURES(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch (jj_nt.kind) {
    case ST_LOCATE_BETWEEN_MEASURES_:
      n2 = jj_consume_token(ST_LOCATE_BETWEEN_MEASURES_);
                                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case LOCATE_BETWEEN_MEASURES_:
      n4 = jj_consume_token(LOCATE_BETWEEN_MEASURES_);
                                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[400] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    n15 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new Func_ST_LOCATE_BETWEEN_MEASURES(n0,n5,n7,n8,n10,n11,n13,n14);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_LONGESTLINE Func_ST_LONGESTLINE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_LONGESTLINE_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_LONGESTLINE(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_M Func_ST_M(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_M_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_M(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MAKEENVELOPE Func_ST_MAKEENVELOPE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;
   SQLArgument n16;
   NodeToken n17;
   Token n18;

   {
   }
    n1 = jj_consume_token(ST_MAKEENVELOPE_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    n15 = jj_consume_token(781);
             n14 = JTBToolkit.makeNodeToken(n15);
    n16 = SQLArgument(prn);
    n18 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n17 = JTBToolkit.makeNodeToken(n18);
     {if (true) return new Func_ST_MAKEENVELOPE(n0,n2,n4,n5,n7,n8,n10,n11,n13,n14,n16,n17);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MAKEPOINT Func_ST_MAKEPOINT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLArgument n17;
   NodeToken n18;
   Token n19;

   {
   }
    n1 = jj_consume_token(ST_MAKEPOINT_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    if (jj_2_425(3)) {
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(781);
                n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n17 = SQLArgument(prn);
        n14.addNode(n17);
        n13.addNode(n14);
      break;
    default:
      jj_la1[401] = jj_gen;
      ;
    }
    n19 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n18 = JTBToolkit.makeNodeToken(n19);
     {if (true) return new Func_ST_MAKEPOINT(n0,n2,n4,n5,n7,n8,n13,n18);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MAKEPOINTM Func_ST_MAKEPOINTM(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(ST_MAKEPOINTM_);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_MAKEPOINTM(n0,n2,n4,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MAKEPOLYGON Func_ST_MAKEPOLYGON(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SQLArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
    n1 = jj_consume_token(ST_MAKEPOLYGON_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = SQLArgument(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[402] = jj_gen;
      ;
    }
    n11 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new Func_ST_MAKEPOLYGON(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MAXDISTANCE Func_ST_MAXDISTANCE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_MAXDISTANCE_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_MAXDISTANCE(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MEMCOLLECT Func_ST_MEMCOLLECT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MEMCOLLECT_);
                         n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MEMCOLLECT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MEM_SIZE Func_ST_MEM_SIZE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_MEM_SIZE_:
      n2 = jj_consume_token(ST_MEM_SIZE_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MEM_SIZE_:
      n4 = jj_consume_token(MEM_SIZE_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[403] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_MEM_SIZE(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MINIMUMBOUNDINGCIRCLE Func_ST_MINIMUMBOUNDINGCIRCLE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MINIMUMBOUNDINGCIRCLE_);
                                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MINIMUMBOUNDINGCIRCLE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MLINEFROMTEXT Func_ST_MLINEFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MLINEFROMTEXT_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MLINEFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MLINEFROMWKB Func_ST_MLINEFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MLINEFROMWKB_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MLINEFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MPOINTFROMTEXT Func_ST_MPOINTFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MPOINTFROMTEXT_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MPOINTFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MPOINTFROMWKB Func_ST_MPOINTFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MPOINTFROMWKB_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MPOINTFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MPOLYFROMTEXT Func_ST_MPOLYFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MPOLYFROMTEXT_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MPOLYFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MPOLYFROMWKB Func_ST_MPOLYFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MPOLYFROMWKB_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MPOLYFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTI Func_ST_MULTI(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_MULTI_:
      n2 = jj_consume_token(ST_MULTI_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MULTI_:
      n4 = jj_consume_token(MULTI_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[404] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_MULTI(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTILINEFROMWKB Func_ST_MULTILINEFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MULTILINEFROMWKB_);
                               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MULTILINEFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTILINESTRINGFROMTEXT Func_ST_MULTILINESTRINGFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MULTILINESTRINGFROMTEXT_);
                                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MULTILINESTRINGFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTIPOINTFROMTEXT Func_ST_MULTIPOINTFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MULTIPOINTFROMTEXT_);
                                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MULTIPOINTFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTIPOINTFROMWKB Func_ST_MULTIPOINTFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MULTIPOINTFROMWKB_);
                                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MULTIPOINTFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTIPOLYFROMWKB Func_ST_MULTIPOLYFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MULTIPOLYFROMWKB_);
                               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MULTIPOLYFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_MULTIPOLYGONFROMTEXT Func_ST_MULTIPOLYGONFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_MULTIPOLYGONFROMTEXT_);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_MULTIPOLYGONFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NDIMS Func_ST_NDIMS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_NDIMS_:
      n2 = jj_consume_token(ST_NDIMS_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NDIMS_:
      n4 = jj_consume_token(NDIMS_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[405] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_NDIMS(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NPOINTS Func_ST_NPOINTS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_NPOINTS_:
      n2 = jj_consume_token(ST_NPOINTS_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NPOINTS_:
      n4 = jj_consume_token(NPOINTS_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[406] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_NPOINTS(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NRINGS Func_ST_NRINGS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_NRINGS_:
      n2 = jj_consume_token(ST_NRINGS_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NRINGS_:
      n4 = jj_consume_token(NRINGS_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[407] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_NRINGS(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NUMGEOMETRIES Func_ST_NUMGEOMETRIES(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_NUMGEOMETRIES_:
      n2 = jj_consume_token(ST_NUMGEOMETRIES_);
                                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NUMGEOMETRIES_:
      n4 = jj_consume_token(NUMGEOMETRIES_);
                               n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[408] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_NUMGEOMETRIES(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NUMINTERIORRING Func_ST_NUMINTERIORRING(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_NUMINTERIORRING_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_NUMINTERIORRING(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NUMINTERIORRINGS Func_ST_NUMINTERIORRINGS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_NUMINTERIORRINGS_:
      n2 = jj_consume_token(ST_NUMINTERIORRINGS_);
                                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NUMINTERIORRINGS_:
      n4 = jj_consume_token(NUMINTERIORRINGS_);
                                  n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[409] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_NUMINTERIORRINGS(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_NUMPOINTS Func_ST_NUMPOINTS(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_NUMPOINTS_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_NUMPOINTS(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ORDERINGEQUALS Func_ST_ORDERINGEQUALS(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_ORDERINGEQUALS_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ORDERINGEQUALS(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_OVERLAPS Func_ST_OVERLAPS(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_OVERLAPS_:
      n2 = jj_consume_token(ST_OVERLAPS_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case OVERLAPS_:
      n4 = jj_consume_token(OVERLAPS_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[410] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_OVERLAPS(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_PERIMETER Func_ST_PERIMETER(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_PERIMETER_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_PERIMETER(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_PERIMETER2D Func_ST_PERIMETER2D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_PERIMETER2D_:
      n2 = jj_consume_token(ST_PERIMETER2D_);
                                n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case PERIMETER2D_:
      n4 = jj_consume_token(PERIMETER2D_);
                             n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[411] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_PERIMETER2D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_PERIMETER3D Func_ST_PERIMETER3D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_PERIMETER3D_:
      n2 = jj_consume_token(ST_PERIMETER3D_);
                                n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case PERIMETER3D_:
      n4 = jj_consume_token(PERIMETER3D_);
                             n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[412] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_PERIMETER3D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POINT Func_ST_POINT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POINT_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POINT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POINTFROMTEXT Func_ST_POINTFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POINTFROMTEXT_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POINTFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POINTFROMWKB Func_ST_POINTFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POINTFROMWKB_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POINTFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POINTN Func_ST_POINTN(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POINTN_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POINTN(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POINTONSURFACE Func_ST_POINTONSURFACE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POINTONSURFACE_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POINTONSURFACE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POINT_INSIDE_CIRCLE Func_ST_POINT_INSIDE_CIRCLE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POINT_INSIDE_CIRCLE_);
                                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POINT_INSIDE_CIRCLE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POLYFROMTEXT Func_ST_POLYFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POLYFROMTEXT_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POLYFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POLYFROMWKB Func_ST_POLYFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POLYFROMWKB_);
                          n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POLYFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POLYGON Func_ST_POLYGON(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POLYGON_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POLYGON(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POLYGONFROMTEXT Func_ST_POLYGONFROMTEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POLYGONFROMTEXT_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POLYGONFROMTEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POLYGONFROMWKB Func_ST_POLYGONFROMWKB(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POLYGONFROMWKB_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POLYGONFROMWKB(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POSTGIS_GIST_JOINSEL Func_ST_POSTGIS_GIST_JOINSEL(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POSTGIS_GIST_JOINSEL_);
                                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POSTGIS_GIST_JOINSEL(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_POSTGIS_GIST_SEL Func_ST_POSTGIS_GIST_SEL(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_POSTGIS_GIST_SEL_);
                               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_POSTGIS_GIST_SEL(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_RELATE Func_ST_RELATE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(ST_RELATE_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[413] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_ST_RELATE(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_REMOVEPOINT Func_ST_REMOVEPOINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_REMOVEPOINT_:
      n2 = jj_consume_token(ST_REMOVEPOINT_);
                                n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case REMOVEPOINT_:
      n4 = jj_consume_token(REMOVEPOINT_);
                             n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[414] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_REMOVEPOINT(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_REVERSE Func_ST_REVERSE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_REVERSE_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_REVERSE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ROTATEX Func_ST_ROTATEX(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_ROTATEX_:
      n2 = jj_consume_token(ST_ROTATEX_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ROTATEX_:
      n4 = jj_consume_token(ROTATEX_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[415] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_ROTATEX(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ROTATEY Func_ST_ROTATEY(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_ROTATEY_:
      n2 = jj_consume_token(ST_ROTATEY_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ROTATEY_:
      n4 = jj_consume_token(ROTATEY_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[416] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_ROTATEY(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ROTATEZ Func_ST_ROTATEZ(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   SQLArgument n11;
   NodeToken n12;
   Token n13;
   SQLArgument n14;
   NodeToken n15;
   Token n16;

   {
   }
    switch (jj_nt.kind) {
    case ST_ROTATEZ_:
      n2 = jj_consume_token(ST_ROTATEZ_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ROTATEZ_:
      n4 = jj_consume_token(ROTATEZ_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case ST_ROTATE_:
      n6 = jj_consume_token(ST_ROTATE_);
                           n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case ROTATE_:
      n8 = jj_consume_token(ROTATE_);
                        n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[417] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n10 = jj_consume_token(PARENTHESIS_START_);
                              n9 = JTBToolkit.makeNodeToken(n10);
    n11 = SQLArgument(prn);
    n13 = jj_consume_token(781);
             n12 = JTBToolkit.makeNodeToken(n13);
    n14 = SQLArgument(prn);
    n16 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n15 = JTBToolkit.makeNodeToken(n16);
     {if (true) return new Func_ST_ROTATEZ(n0,n9,n11,n12,n14,n15);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SCALE Func_ST_SCALE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   SQLArgument n18;
   NodeToken n19;
   Token n20;

   {
   }
    switch (jj_nt.kind) {
    case ST_SCALE_:
      n2 = jj_consume_token(ST_SCALE_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SCALE_:
      n4 = jj_consume_token(SCALE_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[418] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n15 = new NodeSequence(2);
      n17 = jj_consume_token(781);
                n16 = JTBToolkit.makeNodeToken(n17);
        n15.addNode(n16);
      n18 = SQLArgument(prn);
        n15.addNode(n18);
        n14.addNode(n15);
      break;
    default:
      jj_la1[419] = jj_gen;
      ;
    }
    n20 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new Func_ST_SCALE(n0,n5,n7,n8,n10,n11,n13,n14,n19);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SEGMENTIZE Func_ST_SEGMENTIZE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_SEGMENTIZE_:
      n2 = jj_consume_token(ST_SEGMENTIZE_);
                               n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SEGMENTIZE_:
      n4 = jj_consume_token(SEGMENTIZE_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[420] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_SEGMENTIZE(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SETFACTOR Func_ST_SETFACTOR(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_SETFACTOR_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_SETFACTOR(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SETPOINT Func_ST_SETPOINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch (jj_nt.kind) {
    case ST_SETPOINT_:
      n2 = jj_consume_token(ST_SETPOINT_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SETPOINT_:
      n4 = jj_consume_token(SETPOINT_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[421] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    n15 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new Func_ST_SETPOINT(n0,n5,n7,n8,n10,n11,n13,n14);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SETSRID Func_ST_SETSRID(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_SETSRID_:
      n2 = jj_consume_token(ST_SETSRID_);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SETSRID_:
      n4 = jj_consume_token(SETSRID_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[422] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_SETSRID(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SHIFT_LONGITUDE Func_ST_SHIFT_LONGITUDE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_SHIFT_LONGITUDE_);
                              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_SHIFT_LONGITUDE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SHORTESTLINE Func_ST_SHORTESTLINE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_SHORTESTLINE_);
                           n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_SHORTESTLINE(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SIMPLIFY Func_ST_SIMPLIFY(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_SIMPLIFY_:
      n2 = jj_consume_token(ST_SIMPLIFY_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SIMPLIFY_:
      n4 = jj_consume_token(SIMPLIFY_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[423] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_SIMPLIFY(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SIMPLIFYPRESERVETOPOLOGY Func_ST_SIMPLIFYPRESERVETOPOLOGY(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_SIMPLIFYPRESERVETOPOLOGY_);
                                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_SIMPLIFYPRESERVETOPOLOGY(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SNAPTOGRID Func_ST_SNAPTOGRID(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeOptional n16 = new NodeOptional();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   SQLArgument n20;
   NodeOptional n21 = new NodeOptional();
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   SQLArgument n25;
   NodeOptional n26 = new NodeOptional();
   NodeSequence n27;
   NodeToken n28;
   Token n29;
   SQLArgument n30;
   NodeToken n31;
   Token n32;

   {
   }
    switch (jj_nt.kind) {
    case ST_SNAPTOGRID_:
      n2 = jj_consume_token(ST_SNAPTOGRID_);
                               n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SNAPTOGRID_:
      n4 = jj_consume_token(SNAPTOGRID_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[424] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    if (jj_2_426(3)) {
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(781);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = SQLArgument(prn);
        n12.addNode(n15);
        n11.addNode(n12);
    } else {
      ;
    }
    if (jj_2_427(3)) {
        n17 = new NodeSequence(2);
      n19 = jj_consume_token(781);
                n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n20 = SQLArgument(prn);
        n17.addNode(n20);
        n16.addNode(n17);
    } else {
      ;
    }
    if (jj_2_428(3)) {
        n22 = new NodeSequence(2);
      n24 = jj_consume_token(781);
                n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
      n25 = SQLArgument(prn);
        n22.addNode(n25);
        n21.addNode(n22);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case 781:
        n27 = new NodeSequence(2);
      n29 = jj_consume_token(781);
                n28 = JTBToolkit.makeNodeToken(n29);
        n27.addNode(n28);
      n30 = SQLArgument(prn);
        n27.addNode(n30);
        n26.addNode(n27);
      break;
    default:
      jj_la1[425] = jj_gen;
      ;
    }
    n32 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n31 = JTBToolkit.makeNodeToken(n32);
     {if (true) return new Func_ST_SNAPTOGRID(n0,n5,n7,n8,n10,n11,n16,n21,n26,n31);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SRID Func_ST_SRID(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_SRID_:
      n2 = jj_consume_token(ST_SRID_);
                         n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SRID_:
      n4 = jj_consume_token(SRID_);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[426] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_SRID(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_STARTPOINT Func_ST_STARTPOINT(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_STARTPOINT_:
      n2 = jj_consume_token(ST_STARTPOINT_);
                               n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case STARTPOINT_:
      n4 = jj_consume_token(STARTPOINT_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[427] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_STARTPOINT(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SUMMARY Func_ST_SUMMARY(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_SUMMARY_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_SUMMARY(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SYMDIFFERENCE Func_ST_SYMDIFFERENCE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_SYMDIFFERENCE_:
      n2 = jj_consume_token(ST_SYMDIFFERENCE_);
                                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SYMDIFFERENCE_:
      n4 = jj_consume_token(SYMDIFFERENCE_);
                               n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[428] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_SYMDIFFERENCE(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_SYMMETRICDIFFERENCE Func_ST_SYMMETRICDIFFERENCE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_SYMMETRICDIFFERENCE_);
                                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_SYMMETRICDIFFERENCE(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_TEXT Func_ST_TEXT(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_TEXT_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_TEXT(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_TOUCHES Func_ST_TOUCHES(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ST_TOUCHES_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_TOUCHES(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_TRANSLATE Func_ST_TRANSLATE(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SQLArgument n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(ST_TRANSLATE_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(781);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = SQLArgument(prn);
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[429] = jj_gen;
      ;
    }
    n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Func_ST_TRANSLATE(n0,n2,n4,n5,n7,n8,n10,n11,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_TRANSSCALE Func_ST_TRANSSCALE(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;
   SQLArgument n13;
   NodeToken n14;
   Token n15;
   SQLArgument n16;
   NodeToken n17;
   Token n18;
   SQLArgument n19;
   NodeToken n20;
   Token n21;

   {
   }
    switch (jj_nt.kind) {
    case ST_TRANSSCALE_:
      n2 = jj_consume_token(ST_TRANSSCALE_);
                               n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case TRANSSCALE_:
      n4 = jj_consume_token(TRANSSCALE_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[430] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(781);
             n11 = JTBToolkit.makeNodeToken(n12);
    n13 = SQLArgument(prn);
    n15 = jj_consume_token(781);
             n14 = JTBToolkit.makeNodeToken(n15);
    n16 = SQLArgument(prn);
    n18 = jj_consume_token(781);
             n17 = JTBToolkit.makeNodeToken(n18);
    n19 = SQLArgument(prn);
    n21 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n20 = JTBToolkit.makeNodeToken(n21);
     {if (true) return new Func_ST_TRANSSCALE(n0,n5,n7,n8,n10,n11,n13,n14,n16,n17,n19,n20);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_WIDTH Func_ST_WIDTH(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_WIDTH_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_WIDTH(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_WITHIN Func_ST_WITHIN(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_WITHIN_:
      n2 = jj_consume_token(ST_WITHIN_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case WITHIN_:
      n4 = jj_consume_token(WITHIN_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[431] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_WITHIN(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_WKBTOSQL Func_ST_WKBTOSQL(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_WKBTOSQL_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_WKBTOSQL(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_WKTTOSQL Func_ST_WKTTOSQL(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(ST_WKTTOSQL_);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_ST_WKTTOSQL(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_X Func_ST_X(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_X_:
      n2 = jj_consume_token(ST_X_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case X_:
      n4 = jj_consume_token(X_);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[432] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_X(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Y Func_ST_Y(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_Y_:
      n2 = jj_consume_token(ST_Y_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case Y_:
      n4 = jj_consume_token(Y_);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[433] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_Y(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_Z Func_ST_Z(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_Z_:
      n2 = jj_consume_token(ST_Z_);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case Z_:
      n4 = jj_consume_token(Z_);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[434] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_Z(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_ZMFLAG Func_ST_ZMFLAG(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_ZMFLAG_:
      n2 = jj_consume_token(ST_ZMFLAG_);
                           n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case ZMFLAG_:
      n4 = jj_consume_token(ZMFLAG_);
                        n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[435] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_ZMFLAG(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_BOX2D Func_ST_BOX2D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_BOX2D_:
      n2 = jj_consume_token(ST_BOX2D_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case BOX2D_:
      n4 = jj_consume_token(BOX2D_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[436] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_BOX2D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_BOX3D Func_ST_BOX3D(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_BOX3D_:
      n2 = jj_consume_token(ST_BOX3D_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case BOX3D_:
      n4 = jj_consume_token(BOX3D_);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[437] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_BOX3D(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMETRY Func_ST_GEOMETRY(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case ST_GEOMETRY_:
      n2 = jj_consume_token(ST_GEOMETRY_);
                             n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case GEOMETRY_:
      n4 = jj_consume_token(GEOMETRY_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[438] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_ST_GEOMETRY(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_ST_GEOMETRYN Func_ST_GEOMETRYN(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;
   SQLArgument n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ST_GEOMETRYN_:
      n2 = jj_consume_token(ST_GEOMETRYN_);
                              n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case GEOMETRYN_:
      n4 = jj_consume_token(GEOMETRYN_);
                           n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[439] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(781);
            n8 = JTBToolkit.makeNodeToken(n9);
    n10 = SQLArgument(prn);
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_ST_GEOMETRYN(n0,n5,n7,n8,n10,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Func_POSTGIS_DROPBBOX Func_POSTGIS_DROPBBOX(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case POSTGIS_DROPBBOX_:
      n2 = jj_consume_token(POSTGIS_DROPBBOX_);
                                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DROPBBOX_:
      n4 = jj_consume_token(DROPBBOX_);
                          n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[440] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_POSTGIS_DROPBBOX(n0,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public length length(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INT_LITERAL);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new length(n0);}
    throw new Error("Missing return statement in function");
  }

  final public position position(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(INT_LITERAL);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new position(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TableColumn TableColumn(PrintStream prn) throws ParseException {
   extendbObject n0;

   {
   }
    n0 = extendbObject(prn);
     {if (true) return new TableColumn(n0);}
    throw new Error("Missing return statement in function");
  }

  final public extendbObject extendbObject(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   TableName n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   Identifier n6;

   {
   }
    if (jj_2_429(2)) {
           n1 = new NodeSequence(4);
      n2 = TableName(prn);
           n1.addNode(n2);
      n4 = jj_consume_token(782);
                  n3 = JTBToolkit.makeNodeToken(n4);
           n1.addNode(n3);
      n5 = Identifier(prn);
           n1.addNode(n5);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch (jj_nt.kind) {
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n6 = Identifier(prn);
           n0 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[441] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new extendbObject(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelectAliasSpec SelectAliasSpec(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   AliasName n3;

   {
   }
    switch (jj_nt.kind) {
    case AS_:
      n2 = jj_consume_token(AS_);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[442] = jj_gen;
      ;
    }
    n3 = AliasName(prn);
     {if (true) return new SelectAliasSpec(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public AliasName AliasName(PrintStream prn) throws ParseException {
   Identifier n0;

   {
   }
    n0 = Identifier(prn);
     {if (true) return new AliasName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SQLComplexExpression SQLComplexExpression(PrintStream prn) throws ParseException {
   SQLAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   SQLORExpression n2;

   {
   }
    n0 = SQLAndExpression(prn);
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case OR_:
        ;
        break;
      default:
        jj_la1[443] = jj_gen;
        break label_30;
      }
      n2 = SQLORExpression(prn);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SQLComplexExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SQLAndExpression SQLAndExpression(PrintStream prn) throws ParseException {
   SQLUnaryLogicalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeListOptional n4 = new NodeListOptional();
   SQLAndExp n5;

   {
      Token t;
   }
    n0 = SQLUnaryLogicalExpression(prn);
    if (jj_2_430(2)) {
      n3 = jj_consume_token(LEFTOUTER_);
                        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
    } else {
      ;
    }
    label_31:
    while (true) {
      switch (jj_nt.kind) {
      case AND_:
        ;
        break;
      default:
        jj_la1[444] = jj_gen;
        break label_31;
      }
      n5 = SQLAndExp(prn);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
     {if (true) return new SQLAndExpression(n0,n1,n4);}
    throw new Error("Missing return statement in function");
  }

  final public SQLORExpression SQLORExpression(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SQLAndExpression n2;

   {
   }
    n1 = jj_consume_token(OR_);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SQLAndExpression(prn);
     {if (true) return new SQLORExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SQLAndExp SQLAndExp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SQLUnaryLogicalExpression n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(AND_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SQLUnaryLogicalExpression(prn);
    if (jj_2_431(2)) {
      n5 = jj_consume_token(LEFTOUTER_);
                        n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
    } else {
      ;
    }
     {if (true) return new SQLAndExp(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public SQLUnaryLogicalExpression SQLUnaryLogicalExpression(PrintStream prn) throws ParseException {
   NodeChoice n0;
   ExistsClause n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   SQLCondResult n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   SQLRelationalExpression n11;

   {
   }
    if (jj_2_432(2)) {
      n1 = ExistsClause(prn);
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_433(2)) {
           n2 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case NOT_:
        n5 = jj_consume_token(NOT_);
                        n4 = JTBToolkit.makeNodeToken(n5);
              n3.addNode(n4);
        break;
      default:
        jj_la1[445] = jj_gen;
        ;
      }
           n2.addNode(n3);
      n6 = SQLCondResult(prn);
           n2.addNode(n6);
           n0 = new NodeChoice(n2, 1);
    } else if (jj_2_434(2)) {
           n7 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case NOT_:
        n10 = jj_consume_token(NOT_);
                         n9 = JTBToolkit.makeNodeToken(n10);
              n8.addNode(n9);
        break;
      default:
        jj_la1[446] = jj_gen;
        ;
      }
           n7.addNode(n8);
      n11 = SQLRelationalExpression(prn);
           n7.addNode(n11);
           n0 = new NodeChoice(n7, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SQLUnaryLogicalExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SQLCondResult SQLCondResult(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
    switch (jj_nt.kind) {
    case TRUE_:
      n2 = jj_consume_token(TRUE_);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE_:
      n4 = jj_consume_token(FALSE_);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[447] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SQLCondResult(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExistsClause ExistsClause(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   SubQuery n7;
   NodeToken n8;
   Token n9;

   {
   }
    switch (jj_nt.kind) {
    case NOT_:
      n2 = jj_consume_token(NOT_);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[448] = jj_gen;
      ;
    }
    n4 = jj_consume_token(EXISTS_);
                 n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SubQuery(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new ExistsClause(n0,n3,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public SQLRelationalExpression SQLRelationalExpression(PrintStream prn) throws ParseException {
   NodeChoice n0;
   SQLExpressionList n1;
   SQLSimpleExpression n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   SQLRelationalOperatorExpression n5;
   NodeChoice n6;
   SQLInClause n7;
   SQLBetweenClause n8;
   SQLLikeClause n9;
   IsNullClause n10;
   IsBooleanClause n11;

   {
   }
    if (jj_2_435(2147483647)) {
      n1 = SQLExpressionList(prn);
           n0 = new NodeChoice(n1, 0);
    } else {
      switch (jj_nt.kind) {
      case NOT_BITWISE_:
      case MINUS_:
      case PARENTHESIS_START_:
      case ABSOLUTE_:
      case PLUS_:
      case X_:
      case Y_:
      case Z_:
      case SQUARE_ROOT_:
      case FACTORIAL_PREFIX_:
      case LN_:
      case PI_:
      case CUBE_ROOT_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case MOD_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CASE_:
      case CAST_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LEFT_:
      case LONG_:
      case LPAD_:
      case NULL_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TRUE_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FALSE_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INDEX_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case RIGHT_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TEMPDOT_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case MODULE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case PUBLICDOT_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case COALESCE_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case OVERLAPS_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case QPUBLICDOT_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case INT_LITERAL:
      case DECIMAL_LITERAL:
      case SCIENTIFIC_LITERAL:
      case STRING_LITERAL:
      case PARAM_PLACE_HOLDER:
      case INTERVAL_LITERAL:
      case DATE_LITERAL:
      case TIME_LITERAL:
      case TIMESTAMP_LITERAL:
      case TEXT_LITERAL:
      case INTEGER_LITERAL:
      case MACADDR_LITERAL:
      case CIDR_LITERAL:
      case INET_LITERAL:
      case BINARY_LITERAL:
      case HEXDECIMAL_LITERAL:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n2 = SQLSimpleExpression(prn);
           n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[449] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch (jj_nt.kind) {
    case NOT_BITWISE_:
    case LESS_:
    case EQUALS_:
    case GREATER_:
    case ABSOLUTE_:
    case XOR_BITWISE_:
    case GIS_SAME_:
    case REGEX_MATCHES_CASE_INSTV_:
    case SHIFT_LEFT_BITWISE_:
    case LESS_EQUALS_:
    case NOT_EQUALS_2_:
    case GREATER_EQUALS_:
    case SHIFT_RIGHT_BITWISE_:
    case REGEX_NOT_MATCHES_:
    case NOT_EQUALS_:
    case GIS_OVERLAPS_LEFT_:
    case GIS_OVERLAPS_RIGHT_:
    case GIS_OVERLAPS_:
    case IN_:
    case IS_:
    case GIS_STRICT_BELOW_:
    case GIS_STRICT_ABOVE_:
    case GIS_OVERLAPS_ABOVE_:
    case REGEX_NOT_MATCHES_CASE_INSTV_:
    case GIS_OVERLAPS_BELOW_:
    case NOT_:
    case LIKE_:
    case ILIKE_:
    case BETWEEN_:
    case OVERLAPS_:
    case SIMILAR_TO_:
      if (jj_2_439(2)) {
        n5 = SQLRelationalOperatorExpression(prn);
           n4 = new NodeChoice(n5, 0);
      } else {
        switch (jj_nt.kind) {
        case NOT_BITWISE_:
        case REGEX_MATCHES_CASE_INSTV_:
        case REGEX_NOT_MATCHES_:
        case IN_:
        case REGEX_NOT_MATCHES_CASE_INSTV_:
        case NOT_:
        case LIKE_:
        case ILIKE_:
        case BETWEEN_:
        case OVERLAPS_:
        case SIMILAR_TO_:
          if (jj_2_436(2)) {
            n7 = SQLInClause(prn);
                 n6 = new NodeChoice(n7, 0);
          } else if (jj_2_437(2)) {
            n8 = SQLBetweenClause(prn);
                 n6 = new NodeChoice(n8, 1);
          } else if (jj_2_438(2)) {
            n9 = SQLLikeClause(prn);
                 n6 = new NodeChoice(n9, 2);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
           n4 = new NodeChoice(n6, 1);
          break;
        default:
          jj_la1[450] = jj_gen;
          if (jj_2_440(3)) {
            n10 = IsNullClause(prn);
           n4 = new NodeChoice(n10, 2);
          } else {
            switch (jj_nt.kind) {
            case EQUALS_:
            case NOT_EQUALS_:
            case IS_:
              n11 = IsBooleanClause(prn);
           n4 = new NodeChoice(n11, 3);
              break;
            default:
              jj_la1[451] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
        n3.addNode(n4);
      break;
    default:
      jj_la1[452] = jj_gen;
      ;
    }
     {if (true) return new SQLRelationalExpression(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public SQLRelationalOperatorExpression SQLRelationalOperatorExpression(PrintStream prn) throws ParseException {
   Relop n0;
   NodeChoice n1;
   NodeSequence n2;
   NodeOptional n3 = new NodeOptional();
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   SubQuery n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   SQLExpressionList n21;
   NodeToken n22;
   Token n23;
   SQLSimpleExpression n24;

   {
   }
    n0 = Relop(prn);
    if (jj_2_442(2147483647)) {
           n2 = new NodeSequence(3);
      switch (jj_nt.kind) {
      case ALL_:
      case ANY_:
      case SOME_:
        switch (jj_nt.kind) {
        case ALL_:
          n6 = jj_consume_token(ALL_);
                          n5 = JTBToolkit.makeNodeToken(n6);
                 n4 = new NodeChoice(n5, 0);
          break;
        case ANY_:
          n8 = jj_consume_token(ANY_);
                          n7 = JTBToolkit.makeNodeToken(n8);
                 n4 = new NodeChoice(n7, 1);
          break;
        case SOME_:
          n10 = jj_consume_token(SOME_);
                            n9 = JTBToolkit.makeNodeToken(n10);
                 n4 = new NodeChoice(n9, 2);
          break;
        default:
          jj_la1[453] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
              n3.addNode(n4);
        break;
      default:
        jj_la1[454] = jj_gen;
        ;
      }
           n2.addNode(n3);
      if (jj_2_441(2147483647)) {
                 n12 = new NodeSequence(4);
        n14 = jj_consume_token(PARENTHESIS_START_);
                                          n13 = JTBToolkit.makeNodeToken(n14);
                 n12.addNode(n13);
        n15 = SubQuery(prn);
                 n12.addNode(n15);
        n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                                          n16 = JTBToolkit.makeNodeToken(n17);
                 n12.addNode(n16);
                 n11 = new NodeChoice(n12, 0);
      } else {
        switch (jj_nt.kind) {
        case PARENTHESIS_START_:
                 n18 = new NodeSequence(3);
          n20 = jj_consume_token(PARENTHESIS_START_);
                                          n19 = JTBToolkit.makeNodeToken(n20);
                 n18.addNode(n19);
          n21 = SQLExpressionList(prn);
                 n18.addNode(n21);
          n23 = jj_consume_token(PARENTHESIS_CLOSE_);
                                          n22 = JTBToolkit.makeNodeToken(n23);
                 n18.addNode(n22);
                 n11 = new NodeChoice(n18, 1);
          break;
        default:
          jj_la1[455] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
           n2.addNode(n11);
           n1 = new NodeChoice(n2, 0);
    } else {
      switch (jj_nt.kind) {
      case NOT_BITWISE_:
      case MINUS_:
      case PARENTHESIS_START_:
      case ABSOLUTE_:
      case PLUS_:
      case X_:
      case Y_:
      case Z_:
      case SQUARE_ROOT_:
      case FACTORIAL_PREFIX_:
      case LN_:
      case PI_:
      case CUBE_ROOT_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case MOD_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CASE_:
      case CAST_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LEFT_:
      case LONG_:
      case LPAD_:
      case NULL_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TRUE_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FALSE_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INDEX_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case RIGHT_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TEMPDOT_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case MODULE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case PUBLICDOT_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case COALESCE_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case OVERLAPS_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case QPUBLICDOT_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case INT_LITERAL:
      case DECIMAL_LITERAL:
      case SCIENTIFIC_LITERAL:
      case STRING_LITERAL:
      case PARAM_PLACE_HOLDER:
      case INTERVAL_LITERAL:
      case DATE_LITERAL:
      case TIME_LITERAL:
      case TIMESTAMP_LITERAL:
      case TEXT_LITERAL:
      case INTEGER_LITERAL:
      case MACADDR_LITERAL:
      case CIDR_LITERAL:
      case INET_LITERAL:
      case BINARY_LITERAL:
      case HEXDECIMAL_LITERAL:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n24 = SQLSimpleExpression(prn);
           n1 = new NodeChoice(n24, 1);
        break;
      default:
        jj_la1[456] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new SQLRelationalOperatorExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Relop Relop(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   NodeToken n33;
   Token n34;
   NodeToken n35;
   Token n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;

   {
   }
    switch (jj_nt.kind) {
    case EQUALS_:
      n2 = jj_consume_token(EQUALS_);
                  n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NOT_EQUALS_:
      n4 = jj_consume_token(NOT_EQUALS_);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case XOR_BITWISE_:
      n6 = jj_consume_token(XOR_BITWISE_);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case NOT_EQUALS_2_:
      n8 = jj_consume_token(NOT_EQUALS_2_);
                   n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case GREATER_:
      n10 = jj_consume_token(GREATER_);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case GREATER_EQUALS_:
      n12 = jj_consume_token(GREATER_EQUALS_);
                    n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case LESS_:
      n14 = jj_consume_token(LESS_);
                   n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    case LESS_EQUALS_:
      n16 = jj_consume_token(LESS_EQUALS_);
                    n15 = JTBToolkit.makeNodeToken(n16);
           n0 = new NodeChoice(n15, 7);
      break;
    case GIS_OVERLAPS_:
      n18 = jj_consume_token(GIS_OVERLAPS_);
                    n17 = JTBToolkit.makeNodeToken(n18);
           n0 = new NodeChoice(n17, 8);
      break;
    case GIS_OVERLAPS_LEFT_:
      n20 = jj_consume_token(GIS_OVERLAPS_LEFT_);
                    n19 = JTBToolkit.makeNodeToken(n20);
           n0 = new NodeChoice(n19, 9);
      break;
    case GIS_OVERLAPS_BELOW_:
      n22 = jj_consume_token(GIS_OVERLAPS_BELOW_);
                     n21 = JTBToolkit.makeNodeToken(n22);
           n0 = new NodeChoice(n21, 10);
      break;
    case GIS_OVERLAPS_RIGHT_:
      n24 = jj_consume_token(GIS_OVERLAPS_RIGHT_);
                    n23 = JTBToolkit.makeNodeToken(n24);
           n0 = new NodeChoice(n23, 11);
      break;
    case SHIFT_LEFT_BITWISE_:
      n26 = jj_consume_token(SHIFT_LEFT_BITWISE_);
                    n25 = JTBToolkit.makeNodeToken(n26);
           n0 = new NodeChoice(n25, 12);
      break;
    case GIS_STRICT_BELOW_:
      n28 = jj_consume_token(GIS_STRICT_BELOW_);
                     n27 = JTBToolkit.makeNodeToken(n28);
           n0 = new NodeChoice(n27, 13);
      break;
    case SHIFT_RIGHT_BITWISE_:
      n30 = jj_consume_token(SHIFT_RIGHT_BITWISE_);
                    n29 = JTBToolkit.makeNodeToken(n30);
           n0 = new NodeChoice(n29, 14);
      break;
    case ABSOLUTE_:
      n32 = jj_consume_token(ABSOLUTE_);
                   n31 = JTBToolkit.makeNodeToken(n32);
           n0 = new NodeChoice(n31, 15);
      break;
    case GIS_OVERLAPS_ABOVE_:
      n34 = jj_consume_token(GIS_OVERLAPS_ABOVE_);
                     n33 = JTBToolkit.makeNodeToken(n34);
           n0 = new NodeChoice(n33, 16);
      break;
    case GIS_STRICT_ABOVE_:
      n36 = jj_consume_token(GIS_STRICT_ABOVE_);
                     n35 = JTBToolkit.makeNodeToken(n36);
           n0 = new NodeChoice(n35, 17);
      break;
    case NOT_BITWISE_:
      n38 = jj_consume_token(NOT_BITWISE_);
                   n37 = JTBToolkit.makeNodeToken(n38);
           n0 = new NodeChoice(n37, 18);
      break;
    case GIS_SAME_:
      n40 = jj_consume_token(GIS_SAME_);
                    n39 = JTBToolkit.makeNodeToken(n40);
           n0 = new NodeChoice(n39, 19);
      break;
    default:
      jj_la1[457] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Relop(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SQLInClause SQLInClause(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   SubQuery n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   SQLExpressionList n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch (jj_nt.kind) {
    case NOT_:
      n2 = jj_consume_token(NOT_);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[458] = jj_gen;
      ;
    }
    n4 = jj_consume_token(IN_);
              n3 = JTBToolkit.makeNodeToken(n4);
    if (jj_2_443(2147483647)) {
           n6 = new NodeSequence(3);
      n8 = jj_consume_token(PARENTHESIS_START_);
                                   n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
      n9 = SubQuery(prn);
           n6.addNode(n9);
           n5 = new NodeChoice(n6, 0);
    } else {
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
           n10 = new NodeSequence(2);
        n12 = jj_consume_token(PARENTHESIS_START_);
                                    n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
        n13 = SQLExpressionList(prn);
           n10.addNode(n13);
           n5 = new NodeChoice(n10, 1);
        break;
      default:
        jj_la1[459] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    n15 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new SQLInClause(n0,n3,n5,n14);}
    throw new Error("Missing return statement in function");
  }

  final public SQLBetweenClause SQLBetweenClause(PrintStream prn) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   SQLSimpleExpression n5;
   NodeToken n6;
   Token n7;
   SQLSimpleExpression n8;

   {
   }
    switch (jj_nt.kind) {
    case NOT_:
      n2 = jj_consume_token(NOT_);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[460] = jj_gen;
      ;
    }
    n4 = jj_consume_token(BETWEEN_);
                   n3 = JTBToolkit.makeNodeToken(n4);
    n5 = SQLSimpleExpression(prn);
    n7 = jj_consume_token(AND_);
              n6 = JTBToolkit.makeNodeToken(n7);
    n8 = SQLSimpleExpression(prn);
     {if (true) return new SQLBetweenClause(n0,n3,n5,n6,n8);}
    throw new Error("Missing return statement in function");
  }

  final public SQLLikeClause SQLLikeClause(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeChoice n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   SQLSimpleExpression n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   SQLSimpleExpression n17;
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   SQLSimpleExpression n30;

   {
   }
    switch (jj_nt.kind) {
    case NOT_:
    case LIKE_:
    case ILIKE_:
    case SIMILAR_TO_:
           n1 = new NodeSequence(4);
      switch (jj_nt.kind) {
      case NOT_:
        n4 = jj_consume_token(NOT_);
                        n3 = JTBToolkit.makeNodeToken(n4);
              n2.addNode(n3);
        break;
      default:
        jj_la1[461] = jj_gen;
        ;
      }
           n1.addNode(n2);
      switch (jj_nt.kind) {
      case LIKE_:
        n7 = jj_consume_token(LIKE_);
                            n6 = JTBToolkit.makeNodeToken(n7);
                 n5 = new NodeChoice(n6, 0);
        break;
      case ILIKE_:
        n9 = jj_consume_token(ILIKE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
                 n5 = new NodeChoice(n8, 1);
        break;
      case SIMILAR_TO_:
        n11 = jj_consume_token(SIMILAR_TO_);
                                   n10 = JTBToolkit.makeNodeToken(n11);
                 n5 = new NodeChoice(n10, 2);
        break;
      default:
        jj_la1[462] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n1.addNode(n5);
      n12 = SQLSimpleExpression(prn);
           n1.addNode(n12);
      switch (jj_nt.kind) {
      case ESCAPE_:
              n14 = new NodeSequence(2);
        n16 = jj_consume_token(ESCAPE_);
                            n15 = JTBToolkit.makeNodeToken(n16);
              n14.addNode(n15);
        n17 = SQLSimpleExpression(prn);
              n14.addNode(n17);
              n13.addNode(n14);
        break;
      default:
        jj_la1[463] = jj_gen;
        ;
      }
           n1.addNode(n13);
           n0 = new NodeChoice(n1, 0);
      break;
    case NOT_BITWISE_:
    case REGEX_MATCHES_CASE_INSTV_:
    case REGEX_NOT_MATCHES_:
    case REGEX_NOT_MATCHES_CASE_INSTV_:
    case OVERLAPS_:
           n18 = new NodeSequence(2);
      switch (jj_nt.kind) {
      case NOT_BITWISE_:
        n21 = jj_consume_token(NOT_BITWISE_);
                                    n20 = JTBToolkit.makeNodeToken(n21);
                 n19 = new NodeChoice(n20, 0);
        break;
      case REGEX_NOT_MATCHES_:
        n23 = jj_consume_token(REGEX_NOT_MATCHES_);
                                          n22 = JTBToolkit.makeNodeToken(n23);
                 n19 = new NodeChoice(n22, 1);
        break;
      case REGEX_MATCHES_CASE_INSTV_:
        n25 = jj_consume_token(REGEX_MATCHES_CASE_INSTV_);
                                                 n24 = JTBToolkit.makeNodeToken(n25);
                 n19 = new NodeChoice(n24, 2);
        break;
      case REGEX_NOT_MATCHES_CASE_INSTV_:
        n27 = jj_consume_token(REGEX_NOT_MATCHES_CASE_INSTV_);
                                                     n26 = JTBToolkit.makeNodeToken(n27);
                 n19 = new NodeChoice(n26, 3);
        break;
      case OVERLAPS_:
        n29 = jj_consume_token(OVERLAPS_);
                                 n28 = JTBToolkit.makeNodeToken(n29);
                 n19 = new NodeChoice(n28, 4);
        break;
      default:
        jj_la1[464] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           n18.addNode(n19);
      n30 = SQLSimpleExpression(prn);
           n18.addNode(n30);
           n0 = new NodeChoice(n18, 1);
      break;
    default:
      jj_la1[465] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SQLLikeClause(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SubQuery SubQuery(PrintStream prn) throws ParseException {
   SelectWithoutOrder n0;

   {
   }
    n0 = SelectWithoutOrder(prn);
     {if (true) return new SubQuery(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IsNullClause IsNullClause(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case IS_:
           n1 = new NodeSequence(2);
      n3 = jj_consume_token(IS_);
                   n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      switch (jj_nt.kind) {
      case NOT_:
        n6 = jj_consume_token(NOT_);
                        n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        break;
      default:
        jj_la1[466] = jj_gen;
        ;
      }
           n1.addNode(n4);
           n0 = new NodeChoice(n1, 0);
      break;
    case EQUALS_:
      n8 = jj_consume_token(EQUALS_);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 1);
      break;
    case NOT_EQUALS_:
      n10 = jj_consume_token(NOT_EQUALS_);
                    n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 2);
      break;
    default:
      jj_la1[467] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n12 = jj_consume_token(NULL_);
                n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new IsNullClause(n0,n11);}
    throw new Error("Missing return statement in function");
  }

  final public IsBooleanClause IsBooleanClause(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
    switch (jj_nt.kind) {
    case IS_:
           n1 = new NodeSequence(2);
      n3 = jj_consume_token(IS_);
                   n2 = JTBToolkit.makeNodeToken(n3);
           n1.addNode(n2);
      switch (jj_nt.kind) {
      case NOT_:
        n6 = jj_consume_token(NOT_);
                        n5 = JTBToolkit.makeNodeToken(n6);
              n4.addNode(n5);
        break;
      default:
        jj_la1[468] = jj_gen;
        ;
      }
           n1.addNode(n4);
           n0 = new NodeChoice(n1, 0);
      break;
    case EQUALS_:
      n8 = jj_consume_token(EQUALS_);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 1);
      break;
    case NOT_EQUALS_:
      n10 = jj_consume_token(NOT_EQUALS_);
                    n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 2);
      break;
    default:
      jj_la1[469] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case TRUE_:
      n13 = jj_consume_token(TRUE_);
                      n12 = JTBToolkit.makeNodeToken(n13);
           n11 = new NodeChoice(n12, 0);
      break;
    case FALSE_:
      n15 = jj_consume_token(FALSE_);
                       n14 = JTBToolkit.makeNodeToken(n15);
           n11 = new NodeChoice(n14, 1);
      break;
    default:
      jj_la1[470] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new IsBooleanClause(n0,n11);}
    throw new Error("Missing return statement in function");
  }

  final public IntoClause IntoClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   TableName n11;

   {
   }
    n1 = jj_consume_token(INTO_);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case TEMP_:
    case TEMPORARY_:
      switch (jj_nt.kind) {
      case TEMPORARY_:
        n5 = jj_consume_token(TEMPORARY_);
                           n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
        break;
      case TEMP_:
        n7 = jj_consume_token(TEMP_);
                      n6 = JTBToolkit.makeNodeToken(n7);
           n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[471] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[472] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case TABLE_:
      n10 = jj_consume_token(TABLE_);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      break;
    default:
      jj_la1[473] = jj_gen;
      ;
    }
    n11 = TableName(prn);
     {if (true) return new IntoClause(n0,n2,n8,n11);}
    throw new Error("Missing return statement in function");
  }

  final public FromClause FromClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   TableList n2;

   {
   }
    n1 = jj_consume_token(FROM_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TableList(prn);
     {if (true) return new FromClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public TableSpec TableSpec(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   TableName n2;
   NodeOptional n3 = new NodeOptional();
   SelectAliasSpec n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   SelectWithoutOrder n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   SelectAliasSpec n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   ColumnNameList n17;
   NodeToken n18;
   Token n19;

   {
   }
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
        n1 = new NodeSequence(2);
      n2 = TableName(prn);
        n1.addNode(n2);
      if (jj_2_444(2)) {
        n4 = SelectAliasSpec(prn);
           n3.addNode(n4);
      } else {
        ;
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case PARENTHESIS_START_:
        n5 = new NodeSequence(5);
      n7 = jj_consume_token(PARENTHESIS_START_);
                                n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = SelectWithoutOrder(prn);
        n5.addNode(n8);
      n10 = jj_consume_token(PARENTHESIS_CLOSE_);
                                 n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
      if (jj_2_445(2)) {
        n12 = SelectAliasSpec(prn);
           n11.addNode(n12);
      } else {
        ;
      }
        n5.addNode(n11);
      switch (jj_nt.kind) {
      case PARENTHESIS_START_:
           n14 = new NodeSequence(3);
        n16 = jj_consume_token(PARENTHESIS_START_);
                                    n15 = JTBToolkit.makeNodeToken(n16);
           n14.addNode(n15);
        n17 = ColumnNameList(prn);
           n14.addNode(n17);
        n19 = jj_consume_token(PARENTHESIS_CLOSE_);
                                    n18 = JTBToolkit.makeNodeToken(n19);
           n14.addNode(n18);
           n13.addNode(n14);
        break;
      default:
        jj_la1[474] = jj_gen;
        ;
      }
        n5.addNode(n13);
        n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[475] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TableSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TableList TableList(PrintStream prn) throws ParseException {
   FromTableSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   FromTableSpec n5;

   {
   }
    n0 = FromTableSpec(prn);
    label_32:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[476] = jj_gen;
        break label_32;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(781);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = FromTableSpec(prn);
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new TableList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public FromTableSpec FromTableSpec(PrintStream prn) throws ParseException {
   TableSpec n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   TableSpec n8;
   NodeChoice n9;
   NodeSequence n10;
   NodeOptional n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   TableSpec n16;
   JoinSpec n17;
   NodeSequence n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeOptional n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   TableSpec n31;
   JoinSpec n32;
   NodeSequence n33;
   NodeToken n34;
   Token n35;
   NodeChoice n36;
   NodeSequence n37;
   NodeOptional n38;
   NodeToken n39;
   Token n40;
   NodeToken n41;
   Token n42;
   TableSpec n43;
   NodeSequence n44;
   NodeChoice n45;
   NodeToken n46;
   Token n47;
   NodeToken n48;
   Token n49;
   NodeToken n50;
   Token n51;
   NodeOptional n52;
   NodeToken n53;
   Token n54;
   NodeToken n55;
   Token n56;
   TableSpec n57;

   {
   }
    n0 = TableSpec(prn);
    label_33:
    while (true) {
      switch (jj_nt.kind) {
      case FULL_:
      case JOIN_:
      case LEFT_:
      case CROSS_:
      case INNER_:
      case RIGHT_:
      case NATURAL_:
        ;
        break;
      default:
        jj_la1[477] = jj_gen;
        break label_33;
      }
        n11 = new NodeOptional();
        n26 = new NodeOptional();
        n38 = new NodeOptional();
        n52 = new NodeOptional();
      switch (jj_nt.kind) {
      case CROSS_:
           n3 = new NodeSequence(3);
        n5 = jj_consume_token(CROSS_);
                       n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n7 = jj_consume_token(JOIN_);
                      n6 = JTBToolkit.makeNodeToken(n7);
           n3.addNode(n6);
        n8 = TableSpec(prn);
           n3.addNode(n8);
           n2 = new NodeChoice(n3, 0);
        break;
      case FULL_:
      case JOIN_:
      case LEFT_:
      case INNER_:
      case RIGHT_:
        switch (jj_nt.kind) {
        case JOIN_:
        case INNER_:
                 n10 = new NodeSequence(4);
          switch (jj_nt.kind) {
          case INNER_:
            n13 = jj_consume_token(INNER_);
                                 n12 = JTBToolkit.makeNodeToken(n13);
                    n11.addNode(n12);
            break;
          default:
            jj_la1[478] = jj_gen;
            ;
          }
                 n10.addNode(n11);
          n15 = jj_consume_token(JOIN_);
                             n14 = JTBToolkit.makeNodeToken(n15);
                 n10.addNode(n14);
          n16 = TableSpec(prn);
                 n10.addNode(n16);
          n17 = JoinSpec(prn);
                 n10.addNode(n17);
                 n9 = new NodeChoice(n10, 0);
          break;
        case FULL_:
        case LEFT_:
        case RIGHT_:
                 n18 = new NodeSequence(5);
          switch (jj_nt.kind) {
          case LEFT_:
            n21 = jj_consume_token(LEFT_);
                                   n20 = JTBToolkit.makeNodeToken(n21);
                       n19 = new NodeChoice(n20, 0);
            break;
          case RIGHT_:
            n23 = jj_consume_token(RIGHT_);
                                    n22 = JTBToolkit.makeNodeToken(n23);
                       n19 = new NodeChoice(n22, 1);
            break;
          case FULL_:
            n25 = jj_consume_token(FULL_);
                                   n24 = JTBToolkit.makeNodeToken(n25);
                       n19 = new NodeChoice(n24, 2);
            break;
          default:
            jj_la1[479] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                 n18.addNode(n19);
          switch (jj_nt.kind) {
          case OUTER_:
            n28 = jj_consume_token(OUTER_);
                                 n27 = JTBToolkit.makeNodeToken(n28);
                    n26.addNode(n27);
            break;
          default:
            jj_la1[480] = jj_gen;
            ;
          }
                 n18.addNode(n26);
          n30 = jj_consume_token(JOIN_);
                             n29 = JTBToolkit.makeNodeToken(n30);
                 n18.addNode(n29);
          n31 = TableSpec(prn);
                 n18.addNode(n31);
          n32 = JoinSpec(prn);
                 n18.addNode(n32);
                 n9 = new NodeChoice(n18, 1);
          break;
        default:
          jj_la1[481] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n2 = new NodeChoice(n9, 1);
        break;
      case NATURAL_:
           n33 = new NodeSequence(2);
        n35 = jj_consume_token(NATURAL_);
                          n34 = JTBToolkit.makeNodeToken(n35);
           n33.addNode(n34);
        switch (jj_nt.kind) {
        case JOIN_:
        case INNER_:
                 n37 = new NodeSequence(3);
          switch (jj_nt.kind) {
          case INNER_:
            n40 = jj_consume_token(INNER_);
                                 n39 = JTBToolkit.makeNodeToken(n40);
                    n38.addNode(n39);
            break;
          default:
            jj_la1[482] = jj_gen;
            ;
          }
                 n37.addNode(n38);
          n42 = jj_consume_token(JOIN_);
                             n41 = JTBToolkit.makeNodeToken(n42);
                 n37.addNode(n41);
          n43 = TableSpec(prn);
                 n37.addNode(n43);
                 n36 = new NodeChoice(n37, 0);
          break;
        case FULL_:
        case LEFT_:
        case RIGHT_:
                 n44 = new NodeSequence(4);
          switch (jj_nt.kind) {
          case LEFT_:
            n47 = jj_consume_token(LEFT_);
                                   n46 = JTBToolkit.makeNodeToken(n47);
                       n45 = new NodeChoice(n46, 0);
            break;
          case RIGHT_:
            n49 = jj_consume_token(RIGHT_);
                                    n48 = JTBToolkit.makeNodeToken(n49);
                       n45 = new NodeChoice(n48, 1);
            break;
          case FULL_:
            n51 = jj_consume_token(FULL_);
                                   n50 = JTBToolkit.makeNodeToken(n51);
                       n45 = new NodeChoice(n50, 2);
            break;
          default:
            jj_la1[483] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                 n44.addNode(n45);
          switch (jj_nt.kind) {
          case OUTER_:
            n54 = jj_consume_token(OUTER_);
                                 n53 = JTBToolkit.makeNodeToken(n54);
                    n52.addNode(n53);
            break;
          default:
            jj_la1[484] = jj_gen;
            ;
          }
                 n44.addNode(n52);
          n56 = jj_consume_token(JOIN_);
                             n55 = JTBToolkit.makeNodeToken(n56);
                 n44.addNode(n55);
          n57 = TableSpec(prn);
                 n44.addNode(n57);
                 n36 = new NodeChoice(n44, 1);
          break;
        default:
          jj_la1[485] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
           n33.addNode(n36);
           n2 = new NodeChoice(n33, 2);
        break;
      default:
        jj_la1[486] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FromTableSpec(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public JoinSpec JoinSpec(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   SQLComplexExpression n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   ColumnNameList n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case ON_:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(ON_);
                n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = SQLComplexExpression(prn);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case USING_:
        n5 = new NodeSequence(4);
      n7 = jj_consume_token(USING_);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(PARENTHESIS_START_);
                                n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
      n10 = ColumnNameList(prn);
        n5.addNode(n10);
      n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                                 n11 = JTBToolkit.makeNodeToken(n12);
        n5.addNode(n11);
        n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[487] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new JoinSpec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public WhereClause WhereClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SQLComplexExpression n2;

   {
   }
    n1 = jj_consume_token(WHERE_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SQLComplexExpression(prn);
     {if (true) return new WhereClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public GroupByClause GroupByClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SQLExpressionList n2;

   {
   }
    n1 = jj_consume_token(GROUP_BY_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SQLExpressionList(prn);
     {if (true) return new GroupByClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SQLExpressionList SQLExpressionList(PrintStream prn) throws ParseException {
   SQLExpressionListItem n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SQLExpressionListItem n5;

   {
   }
    n0 = SQLExpressionListItem(prn);
    label_34:
    while (true) {
      if (jj_2_446(2147483647)) {
        ;
      } else {
        break label_34;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(781);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = SQLExpressionListItem(prn);
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SQLExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public SQLExpressionListItem SQLExpressionListItem(PrintStream prn) throws ParseException {
   SQLSimpleExpression n0;

   {
   }
    n0 = SQLSimpleExpression(prn);
     {if (true) return new SQLExpressionListItem(n0);}
    throw new Error("Missing return statement in function");
  }

  final public HavingClause HavingClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   SQLComplexExpression n2;

   {
   }
    n1 = jj_consume_token(HAVING_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SQLComplexExpression(prn);
     {if (true) return new HavingClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public OrderByClause OrderByClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   OrderByItem n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   OrderByItem n7;

   {
   }
    n1 = jj_consume_token(ORDER_BY_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = OrderByItem(prn);
    label_35:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[488] = jj_gen;
        break label_35;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(781);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = OrderByItem(prn);
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new OrderByClause(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public LimitClause LimitClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(LIMIT_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case INT_LITERAL:
      n4 = jj_consume_token(INT_LITERAL);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
      break;
    case ALL_:
      n6 = jj_consume_token(ALL_);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
      break;
    default:
      jj_la1[489] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new LimitClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public OffsetClause OffsetClause(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(OFFSET_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new OffsetClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public OrderByItem OrderByItem(PrintStream prn) throws ParseException {
   SQLSimpleExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    n0 = SQLSimpleExpression(prn);
    switch (jj_nt.kind) {
    case ASC_:
    case DESC_:
      switch (jj_nt.kind) {
      case ASC_:
        n4 = jj_consume_token(ASC_);
                    n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
        break;
      case DESC_:
        n6 = jj_consume_token(DESC_);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[490] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      break;
    default:
      jj_la1[491] = jj_gen;
      ;
    }
     {if (true) return new OrderByItem(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Func_AddDate Func_AddDate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ADDDATE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_AddDate(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_AddTime Func_AddTime(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ADDTIME_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_AddTime(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Date Func_Date(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DATE_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Date(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DateDiff Func_DateDiff(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(DATEDIFF_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_DateDiff(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Day Func_Day(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DAY_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Day(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DayName Func_DayName(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DAYNAME_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_DayName(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DayOfMonth Func_DayOfMonth(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DAYOFMONTH_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_DayOfMonth(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DayOfWeek Func_DayOfWeek(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DAYOFWEEK_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_DayOfWeek(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_DayOfYear Func_DayOfYear(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(DAYOFYEAR_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_DayOfYear(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_MonthName Func_MonthName(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(MONTHNAME_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_MonthName(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SubDate Func_SubDate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(SUBDATE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_SubDate(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SubTime Func_SubTime(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(SUBTIME_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    n9 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new Func_SubTime(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Time Func_Time(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(TIME_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Time(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_CurrentDate Func_CurrentDate(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    switch (jj_nt.kind) {
    case CURDATE_:
      n2 = jj_consume_token(CURDATE_);
                         n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case DATE_:
      n4 = jj_consume_token(DATE_);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[492] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Func_CurrentDate(n0,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public Func_PgCurrentDate Func_PgCurrentDate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(CURRENTDATE_);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Func_PgCurrentDate(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Func_PgCurrentTime Func_PgCurrentTime(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(CURRENT_TIME_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = SQLArgument(prn);
        n3.addNode(n6);
      n8 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n2.addNode(n3);
      break;
    default:
      jj_la1[493] = jj_gen;
      ;
    }
     {if (true) return new Func_PgCurrentTime(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_CurrentTime Func_CurrentTime(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
    switch (jj_nt.kind) {
    case CURTIME_:
      n2 = jj_consume_token(CURTIME_);
                         n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case TIME_:
      n4 = jj_consume_token(TIME_);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[494] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(PARENTHESIS_START_);
                             n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new Func_CurrentTime(n0,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public Func_PgCurrentTimeStamp Func_PgCurrentTimeStamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   SQLArgument n6;
   NodeToken n7;
   Token n8;

   {
   }
    n1 = jj_consume_token(CURRENT_TIMESTAMP_);
                             n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PARENTHESIS_START_:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(PARENTHESIS_START_);
                                n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = SQLArgument(prn);
        n3.addNode(n6);
      n8 = jj_consume_token(PARENTHESIS_CLOSE_);
                                n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n2.addNode(n3);
      break;
    default:
      jj_la1[495] = jj_gen;
      ;
    }
     {if (true) return new Func_PgCurrentTimeStamp(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Year Func_Year(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(YEAR_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Year(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Month Func_Month(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(MONTH_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Month(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Minute Func_Minute(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(MINUTE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Minute(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Hour Func_Hour(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(HOUR_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Hour(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Second Func_Second(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(SECOND_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_Second(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_TimeStamp Func_TimeStamp(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   SQLArgument n5;
   NodeToken n6;
   Token n7;

   {
   }
    n1 = jj_consume_token(TIMESTAMP_);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    switch (jj_nt.kind) {
    case NOT_BITWISE_:
    case MINUS_:
    case PARENTHESIS_START_:
    case ABSOLUTE_:
    case PLUS_:
    case X_:
    case Y_:
    case Z_:
    case SQUARE_ROOT_:
    case FACTORIAL_PREFIX_:
    case LN_:
    case PI_:
    case CUBE_ROOT_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case MOD_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CASE_:
    case CAST_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LEFT_:
    case LONG_:
    case LPAD_:
    case NULL_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TRUE_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FALSE_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INDEX_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case RIGHT_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TEMPDOT_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case MODULE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case PUBLICDOT_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case COALESCE_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case OVERLAPS_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case QPUBLICDOT_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case INT_LITERAL:
    case DECIMAL_LITERAL:
    case SCIENTIFIC_LITERAL:
    case STRING_LITERAL:
    case PARAM_PLACE_HOLDER:
    case INTERVAL_LITERAL:
    case DATE_LITERAL:
    case TIME_LITERAL:
    case TIMESTAMP_LITERAL:
    case TEXT_LITERAL:
    case INTEGER_LITERAL:
    case MACADDR_LITERAL:
    case CIDR_LITERAL:
    case INET_LITERAL:
    case BINARY_LITERAL:
    case HEXDECIMAL_LITERAL:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n5 = SQLArgument(prn);
        n4.addNode(n5);
      break;
    default:
      jj_la1[496] = jj_gen;
      ;
    }
    n7 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new Func_TimeStamp(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public Func_WeekOfYear Func_WeekOfYear(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(WEEKOFYEAR_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_WeekOfYear(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Now Func_Now(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(NOW_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Func_Now(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Func_SoundEx Func_SoundEx(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(SOUNDEX_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_SoundEx(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_InitCap Func_InitCap(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(INITCAP_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_InitCap(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_LFill Func_LFill(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   SQLArgument n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   SQLArgument n12;
   NodeToken n13;
   Token n14;

   {
   }
    n1 = jj_consume_token(LFILL_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(781);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = SQLArgument(prn);
    switch (jj_nt.kind) {
    case 781:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(781);
                n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = SQLArgument(prn);
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      jj_la1[497] = jj_gen;
      ;
    }
    n14 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Func_LFill(n0,n2,n4,n5,n7,n8,n13);}
    throw new Error("Missing return statement in function");
  }

  final public Func_MapChar Func_MapChar(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(MAPCHAR_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    if (jj_2_447(2)) {
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(781);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n10 = jj_consume_token(INT_LITERAL);
                          n9 = JTBToolkit.makeNodeToken(n10);
        n6.addNode(n9);
        n5.addNode(n6);
    } else {
      ;
    }
    if (jj_2_448(2)) {
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(781);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = Identifier(prn);
        n12.addNode(n15);
        n11.addNode(n12);
    } else {
      ;
    }
    n17 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new Func_MapChar(n0,n2,n4,n5,n11,n16);}
    throw new Error("Missing return statement in function");
  }

  final public Func_NUM Func_NUM(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(NUM_);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(PARENTHESIS_CLOSE_);
                             n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new Func_NUM(n0,n2,n4,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Func_Cast Func_Cast(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   SQLArgument n4;
   NodeToken n5;
   Token n6;
   NodeChoice n7;
   types n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
    n1 = jj_consume_token(CAST_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(PARENTHESIS_START_);
                             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SQLArgument(prn);
    n6 = jj_consume_token(AS_);
              n5 = JTBToolkit.makeNodeToken(n6);
    switch (jj_nt.kind) {
    case BIT_:
    case DEC_:
    case INT_:
    case RAW_:
    case BLOB_:
    case BYTE_:
    case CHAR_:
    case CIDR_:
    case CLOB_:
    case DATE_:
    case INET_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case REAL_:
    case TEXT_:
    case TIME_:
    case YEAR_:
    case BOX2D_:
    case BOX3D_:
    case BYTEA_:
    case FIXED_:
    case FLOAT_:
    case IMAGE_:
    case MONEY_:
    case NCHAR_:
    case BIGINT_:
    case BINARY_:
    case FLOAT4_:
    case FLOAT8_:
    case NUMBER_:
    case SERIAL_:
    case VARBIT_:
    case DECIMAL_:
    case INTEGER_:
    case MACADDR_:
    case NUMERIC_:
    case TINYINT_:
    case VARCHAR_:
    case DATETIME_:
    case GEOMETRY_:
    case INTERVAL_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case NATIONAL_:
    case REGCLASS_:
    case SMALLINT_:
    case TINYTEXT_:
    case VARCHAR2_:
    case BIGSERIAL_:
    case CHARACHTER_:
    case TIMESTAMP_:
    case VARBINARY_:
    case BIGINTEGER_:
    case MEDIUMTEXT_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case BOX3DEXTENT_:
    case LONG_VARCHAR_:
    case SAMLLDATETIME_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
      n8 = types();
           n7 = new NodeChoice(n8, 0);
      break;
    case NULL_:
      n10 = jj_consume_token(NULL_);
                       n9 = JTBToolkit.makeNodeToken(n10);
           n7 = new NodeChoice(n9, 1);
      break;
    default:
      jj_la1[498] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n12 = jj_consume_token(PARENTHESIS_CLOSE_);
                              n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new Func_Cast(n0,n2,n4,n5,n7,n11);}
    throw new Error("Missing return statement in function");
  }

  final public ColumnNameList ColumnNameList(PrintStream prn) throws ParseException {
   Identifier n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
    n0 = Identifier(prn);
    label_36:
    while (true) {
      if (jj_2_449(2)) {
        ;
      } else {
        break label_36;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(781);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Identifier(prn);
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ColumnNameList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public TableName TableName(PrintStream prn) throws ParseException {
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Identifier n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   Identifier n13;

   {
   }
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n1 = Identifier(prn);
           n0 = new NodeChoice(n1, 0);
      break;
    case TEMPDOT_:
           n2 = new NodeSequence(2);
      n4 = jj_consume_token(TEMPDOT_);
                         n3 = JTBToolkit.makeNodeToken(n4);
           n2.addNode(n3);
      n5 = Identifier(prn);
           n2.addNode(n5);
           n0 = new NodeChoice(n2, 1);
      break;
    case PUBLICDOT_:
           n6 = new NodeSequence(2);
      n8 = jj_consume_token(PUBLICDOT_);
                           n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
      n9 = Identifier(prn);
           n6.addNode(n9);
           n0 = new NodeChoice(n6, 2);
      break;
    case QPUBLICDOT_:
           n10 = new NodeSequence(2);
      n12 = jj_consume_token(QPUBLICDOT_);
                             n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
      n13 = Identifier(prn);
           n10.addNode(n13);
           n0 = new NodeChoice(n10, 3);
      break;
    default:
      jj_la1[499] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TableName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FloatingPointNumber FloatingPointNumber(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   {
   }
    if (jj_2_450(2)) {
      n2 = jj_consume_token(DECIMAL_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch (jj_nt.kind) {
      case INT_LITERAL:
        n4 = jj_consume_token(INT_LITERAL);
                         n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
        break;
      case SCIENTIFIC_LITERAL:
        n6 = jj_consume_token(SCIENTIFIC_LITERAL);
                                n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
        break;
      default:
        jj_la1[500] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new FloatingPointNumber(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowAgents ShowAgents() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_AGENTS_);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowAgents(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowDatabases ShowDatabases() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_DATABASES_);
                          n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowDatabases(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowStatements ShowStatements() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_STATEMENTS_);
                           n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowStatements(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowTables ShowTables() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_TABLES_);
                       n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowTables(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowTranIsolation ShowTranIsolation() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_TRAN_ISOLATION_);
                               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowTranIsolation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BeginTransaction BeginTransaction() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(BEGIN_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case TRAN_:
    case WORK_:
    case TRANSACTION_:
      switch (jj_nt.kind) {
      case TRANSACTION_:
        n5 = jj_consume_token(TRANSACTION_);
                                n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case TRAN_:
        n7 = jj_consume_token(TRAN_);
                         n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case WORK_:
        n9 = jj_consume_token(WORK_);
                         n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[501] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[502] = jj_gen;
      ;
    }
     {if (true) return new BeginTransaction(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public CommitTransaction CommitTransaction() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   {
   }
    switch (jj_nt.kind) {
    case COMMIT_:
      n2 = jj_consume_token(COMMIT_);
                        n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case END_:
      n4 = jj_consume_token(END_);
                     n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[503] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case TRAN_:
    case WORK_:
    case TRANSACTION_:
      switch (jj_nt.kind) {
      case TRANSACTION_:
        n8 = jj_consume_token(TRANSACTION_);
                                n7 = JTBToolkit.makeNodeToken(n8);
              n6 = new NodeChoice(n7, 0);
        break;
      case TRAN_:
        n10 = jj_consume_token(TRAN_);
                          n9 = JTBToolkit.makeNodeToken(n10);
              n6 = new NodeChoice(n9, 1);
        break;
      case WORK_:
        n12 = jj_consume_token(WORK_);
                          n11 = JTBToolkit.makeNodeToken(n12);
              n6 = new NodeChoice(n11, 2);
        break;
      default:
        jj_la1[504] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n5.addNode(n6);
      break;
    default:
      jj_la1[505] = jj_gen;
      ;
    }
     {if (true) return new CommitTransaction(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  final public RollbackTransaction RollbackTransaction() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;

   {
   }
    n1 = jj_consume_token(ROLLBACK_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case TRAN_:
    case WORK_:
    case TRANSACTION_:
      switch (jj_nt.kind) {
      case TRANSACTION_:
        n5 = jj_consume_token(TRANSACTION_);
                                n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case TRAN_:
        n7 = jj_consume_token(TRAN_);
                         n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case WORK_:
        n9 = jj_consume_token(WORK_);
                         n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[506] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[507] = jj_gen;
      ;
    }
     {if (true) return new RollbackTransaction(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public DescribeTable DescribeTable(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TableName n7;

   {
   }
    switch (jj_nt.kind) {
    case DESCRIBE_:
      n2 = jj_consume_token(DESCRIBE_);
                          n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case SHOW_TABLE_:
      n4 = jj_consume_token(SHOW_TABLE_);
                            n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case SHOW_VIEW_:
      n6 = jj_consume_token(SHOW_VIEW_);
                           n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[508] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n7 = TableName(prn);
     {if (true) return new DescribeTable(n0,n7);}
    throw new Error("Missing return statement in function");
  }

  final public ShowConstraints ShowConstraints(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
    n1 = jj_consume_token(SHOW_CONSTRAINTS_);
                            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ON_);
              n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
     {if (true) return new ShowConstraints(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ShowIndexes ShowIndexes(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   TableName n4;

   {
   }
    n1 = jj_consume_token(SHOW_INDEXES_);
                        n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ON_);
              n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TableName(prn);
     {if (true) return new ShowIndexes(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ShowUsers ShowUsers(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_USERS_);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowUsers(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ShowViews ShowViews(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(SHOW_VIEWS_);
                      n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ShowViews(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Deallocate Deallocate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Identifier n5;

   {
   }
    n1 = jj_consume_token(DEALLOCATE_);
                      n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case PREPARE_:
      n4 = jj_consume_token(PREPARE_);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[509] = jj_gen;
      ;
    }
    n5 = Identifier(prn);
     {if (true) return new Deallocate(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public CreateUser CreateUser(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   Identifier n7;
   NodeOptional n8 = new NodeOptional();
   NodeChoice n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;

   {
   }
    n1 = jj_consume_token(CREATE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(USER_);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
    n6 = jj_consume_token(PASSWORD_);
                    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Identifier(prn);
    switch (jj_nt.kind) {
    case DBA_:
    case RESOURCE_:
    case STANDARD_:
      switch (jj_nt.kind) {
      case DBA_:
        n11 = jj_consume_token(DBA_);
                      n10 = JTBToolkit.makeNodeToken(n11);
           n9 = new NodeChoice(n10, 0);
        break;
      case RESOURCE_:
        n13 = jj_consume_token(RESOURCE_);
                           n12 = JTBToolkit.makeNodeToken(n13);
           n9 = new NodeChoice(n12, 1);
        break;
      case STANDARD_:
        n15 = jj_consume_token(STANDARD_);
                           n14 = JTBToolkit.makeNodeToken(n15);
           n9 = new NodeChoice(n14, 2);
        break;
      default:
        jj_la1[510] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n8.addNode(n9);
      break;
    default:
      jj_la1[511] = jj_gen;
      ;
    }
     {if (true) return new CreateUser(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public DropUser DropUser(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;

   {
   }
    n1 = jj_consume_token(DROP_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(USER_);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
     {if (true) return new DropUser(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public AlterUser AlterUser(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Identifier n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;
   NodeOptional n10 = new NodeOptional();
   NodeChoice n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   {
   }
    n1 = jj_consume_token(ALTER_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(USER_);
                n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Identifier(prn);
    switch (jj_nt.kind) {
    case PASSWORD_:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(PASSWORD_);
                       n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = Identifier(prn);
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[512] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case DBA_:
    case RESOURCE_:
    case STANDARD_:
      switch (jj_nt.kind) {
      case DBA_:
        n13 = jj_consume_token(DBA_);
                      n12 = JTBToolkit.makeNodeToken(n13);
           n11 = new NodeChoice(n12, 0);
        break;
      case RESOURCE_:
        n15 = jj_consume_token(RESOURCE_);
                           n14 = JTBToolkit.makeNodeToken(n15);
           n11 = new NodeChoice(n14, 1);
        break;
      case STANDARD_:
        n17 = jj_consume_token(STANDARD_);
                           n16 = JTBToolkit.makeNodeToken(n17);
           n11 = new NodeChoice(n16, 2);
        break;
      default:
        jj_la1[513] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n10.addNode(n11);
      break;
    default:
      jj_la1[514] = jj_gen;
      ;
    }
     {if (true) return new AlterUser(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public Grantee Grantee(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   {
   }
    switch (jj_nt.kind) {
    case PUBLIC_:
      n2 = jj_consume_token(PUBLIC_);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n3 = Identifier(prn);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[515] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Grantee(n0);}
    throw new Error("Missing return statement in function");
  }

  final public GranteeList GranteeList(PrintStream prn) throws ParseException {
   Grantee n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Grantee n5;

   {
   }
    n0 = Grantee(prn);
    label_37:
    while (true) {
      switch (jj_nt.kind) {
      case 781:
        ;
        break;
      default:
        jj_la1[516] = jj_gen;
        break label_37;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(781);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Grantee(prn);
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new GranteeList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public TableListForGrant TableListForGrant(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Identifier n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;

   {
   }
    switch (jj_nt.kind) {
    case STAR_:
      n2 = jj_consume_token(STAR_);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
        n3 = new NodeSequence(2);
      n4 = Identifier(prn);
        n3.addNode(n4);
      label_38:
      while (true) {
        switch (jj_nt.kind) {
        case 781:
          ;
          break;
        default:
          jj_la1[517] = jj_gen;
          break label_38;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(781);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = Identifier(prn);
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[518] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TableListForGrant(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Privilege Privilege(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   {
   }
    switch (jj_nt.kind) {
    case SELECT_:
      n2 = jj_consume_token(SELECT_);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case INSERT_:
      n4 = jj_consume_token(INSERT_);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case UPDATE_:
      n6 = jj_consume_token(UPDATE_);
                     n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case DELETE_:
      n8 = jj_consume_token(DELETE_);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case REFERENCES_:
      n10 = jj_consume_token(REFERENCES_);
                          n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case INDEX_:
      n12 = jj_consume_token(INDEX_);
                     n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case ALTER_:
      n14 = jj_consume_token(ALTER_);
                     n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    default:
      jj_la1[519] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Privilege(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrivilegeList PrivilegeList(PrintStream prn) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Privilege n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Privilege n9;

   {
   }
    switch (jj_nt.kind) {
    case ALL_:
      n2 = jj_consume_token(ALL_);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case ALTER_:
    case INDEX_:
    case DELETE_:
    case INSERT_:
    case SELECT_:
    case UPDATE_:
    case REFERENCES_:
        n3 = new NodeSequence(2);
      n4 = Privilege(prn);
        n3.addNode(n4);
      label_39:
      while (true) {
        switch (jj_nt.kind) {
        case 781:
          ;
          break;
        default:
          jj_la1[520] = jj_gen;
          break label_39;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(781);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = Privilege(prn);
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[521] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrivilegeList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Grant Grant(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   PrivilegeList n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   TableListForGrant n8;
   NodeToken n9;
   Token n10;
   GranteeList n11;

   {
   }
    n1 = jj_consume_token(GRANT_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrivilegeList(prn);
    n4 = jj_consume_token(ON_);
              n3 = JTBToolkit.makeNodeToken(n4);
    switch (jj_nt.kind) {
    case TABLE_:
      n7 = jj_consume_token(TABLE_);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      break;
    default:
      jj_la1[522] = jj_gen;
      ;
    }
    n8 = TableListForGrant(prn);
    n10 = jj_consume_token(TO_);
               n9 = JTBToolkit.makeNodeToken(n10);
    n11 = GranteeList(prn);
     {if (true) return new Grant(n0,n2,n3,n5,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Revoke Revoke(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   PrivilegeList n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   TableListForGrant n8;
   NodeToken n9;
   Token n10;
   GranteeList n11;

   {
   }
    n1 = jj_consume_token(REVOKE_);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrivilegeList(prn);
    n4 = jj_consume_token(ON_);
              n3 = JTBToolkit.makeNodeToken(n4);
    switch (jj_nt.kind) {
    case TABLE_:
      n7 = jj_consume_token(TABLE_);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      break;
    default:
      jj_la1[523] = jj_gen;
      ;
    }
    n8 = TableListForGrant(prn);
    n10 = jj_consume_token(FROM_);
                 n9 = JTBToolkit.makeNodeToken(n10);
    n11 = GranteeList(prn);
     {if (true) return new Revoke(n0,n2,n3,n5,n8,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  final public Cluster Cluster(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   Identifier n4;
   NodeOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   Identifier n9;

   {
   }
    n1 = jj_consume_token(CLUSTER_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
        n5 = new NodeOptional();
        n3 = new NodeSequence(2);
      n4 = Identifier(prn);
        n3.addNode(n4);
      switch (jj_nt.kind) {
      case ON_:
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(ON_);
                    n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = Identifier(prn);
           n6.addNode(n9);
           n5.addNode(n6);
        break;
      default:
        jj_la1[524] = jj_gen;
        ;
      }
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[525] = jj_gen;
      ;
    }
     {if (true) return new Cluster(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Truncate Truncate(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   TableName n5;

   {
   }
    n1 = jj_consume_token(TRUNCATE_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case TABLE_:
      n4 = jj_consume_token(TABLE_);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[526] = jj_gen;
      ;
    }
    n5 = TableName(prn);
     {if (true) return new Truncate(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public Kill Kill(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
    n1 = jj_consume_token(KILL_);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Kill(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public Unlisten Unlisten(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   Identifier n4;
   NodeToken n5;
   Token n6;

   {
   }
    n1 = jj_consume_token(UNLISTEN_);
                    n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case STAR_:
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      switch (jj_nt.kind) {
      case X_:
      case Y_:
      case Z_:
      case LN_:
      case PI_:
      case ABS_:
      case AGE_:
      case AVERAGE_:
      case CHR_:
      case COS_:
      case COT_:
      case DAY_:
      case DEC_:
      case EXP_:
      case INT_:
      case LOG_:
      case MAX_:
      case MD5_:
      case MIN_:
      case NOW_:
      case NUM_:
      case RAW_:
      case SIN_:
      case SUM_:
      case TAN_:
      case ACOS_:
      case ASIN_:
      case ATAN_:
      case ATN2_:
      case BLOB_:
      case BYTE_:
      case CBRT_:
      case CEIL_:
      case CHAR_:
      case CLOB_:
      case CORR_:
      case COSH_:
      case DATE_:
      case HOST_:
      case HOUR_:
      case INT2_:
      case INT4_:
      case INT8_:
      case LONG_:
      case LPAD_:
      case PORT_:
      case REAL_:
      case RPAD_:
      case SIGN_:
      case SQRT_:
      case SRID_:
      case ST_M_:
      case ST_X_:
      case ST_Y_:
      case ST_Z_:
      case TEXT_:
      case TIME_:
      case TRIM_:
      case TYPE_:
      case USER_:
      case WEEK_:
      case YEAR_:
      case ASCII_:
      case ASKML_:
      case ATAN2_:
      case BOX2D_:
      case BOX3D_:
      case BTRIM_:
      case BYTEA_:
      case COUNT_:
      case EVERY_:
      case FIXED_:
      case FLOAT_:
      case FLOOR_:
      case IMAGE_:
      case INSTR_:
      case LEAST_:
      case LFILL_:
      case LOG10_:
      case LOWER_:
      case LTRIM_:
      case MONEY_:
      case MONTH_:
      case MULTI_:
      case NCHAR_:
      case NDIMS_:
      case POWER_:
      case ROUND_:
      case RTRIM_:
      case SCALE_:
      case TRUNC_:
      case UPPER_:
      case VALUE_:
      case ABBREV_:
      case AREA2D_:
      case ASEWKB_:
      case ASEWKT_:
      case ASTEXT_:
      case BIGINT_:
      case BINARY_:
      case BIT_OR_:
      case CONCAT_WORD:
      case DECODE_:
      case ENCODE_:
      case WORD_EQUALS_:
      case EXTENT_:
      case FAMILY_:
      case FLOAT4_:
      case FLOAT8_:
      case ISRING_:
      case LENGTH_:
      case MINUTE_:
      case NRINGS_:
      case NULLIF_:
      case NUMBER_:
      case RANDOM_:
      case REPEAT_:
      case ROTATE_:
      case SECOND_:
      case STDDEV_:
      case STRPOS_:
      case SUBSTR_:
      case TO_HEX_:
      case WITHIN_:
      case ZMFLAG_:
      case ADDDATE_:
      case ADDTIME_:
      case BIT_AND_:
      case BOOL_OR_:
      case CEILING_:
      case CLUSTER_:
      case COLLECT_:
      case CONVERT_:
      case CURDATE_:
      case CURTIME_:
      case DAYNAME_:
      case DECIMAL_:
      case DEGREE_:
      case EXTRACT_:
      case GET_BIT_:
      case INITCAP_:
      case INTEGER_:
      case ISEMPTY_:
      case ISVALID_:
      case MAPCHAR_:
      case MASKLEN_:
      case NETMASK_:
      case NETWORK_:
      case NPOINTS_:
      case NUMERIC_:
      case OVERLAY_:
      case PLACING_:
      case QUARTER_:
      case RADIANS_:
      case REGR_R2_:
      case REPLACE_:
      case ROTATEX_:
      case ROTATEY_:
      case ROTATEZ_:
      case SET_BIT_:
      case SETSEED_:
      case SETSRID_:
      case SOUNDEX_:
      case SPATIAL_:
      case ST_AREA_:
      case STORAGE_:
      case ST_SRID_:
      case ST_TEXT_:
      case SUBDATE_:
      case SUBTIME_:
      case TINYINT_:
      case TO_CHAR_:
      case TO_DATE_:
      case VARCHAR_:
      case VAR_POP_:
      case VARYING_:
      case VERSION_:
      case ASBINARY_:
      case BOOL_AND_:
      case CONTAINS_:
      case DATABASE_:
      case DATEDIFF_:
      case DATETIME_:
      case DISJOINT_:
      case DISTANCE_:
      case DROPBBOX_:
      case ENDPOINT_:
      case ENVELOPE_:
      case EXTENT3D_:
      case FORCE_2D_:
      case FORCE_3D_:
      case FORCE_4D_:
      case GEOMETRY_:
      case GET_BYTE_:
      case GREATEST_:
      case HOSTMASK_:
      case INTERVAL_:
      case ISCLOSED_:
      case ISFINITE_:
      case ISSIMPLE_:
      case LAST_DAY_:
      case LENGTH2D_:
      case LENGTH3D_:
      case LONG_RAW_:
      case LONGTEXT_:
      case LVARCHAR_:
      case MEM_SIZE_:
      case NATIONAL_:
      case NEXT_DAY_:
      case PASSWORD_:
      case REGCLASS_:
      case REGR_SXX_:
      case REGR_SXY_:
      case REGR_SYY_:
      case SET_BYTE_:
      case SETPOINT_:
      case SIMPLIFY_:
      case SMALLINT_:
      case ST_ASGML_:
      case ST_ASKML_:
      case ST_ASSVG_:
      case ST_BOX2D_:
      case ST_BOX3D_:
      case ST_BYTEA_:
      case ST_MULTI_:
      case ST_NDIMS_:
      case ST_POINT_:
      case ST_SCALE_:
      case ST_WIDTH_:
      case TINYTEXT_:
      case TO_ASCII_:
      case TRUNCATE_:
      case VARCHAR2_:
      case VARIANCE_:
      case VAR_SAMP_:
      case ASHEXEWKB_:
      case BROADCAST_:
      case CHARACHTER_:
      case COVAR_POP_:
      case DATEPART_:
      case DAYOFWEEK_:
      case DAYOFYEAR_:
      case DIMENSION_:
      case FORCE_3DM_:
      case FORCE_3DZ_:
      case GEOMETRYN_:
      case LINEMERGE_:
      case LOCALTIME_:
      case MONTHNAME_:
      case REGR_AVGX_:
      case REGR_AVGY_:
      case ST_AFFINE_:
      case ST_AREA2D_:
      case ST_ASEWKB_:
      case ST_ASEWKT_:
      case ST_ASTEXT_:
      case ST_BUFFER_:
      case ST_COVERS_:
      case ST_EQUALS_:
      case ST_EXTENT_:
      case ST_FACTOR_:
      case ST_HASARC_:
      case ST_HEIGHT_:
      case ST_ISRING_:
      case ST_LENGTH_:
      case ST_NRINGS_:
      case ST_POINTN_:
      case ST_RELATE_:
      case ST_ROTATE_:
      case ST_WITHIN_:
      case ST_ZMFLAG_:
      case SUBSTRING_:
      case TIMEOFDAY_:
      case TIMESTAMP_:
      case TO_NUMBER_:
      case TRANSFORM_:
      case TRANSLATE_:
      case VARBINARY_:
      case ADD_MONTHS_:
      case BIGINTEGER_:
      case BIT_LENGTH_:
      case COVAR_SAMP_:
      case DATETRUNC_:
      case DAYOFMONTH_:
      case DIFFERENCE_:
      case INTERSECTS_:
      case MEDIUMTEXT_:
      case REGR_COUNT_:
      case REGR_SLOPE_:
      case SEGMENTIZE_:
      case SMALLFLOAT_:
      case SMALLMONEY_:
      case SNAPTOGRID_:
      case SPLIT_PART_:
      case STARTPOINT_:
      case ST_AZIMUTH_:
      case ST_CHIP_IN_:
      case ST_COLLECT_:
      case ST_CROSSES_:
      case STDDEV_POP_:
      case ST_DWITHIN_:
      case ST_GEOHASH_:
      case ST_ISEMPTY_:
      case ST_ISVALID_:
      case ST_NPOINTS_:
      case ST_POLYGON_:
      case ST_REVERSE_:
      case ST_ROTATEX_:
      case ST_ROTATEY_:
      case ST_ROTATEZ_:
      case ST_SETSRID_:
      case ST_SUMMARY_:
      case ST_TOUCHES_:
      case TRANSSCALE_:
      case WEEKOFYEAR_:
      case BOX3DEXTENT_:
      case CHAR_LENGTH_:
      case PERIMETER2D_:
      case PERIMETER3D_:
      case QUOTE_IDENT_:
      case REMOVEPOINT_:
      case SET_MASKLEN_:
      case ST_ADDPOINT_:
      case ST_ASBINARY_:
      case ST_BOUNDARY_:
      case ST_CENTROID_:
      case ST_CHIP_OUT_:
      case ST_CONTAINS_:
      case ST_COORDDIM_:
      case ST_DATATYPE_:
      case STDDEV_SAMP_:
      case ST_DISJOINT_:
      case ST_DISTANCE_:
      case ST_ENDPOINT_:
      case ST_ENVELOPE_:
      case ST_EXTENT3D_:
      case ST_FORCE_2D_:
      case ST_FORCE_3D_:
      case ST_FORCE_4D_:
      case ST_FORCERHR_:
      case ST_GEOMETRY_:
      case ST_GMLTOSQL_:
      case ST_ISCLOSED_:
      case ST_ISSIMPLE_:
      case ST_LENGTH2D_:
      case ST_LENGTH3D_:
      case ST_MEM_SIZE_:
      case ST_OVERLAPS_:
      case ST_SETPOINT_:
      case ST_SIMPLIFY_:
      case ST_WKBTOSQL_:
      case ST_WKTTOSQL_:
      case CURRENTDATE_:
      case CURRENT_TIME_:
      case CURRENT_USER_:
      case EXTERIORRING_:
      case GEOMETRYTYPE_:
      case GEOMFROMEWKT_:
      case GEOMFROMTEXT_:
      case INTERSECTION_:
      case JUSTIFY_DAYS_:
      case LONG_VARCHAR_:
      case OCTET_LENGTH_:
      case ST_ASGEOJSON_:
      case ST_ASHEXEWKB_:
      case ST_BUILDAREA_:
      case ST_COVEREDBY_:
      case ST_DIMENSION_:
      case ST_FORCE_3DM_:
      case ST_FORCE_3DZ_:
      case ST_GEOMETRYN_:
      case ST_LINEMERGE_:
      case ST_MAKEPOINT_:
      case ST_NUMPOINTS_:
      case ST_PERIMETER_:
      case ST_SETFACTOR_:
      case ST_TRANSFORM_:
      case ST_TRANSLATE_:
      case TO_TIMESTAMP_:
      case VARIANCE_POP_:
      case WIDTH_BUCKET_:
      case INTERIORRINGN_:
      case JUSTIFY_HOURS_:
      case NUMGEOMETRIES_:
      case QUOTE_LITERAL_:
      case SAMLLDATETIME_:
      case ST_ADDMEASURE_:
      case ST_CONVEXHULL_:
      case ST_DIFFERENCE_:
      case ST_INTERSECTS_:
      case ST_MAKEPOINTM_:
      case ST_MEMCOLLECT_:
      case ST_SEGMENTIZE_:
      case ST_SNAPTOGRID_:
      case ST_STARTPOINT_:
      case ST_TRANSSCALE_:
      case SYMDIFFERENCE_:
      case VARIANCE_SAMP_:
      case CURRENT_SCHEMA_:
      case LINE_SUBSTRING_:
      case LOCALTIMESTAMP_:
      case MONTHS_BETWEEN_:
      case REGEXP_REPLACE_:
      case REGR_INTERCEPT_:
      case ST_COMPRESSION_:
      case ST_CURVETOLINE_:
      case ST_FIND_EXTENT_:
      case ST_GEOGFROMWKB_:
      case ST_GEOMFROMGML_:
      case ST_GEOMFROMKML_:
      case ST_GEOMFROMWKB_:
      case ST_LINEFROMWKB_:
      case ST_LINETOCURVE_:
      case ST_LONGESTLINE_:
      case ST_MAKEPOLYGON_:
      case ST_MAXDISTANCE_:
      case ST_PERIMETER2D_:
      case ST_PERIMETER3D_:
      case ST_POLYFROMWKB_:
      case ST_REMOVEPOINT_:
      case CLOCK_TIMESTAMP_:
      case ST_CLOSESTPOINT_:
      case ST_COMBINE_BBOX_:
      case ST_DFULLYWITHIN_:
      case ST_EXTERIORRING_:
      case ST_GEOGFROMTEXT_:
      case ST_GEOMETRYTYPE_:
      case ST_GEOMFROMEWKB_:
      case ST_GEOMFROMEWKT_:
      case ST_GEOMFROMTEXT_:
      case ST_INTERSECTION_:
      case ST_LINEFROMTEXT_:
      case ST_MAKEENVELOPE_:
      case ST_MLINEFROMWKB_:
      case ST_MPOLYFROMWKB_:
      case ST_POINTFROMWKB_:
      case ST_POLYFROMTEXT_:
      case ST_SHORTESTLINE_:
      case CHARACTER_LENGTH_:
      case CURRENT_DATABASE_:
      case FORCE_COLLECTION_:
      case JUSTIFY_INTERVAL_:
      case NUMINTERIORRINGS_:
      case POSTGIS_DROPBBOX_:
      case ST_INTERIORRINGN_:
      case ST_ISVALIDREASON_:
      case ST_MLINEFROMTEXT_:
      case ST_MPOINTFROMWKB_:
      case ST_MPOLYFROMTEXT_:
      case ST_NUMGEOMETRIES_:
      case ST_POINTFROMTEXT_:
      case ST_SYMDIFFERENCE_:
      case ADDGEOMETRYCOLUMN_:
      case CURRENT_TIMESTAMP_:
      case LINE_LOCATE_POINT_:
      case ST_BDPOLYFROMTEXT_:
      case ST_LINE_SUBSTRING_:
      case ST_MPOINTFROMTEXT_:
      case ST_ORDERINGEQUALS_:
      case ST_POINTONSURFACE_:
      case ST_POLYGONFROMWKB_:
      case PG_CLIENT_ENCODING_:
      case ST_BDMPOLYFROMTEXT_:
      case ST_DISTANCE_SPHERE_:
      case ST_GEOMCOLLFROMWKB_:
      case ST_LENGTH_SPHEROID_:
      case ST_NUMINTERIORRING_:
      case ST_POLYGONFROMTEXT_:
      case ST_SHIFT_LONGITUDE_:
      case STATEMENT_TIMESTAMP_:
      case ST_CONTAINSPROPERLY_:
      case ST_FORCE_COLLECTION_:
      case ST_GEOMCOLLFROMTEXT_:
      case ST_MULTILINEFROMWKB_:
      case ST_MULTIPOLYFROMWKB_:
      case ST_NUMINTERIORRINGS_:
      case ST_POSTGIS_GIST_SEL_:
      case LOCATE_ALONG_MEASURE_:
      case ST_COLLECTIONEXTRACT_:
      case ST_DISTANCE_SPHEROID_:
      case ST_GEOGRAPHYFROMTEXT_:
      case ST_HAUSDORFFDISTANCE_:
      case ST_LENGTH2D_SPHEROID_:
      case ST_LENGTH3D_SPHEROID_:
      case ST_LINE_LOCATE_POINT_:
      case ST_LINESTRINGFROMWKB_:
      case ST_MULTIPOINTFROMWKB_:
      case ST_LINEFROMMULTIPOINT_:
      case ST_MULTIPOINTFROMTEXT_:
      case TRANSACTION_TIMESTAMP_:
      case LINE_INTERPOLATE_POINT_:
      case ST_POINT_INSIDE_CIRCLE_:
      case ST_SYMMETRICDIFFERENCE_:
      case LOCATE_BETWEEN_MEASURES_:
      case ST_LOCATE_ALONG_MEASURE_:
      case ST_MULTIPOLYGONFROMTEXT_:
      case ST_POSTGIS_GIST_JOINSEL_:
      case ST_LINECROSSINGDIRECTION_:
      case ST_MINIMUMBOUNDINGCIRCLE_:
      case ST_LINE_INTERPOLATE_POINT_:
      case ST_LOCATEBETWEENELEVATIONS_:
      case ST_LOCATE_BETWEEN_MEASURES_:
      case ST_MULTILINESTRINGFROMTEXT_:
      case ST_SIMPLIFYPRESERVETOPOLOGY_:
      case WITH_TIMEZONE_:
      case WITHOUT_TIMEZONE_:
      case DOUBLE_PRECISION_:
      case BOOLEAN_:
      case POSITION_:
      case IDENTIFIER:
      case QUOTED_IDENTIFIER:
        n4 = Identifier(prn);
           n3 = new NodeChoice(n4, 0);
        break;
      case STAR_:
        n6 = jj_consume_token(STAR_);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n3 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[527] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[528] = jj_gen;
      ;
    }
     {if (true) return new Unlisten(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public DeclareCursor DeclareCursor(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Select n7;

   {
   }
    n1 = jj_consume_token(DECLARE_);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier(prn);
    n4 = jj_consume_token(CURSOR_);
                  n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(FOR_);
               n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Select(prn);
     {if (true) return new DeclareCursor(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public CloseCursor CloseCursor(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Identifier n3;
   NodeToken n4;
   Token n5;

   {
   }
    n1 = jj_consume_token(CLOSE_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch (jj_nt.kind) {
    case X_:
    case Y_:
    case Z_:
    case LN_:
    case PI_:
    case ABS_:
    case AGE_:
    case AVERAGE_:
    case CHR_:
    case COS_:
    case COT_:
    case DAY_:
    case DEC_:
    case EXP_:
    case INT_:
    case LOG_:
    case MAX_:
    case MD5_:
    case MIN_:
    case NOW_:
    case NUM_:
    case RAW_:
    case SIN_:
    case SUM_:
    case TAN_:
    case ACOS_:
    case ASIN_:
    case ATAN_:
    case ATN2_:
    case BLOB_:
    case BYTE_:
    case CBRT_:
    case CEIL_:
    case CHAR_:
    case CLOB_:
    case CORR_:
    case COSH_:
    case DATE_:
    case HOST_:
    case HOUR_:
    case INT2_:
    case INT4_:
    case INT8_:
    case LONG_:
    case LPAD_:
    case PORT_:
    case REAL_:
    case RPAD_:
    case SIGN_:
    case SQRT_:
    case SRID_:
    case ST_M_:
    case ST_X_:
    case ST_Y_:
    case ST_Z_:
    case TEXT_:
    case TIME_:
    case TRIM_:
    case TYPE_:
    case USER_:
    case WEEK_:
    case YEAR_:
    case ASCII_:
    case ASKML_:
    case ATAN2_:
    case BOX2D_:
    case BOX3D_:
    case BTRIM_:
    case BYTEA_:
    case COUNT_:
    case EVERY_:
    case FIXED_:
    case FLOAT_:
    case FLOOR_:
    case IMAGE_:
    case INSTR_:
    case LEAST_:
    case LFILL_:
    case LOG10_:
    case LOWER_:
    case LTRIM_:
    case MONEY_:
    case MONTH_:
    case MULTI_:
    case NCHAR_:
    case NDIMS_:
    case POWER_:
    case ROUND_:
    case RTRIM_:
    case SCALE_:
    case TRUNC_:
    case UPPER_:
    case VALUE_:
    case ABBREV_:
    case AREA2D_:
    case ASEWKB_:
    case ASEWKT_:
    case ASTEXT_:
    case BIGINT_:
    case BINARY_:
    case BIT_OR_:
    case CONCAT_WORD:
    case DECODE_:
    case ENCODE_:
    case WORD_EQUALS_:
    case EXTENT_:
    case FAMILY_:
    case FLOAT4_:
    case FLOAT8_:
    case ISRING_:
    case LENGTH_:
    case MINUTE_:
    case NRINGS_:
    case NULLIF_:
    case NUMBER_:
    case RANDOM_:
    case REPEAT_:
    case ROTATE_:
    case SECOND_:
    case STDDEV_:
    case STRPOS_:
    case SUBSTR_:
    case TO_HEX_:
    case WITHIN_:
    case ZMFLAG_:
    case ADDDATE_:
    case ADDTIME_:
    case BIT_AND_:
    case BOOL_OR_:
    case CEILING_:
    case CLUSTER_:
    case COLLECT_:
    case CONVERT_:
    case CURDATE_:
    case CURTIME_:
    case DAYNAME_:
    case DECIMAL_:
    case DEGREE_:
    case EXTRACT_:
    case GET_BIT_:
    case INITCAP_:
    case INTEGER_:
    case ISEMPTY_:
    case ISVALID_:
    case MAPCHAR_:
    case MASKLEN_:
    case NETMASK_:
    case NETWORK_:
    case NPOINTS_:
    case NUMERIC_:
    case OVERLAY_:
    case PLACING_:
    case QUARTER_:
    case RADIANS_:
    case REGR_R2_:
    case REPLACE_:
    case ROTATEX_:
    case ROTATEY_:
    case ROTATEZ_:
    case SET_BIT_:
    case SETSEED_:
    case SETSRID_:
    case SOUNDEX_:
    case SPATIAL_:
    case ST_AREA_:
    case STORAGE_:
    case ST_SRID_:
    case ST_TEXT_:
    case SUBDATE_:
    case SUBTIME_:
    case TINYINT_:
    case TO_CHAR_:
    case TO_DATE_:
    case VARCHAR_:
    case VAR_POP_:
    case VARYING_:
    case VERSION_:
    case ASBINARY_:
    case BOOL_AND_:
    case CONTAINS_:
    case DATABASE_:
    case DATEDIFF_:
    case DATETIME_:
    case DISJOINT_:
    case DISTANCE_:
    case DROPBBOX_:
    case ENDPOINT_:
    case ENVELOPE_:
    case EXTENT3D_:
    case FORCE_2D_:
    case FORCE_3D_:
    case FORCE_4D_:
    case GEOMETRY_:
    case GET_BYTE_:
    case GREATEST_:
    case HOSTMASK_:
    case INTERVAL_:
    case ISCLOSED_:
    case ISFINITE_:
    case ISSIMPLE_:
    case LAST_DAY_:
    case LENGTH2D_:
    case LENGTH3D_:
    case LONG_RAW_:
    case LONGTEXT_:
    case LVARCHAR_:
    case MEM_SIZE_:
    case NATIONAL_:
    case NEXT_DAY_:
    case PASSWORD_:
    case REGCLASS_:
    case REGR_SXX_:
    case REGR_SXY_:
    case REGR_SYY_:
    case SET_BYTE_:
    case SETPOINT_:
    case SIMPLIFY_:
    case SMALLINT_:
    case ST_ASGML_:
    case ST_ASKML_:
    case ST_ASSVG_:
    case ST_BOX2D_:
    case ST_BOX3D_:
    case ST_BYTEA_:
    case ST_MULTI_:
    case ST_NDIMS_:
    case ST_POINT_:
    case ST_SCALE_:
    case ST_WIDTH_:
    case TINYTEXT_:
    case TO_ASCII_:
    case TRUNCATE_:
    case VARCHAR2_:
    case VARIANCE_:
    case VAR_SAMP_:
    case ASHEXEWKB_:
    case BROADCAST_:
    case CHARACHTER_:
    case COVAR_POP_:
    case DATEPART_:
    case DAYOFWEEK_:
    case DAYOFYEAR_:
    case DIMENSION_:
    case FORCE_3DM_:
    case FORCE_3DZ_:
    case GEOMETRYN_:
    case LINEMERGE_:
    case LOCALTIME_:
    case MONTHNAME_:
    case REGR_AVGX_:
    case REGR_AVGY_:
    case ST_AFFINE_:
    case ST_AREA2D_:
    case ST_ASEWKB_:
    case ST_ASEWKT_:
    case ST_ASTEXT_:
    case ST_BUFFER_:
    case ST_COVERS_:
    case ST_EQUALS_:
    case ST_EXTENT_:
    case ST_FACTOR_:
    case ST_HASARC_:
    case ST_HEIGHT_:
    case ST_ISRING_:
    case ST_LENGTH_:
    case ST_NRINGS_:
    case ST_POINTN_:
    case ST_RELATE_:
    case ST_ROTATE_:
    case ST_WITHIN_:
    case ST_ZMFLAG_:
    case SUBSTRING_:
    case TIMEOFDAY_:
    case TIMESTAMP_:
    case TO_NUMBER_:
    case TRANSFORM_:
    case TRANSLATE_:
    case VARBINARY_:
    case ADD_MONTHS_:
    case BIGINTEGER_:
    case BIT_LENGTH_:
    case COVAR_SAMP_:
    case DATETRUNC_:
    case DAYOFMONTH_:
    case DIFFERENCE_:
    case INTERSECTS_:
    case MEDIUMTEXT_:
    case REGR_COUNT_:
    case REGR_SLOPE_:
    case SEGMENTIZE_:
    case SMALLFLOAT_:
    case SMALLMONEY_:
    case SNAPTOGRID_:
    case SPLIT_PART_:
    case STARTPOINT_:
    case ST_AZIMUTH_:
    case ST_CHIP_IN_:
    case ST_COLLECT_:
    case ST_CROSSES_:
    case STDDEV_POP_:
    case ST_DWITHIN_:
    case ST_GEOHASH_:
    case ST_ISEMPTY_:
    case ST_ISVALID_:
    case ST_NPOINTS_:
    case ST_POLYGON_:
    case ST_REVERSE_:
    case ST_ROTATEX_:
    case ST_ROTATEY_:
    case ST_ROTATEZ_:
    case ST_SETSRID_:
    case ST_SUMMARY_:
    case ST_TOUCHES_:
    case TRANSSCALE_:
    case WEEKOFYEAR_:
    case BOX3DEXTENT_:
    case CHAR_LENGTH_:
    case PERIMETER2D_:
    case PERIMETER3D_:
    case QUOTE_IDENT_:
    case REMOVEPOINT_:
    case SET_MASKLEN_:
    case ST_ADDPOINT_:
    case ST_ASBINARY_:
    case ST_BOUNDARY_:
    case ST_CENTROID_:
    case ST_CHIP_OUT_:
    case ST_CONTAINS_:
    case ST_COORDDIM_:
    case ST_DATATYPE_:
    case STDDEV_SAMP_:
    case ST_DISJOINT_:
    case ST_DISTANCE_:
    case ST_ENDPOINT_:
    case ST_ENVELOPE_:
    case ST_EXTENT3D_:
    case ST_FORCE_2D_:
    case ST_FORCE_3D_:
    case ST_FORCE_4D_:
    case ST_FORCERHR_:
    case ST_GEOMETRY_:
    case ST_GMLTOSQL_:
    case ST_ISCLOSED_:
    case ST_ISSIMPLE_:
    case ST_LENGTH2D_:
    case ST_LENGTH3D_:
    case ST_MEM_SIZE_:
    case ST_OVERLAPS_:
    case ST_SETPOINT_:
    case ST_SIMPLIFY_:
    case ST_WKBTOSQL_:
    case ST_WKTTOSQL_:
    case CURRENTDATE_:
    case CURRENT_TIME_:
    case CURRENT_USER_:
    case EXTERIORRING_:
    case GEOMETRYTYPE_:
    case GEOMFROMEWKT_:
    case GEOMFROMTEXT_:
    case INTERSECTION_:
    case JUSTIFY_DAYS_:
    case LONG_VARCHAR_:
    case OCTET_LENGTH_:
    case ST_ASGEOJSON_:
    case ST_ASHEXEWKB_:
    case ST_BUILDAREA_:
    case ST_COVEREDBY_:
    case ST_DIMENSION_:
    case ST_FORCE_3DM_:
    case ST_FORCE_3DZ_:
    case ST_GEOMETRYN_:
    case ST_LINEMERGE_:
    case ST_MAKEPOINT_:
    case ST_NUMPOINTS_:
    case ST_PERIMETER_:
    case ST_SETFACTOR_:
    case ST_TRANSFORM_:
    case ST_TRANSLATE_:
    case TO_TIMESTAMP_:
    case VARIANCE_POP_:
    case WIDTH_BUCKET_:
    case INTERIORRINGN_:
    case JUSTIFY_HOURS_:
    case NUMGEOMETRIES_:
    case QUOTE_LITERAL_:
    case SAMLLDATETIME_:
    case ST_ADDMEASURE_:
    case ST_CONVEXHULL_:
    case ST_DIFFERENCE_:
    case ST_INTERSECTS_:
    case ST_MAKEPOINTM_:
    case ST_MEMCOLLECT_:
    case ST_SEGMENTIZE_:
    case ST_SNAPTOGRID_:
    case ST_STARTPOINT_:
    case ST_TRANSSCALE_:
    case SYMDIFFERENCE_:
    case VARIANCE_SAMP_:
    case CURRENT_SCHEMA_:
    case LINE_SUBSTRING_:
    case LOCALTIMESTAMP_:
    case MONTHS_BETWEEN_:
    case REGEXP_REPLACE_:
    case REGR_INTERCEPT_:
    case ST_COMPRESSION_:
    case ST_CURVETOLINE_:
    case ST_FIND_EXTENT_:
    case ST_GEOGFROMWKB_:
    case ST_GEOMFROMGML_:
    case ST_GEOMFROMKML_:
    case ST_GEOMFROMWKB_:
    case ST_LINEFROMWKB_:
    case ST_LINETOCURVE_:
    case ST_LONGESTLINE_:
    case ST_MAKEPOLYGON_:
    case ST_MAXDISTANCE_:
    case ST_PERIMETER2D_:
    case ST_PERIMETER3D_:
    case ST_POLYFROMWKB_:
    case ST_REMOVEPOINT_:
    case CLOCK_TIMESTAMP_:
    case ST_CLOSESTPOINT_:
    case ST_COMBINE_BBOX_:
    case ST_DFULLYWITHIN_:
    case ST_EXTERIORRING_:
    case ST_GEOGFROMTEXT_:
    case ST_GEOMETRYTYPE_:
    case ST_GEOMFROMEWKB_:
    case ST_GEOMFROMEWKT_:
    case ST_GEOMFROMTEXT_:
    case ST_INTERSECTION_:
    case ST_LINEFROMTEXT_:
    case ST_MAKEENVELOPE_:
    case ST_MLINEFROMWKB_:
    case ST_MPOLYFROMWKB_:
    case ST_POINTFROMWKB_:
    case ST_POLYFROMTEXT_:
    case ST_SHORTESTLINE_:
    case CHARACTER_LENGTH_:
    case CURRENT_DATABASE_:
    case FORCE_COLLECTION_:
    case JUSTIFY_INTERVAL_:
    case NUMINTERIORRINGS_:
    case POSTGIS_DROPBBOX_:
    case ST_INTERIORRINGN_:
    case ST_ISVALIDREASON_:
    case ST_MLINEFROMTEXT_:
    case ST_MPOINTFROMWKB_:
    case ST_MPOLYFROMTEXT_:
    case ST_NUMGEOMETRIES_:
    case ST_POINTFROMTEXT_:
    case ST_SYMDIFFERENCE_:
    case ADDGEOMETRYCOLUMN_:
    case CURRENT_TIMESTAMP_:
    case LINE_LOCATE_POINT_:
    case ST_BDPOLYFROMTEXT_:
    case ST_LINE_SUBSTRING_:
    case ST_MPOINTFROMTEXT_:
    case ST_ORDERINGEQUALS_:
    case ST_POINTONSURFACE_:
    case ST_POLYGONFROMWKB_:
    case PG_CLIENT_ENCODING_:
    case ST_BDMPOLYFROMTEXT_:
    case ST_DISTANCE_SPHERE_:
    case ST_GEOMCOLLFROMWKB_:
    case ST_LENGTH_SPHEROID_:
    case ST_NUMINTERIORRING_:
    case ST_POLYGONFROMTEXT_:
    case ST_SHIFT_LONGITUDE_:
    case STATEMENT_TIMESTAMP_:
    case ST_CONTAINSPROPERLY_:
    case ST_FORCE_COLLECTION_:
    case ST_GEOMCOLLFROMTEXT_:
    case ST_MULTILINEFROMWKB_:
    case ST_MULTIPOLYFROMWKB_:
    case ST_NUMINTERIORRINGS_:
    case ST_POSTGIS_GIST_SEL_:
    case LOCATE_ALONG_MEASURE_:
    case ST_COLLECTIONEXTRACT_:
    case ST_DISTANCE_SPHEROID_:
    case ST_GEOGRAPHYFROMTEXT_:
    case ST_HAUSDORFFDISTANCE_:
    case ST_LENGTH2D_SPHEROID_:
    case ST_LENGTH3D_SPHEROID_:
    case ST_LINE_LOCATE_POINT_:
    case ST_LINESTRINGFROMWKB_:
    case ST_MULTIPOINTFROMWKB_:
    case ST_LINEFROMMULTIPOINT_:
    case ST_MULTIPOINTFROMTEXT_:
    case TRANSACTION_TIMESTAMP_:
    case LINE_INTERPOLATE_POINT_:
    case ST_POINT_INSIDE_CIRCLE_:
    case ST_SYMMETRICDIFFERENCE_:
    case LOCATE_BETWEEN_MEASURES_:
    case ST_LOCATE_ALONG_MEASURE_:
    case ST_MULTIPOLYGONFROMTEXT_:
    case ST_POSTGIS_GIST_JOINSEL_:
    case ST_LINECROSSINGDIRECTION_:
    case ST_MINIMUMBOUNDINGCIRCLE_:
    case ST_LINE_INTERPOLATE_POINT_:
    case ST_LOCATEBETWEENELEVATIONS_:
    case ST_LOCATE_BETWEEN_MEASURES_:
    case ST_MULTILINESTRINGFROMTEXT_:
    case ST_SIMPLIFYPRESERVETOPOLOGY_:
    case WITH_TIMEZONE_:
    case WITHOUT_TIMEZONE_:
    case DOUBLE_PRECISION_:
    case BOOLEAN_:
    case POSITION_:
    case IDENTIFIER:
    case QUOTED_IDENTIFIER:
      n3 = Identifier(prn);
           n2 = new NodeChoice(n3, 0);
      break;
    case ALL_:
      n5 = jj_consume_token(ALL_);
                     n4 = JTBToolkit.makeNodeToken(n5);
           n2 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[529] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new CloseCursor(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public FetchCursor FetchCursor(PrintStream prn) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Identifier n6;

   {
   }
    n1 = jj_consume_token(FETCH_);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INT_LITERAL);
                      n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(FROM_);
                n4 = JTBToolkit.makeNodeToken(n5);
    n6 = Identifier(prn);
     {if (true) return new FetchCursor(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  final private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  final private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  final private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  final private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  final private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  final private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  final private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  final private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  final private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  final private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  final private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  final private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  final private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  final private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  final private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  final private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  final private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  final private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  final private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  final private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  final private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  final private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  final private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  final private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  final private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  final private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  final private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  final private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  final private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  final private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  final private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  final private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  final private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  final private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  final private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  final private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  final private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  final private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  final private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  final private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  final private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  final private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  final private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  final private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  final private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  final private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  final private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  final private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  final private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  final private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  final private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  final private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  final private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  final private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  final private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  final private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  final private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  final private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  final private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  final private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  final private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  final private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  final private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  final private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  final private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  final private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  final private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  final private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  final private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  final private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  final private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  final private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  final private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  final private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  final private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  final private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  final private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  final private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  final private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  final private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  final private boolean jj_2_180(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  final private boolean jj_2_181(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  final private boolean jj_2_182(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  final private boolean jj_2_183(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  final private boolean jj_2_184(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  final private boolean jj_2_185(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  final private boolean jj_2_186(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  final private boolean jj_2_187(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  final private boolean jj_2_188(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  final private boolean jj_2_189(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  final private boolean jj_2_190(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  final private boolean jj_2_191(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  final private boolean jj_2_192(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  final private boolean jj_2_193(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  final private boolean jj_2_194(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  final private boolean jj_2_195(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  final private boolean jj_2_196(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  final private boolean jj_2_197(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  final private boolean jj_2_198(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_198(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  final private boolean jj_2_199(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_199(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  final private boolean jj_2_200(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_200(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  final private boolean jj_2_201(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_201(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  final private boolean jj_2_202(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_202(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  final private boolean jj_2_203(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_203(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  final private boolean jj_2_204(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_204(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  final private boolean jj_2_205(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_205(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  final private boolean jj_2_206(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_206(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  final private boolean jj_2_207(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_207(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  final private boolean jj_2_208(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_208(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  final private boolean jj_2_209(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_209(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  final private boolean jj_2_210(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_210(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  final private boolean jj_2_211(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_211(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(210, xla); }
  }

  final private boolean jj_2_212(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_212(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(211, xla); }
  }

  final private boolean jj_2_213(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_213(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(212, xla); }
  }

  final private boolean jj_2_214(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_214(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(213, xla); }
  }

  final private boolean jj_2_215(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_215(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(214, xla); }
  }

  final private boolean jj_2_216(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_216(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(215, xla); }
  }

  final private boolean jj_2_217(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_217(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(216, xla); }
  }

  final private boolean jj_2_218(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_218(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(217, xla); }
  }

  final private boolean jj_2_219(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_219(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(218, xla); }
  }

  final private boolean jj_2_220(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_220(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(219, xla); }
  }

  final private boolean jj_2_221(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_221(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(220, xla); }
  }

  final private boolean jj_2_222(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_222(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(221, xla); }
  }

  final private boolean jj_2_223(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_223(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(222, xla); }
  }

  final private boolean jj_2_224(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_224(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(223, xla); }
  }

  final private boolean jj_2_225(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_225(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(224, xla); }
  }

  final private boolean jj_2_226(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_226(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(225, xla); }
  }

  final private boolean jj_2_227(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_227(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(226, xla); }
  }

  final private boolean jj_2_228(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_228(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(227, xla); }
  }

  final private boolean jj_2_229(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_229(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(228, xla); }
  }

  final private boolean jj_2_230(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_230(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(229, xla); }
  }

  final private boolean jj_2_231(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_231(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(230, xla); }
  }

  final private boolean jj_2_232(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_232(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(231, xla); }
  }

  final private boolean jj_2_233(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_233(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(232, xla); }
  }

  final private boolean jj_2_234(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_234(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(233, xla); }
  }

  final private boolean jj_2_235(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_235(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(234, xla); }
  }

  final private boolean jj_2_236(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_236(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(235, xla); }
  }

  final private boolean jj_2_237(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_237(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(236, xla); }
  }

  final private boolean jj_2_238(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_238(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(237, xla); }
  }

  final private boolean jj_2_239(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_239(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(238, xla); }
  }

  final private boolean jj_2_240(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_240(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(239, xla); }
  }

  final private boolean jj_2_241(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_241(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(240, xla); }
  }

  final private boolean jj_2_242(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_242(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(241, xla); }
  }

  final private boolean jj_2_243(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_243(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(242, xla); }
  }

  final private boolean jj_2_244(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_244(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(243, xla); }
  }

  final private boolean jj_2_245(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_245(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(244, xla); }
  }

  final private boolean jj_2_246(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_246(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(245, xla); }
  }

  final private boolean jj_2_247(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_247(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(246, xla); }
  }

  final private boolean jj_2_248(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_248(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(247, xla); }
  }

  final private boolean jj_2_249(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_249(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(248, xla); }
  }

  final private boolean jj_2_250(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_250(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(249, xla); }
  }

  final private boolean jj_2_251(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_251(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(250, xla); }
  }

  final private boolean jj_2_252(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_252(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(251, xla); }
  }

  final private boolean jj_2_253(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_253(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(252, xla); }
  }

  final private boolean jj_2_254(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_254(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(253, xla); }
  }

  final private boolean jj_2_255(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_255(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(254, xla); }
  }

  final private boolean jj_2_256(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_256(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(255, xla); }
  }

  final private boolean jj_2_257(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_257(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(256, xla); }
  }

  final private boolean jj_2_258(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_258(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(257, xla); }
  }

  final private boolean jj_2_259(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_259(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(258, xla); }
  }

  final private boolean jj_2_260(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_260(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(259, xla); }
  }

  final private boolean jj_2_261(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_261(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(260, xla); }
  }

  final private boolean jj_2_262(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_262(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(261, xla); }
  }

  final private boolean jj_2_263(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_263(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(262, xla); }
  }

  final private boolean jj_2_264(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_264(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(263, xla); }
  }

  final private boolean jj_2_265(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_265(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(264, xla); }
  }

  final private boolean jj_2_266(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_266(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(265, xla); }
  }

  final private boolean jj_2_267(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_267(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(266, xla); }
  }

  final private boolean jj_2_268(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_268(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(267, xla); }
  }

  final private boolean jj_2_269(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_269(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(268, xla); }
  }

  final private boolean jj_2_270(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_270(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(269, xla); }
  }

  final private boolean jj_2_271(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_271(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(270, xla); }
  }

  final private boolean jj_2_272(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_272(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(271, xla); }
  }

  final private boolean jj_2_273(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_273(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(272, xla); }
  }

  final private boolean jj_2_274(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_274(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(273, xla); }
  }

  final private boolean jj_2_275(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_275(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(274, xla); }
  }

  final private boolean jj_2_276(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_276(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(275, xla); }
  }

  final private boolean jj_2_277(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_277(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(276, xla); }
  }

  final private boolean jj_2_278(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_278(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(277, xla); }
  }

  final private boolean jj_2_279(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_279(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(278, xla); }
  }

  final private boolean jj_2_280(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_280(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(279, xla); }
  }

  final private boolean jj_2_281(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_281(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(280, xla); }
  }

  final private boolean jj_2_282(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_282(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(281, xla); }
  }

  final private boolean jj_2_283(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_283(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(282, xla); }
  }

  final private boolean jj_2_284(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_284(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(283, xla); }
  }

  final private boolean jj_2_285(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_285(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(284, xla); }
  }

  final private boolean jj_2_286(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_286(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(285, xla); }
  }

  final private boolean jj_2_287(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_287(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(286, xla); }
  }

  final private boolean jj_2_288(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_288(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(287, xla); }
  }

  final private boolean jj_2_289(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_289(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(288, xla); }
  }

  final private boolean jj_2_290(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_290(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(289, xla); }
  }

  final private boolean jj_2_291(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_291(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(290, xla); }
  }

  final private boolean jj_2_292(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_292(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(291, xla); }
  }

  final private boolean jj_2_293(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_293(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(292, xla); }
  }

  final private boolean jj_2_294(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_294(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(293, xla); }
  }

  final private boolean jj_2_295(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_295(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(294, xla); }
  }

  final private boolean jj_2_296(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_296(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(295, xla); }
  }

  final private boolean jj_2_297(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_297(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(296, xla); }
  }

  final private boolean jj_2_298(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_298(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(297, xla); }
  }

  final private boolean jj_2_299(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_299(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(298, xla); }
  }

  final private boolean jj_2_300(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_300(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(299, xla); }
  }

  final private boolean jj_2_301(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_301(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(300, xla); }
  }

  final private boolean jj_2_302(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_302(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(301, xla); }
  }

  final private boolean jj_2_303(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_303(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(302, xla); }
  }

  final private boolean jj_2_304(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_304(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(303, xla); }
  }

  final private boolean jj_2_305(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_305(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(304, xla); }
  }

  final private boolean jj_2_306(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_306(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(305, xla); }
  }

  final private boolean jj_2_307(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_307(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(306, xla); }
  }

  final private boolean jj_2_308(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_308(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(307, xla); }
  }

  final private boolean jj_2_309(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_309(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(308, xla); }
  }

  final private boolean jj_2_310(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_310(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(309, xla); }
  }

  final private boolean jj_2_311(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_311(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(310, xla); }
  }

  final private boolean jj_2_312(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_312(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(311, xla); }
  }

  final private boolean jj_2_313(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_313(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(312, xla); }
  }

  final private boolean jj_2_314(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_314(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(313, xla); }
  }

  final private boolean jj_2_315(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_315(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(314, xla); }
  }

  final private boolean jj_2_316(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_316(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(315, xla); }
  }

  final private boolean jj_2_317(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_317(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(316, xla); }
  }

  final private boolean jj_2_318(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_318(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(317, xla); }
  }

  final private boolean jj_2_319(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_319(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(318, xla); }
  }

  final private boolean jj_2_320(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_320(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(319, xla); }
  }

  final private boolean jj_2_321(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_321(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(320, xla); }
  }

  final private boolean jj_2_322(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_322(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(321, xla); }
  }

  final private boolean jj_2_323(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_323(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(322, xla); }
  }

  final private boolean jj_2_324(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_324(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(323, xla); }
  }

  final private boolean jj_2_325(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_325(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(324, xla); }
  }

  final private boolean jj_2_326(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_326(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(325, xla); }
  }

  final private boolean jj_2_327(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_327(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(326, xla); }
  }

  final private boolean jj_2_328(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_328(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(327, xla); }
  }

  final private boolean jj_2_329(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_329(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(328, xla); }
  }

  final private boolean jj_2_330(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_330(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(329, xla); }
  }

  final private boolean jj_2_331(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_331(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(330, xla); }
  }

  final private boolean jj_2_332(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_332(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(331, xla); }
  }

  final private boolean jj_2_333(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_333(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(332, xla); }
  }

  final private boolean jj_2_334(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_334(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(333, xla); }
  }

  final private boolean jj_2_335(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_335(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(334, xla); }
  }

  final private boolean jj_2_336(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_336(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(335, xla); }
  }

  final private boolean jj_2_337(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_337(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(336, xla); }
  }

  final private boolean jj_2_338(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_338(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(337, xla); }
  }

  final private boolean jj_2_339(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_339(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(338, xla); }
  }

  final private boolean jj_2_340(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_340(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(339, xla); }
  }

  final private boolean jj_2_341(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_341(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(340, xla); }
  }

  final private boolean jj_2_342(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_342(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(341, xla); }
  }

  final private boolean jj_2_343(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_343(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(342, xla); }
  }

  final private boolean jj_2_344(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_344(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(343, xla); }
  }

  final private boolean jj_2_345(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_345(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(344, xla); }
  }

  final private boolean jj_2_346(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_346(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(345, xla); }
  }

  final private boolean jj_2_347(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_347(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(346, xla); }
  }

  final private boolean jj_2_348(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_348(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(347, xla); }
  }

  final private boolean jj_2_349(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_349(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(348, xla); }
  }

  final private boolean jj_2_350(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_350(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(349, xla); }
  }

  final private boolean jj_2_351(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_351(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(350, xla); }
  }

  final private boolean jj_2_352(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_352(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(351, xla); }
  }

  final private boolean jj_2_353(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_353(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(352, xla); }
  }

  final private boolean jj_2_354(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_354(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(353, xla); }
  }

  final private boolean jj_2_355(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_355(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(354, xla); }
  }

  final private boolean jj_2_356(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_356(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(355, xla); }
  }

  final private boolean jj_2_357(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_357(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(356, xla); }
  }

  final private boolean jj_2_358(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_358(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(357, xla); }
  }

  final private boolean jj_2_359(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_359(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(358, xla); }
  }

  final private boolean jj_2_360(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_360(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(359, xla); }
  }

  final private boolean jj_2_361(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_361(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(360, xla); }
  }

  final private boolean jj_2_362(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_362(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(361, xla); }
  }

  final private boolean jj_2_363(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_363(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(362, xla); }
  }

  final private boolean jj_2_364(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_364(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(363, xla); }
  }

  final private boolean jj_2_365(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_365(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(364, xla); }
  }

  final private boolean jj_2_366(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_366(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(365, xla); }
  }

  final private boolean jj_2_367(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_367(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(366, xla); }
  }

  final private boolean jj_2_368(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_368(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(367, xla); }
  }

  final private boolean jj_2_369(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_369(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(368, xla); }
  }

  final private boolean jj_2_370(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_370(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(369, xla); }
  }

  final private boolean jj_2_371(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_371(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(370, xla); }
  }

  final private boolean jj_2_372(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_372(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(371, xla); }
  }

  final private boolean jj_2_373(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_373(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(372, xla); }
  }

  final private boolean jj_2_374(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_374(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(373, xla); }
  }

  final private boolean jj_2_375(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_375(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(374, xla); }
  }

  final private boolean jj_2_376(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_376(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(375, xla); }
  }

  final private boolean jj_2_377(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_377(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(376, xla); }
  }

  final private boolean jj_2_378(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_378(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(377, xla); }
  }

  final private boolean jj_2_379(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_379(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(378, xla); }
  }

  final private boolean jj_2_380(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_380(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(379, xla); }
  }

  final private boolean jj_2_381(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_381(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(380, xla); }
  }

  final private boolean jj_2_382(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_382(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(381, xla); }
  }

  final private boolean jj_2_383(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_383(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(382, xla); }
  }

  final private boolean jj_2_384(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_384(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(383, xla); }
  }

  final private boolean jj_2_385(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_385(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(384, xla); }
  }

  final private boolean jj_2_386(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_386(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(385, xla); }
  }

  final private boolean jj_2_387(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_387(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(386, xla); }
  }

  final private boolean jj_2_388(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_388(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(387, xla); }
  }

  final private boolean jj_2_389(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_389(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(388, xla); }
  }

  final private boolean jj_2_390(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_390(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(389, xla); }
  }

  final private boolean jj_2_391(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_391(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(390, xla); }
  }

  final private boolean jj_2_392(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_392(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(391, xla); }
  }

  final private boolean jj_2_393(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_393(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(392, xla); }
  }

  final private boolean jj_2_394(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_394(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(393, xla); }
  }

  final private boolean jj_2_395(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_395(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(394, xla); }
  }

  final private boolean jj_2_396(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_396(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(395, xla); }
  }

  final private boolean jj_2_397(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_397(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(396, xla); }
  }

  final private boolean jj_2_398(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_398(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(397, xla); }
  }

  final private boolean jj_2_399(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_399(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(398, xla); }
  }

  final private boolean jj_2_400(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_400(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(399, xla); }
  }

  final private boolean jj_2_401(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_401(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(400, xla); }
  }

  final private boolean jj_2_402(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_402(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(401, xla); }
  }

  final private boolean jj_2_403(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_403(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(402, xla); }
  }

  final private boolean jj_2_404(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_404(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(403, xla); }
  }

  final private boolean jj_2_405(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_405(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(404, xla); }
  }

  final private boolean jj_2_406(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_406(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(405, xla); }
  }

  final private boolean jj_2_407(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_407(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(406, xla); }
  }

  final private boolean jj_2_408(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_408(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(407, xla); }
  }

  final private boolean jj_2_409(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_409(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(408, xla); }
  }

  final private boolean jj_2_410(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_410(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(409, xla); }
  }

  final private boolean jj_2_411(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_411(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(410, xla); }
  }

  final private boolean jj_2_412(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_412(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(411, xla); }
  }

  final private boolean jj_2_413(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_413(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(412, xla); }
  }

  final private boolean jj_2_414(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_414(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(413, xla); }
  }

  final private boolean jj_2_415(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_415(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(414, xla); }
  }

  final private boolean jj_2_416(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_416(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(415, xla); }
  }

  final private boolean jj_2_417(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_417(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(416, xla); }
  }

  final private boolean jj_2_418(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_418(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(417, xla); }
  }

  final private boolean jj_2_419(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_419(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(418, xla); }
  }

  final private boolean jj_2_420(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_420(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(419, xla); }
  }

  final private boolean jj_2_421(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_421(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(420, xla); }
  }

  final private boolean jj_2_422(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_422(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(421, xla); }
  }

  final private boolean jj_2_423(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_423(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(422, xla); }
  }

  final private boolean jj_2_424(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_424(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(423, xla); }
  }

  final private boolean jj_2_425(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_425(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(424, xla); }
  }

  final private boolean jj_2_426(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_426(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(425, xla); }
  }

  final private boolean jj_2_427(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_427(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(426, xla); }
  }

  final private boolean jj_2_428(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_428(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(427, xla); }
  }

  final private boolean jj_2_429(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_429(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(428, xla); }
  }

  final private boolean jj_2_430(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_430(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(429, xla); }
  }

  final private boolean jj_2_431(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_431(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(430, xla); }
  }

  final private boolean jj_2_432(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_432(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(431, xla); }
  }

  final private boolean jj_2_433(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_433(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(432, xla); }
  }

  final private boolean jj_2_434(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_434(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(433, xla); }
  }

  final private boolean jj_2_435(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_435(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(434, xla); }
  }

  final private boolean jj_2_436(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_436(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(435, xla); }
  }

  final private boolean jj_2_437(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_437(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(436, xla); }
  }

  final private boolean jj_2_438(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_438(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(437, xla); }
  }

  final private boolean jj_2_439(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_439(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(438, xla); }
  }

  final private boolean jj_2_440(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_440(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(439, xla); }
  }

  final private boolean jj_2_441(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_441(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(440, xla); }
  }

  final private boolean jj_2_442(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_442(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(441, xla); }
  }

  final private boolean jj_2_443(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_443(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(442, xla); }
  }

  final private boolean jj_2_444(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_444(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(443, xla); }
  }

  final private boolean jj_2_445(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_445(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(444, xla); }
  }

  final private boolean jj_2_446(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_446(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(445, xla); }
  }

  final private boolean jj_2_447(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_447(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(446, xla); }
  }

  final private boolean jj_2_448(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_448(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(447, xla); }
  }

  final private boolean jj_2_449(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_449(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(448, xla); }
  }

  final private boolean jj_2_450(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_450(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(449, xla); }
  }

  final private boolean jj_3R_1243() {
    if (jj_scan_token(ST_NUMINTERIORRINGS_)) return true;
    return false;
  }

  final private boolean jj_3R_552() {
    if (jj_scan_token(VARIANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1242() {
    if (jj_scan_token(ST_NUMINTERIORRING_)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_526()) {
    jj_scanpos = xsp;
    if (jj_3R_527()) {
    jj_scanpos = xsp;
    if (jj_3R_528()) return true;
    }
    }
    if (jj_3R_529()) return true;
    return false;
  }

  final private boolean jj_3R_1241() {
    if (jj_scan_token(ST_NUMGEOMETRIES_)) return true;
    return false;
  }

  final private boolean jj_3R_1240() {
    if (jj_scan_token(ST_NRINGS_)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_552()) {
    jj_scanpos = xsp;
    if (jj_3R_553()) {
    jj_scanpos = xsp;
    if (jj_3R_554()) {
    jj_scanpos = xsp;
    if (jj_3R_555()) {
    jj_scanpos = xsp;
    if (jj_3R_556()) return true;
    }
    }
    }
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    xsp = jj_scanpos;
    if (jj_3R_1576()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_744() {
    if (jj_scan_token(GEOMETRY_)) return true;
    return false;
  }

  final private boolean jj_3R_1239() {
    if (jj_scan_token(ST_NPOINTS_)) return true;
    return false;
  }

  final private boolean jj_3R_743() {
    if (jj_scan_token(ST_GEOMETRY_)) return true;
    return false;
  }

  final private boolean jj_3R_574() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1238() {
    if (jj_scan_token(ST_NDIMS_)) return true;
    return false;
  }

  final private boolean jj_3R_1237() {
    if (jj_scan_token(ST_MULTIPOLYGONFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(CURRENT_SCHEMA_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_574()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_scan_token(ST_ISVALIDREASON_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1236() {
    if (jj_scan_token(ST_MULTIPOLYFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_457() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_743()) {
    jj_scanpos = xsp;
    if (jj_3R_744()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1235() {
    if (jj_scan_token(ST_MULTIPOINTFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_1234() {
    if (jj_scan_token(ST_MULTIPOINTFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_540() {
    if (jj_3R_803()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1233() {
    if (jj_scan_token(ST_MULTILINESTRINGFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1232() {
    if (jj_scan_token(ST_MULTILINEFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1231() {
    if (jj_scan_token(ST_MULTI_)) return true;
    return false;
  }

  final private boolean jj_3R_1230() {
    if (jj_scan_token(ST_MPOLYFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_662() {
    if (jj_scan_token(ISVALID_)) return true;
    return false;
  }

  final private boolean jj_3R_1574() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1229() {
    if (jj_scan_token(ST_MPOLYFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_573() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_525() {
    if (jj_scan_token(ABSOLUTE_)) return true;
    return false;
  }

  final private boolean jj_3R_661() {
    if (jj_scan_token(ST_ISVALID_)) return true;
    return false;
  }

  final private boolean jj_3R_1228() {
    if (jj_scan_token(ST_MPOINTFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_742() {
    if (jj_scan_token(BOX3D_)) return true;
    return false;
  }

  final private boolean jj_3R_524() {
    if (jj_scan_token(NOT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_551() {
    if (jj_scan_token(STDDEV_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(CURRENT_DATABASE_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_573()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1227() {
    if (jj_scan_token(ST_MPOINTFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_741() {
    if (jj_scan_token(ST_BOX3D_)) return true;
    return false;
  }

  final private boolean jj_3R_523() {
    if (jj_scan_token(GIS_STRICT_ABOVE_)) return true;
    return false;
  }

  final private boolean jj_3R_550() {
    if (jj_scan_token(STDDEV_POP_)) return true;
    return false;
  }

  final private boolean jj_3R_1226() {
    if (jj_scan_token(ST_MLINEFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_661()) {
    jj_scanpos = xsp;
    if (jj_3R_662()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_522() {
    if (jj_scan_token(GIS_STRICT_BELOW_)) return true;
    return false;
  }

  final private boolean jj_3R_549() {
    if (jj_scan_token(STDDEV_)) return true;
    return false;
  }

  final private boolean jj_3R_1225() {
    if (jj_scan_token(ST_MLINEFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_521() {
    if (jj_scan_token(GIS_SAME_)) return true;
    return false;
  }

  final private boolean jj_3R_456() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_741()) {
    jj_scanpos = xsp;
    if (jj_3R_742()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1224() {
    if (jj_scan_token(ST_MINIMUMBOUNDINGCIRCLE_)) return true;
    return false;
  }

  final private boolean jj_3R_520() {
    if (jj_scan_token(GIS_OVERLAPS_ABOVE_)) return true;
    return false;
  }

  final private boolean jj_3R_1223() {
    if (jj_scan_token(ST_MEM_SIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_549()) {
    jj_scanpos = xsp;
    if (jj_3R_550()) {
    jj_scanpos = xsp;
    if (jj_3R_551()) return true;
    }
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    xsp = jj_scanpos;
    if (jj_3R_1574()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_519() {
    if (jj_scan_token(GIS_OVERLAPS_BELOW_)) return true;
    return false;
  }

  final private boolean jj_3R_1222() {
    if (jj_scan_token(ST_MEMCOLLECT_)) return true;
    return false;
  }

  final private boolean jj_3R_518() {
    if (jj_scan_token(GIS_OVERLAPS_LEFT_)) return true;
    return false;
  }

  final private boolean jj_3R_1221() {
    if (jj_scan_token(ST_MAXDISTANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_517() {
    if (jj_scan_token(GIS_OVERLAPS_RIGHT_)) return true;
    return false;
  }

  final private boolean jj_3R_1220() {
    if (jj_scan_token(ST_MAKEPOLYGON_)) return true;
    return false;
  }

  final private boolean jj_3R_516() {
    if (jj_scan_token(GIS_OVERLAPS_)) return true;
    return false;
  }

  final private boolean jj_3R_1219() {
    if (jj_scan_token(ST_MAKEPOINTM_)) return true;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(NEXT_DAY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_515() {
    if (jj_scan_token(NOT_EQUALS_2_)) return true;
    return false;
  }

  final private boolean jj_3R_660() {
    if (jj_scan_token(ISSIMPLE_)) return true;
    return false;
  }

  final private boolean jj_3R_1218() {
    if (jj_scan_token(ST_MAKEPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_514() {
    if (jj_scan_token(NOT_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_659() {
    if (jj_scan_token(ST_ISSIMPLE_)) return true;
    return false;
  }

  final private boolean jj_3R_1217() {
    if (jj_scan_token(ST_MAKEENVELOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_513() {
    if (jj_scan_token(EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_740() {
    if (jj_scan_token(BOX2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1216() {
    if (jj_scan_token(ST_M_)) return true;
    return false;
  }

  final private boolean jj_3R_512() {
    if (jj_scan_token(LESS_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_739() {
    if (jj_scan_token(ST_BOX2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1215() {
    if (jj_scan_token(ST_LONGESTLINE_)) return true;
    return false;
  }

  final private boolean jj_3R_511() {
    if (jj_scan_token(LESS_)) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_659()) {
    jj_scanpos = xsp;
    if (jj_3R_660()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1214() {
    if (jj_scan_token(ST_LOCATE_BETWEEN_MEASURES_)) return true;
    return false;
  }

  final private boolean jj_3R_1573() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_510() {
    if (jj_scan_token(GREATER_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1213() {
    if (jj_scan_token(ST_LOCATE_ALONG_MEASURE_)) return true;
    return false;
  }

  final private boolean jj_3R_455() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_739()) {
    jj_scanpos = xsp;
    if (jj_3R_740()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_509() {
    if (jj_scan_token(GREATER_)) return true;
    return false;
  }

  final private boolean jj_3R_1212() {
    if (jj_scan_token(ST_LOCATEBETWEENELEVATIONS_)) return true;
    return false;
  }

  final private boolean jj_3R_508() {
    if (jj_scan_token(CONTAINS_OR_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(MIN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1573()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1211() {
    if (jj_scan_token(ST_LINE_SUBSTRING_)) return true;
    return false;
  }

  final private boolean jj_3R_507() {
    if (jj_scan_token(CONTAINED_WITHIN_OR_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1210() {
    if (jj_scan_token(ST_LINE_LOCATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(MONTHS_BETWEEN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1209() {
    if (jj_scan_token(ST_LINE_INTERPOLATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1208() {
    if (jj_scan_token(ST_LINETOCURVE_)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_507()) {
    jj_scanpos = xsp;
    if (jj_3R_508()) {
    jj_scanpos = xsp;
    if (jj_3R_509()) {
    jj_scanpos = xsp;
    if (jj_3R_510()) {
    jj_scanpos = xsp;
    if (jj_3R_511()) {
    jj_scanpos = xsp;
    if (jj_3R_512()) {
    jj_scanpos = xsp;
    if (jj_3R_513()) {
    jj_scanpos = xsp;
    if (jj_3R_514()) {
    jj_scanpos = xsp;
    if (jj_3R_515()) {
    jj_scanpos = xsp;
    if (jj_3R_516()) {
    jj_scanpos = xsp;
    if (jj_3R_517()) {
    jj_scanpos = xsp;
    if (jj_3R_518()) {
    jj_scanpos = xsp;
    if (jj_3R_519()) {
    jj_scanpos = xsp;
    if (jj_3R_520()) {
    jj_scanpos = xsp;
    if (jj_3R_521()) {
    jj_scanpos = xsp;
    if (jj_3R_522()) {
    jj_scanpos = xsp;
    if (jj_3R_523()) {
    jj_scanpos = xsp;
    if (jj_3R_524()) {
    jj_scanpos = xsp;
    if (jj_3R_525()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_1207() {
    if (jj_scan_token(ST_LINESTRINGFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_658() {
    if (jj_scan_token(ISRING_)) return true;
    return false;
  }

  final private boolean jj_3R_1206() {
    if (jj_scan_token(ST_LINEMERGE_)) return true;
    return false;
  }

  final private boolean jj_3R_657() {
    if (jj_scan_token(ST_ISRING_)) return true;
    return false;
  }

  final private boolean jj_3R_738() {
    if (jj_scan_token(ZMFLAG_)) return true;
    return false;
  }

  final private boolean jj_3R_1205() {
    if (jj_scan_token(ST_LINEFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_737() {
    if (jj_scan_token(ST_ZMFLAG_)) return true;
    return false;
  }

  final private boolean jj_3R_1572() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1204() {
    if (jj_scan_token(ST_LINEFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_657()) {
    jj_scanpos = xsp;
    if (jj_3R_658()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1203() {
    if (jj_scan_token(ST_LINEFROMMULTIPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1202() {
    if (jj_scan_token(ST_LINECROSSINGDIRECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(MAX_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1572()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(LAST_DAY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_454() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_737()) {
    jj_scanpos = xsp;
    if (jj_3R_738()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1201() {
    if (jj_scan_token(ST_LENGTH_SPHEROID_)) return true;
    return false;
  }

  final private boolean jj_3R_1200() {
    if (jj_scan_token(ST_LENGTH3D_SPHEROID_)) return true;
    return false;
  }

  final private boolean jj_3R_1199() {
    if (jj_scan_token(ST_LENGTH3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1198() {
    if (jj_scan_token(ST_LENGTH2D_SPHEROID_)) return true;
    return false;
  }

  final private boolean jj_3R_1197() {
    if (jj_scan_token(ST_LENGTH2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1196() {
    if (jj_scan_token(ST_ISVALIDREASON_)) return true;
    return false;
  }

  final private boolean jj_3R_656() {
    if (jj_scan_token(ISEMPTY_)) return true;
    return false;
  }

  final private boolean jj_3R_1195() {
    if (jj_scan_token(ST_ISVALID_)) return true;
    return false;
  }

  final private boolean jj_3R_1677() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3_415() {
    if (jj_scan_token(INTERVAL_)) return true;
    return false;
  }

  final private boolean jj_3R_655() {
    if (jj_scan_token(ST_ISEMPTY_)) return true;
    return false;
  }

  final private boolean jj_3R_1194() {
    if (jj_scan_token(ST_ISSIMPLE_)) return true;
    return false;
  }

  final private boolean jj_3R_736() {
    if (jj_scan_token(Z_)) return true;
    return false;
  }

  final private boolean jj_3R_1676() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1193() {
    if (jj_scan_token(ST_ISRING_)) return true;
    return false;
  }

  final private boolean jj_3R_735() {
    if (jj_scan_token(ST_Z_)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(JUSTIFY_INTERVAL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_415()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1658() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1676()) {
    jj_scanpos = xsp;
    if (jj_3R_1677()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1192() {
    if (jj_scan_token(ST_ISEMPTY_)) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_655()) {
    jj_scanpos = xsp;
    if (jj_3R_656()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1191() {
    if (jj_scan_token(ST_ISCLOSED_)) return true;
    return false;
  }

  final private boolean jj_3R_1571() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1658()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_453() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_735()) {
    jj_scanpos = xsp;
    if (jj_3R_736()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1190() {
    if (jj_scan_token(ST_INTERSECTS_)) return true;
    return false;
  }

  final private boolean jj_3R_1570() {
    if (jj_scan_token(STAR_)) return true;
    return false;
  }

  final private boolean jj_3R_1189() {
    if (jj_scan_token(ST_INTERSECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_529() {
    if (jj_3R_540()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1188() {
    if (jj_scan_token(ST_INTERIORRINGN_)) return true;
    return false;
  }

  final private boolean jj_3R_1187() {
    if (jj_scan_token(ST_HEIGHT_)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(COUNT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1570()) {
    jj_scanpos = xsp;
    if (jj_3R_1571()) return true;
    }
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1186() {
    if (jj_scan_token(ST_HAUSDORFFDISTANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1185() {
    if (jj_scan_token(ST_HASARC_)) return true;
    return false;
  }

  final private boolean jj_3_414() {
    if (jj_scan_token(INTERVAL_)) return true;
    return false;
  }

  final private boolean jj_3R_654() {
    if (jj_scan_token(ISCLOSED_)) return true;
    return false;
  }

  final private boolean jj_3R_1184() {
    if (jj_scan_token(ST_GMLTOSQL_)) return true;
    return false;
  }

  final private boolean jj_3_48() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_653() {
    if (jj_scan_token(ST_ISCLOSED_)) return true;
    return false;
  }

  final private boolean jj_3R_1183() {
    if (jj_scan_token(ST_GEOMFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(JUSTIFY_HOURS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_414()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_734() {
    if (jj_scan_token(Y_)) return true;
    return false;
  }

  final private boolean jj_3R_1182() {
    if (jj_scan_token(ST_GEOMFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_460() {
    if (jj_3R_529()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_733() {
    if (jj_scan_token(ST_Y_)) return true;
    return false;
  }

  final private boolean jj_3R_1181() {
    if (jj_scan_token(ST_GEOMFROMKML_)) return true;
    return false;
  }

  final private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_653()) {
    jj_scanpos = xsp;
    if (jj_3R_654()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1180() {
    if (jj_scan_token(ST_GEOMFROMGML_)) return true;
    return false;
  }

  final private boolean jj_3R_1179() {
    if (jj_scan_token(ST_GEOMFROMEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_452() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_733()) {
    jj_scanpos = xsp;
    if (jj_3R_734()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1178() {
    if (jj_scan_token(ST_GEOMFROMEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1177() {
    if (jj_scan_token(ST_GEOMETRYTYPE_)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_1569() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1176() {
    if (jj_scan_token(ST_GEOMCOLLFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1175() {
    if (jj_scan_token(ST_GEOMCOLLFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1553() {
    if (jj_3R_460()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(782)) return true;
    if (jj_scan_token(STAR_)) return true;
    return false;
  }

  final private boolean jj_3_413() {
    if (jj_scan_token(INTERVAL_)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(AVERAGE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1569()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1174() {
    if (jj_scan_token(ST_GEOHASH_)) return true;
    return false;
  }

  final private boolean jj_3R_1173() {
    if (jj_scan_token(ST_GEOGRAPHYFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(JUSTIFY_DAYS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_413()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_652() {
    if (jj_scan_token(INTERSECTS_)) return true;
    return false;
  }

  final private boolean jj_3R_1172() {
    if (jj_scan_token(ST_GEOGFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1552() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(782)) return true;
    if (jj_scan_token(STAR_)) return true;
    return false;
  }

  final private boolean jj_3R_651() {
    if (jj_scan_token(ST_INTERSECTS_)) return true;
    return false;
  }

  final private boolean jj_3R_732() {
    if (jj_scan_token(X_)) return true;
    return false;
  }

  final private boolean jj_3R_1171() {
    if (jj_scan_token(ST_GEOGFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1551() {
    if (jj_scan_token(STAR_)) return true;
    return false;
  }

  final private boolean jj_3R_731() {
    if (jj_scan_token(ST_X_)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(ALTER_)) return true;
    if (jj_scan_token(USER_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1170() {
    if (jj_scan_token(ST_FORCE_COLLECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_854() {
    if (jj_scan_token(CONSTRAINT_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1169() {
    if (jj_scan_token(ST_FORCE_4D_)) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_651()) {
    jj_scanpos = xsp;
    if (jj_3R_652()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1168() {
    if (jj_scan_token(ST_FORCE_3DZ_)) return true;
    return false;
  }

  final private boolean jj_3R_1533() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1551()) {
    jj_scanpos = xsp;
    if (jj_3R_1552()) {
    jj_scanpos = xsp;
    if (jj_3R_1553()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_451() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_731()) {
    jj_scanpos = xsp;
    if (jj_3R_732()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1167() {
    if (jj_scan_token(ST_FORCE_3DM_)) return true;
    return false;
  }

  final private boolean jj_3R_1166() {
    if (jj_scan_token(ST_FORCE_3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1165() {
    if (jj_scan_token(ST_FORCE_2D_)) return true;
    return false;
  }

  final private boolean jj_3_418() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1164() {
    if (jj_scan_token(ST_FORCERHR_)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(ADD_MONTHS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1163() {
    if (jj_scan_token(ST_FIND_EXTENT_)) return true;
    return false;
  }

  final private boolean jj_3R_1162() {
    if (jj_scan_token(ST_FACTOR_)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(VALUE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_418()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1161() {
    if (jj_scan_token(ST_EXTENT3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1160() {
    if (jj_scan_token(ST_EXTENT_)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(DROP_)) return true;
    if (jj_scan_token(USER_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_650() {
    if (jj_scan_token(INTERSECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_450() {
    if (jj_scan_token(ST_WKTTOSQL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1159() {
    if (jj_scan_token(ST_EXTERIORRING_)) return true;
    return false;
  }

  final private boolean jj_3R_649() {
    if (jj_scan_token(ST_INTERSECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_1534() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_1533()) return true;
    return false;
  }

  final private boolean jj_3R_1158() {
    if (jj_scan_token(ST_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1157() {
    if (jj_scan_token(ST_ENVELOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_1484() {
    if (jj_3R_1533()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1534()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1156() {
    if (jj_scan_token(ST_ENDPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_488() {
    if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_649()) {
    jj_scanpos = xsp;
    if (jj_3R_650()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1155() {
    if (jj_scan_token(ST_DISTANCE_SPHEROID_)) return true;
    return false;
  }

  final private boolean jj_3R_487() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(TO_TIMESTAMP_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1154() {
    if (jj_scan_token(ST_DISTANCE_SPHERE_)) return true;
    return false;
  }

  final private boolean jj_3R_486() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_1153() {
    if (jj_scan_token(ST_DISJOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(VERSION_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1152() {
    if (jj_scan_token(ST_DIMENSION_)) return true;
    return false;
  }

  final private boolean jj_3R_449() {
    if (jj_scan_token(ST_WKBTOSQL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1151() {
    if (jj_scan_token(ST_DIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(SHOW_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_486()) {
    jj_scanpos = xsp;
    if (jj_3R_487()) {
    jj_scanpos = xsp;
    if (jj_3R_488()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_1489() {
    if (jj_3R_1539()) return true;
    return false;
  }

  final private boolean jj_3R_1150() {
    if (jj_scan_token(ST_DFULLYWITHIN_)) return true;
    return false;
  }

  final private boolean jj_3R_1488() {
    if (jj_3R_1538()) return true;
    return false;
  }

  final private boolean jj_3R_1149() {
    if (jj_scan_token(ST_DATATYPE_)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(CREATE_)) return true;
    if (jj_scan_token(USER_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1487() {
    if (jj_3R_1537()) return true;
    return false;
  }

  final private boolean jj_3R_1148() {
    if (jj_scan_token(ST_CURVETOLINE_)) return true;
    return false;
  }

  final private boolean jj_3R_1147() {
    if (jj_scan_token(ST_CROSSES_)) return true;
    return false;
  }

  final private boolean jj_3R_1486() {
    if (jj_3R_1536()) return true;
    return false;
  }

  final private boolean jj_3R_648() {
    if (jj_scan_token(INTERIORRINGN_)) return true;
    return false;
  }

  final private boolean jj_3R_1146() {
    if (jj_scan_token(ST_COVERS_)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(TO_NUMBER_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(DATABASE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1485() {
    if (jj_3R_1535()) return true;
    return false;
  }

  final private boolean jj_3R_647() {
    if (jj_scan_token(ST_INTERIORRINGN_)) return true;
    return false;
  }

  final private boolean jj_3R_1145() {
    if (jj_scan_token(ST_COVEREDBY_)) return true;
    return false;
  }

  final private boolean jj_3R_730() {
    if (jj_scan_token(WITHIN_)) return true;
    return false;
  }

  final private boolean jj_3R_1532() {
    if (jj_scan_token(UNIQUE_)) return true;
    return false;
  }

  final private boolean jj_3R_1144() {
    if (jj_scan_token(ST_COORDDIM_)) return true;
    return false;
  }

  final private boolean jj_3R_729() {
    if (jj_scan_token(ST_WITHIN_)) return true;
    return false;
  }

  final private boolean jj_3R_1531() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1143() {
    if (jj_scan_token(ST_CONVEXHULL_)) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_647()) {
    jj_scanpos = xsp;
    if (jj_3R_648()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1530() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3R_1142() {
    if (jj_scan_token(ST_CONTAINSPROPERLY_)) return true;
    return false;
  }

  final private boolean jj_3R_1141() {
    if (jj_scan_token(ST_CONTAINS_)) return true;
    return false;
  }

  final private boolean jj_3R_448() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_729()) {
    jj_scanpos = xsp;
    if (jj_3R_730()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1483() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1530()) {
    jj_scanpos = xsp;
    if (jj_3R_1531()) {
    jj_scanpos = xsp;
    if (jj_3R_1532()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_1140() {
    if (jj_scan_token(ST_COMPRESSION_)) return true;
    return false;
  }

  final private boolean jj_3R_1139() {
    if (jj_scan_token(ST_COMBINE_BBOX_)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(SELECT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1483()) jj_scanpos = xsp;
    if (jj_3R_1484()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1485()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1486()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1487()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1488()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1489()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_483() {
    if (jj_scan_token(PREPARE_)) return true;
    return false;
  }

  final private boolean jj_3R_1583() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1138() {
    if (jj_scan_token(ST_COLLECTIONEXTRACT_)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(DEALLOCATE_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_483()) jj_scanpos = xsp;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1621() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1137() {
    if (jj_scan_token(ST_COLLECT_)) return true;
    return false;
  }

  final private boolean jj_3R_1136() {
    if (jj_scan_token(ST_CLOSESTPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(SUBSTR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1583()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1135() {
    if (jj_scan_token(ST_CHIP_OUT_)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(TO_CHAR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1621()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1134() {
    if (jj_scan_token(ST_CHIP_IN_)) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(ST_HEIGHT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1133() {
    if (jj_scan_token(ST_BYTEA_)) return true;
    return false;
  }

  final private boolean jj_3R_1132() {
    if (jj_scan_token(ST_BUILDAREA_)) return true;
    return false;
  }

  final private boolean jj_3R_447() {
    if (jj_scan_token(ST_WIDTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(SHOW_VIEWS_)) return true;
    return false;
  }

  final private boolean jj_3R_1131() {
    if (jj_scan_token(ST_BDPOLYFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_485() {
    if (jj_scan_token(TRANSACTION_)) return true;
    return false;
  }

  final private boolean jj_3R_1130() {
    if (jj_scan_token(ST_BDMPOLYFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1129() {
    if (jj_scan_token(ST_AZIMUTH_)) return true;
    return false;
  }

  final private boolean jj_3R_1128() {
    if (jj_scan_token(ST_ASSVG_)) return true;
    return false;
  }

  final private boolean jj_3R_1431() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_767()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1127() {
    if (jj_scan_token(ST_ASKML_)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(SHOW_USERS_)) return true;
    return false;
  }

  final private boolean jj_3R_1126() {
    if (jj_scan_token(ST_ASHEXEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1640() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1582() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1125() {
    if (jj_scan_token(ST_ASGML_)) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(SET_BYTE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1124() {
    if (jj_scan_token(ST_ASGEOJSON_)) return true;
    return false;
  }

  final private boolean jj_3R_1123() {
    if (jj_scan_token(ST_ASEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(RTRIM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1582()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(ST_HAUSDORFFDISTANCE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1640()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_728() {
    if (jj_scan_token(TRANSSCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_1122() {
    if (jj_scan_token(ST_ASEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_727() {
    if (jj_scan_token(ST_TRANSSCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(SHOW_INDEXES_)) return true;
    if (jj_scan_token(ON_)) return true;
    return false;
  }

  final private boolean jj_3R_1121() {
    if (jj_scan_token(ST_AREA2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1120() {
    if (jj_scan_token(ST_AFFINE_)) return true;
    return false;
  }

  final private boolean jj_3R_868() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_845()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1119() {
    if (jj_scan_token(ST_ADDPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_867() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_484() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_446() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_727()) {
    jj_scanpos = xsp;
    if (jj_3R_728()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1118() {
    if (jj_scan_token(ST_ADDMEASURE_)) return true;
    return false;
  }

  final private boolean jj_3R_845() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_867()) {
    jj_scanpos = xsp;
    if (jj_3R_868()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1117() {
    if (jj_scan_token(ST_CENTROID_)) return true;
    return false;
  }

  final private boolean jj_3R_1116() {
    if (jj_scan_token(ST_BUFFER_)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(SET_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_484()) {
    jj_scanpos = xsp;
    if (jj_3R_485()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1115() {
    if (jj_scan_token(ST_BOUNDARY_)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(SHOW_CONSTRAINTS_)) return true;
    if (jj_scan_token(ON_)) return true;
    return false;
  }

  final private boolean jj_3R_1114() {
    if (jj_scan_token(ST_ASBINARY_)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(SET_BIT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1579() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1113() {
    if (jj_scan_token(ST_AREA_)) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(ST_HASARC_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1112() {
    if (jj_scan_token(ST_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3R_871() {
    if (jj_3R_1431()) return true;
    return false;
  }

  final private boolean jj_3R_1111() {
    if (jj_scan_token(ST_DWITHIN_)) return true;
    return false;
  }

  final private boolean jj_3R_870() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(RPAD_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1579()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1110() {
    if (jj_scan_token(ST_DISTANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1109() {
    if (jj_scan_token(ST_TRANSFORM_)) return true;
    return false;
  }

  final private boolean jj_3R_1108() {
    if (jj_scan_token(ST_ASTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_869() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3R_1107() {
    if (jj_scan_token(REGCLASS_)) return true;
    return false;
  }

  final private boolean jj_3R_1646() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1106() {
    if (jj_scan_token(BOX3DEXTENT_)) return true;
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_scan_token(ST_GMLTOSQL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1105() {
    if (jj_scan_token(BOX3D_)) return true;
    return false;
  }

  final private boolean jj_3R_846() {
    if (jj_scan_token(UNION_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_869()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_870()) {
    jj_scanpos = xsp;
    if (jj_3R_871()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1104() {
    if (jj_scan_token(BOX2D_)) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(NULLIF_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1103() {
    if (jj_scan_token(GEOMETRY_)) return true;
    return false;
  }

  final private boolean jj_3R_767() {
    if (jj_3R_845()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_846()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_445() {
    if (jj_scan_token(ST_TRANSLATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1646()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1102() {
    if (jj_scan_token(SET_MASKLEN_)) return true;
    return false;
  }

  final private boolean jj_3R_1101() {
    if (jj_scan_token(NETWORK_)) return true;
    return false;
  }

  final private boolean jj_3R_1587() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1100() {
    if (jj_scan_token(NETMASK_)) return true;
    return false;
  }

  final private boolean jj_3R_1586() {
    if (jj_scan_token(TRAILING)) return true;
    return false;
  }

  final private boolean jj_3R_1099() {
    if (jj_scan_token(MASKLEN_)) return true;
    return false;
  }

  final private boolean jj_3R_1585() {
    if (jj_scan_token(LEADING)) return true;
    return false;
  }

  final private boolean jj_3R_1098() {
    if (jj_scan_token(HOSTMASK_)) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(ST_GEOMFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1584() {
    if (jj_scan_token(BOTH)) return true;
    return false;
  }

  final private boolean jj_3R_1097() {
    if (jj_scan_token(HOST_)) return true;
    return false;
  }

  final private boolean jj_3R_1096() {
    if (jj_scan_token(FAMILY_)) return true;
    return false;
  }

  final private boolean jj_3R_774() {
    if (jj_3R_767()) return true;
    return false;
  }

  final private boolean jj_3R_572() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1095() {
    if (jj_scan_token(BROADCAST_)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(TRIM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1584()) {
    jj_scanpos = xsp;
    if (jj_3R_1585()) {
    jj_scanpos = xsp;
    if (jj_3R_1586()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1587()) jj_scanpos = xsp;
    if (jj_scan_token(FROM_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1094() {
    if (jj_scan_token(ABBREV_)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(TRANSACTION_TIMESTAMP_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_572()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1093() {
    if (jj_scan_token(REGEXP_REPLACE_)) return true;
    return false;
  }

  final private boolean jj_3R_1092() {
    if (jj_scan_token(REGR_SYY_)) return true;
    return false;
  }

  final private boolean jj_3R_777() {
    if (jj_3R_852()) return true;
    return false;
  }

  final private boolean jj_3R_1091() {
    if (jj_scan_token(REGR_SXY_)) return true;
    return false;
  }

  final private boolean jj_3R_444() {
    if (jj_scan_token(ST_TOUCHES_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1639() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1090() {
    if (jj_scan_token(REGR_SXX_)) return true;
    return false;
  }

  final private boolean jj_3R_776() {
    if (jj_3R_851()) return true;
    return false;
  }

  final private boolean jj_3R_1089() {
    if (jj_scan_token(REGR_SLOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_775() {
    if (jj_3R_850()) return true;
    return false;
  }

  final private boolean jj_3R_646() {
    if (jj_scan_token(GEOMFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1088() {
    if (jj_scan_token(REGR_R2_)) return true;
    return false;
  }

  final private boolean jj_3R_645() {
    if (jj_scan_token(ST_GEOMFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1087() {
    if (jj_scan_token(REGR_INTERCEPT_)) return true;
    return false;
  }

  final private boolean jj_3R_476() {
    if (jj_3R_774()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_775()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_776()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_777()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1086() {
    if (jj_scan_token(REGR_COUNT_)) return true;
    return false;
  }

  final private boolean jj_3R_571() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1085() {
    if (jj_scan_token(REGR_AVGY_)) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_645()) {
    jj_scanpos = xsp;
    if (jj_3R_646()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1639()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(STATEMENT_TIMESTAMP_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_571()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1084() {
    if (jj_scan_token(REGR_AVGX_)) return true;
    return false;
  }

  final private boolean jj_3R_1565() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1083() {
    if (jj_scan_token(COVAR_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_443() {
    if (jj_scan_token(ST_TEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1082() {
    if (jj_scan_token(COVAR_POP_)) return true;
    return false;
  }

  final private boolean jj_3R_1081() {
    if (jj_scan_token(CORR_)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_476()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(TRUNC_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1565()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1080() {
    if (jj_scan_token(EVERY_)) return true;
    return false;
  }

  final private boolean jj_3R_1079() {
    if (jj_scan_token(BOOL_OR_)) return true;
    return false;
  }

  final private boolean jj_3R_1078() {
    if (jj_scan_token(BOOL_AND_)) return true;
    return false;
  }

  final private boolean jj_3R_1077() {
    if (jj_scan_token(BIT_OR_)) return true;
    return false;
  }

  final private boolean jj_3R_570() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1076() {
    if (jj_scan_token(BIT_AND_)) return true;
    return false;
  }

  final private boolean jj_3R_1075() {
    if (jj_scan_token(CURRENT_SCHEMA_)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_scan_token(CLOCK_TIMESTAMP_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_570()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_scan_token(ST_GEOMFROMKML_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_442() {
    if (jj_scan_token(ST_SYMMETRICDIFFERENCE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1074() {
    if (jj_scan_token(CURRENT_DATABASE_)) return true;
    return false;
  }

  final private boolean jj_3R_1073() {
    if (jj_scan_token(NEXT_DAY_)) return true;
    return false;
  }

  final private boolean jj_3R_1072() {
    if (jj_scan_token(MONTHS_BETWEEN_)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1581() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_778() {
    if (jj_scan_token(TABLE_)) return true;
    return false;
  }

  final private boolean jj_3R_1071() {
    if (jj_scan_token(LAST_DAY_)) return true;
    return false;
  }

  final private boolean jj_3R_1070() {
    if (jj_scan_token(JUSTIFY_INTERVAL_)) return true;
    return false;
  }

  final private boolean jj_3R_1069() {
    if (jj_scan_token(JUSTIFY_HOURS_)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(REPLACE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1581()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1068() {
    if (jj_scan_token(JUSTIFY_DAYS_)) return true;
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(ST_GEOMFROMGML_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_726() {
    if (jj_scan_token(SYMDIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1620() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1067() {
    if (jj_scan_token(ADD_MONTHS_)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(SELECT_)) return true;
    if (jj_scan_token(ADDGEOMETRYCOLUMN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_725() {
    if (jj_scan_token(ST_SYMDIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1066() {
    if (jj_scan_token(TO_TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_1065() {
    if (jj_scan_token(TO_NUMBER_)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(TO_DATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1620()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1064() {
    if (jj_scan_token(TO_CHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_441() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_725()) {
    jj_scanpos = xsp;
    if (jj_3R_726()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1063() {
    if (jj_scan_token(SET_BYTE_)) return true;
    return false;
  }

  final private boolean jj_3R_779() {
    if (jj_scan_token(TABLESPACE_)) return true;
    return false;
  }

  final private boolean jj_3R_1062() {
    if (jj_scan_token(SET_BIT_)) return true;
    return false;
  }

  final private boolean jj_3R_1061() {
    if (jj_scan_token(NULLIF_)) return true;
    return false;
  }

  final private boolean jj_3R_644() {
    if (jj_scan_token(GEOMFROMEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_1060() {
    if (jj_scan_token(CURRENT_USER_)) return true;
    return false;
  }

  final private boolean jj_3R_643() {
    if (jj_scan_token(ST_GEOMFROMEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_1059() {
    if (jj_scan_token(CLUSTER_)) return true;
    return false;
  }

  final private boolean jj_3R_1580() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1058() {
    if (jj_scan_token(BYTE_)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_643()) {
    jj_scanpos = xsp;
    if (jj_3R_644()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1057() {
    if (jj_scan_token(IMAGE_)) return true;
    return false;
  }

  final private boolean jj_3R_482() {
    if (jj_3R_779()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(SHOW_TRAN_ISOLATION_)) return true;
    return false;
  }

  final private boolean jj_3R_1056() {
    if (jj_scan_token(LONG_RAW_)) return true;
    return false;
  }

  final private boolean jj_3R_481() {
    if (jj_3R_778()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(LTRIM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1580()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1055() {
    if (jj_scan_token(RAW_)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(GET_BYTE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_scan_token(ST_SUMMARY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1054() {
    if (jj_scan_token(VARBINARY_)) return true;
    return false;
  }

  final private boolean jj_3R_1053() {
    if (jj_scan_token(BINARY_)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(ALTER_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_481()) {
    jj_scanpos = xsp;
    if (jj_3R_482()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1052() {
    if (jj_scan_token(BLOB_)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(SHOW_TABLES_)) return true;
    return false;
  }

  final private boolean jj_3R_1666() {
    if (jj_scan_token(781)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1051() {
    if (jj_scan_token(CLOB_)) return true;
    return false;
  }

  final private boolean jj_3R_1050() {
    if (jj_scan_token(LONG_)) return true;
    return false;
  }

  final private boolean jj_3R_1049() {
    if (jj_scan_token(LONG_VARCHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_502() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1666()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_scan_token(ST_GEOMFROMEWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1048() {
    if (jj_scan_token(LONGTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_724() {
    if (jj_scan_token(STARTPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1047() {
    if (jj_scan_token(LVARCHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_723() {
    if (jj_scan_token(ST_STARTPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(SHOW_STATEMENTS_)) return true;
    return false;
  }

  final private boolean jj_3R_1578() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1046() {
    if (jj_scan_token(MEDIUMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(GET_BIT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1045() {
    if (jj_scan_token(TEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_439() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_723()) {
    jj_scanpos = xsp;
    if (jj_3R_724()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1044() {
    if (jj_scan_token(INTERVAL_)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(DROP_)) return true;
    if (jj_scan_token(INDEX_)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(LPAD_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1578()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1043() {
    if (jj_scan_token(BOOLEAN_)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(SHOW_DATABASES_)) return true;
    return false;
  }

  final private boolean jj_3R_1042() {
    if (jj_scan_token(VARYING_)) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_scan_token(ST_GEOMCOLLFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_504() {
    if (jj_scan_token(ZEROFILL_)) return true;
    return false;
  }

  final private boolean jj_3R_1041() {
    if (jj_scan_token(NATIONAL_)) return true;
    return false;
  }

  final private boolean jj_3R_1040() {
    if (jj_scan_token(NCHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_503() {
    if (jj_scan_token(UNSIGNED_)) return true;
    return false;
  }

  final private boolean jj_3R_1039() {
    if (jj_scan_token(DOUBLE_PRECISION_)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_504()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1038() {
    if (jj_scan_token(DEC_)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(CBRT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(SHOW_AGENTS_)) return true;
    return false;
  }

  final private boolean jj_3R_1037() {
    if (jj_scan_token(TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_722() {
    if (jj_scan_token(SRID_)) return true;
    return false;
  }

  final private boolean jj_3R_1036() {
    if (jj_scan_token(TIME_)) return true;
    return false;
  }

  final private boolean jj_3R_721() {
    if (jj_scan_token(ST_SRID_)) return true;
    return false;
  }

  final private boolean jj_3R_1035() {
    if (jj_scan_token(DATE_)) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_scan_token(ST_GEOMCOLLFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1034() {
    if (jj_scan_token(VARCHAR2_)) return true;
    return false;
  }

  final private boolean jj_3R_1545() {
    if (jj_scan_token(SCIENTIFIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(LOWER_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1033() {
    if (jj_scan_token(TINYTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_438() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_721()) {
    jj_scanpos = xsp;
    if (jj_3R_722()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1544() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1665() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1032() {
    if (jj_scan_token(VARCHAR_)) return true;
    return false;
  }

  final private boolean jj_3_412() {
    if (jj_3R_459()) return true;
    return false;
  }

  final private boolean jj_3R_1031() {
    if (jj_scan_token(CHARACHTER_)) return true;
    return false;
  }

  final private boolean jj_3_450() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1030() {
    if (jj_scan_token(CHAR_)) return true;
    return false;
  }

  final private boolean jj_3_411() {
    if (jj_3R_458()) return true;
    return false;
  }

  final private boolean jj_3R_1527() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_450()) {
    jj_scanpos = xsp;
    if (jj_3R_1544()) {
    jj_scanpos = xsp;
    if (jj_3R_1545()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_1029() {
    if (jj_scan_token(NUMBER_)) return true;
    return false;
  }

  final private boolean jj_3_410() {
    if (jj_3R_457()) return true;
    return false;
  }

  final private boolean jj_3R_1028() {
    if (jj_scan_token(MONEY_)) return true;
    return false;
  }

  final private boolean jj_3_409() {
    if (jj_3R_456()) return true;
    return false;
  }

  final private boolean jj_3R_1027() {
    if (jj_scan_token(SMALLMONEY_)) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(ST_GEOHASH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1650() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3R_1026() {
    if (jj_scan_token(NUMERIC_)) return true;
    return false;
  }

  final private boolean jj_3_408() {
    if (jj_3R_455()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(LENGTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1025() {
    if (jj_scan_token(DECIMAL_)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(VARYING_)) return true;
    return false;
  }

  final private boolean jj_3_407() {
    if (jj_3R_454()) return true;
    return false;
  }

  final private boolean jj_3R_1645() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1024() {
    if (jj_scan_token(FLOAT8_)) return true;
    return false;
  }

  final private boolean jj_3R_1501() {
    if (jj_scan_token(CHAR_)) return true;
    return false;
  }

  final private boolean jj_3_406() {
    if (jj_3R_453()) return true;
    return false;
  }

  final private boolean jj_3R_1023() {
    if (jj_scan_token(FLOAT4_)) return true;
    return false;
  }

  final private boolean jj_3R_1500() {
    if (jj_scan_token(CHARACHTER_)) return true;
    return false;
  }

  final private boolean jj_3R_480() {
    if (jj_scan_token(QPUBLICDOT_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1022() {
    if (jj_scan_token(FLOAT_)) return true;
    return false;
  }

  final private boolean jj_3_405() {
    if (jj_3R_452()) return true;
    return false;
  }

  final private boolean jj_3_428() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1021() {
    if (jj_scan_token(SMALLFLOAT_)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(STAR_)) return true;
    return false;
  }

  final private boolean jj_3_404() {
    if (jj_3R_451()) return true;
    return false;
  }

  final private boolean jj_3R_479() {
    if (jj_scan_token(PUBLICDOT_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1438() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1500()) {
    jj_scanpos = xsp;
    if (jj_3R_1501()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1650()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1020() {
    if (jj_scan_token(REAL_)) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(ST_GEOGRAPHYFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_403() {
    if (jj_3R_450()) return true;
    return false;
  }

  final private boolean jj_3R_1019() {
    if (jj_scan_token(INT4_)) return true;
    return false;
  }

  final private boolean jj_3_427() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1018() {
    if (jj_scan_token(INTEGER_)) return true;
    return false;
  }

  final private boolean jj_3_402() {
    if (jj_3R_449()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(RIGHT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_478() {
    if (jj_scan_token(TEMPDOT_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1017() {
    if (jj_scan_token(INT_)) return true;
    return false;
  }

  final private boolean jj_3R_477() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3_401() {
    if (jj_3R_448()) return true;
    return false;
  }

  final private boolean jj_3R_1016() {
    if (jj_scan_token(BIGINTEGER_)) return true;
    return false;
  }

  final private boolean jj_3_400() {
    if (jj_3R_447()) return true;
    return false;
  }

  final private boolean jj_3_426() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1015() {
    if (jj_scan_token(INT8_)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_477()) {
    jj_scanpos = xsp;
    if (jj_3R_478()) {
    jj_scanpos = xsp;
    if (jj_3R_479()) {
    jj_scanpos = xsp;
    if (jj_3R_480()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_1014() {
    if (jj_scan_token(BIGINT_)) return true;
    return false;
  }

  final private boolean jj_3_399() {
    if (jj_3R_446()) return true;
    return false;
  }

  final private boolean jj_3R_1496() {
    if (jj_scan_token(FLOAT8_)) return true;
    return false;
  }

  final private boolean jj_3R_1013() {
    if (jj_scan_token(BYTEA_)) return true;
    return false;
  }

  final private boolean jj_3R_720() {
    if (jj_scan_token(SNAPTOGRID_)) return true;
    return false;
  }

  final private boolean jj_3_398() {
    if (jj_3R_445()) return true;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_scan_token(ST_GEOGFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1495() {
    if (jj_scan_token(DOUBLE_PRECISION_)) return true;
    return false;
  }

  final private boolean jj_3R_1012() {
    if (jj_scan_token(INT2_)) return true;
    return false;
  }

  final private boolean jj_3R_719() {
    if (jj_scan_token(ST_SNAPTOGRID_)) return true;
    return false;
  }

  final private boolean jj_3_397() {
    if (jj_3R_444()) return true;
    return false;
  }

  final private boolean jj_3R_1011() {
    if (jj_scan_token(TINYINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1434() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1495()) {
    jj_scanpos = xsp;
    if (jj_3R_1496()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1010() {
    if (jj_scan_token(SMALLINT_)) return true;
    return false;
  }

  final private boolean jj_3_396() {
    if (jj_3R_443()) return true;
    return false;
  }

  final private boolean jj_3R_437() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_719()) {
    jj_scanpos = xsp;
    if (jj_3R_720()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3_426()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_427()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_428()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1645()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1009() {
    if (jj_scan_token(TRANSACTION_TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(LEFT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_395() {
    if (jj_3R_442()) return true;
    return false;
  }

  final private boolean jj_3R_1008() {
    if (jj_scan_token(STATEMENT_TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3_394() {
    if (jj_3R_441()) return true;
    return false;
  }

  final private boolean jj_3R_1007() {
    if (jj_scan_token(CLOCK_TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_1006() {
    if (jj_scan_token(TO_DATE_)) return true;
    return false;
  }

  final private boolean jj_3_393() {
    if (jj_3R_440()) return true;
    return false;
  }

  final private boolean jj_3R_1652() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3R_1005() {
    if (jj_scan_token(GET_BYTE_)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_scan_token(ST_GEOGFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_392() {
    if (jj_3R_439()) return true;
    return false;
  }

  final private boolean jj_3R_1004() {
    if (jj_scan_token(GET_BIT_)) return true;
    return false;
  }

  final private boolean jj_3_449() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(VARYING_)) return true;
    return false;
  }

  final private boolean jj_3_391() {
    if (jj_3R_438()) return true;
    return false;
  }

  final private boolean jj_3R_1670() {
    if (jj_scan_token(CHARACHTER_)) return true;
    return false;
  }

  final private boolean jj_3R_1003() {
    if (jj_scan_token(CBRT_)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_473()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_449()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1669() {
    if (jj_scan_token(CHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_1002() {
    if (jj_scan_token(RANDOM_)) return true;
    return false;
  }

  final private boolean jj_3_390() {
    if (jj_3R_437()) return true;
    return false;
  }

  final private boolean jj_3R_1001() {
    if (jj_scan_token(SETSEED_)) return true;
    return false;
  }

  final private boolean jj_3_389() {
    if (jj_3R_436()) return true;
    return false;
  }

  final private boolean jj_3R_1577() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(781)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1000() {
    if (jj_scan_token(WIDTH_BUCKET_)) return true;
    return false;
  }

  final private boolean jj_3_388() {
    if (jj_3R_435()) return true;
    return false;
  }

  final private boolean jj_3R_999() {
    if (jj_scan_token(TRANSLATE_)) return true;
    return false;
  }

  final private boolean jj_3R_1508() {
    if (jj_scan_token(NATIONAL_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1669()) {
    jj_scanpos = xsp;
    if (jj_3R_1670()) return true;
    }
    return false;
  }

  final private boolean jj_3R_642() {
    if (jj_scan_token(GEOMETRYTYPE_)) return true;
    return false;
  }

  final private boolean jj_3R_998() {
    if (jj_scan_token(TO_HEX_)) return true;
    return false;
  }

  final private boolean jj_3_387() {
    if (jj_3R_434()) return true;
    return false;
  }

  final private boolean jj_3R_1507() {
    if (jj_scan_token(NCHAR_)) return true;
    return false;
  }

  final private boolean jj_3_417() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_641() {
    if (jj_scan_token(ST_GEOMETRYTYPE_)) return true;
    return false;
  }

  final private boolean jj_3R_997() {
    if (jj_scan_token(TO_ASCII_)) return true;
    return false;
  }

  final private boolean jj_3R_1590() {
    if (jj_scan_token(NULL_)) return true;
    return false;
  }

  final private boolean jj_3_386() {
    if (jj_3R_433()) return true;
    return false;
  }

  final private boolean jj_3R_996() {
    if (jj_scan_token(STRPOS_)) return true;
    return false;
  }

  final private boolean jj_3R_1589() {
    if (jj_3R_853()) return true;
    return false;
  }

  final private boolean jj_3_385() {
    if (jj_3R_432()) return true;
    return false;
  }

  final private boolean jj_3R_995() {
    if (jj_scan_token(SPLIT_PART_)) return true;
    return false;
  }

  final private boolean jj_3R_558() {
    if (jj_scan_token(INSTR_)) return true;
    return false;
  }

  final private boolean jj_3R_1444() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1507()) {
    jj_scanpos = xsp;
    if (jj_3R_1508()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1652()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_330() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_641()) {
    jj_scanpos = xsp;
    if (jj_3R_642()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_994() {
    if (jj_scan_token(REPEAT_)) return true;
    return false;
  }

  final private boolean jj_3_384() {
    if (jj_3R_431()) return true;
    return false;
  }

  final private boolean jj_3R_557() {
    if (jj_scan_token(INDEX_)) return true;
    return false;
  }

  final private boolean jj_3R_436() {
    if (jj_scan_token(ST_SIMPLIFYPRESERVETOPOLOGY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_993() {
    if (jj_scan_token(QUOTE_LITERAL_)) return true;
    return false;
  }

  final private boolean jj_3_383() {
    if (jj_3R_430()) return true;
    return false;
  }

  final private boolean jj_3R_992() {
    if (jj_scan_token(QUOTE_IDENT_)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(CAST_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(AS_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1589()) {
    jj_scanpos = xsp;
    if (jj_3R_1590()) return true;
    }
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_382() {
    if (jj_3R_429()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_557()) {
    jj_scanpos = xsp;
    if (jj_3R_558()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3_417()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1577()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_991() {
    if (jj_scan_token(PG_CLIENT_ENCODING_)) return true;
    return false;
  }

  final private boolean jj_3R_990() {
    if (jj_scan_token(MD5_)) return true;
    return false;
  }

  final private boolean jj_3_381() {
    if (jj_3R_428()) return true;
    return false;
  }

  final private boolean jj_3R_989() {
    if (jj_scan_token(ENCODE_)) return true;
    return false;
  }

  final private boolean jj_3_380() {
    if (jj_3R_427()) return true;
    return false;
  }

  final private boolean jj_3R_988() {
    if (jj_scan_token(DECODE_)) return true;
    return false;
  }

  final private boolean jj_3_379() {
    if (jj_3R_426()) return true;
    return false;
  }

  final private boolean jj_3R_987() {
    if (jj_scan_token(CHR_)) return true;
    return false;
  }

  final private boolean jj_3R_640() {
    if (jj_scan_token(FORCE_COLLECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_986() {
    if (jj_scan_token(BTRIM_)) return true;
    return false;
  }

  final private boolean jj_3_378() {
    if (jj_3R_425()) return true;
    return false;
  }

  final private boolean jj_3R_639() {
    if (jj_scan_token(ST_FORCE_COLLECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_718() {
    if (jj_scan_token(SIMPLIFY_)) return true;
    return false;
  }

  final private boolean jj_3R_985() {
    if (jj_scan_token(TYPE_)) return true;
    return false;
  }

  final private boolean jj_3R_717() {
    if (jj_scan_token(ST_SIMPLIFY_)) return true;
    return false;
  }

  final private boolean jj_3R_1437() {
    if (jj_scan_token(FIXED_)) return true;
    if (jj_3R_502()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3_377() {
    if (jj_3R_424()) return true;
    return false;
  }

  final private boolean jj_3R_984() {
    if (jj_scan_token(STORAGE_)) return true;
    return false;
  }

  final private boolean jj_3_376() {
    if (jj_3R_423()) return true;
    return false;
  }

  final private boolean jj_3R_329() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_639()) {
    jj_scanpos = xsp;
    if (jj_3R_640()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_983() {
    if (jj_scan_token(PLACING_)) return true;
    return false;
  }

  final private boolean jj_3R_435() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_717()) {
    jj_scanpos = xsp;
    if (jj_3R_718()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(NUM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_982() {
    if (jj_scan_token(OVERLAY_)) return true;
    return false;
  }

  final private boolean jj_3_375() {
    if (jj_3R_422()) return true;
    return false;
  }

  final private boolean jj_3R_981() {
    if (jj_scan_token(OCTET_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3_374() {
    if (jj_3R_421()) return true;
    return false;
  }

  final private boolean jj_3R_980() {
    if (jj_scan_token(CONVERT_)) return true;
    return false;
  }

  final private boolean jj_3R_500() {
    if (jj_3R_502()) return true;
    return false;
  }

  final private boolean jj_3_373() {
    if (jj_3R_420()) return true;
    return false;
  }

  final private boolean jj_3R_979() {
    if (jj_scan_token(CHARACTER_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(ASCII_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_499() {
    if (jj_scan_token(DEC_)) return true;
    return false;
  }

  final private boolean jj_3R_978() {
    if (jj_scan_token(CHAR_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3_372() {
    if (jj_3R_419()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(DROP_)) return true;
    if (jj_scan_token(TABLESPACE_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_498() {
    if (jj_scan_token(DECIMAL_)) return true;
    return false;
  }

  final private boolean jj_3R_977() {
    if (jj_scan_token(BIT_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3_371() {
    if (jj_3R_418()) return true;
    return false;
  }

  final private boolean jj_3R_976() {
    if (jj_scan_token(LOCALTIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_638() {
    if (jj_scan_token(FORCE_4D_)) return true;
    return false;
  }

  final private boolean jj_3_370() {
    if (jj_3R_417()) return true;
    return false;
  }

  final private boolean jj_3R_975() {
    if (jj_scan_token(LOCALTIME_)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_498()) {
    jj_scanpos = xsp;
    if (jj_3R_499()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_500()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_637() {
    if (jj_scan_token(ST_FORCE_4D_)) return true;
    return false;
  }

  final private boolean jj_3_448() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_974() {
    if (jj_scan_token(AGE_)) return true;
    return false;
  }

  final private boolean jj_3_369() {
    if (jj_3R_416()) return true;
    return false;
  }

  final private boolean jj_3R_973() {
    if (jj_scan_token(DATEPART_)) return true;
    return false;
  }

  final private boolean jj_3_368() {
    if (jj_3R_415()) return true;
    return false;
  }

  final private boolean jj_3R_434() {
    if (jj_scan_token(ST_SHORTESTLINE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_972() {
    if (jj_scan_token(DATETRUNC_)) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_637()) {
    jj_scanpos = xsp;
    if (jj_3R_638()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_367() {
    if (jj_3R_414()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(LEAST_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_808()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_447() {
    if (jj_scan_token(781)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_971() {
    if (jj_scan_token(ISFINITE_)) return true;
    return false;
  }

  final private boolean jj_3R_970() {
    if (jj_scan_token(TIMEOFDAY_)) return true;
    return false;
  }

  final private boolean jj_3_366() {
    if (jj_3R_413()) return true;
    return false;
  }

  final private boolean jj_3R_969() {
    if (jj_scan_token(CURDATE_)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(MAPCHAR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_447()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_448()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_365() {
    if (jj_3R_412()) return true;
    return false;
  }

  final private boolean jj_3R_1499() {
    if (jj_scan_token(YEAR_)) return true;
    return false;
  }

  final private boolean jj_3R_968() {
    if (jj_scan_token(CURTIME_)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(CREATE_)) return true;
    if (jj_scan_token(TABLESPACE_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1498() {
    if (jj_scan_token(SMALLMONEY_)) return true;
    return false;
  }

  final private boolean jj_3_364() {
    if (jj_3R_411()) return true;
    return false;
  }

  final private boolean jj_3R_967() {
    if (jj_scan_token(CONCAT_WORD)) return true;
    return false;
  }

  final private boolean jj_3R_1497() {
    if (jj_scan_token(MONEY_)) return true;
    return false;
  }

  final private boolean jj_3R_966() {
    if (jj_scan_token(NUM_)) return true;
    return false;
  }

  final private boolean jj_3_363() {
    if (jj_3R_410()) return true;
    return false;
  }

  final private boolean jj_3R_965() {
    if (jj_scan_token(MAPCHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_502()) return true;
    return false;
  }

  final private boolean jj_3_362() {
    if (jj_3R_409()) return true;
    return false;
  }

  final private boolean jj_3R_636() {
    if (jj_scan_token(FORCE_3DZ_)) return true;
    return false;
  }

  final private boolean jj_3R_964() {
    if (jj_scan_token(LFILL_)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(SQRT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_433() {
    if (jj_scan_token(ST_SHIFT_LONGITUDE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(NUMBER_)) return true;
    return false;
  }

  final private boolean jj_3_361() {
    if (jj_3R_408()) return true;
    return false;
  }

  final private boolean jj_3R_635() {
    if (jj_scan_token(ST_FORCE_3DZ_)) return true;
    return false;
  }

  final private boolean jj_3R_963() {
    if (jj_scan_token(INITCAP_)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(NUMERIC_)) return true;
    return false;
  }

  final private boolean jj_3R_962() {
    if (jj_scan_token(SOUNDEX_)) return true;
    return false;
  }

  final private boolean jj_3_360() {
    if (jj_3R_407()) return true;
    return false;
  }

  final private boolean jj_3R_961() {
    if (jj_scan_token(INSTR_)) return true;
    return false;
  }

  final private boolean jj_3_359() {
    if (jj_3R_406()) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_635()) {
    jj_scanpos = xsp;
    if (jj_3R_636()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_960() {
    if (jj_scan_token(LEAST_)) return true;
    return false;
  }

  final private boolean jj_3_358() {
    if (jj_3R_405()) return true;
    return false;
  }

  final private boolean jj_3R_959() {
    if (jj_scan_token(GREATEST_)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_958() {
    if (jj_scan_token(FIXED_)) return true;
    return false;
  }

  final private boolean jj_3_357() {
    if (jj_3R_404()) return true;
    return false;
  }

  final private boolean jj_3R_1588() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1436() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_1497()) {
    jj_scanpos = xsp;
    if (jj_3R_1498()) {
    jj_scanpos = xsp;
    if (jj_3R_1499()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_957() {
    if (jj_scan_token(UPPER_)) return true;
    return false;
  }

  final private boolean jj_3_356() {
    if (jj_3R_403()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(GREATEST_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_808()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_716() {
    if (jj_scan_token(SETSRID_)) return true;
    return false;
  }

  final private boolean jj_3R_956() {
    if (jj_scan_token(TRIM_)) return true;
    return false;
  }

  final private boolean jj_3R_715() {
    if (jj_scan_token(ST_SETSRID_)) return true;
    return false;
  }

  final private boolean jj_3_355() {
    if (jj_3R_402()) return true;
    return false;
  }

  final private boolean jj_3R_955() {
    if (jj_scan_token(SUBSTR_)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(LFILL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1588()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_954() {
    if (jj_scan_token(RTRIM_)) return true;
    return false;
  }

  final private boolean jj_3_354() {
    if (jj_3R_401()) return true;
    return false;
  }

  final private boolean jj_3R_953() {
    if (jj_scan_token(REPLACE_)) return true;
    return false;
  }

  final private boolean jj_3R_634() {
    if (jj_scan_token(FORCE_3DM_)) return true;
    return false;
  }

  final private boolean jj_3R_432() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_715()) {
    jj_scanpos = xsp;
    if (jj_3R_716()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_353() {
    if (jj_3R_400()) return true;
    return false;
  }

  final private boolean jj_3R_952() {
    if (jj_scan_token(LTRIM_)) return true;
    return false;
  }

  final private boolean jj_3R_633() {
    if (jj_scan_token(ST_FORCE_3DM_)) return true;
    return false;
  }

  final private boolean jj_3_352() {
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_951() {
    if (jj_scan_token(RPAD_)) return true;
    return false;
  }

  final private boolean jj_3R_950() {
    if (jj_scan_token(LPAD_)) return true;
    return false;
  }

  final private boolean jj_3_351() {
    if (jj_3R_398()) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_633()) {
    jj_scanpos = xsp;
    if (jj_3R_634()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_949() {
    if (jj_scan_token(ASCII_)) return true;
    return false;
  }

  final private boolean jj_3R_1503() {
    if (jj_scan_token(TINYTEXT_)) return true;
    return false;
  }

  final private boolean jj_3_350() {
    if (jj_3R_397()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(FLOAT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_948() {
    if (jj_scan_token(VAR_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_1667() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3_349() {
    if (jj_3R_396()) return true;
    return false;
  }

  final private boolean jj_3R_947() {
    if (jj_scan_token(VAR_POP_)) return true;
    return false;
  }

  final private boolean jj_3R_1543() {
    if (jj_scan_token(VARCHAR2_)) return true;
    return false;
  }

  final private boolean jj_3R_946() {
    if (jj_scan_token(VARIANCE_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3_348() {
    if (jj_3R_395()) return true;
    return false;
  }

  final private boolean jj_3R_1542() {
    if (jj_scan_token(VARCHAR_)) return true;
    return false;
  }

  final private boolean jj_3R_945() {
    if (jj_scan_token(VARIANCE_POP_)) return true;
    return false;
  }

  final private boolean jj_3_347() {
    if (jj_3R_394()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(INITCAP_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_944() {
    if (jj_scan_token(VARIANCE_)) return true;
    return false;
  }

  final private boolean jj_3_346() {
    if (jj_3R_393()) return true;
    return false;
  }

  final private boolean jj_3R_943() {
    if (jj_scan_token(SUM_)) return true;
    return false;
  }

  final private boolean jj_3R_714() {
    if (jj_scan_token(SETPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1502() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1542()) {
    jj_scanpos = xsp;
    if (jj_3R_1543()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_1667()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_942() {
    if (jj_scan_token(STDDEV_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3_345() {
    if (jj_3R_392()) return true;
    return false;
  }

  final private boolean jj_3R_713() {
    if (jj_scan_token(ST_SETPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_632() {
    if (jj_scan_token(FORCE_3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1439() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1502()) {
    jj_scanpos = xsp;
    if (jj_3R_1503()) return true;
    }
    return false;
  }

  final private boolean jj_3R_941() {
    if (jj_scan_token(STDDEV_POP_)) return true;
    return false;
  }

  final private boolean jj_3_344() {
    if (jj_3R_391()) return true;
    return false;
  }

  final private boolean jj_3R_631() {
    if (jj_scan_token(ST_FORCE_3D_)) return true;
    return false;
  }

  final private boolean jj_3R_561() {
    if (jj_scan_token(MODULE_)) return true;
    return false;
  }

  final private boolean jj_3R_940() {
    if (jj_scan_token(STDDEV_)) return true;
    return false;
  }

  final private boolean jj_3_343() {
    if (jj_3R_390()) return true;
    return false;
  }

  final private boolean jj_3R_560() {
    if (jj_scan_token(MOD_)) return true;
    return false;
  }

  final private boolean jj_3R_431() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_713()) {
    jj_scanpos = xsp;
    if (jj_3R_714()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_939() {
    if (jj_scan_token(MIN_)) return true;
    return false;
  }

  final private boolean jj_3R_938() {
    if (jj_scan_token(VERSION_)) return true;
    return false;
  }

  final private boolean jj_3_342() {
    if (jj_3R_389()) return true;
    return false;
  }

  final private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_631()) {
    jj_scanpos = xsp;
    if (jj_3R_632()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(SOUNDEX_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_937() {
    if (jj_scan_token(VALUE_)) return true;
    return false;
  }

  final private boolean jj_3_341() {
    if (jj_3R_388()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_560()) {
    jj_scanpos = xsp;
    if (jj_3R_561()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_936() {
    if (jj_scan_token(DATABASE_)) return true;
    return false;
  }

  final private boolean jj_3_340() {
    if (jj_3R_387()) return true;
    return false;
  }

  final private boolean jj_3R_935() {
    if (jj_scan_token(TAN_)) return true;
    return false;
  }

  final private boolean jj_3R_934() {
    if (jj_scan_token(SIN_)) return true;
    return false;
  }

  final private boolean jj_3_339() {
    if (jj_3R_386()) return true;
    return false;
  }

  final private boolean jj_3R_1440() {
    if (jj_scan_token(DATE_)) return true;
    return false;
  }

  final private boolean jj_3R_933() {
    if (jj_scan_token(RADIANS_)) return true;
    return false;
  }

  final private boolean jj_3_338() {
    if (jj_3R_385()) return true;
    return false;
  }

  final private boolean jj_3R_932() {
    if (jj_scan_token(DEGREE_)) return true;
    return false;
  }

  final private boolean jj_3_337() {
    if (jj_3R_384()) return true;
    return false;
  }

  final private boolean jj_3R_931() {
    if (jj_scan_token(COT_)) return true;
    return false;
  }

  final private boolean jj_3R_630() {
    if (jj_scan_token(FORCE_2D_)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(NOW_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_930() {
    if (jj_scan_token(COSH_)) return true;
    return false;
  }

  final private boolean jj_3_336() {
    if (jj_3R_383()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(WITHOUT_TIMEZONE_)) return true;
    return false;
  }

  final private boolean jj_3R_629() {
    if (jj_scan_token(ST_FORCE_2D_)) return true;
    return false;
  }

  final private boolean jj_3R_929() {
    if (jj_scan_token(ACOS_)) return true;
    return false;
  }

  final private boolean jj_3R_430() {
    if (jj_scan_token(ST_SETFACTOR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(WITH_TIMEZONE_)) return true;
    return false;
  }

  final private boolean jj_3_335() {
    if (jj_3R_382()) return true;
    return false;
  }

  final private boolean jj_3R_928() {
    if (jj_scan_token(COS_)) return true;
    return false;
  }

  final private boolean jj_3_334() {
    if (jj_3R_381()) return true;
    return false;
  }

  final private boolean jj_3R_1568() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_927() {
    if (jj_scan_token(ATN2_)) return true;
    return false;
  }

  final private boolean jj_3R_324() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_629()) {
    jj_scanpos = xsp;
    if (jj_3R_630()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_926() {
    if (jj_scan_token(ATAN2_)) return true;
    return false;
  }

  final private boolean jj_3_333() {
    if (jj_3R_380()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  final private boolean jj_3R_925() {
    if (jj_scan_token(ATAN_)) return true;
    return false;
  }

  final private boolean jj_3_332() {
    if (jj_3R_379()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(ROUND_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1568()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1651() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3R_924() {
    if (jj_scan_token(ASIN_)) return true;
    return false;
  }

  final private boolean jj_3_331() {
    if (jj_3R_378()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(WEEKOFYEAR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_923() {
    if (jj_scan_token(SIGN_)) return true;
    return false;
  }

  final private boolean jj_3R_1441() {
    if (jj_scan_token(TIME_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1651()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_922() {
    if (jj_scan_token(ROUND_)) return true;
    return false;
  }

  final private boolean jj_3_330() {
    if (jj_3R_377()) return true;
    return false;
  }

  final private boolean jj_3R_712() {
    if (jj_scan_token(SEGMENTIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_921() {
    if (jj_scan_token(POWER_)) return true;
    return false;
  }

  final private boolean jj_3_329() {
    if (jj_3R_376()) return true;
    return false;
  }

  final private boolean jj_3R_711() {
    if (jj_scan_token(ST_SEGMENTIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_920() {
    if (jj_scan_token(PI_)) return true;
    return false;
  }

  final private boolean jj_3_328() {
    if (jj_3R_375()) return true;
    return false;
  }

  final private boolean jj_3R_919() {
    if (jj_scan_token(LOG10_)) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(ST_FORCERHR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_918() {
    if (jj_scan_token(LOG_)) return true;
    return false;
  }

  final private boolean jj_3_327() {
    if (jj_3R_374()) return true;
    return false;
  }

  final private boolean jj_3R_429() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_711()) {
    jj_scanpos = xsp;
    if (jj_3R_712()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1566() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_917() {
    if (jj_scan_token(LN_)) return true;
    return false;
  }

  final private boolean jj_3_326() {
    if (jj_3R_373()) return true;
    return false;
  }

  final private boolean jj_3R_916() {
    if (jj_scan_token(FLOOR_)) return true;
    return false;
  }

  final private boolean jj_3R_1506() {
    if (jj_scan_token(SAMLLDATETIME_)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(TAN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_325() {
    if (jj_3R_372()) return true;
    return false;
  }

  final private boolean jj_3R_915() {
    if (jj_scan_token(EXP_)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(TIMESTAMP_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1566()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1505() {
    if (jj_scan_token(DATETIME_)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(WITHOUT_TIMEZONE_)) return true;
    return false;
  }

  final private boolean jj_3R_914() {
    if (jj_scan_token(CEILING_)) return true;
    return false;
  }

  final private boolean jj_3_324() {
    if (jj_3R_371()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(WITH_TIMEZONE_)) return true;
    return false;
  }

  final private boolean jj_3R_913() {
    if (jj_scan_token(CEIL_)) return true;
    return false;
  }

  final private boolean jj_3_323() {
    if (jj_3R_370()) return true;
    return false;
  }

  final private boolean jj_3R_912() {
    if (jj_scan_token(ABS_)) return true;
    return false;
  }

  final private boolean jj_3_322() {
    if (jj_3R_369()) return true;
    return false;
  }

  final private boolean jj_3R_911() {
    if (jj_scan_token(WEEK_)) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(ST_FIND_EXTENT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  final private boolean jj_3R_910() {
    if (jj_scan_token(WEEKOFYEAR_)) return true;
    return false;
  }

  final private boolean jj_3_321() {
    if (jj_3R_368()) return true;
    return false;
  }

  final private boolean jj_3R_909() {
    if (jj_scan_token(DAYOFMONTH_)) return true;
    return false;
  }

  final private boolean jj_3R_1668() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3_320() {
    if (jj_3R_367()) return true;
    return false;
  }

  final private boolean jj_3R_1644() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(SIN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_908() {
    if (jj_scan_token(DAYOFYEAR_)) return true;
    return false;
  }

  final private boolean jj_3_319() {
    if (jj_3R_366()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(SECOND_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_907() {
    if (jj_scan_token(DAYOFWEEK_)) return true;
    return false;
  }

  final private boolean jj_3R_1504() {
    if (jj_scan_token(TIMESTAMP_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1668()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_906() {
    if (jj_scan_token(MONTHNAME_)) return true;
    return false;
  }

  final private boolean jj_3_318() {
    if (jj_3R_365()) return true;
    return false;
  }

  final private boolean jj_3R_710() {
    if (jj_scan_token(SCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_1442() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1504()) {
    jj_scanpos = xsp;
    if (jj_3R_1505()) {
    jj_scanpos = xsp;
    if (jj_3R_1506()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_905() {
    if (jj_scan_token(DATEDIFF_)) return true;
    return false;
  }

  final private boolean jj_3_317() {
    if (jj_3R_364()) return true;
    return false;
  }

  final private boolean jj_3R_709() {
    if (jj_scan_token(ST_SCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_904() {
    if (jj_scan_token(SUBTIME_)) return true;
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(ST_FACTOR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_316() {
    if (jj_3R_363()) return true;
    return false;
  }

  final private boolean jj_3R_903() {
    if (jj_scan_token(SUBDATE_)) return true;
    return false;
  }

  final private boolean jj_3R_902() {
    if (jj_scan_token(DAYNAME_)) return true;
    return false;
  }

  final private boolean jj_3_315() {
    if (jj_3R_362()) return true;
    return false;
  }

  final private boolean jj_3R_428() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_709()) {
    jj_scanpos = xsp;
    if (jj_3R_710()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1644()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_901() {
    if (jj_scan_token(ADDTIME_)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(RADIANS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_314() {
    if (jj_3R_361()) return true;
    return false;
  }

  final private boolean jj_3R_900() {
    if (jj_scan_token(ADDDATE_)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(HOUR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_313() {
    if (jj_3R_360()) return true;
    return false;
  }

  final private boolean jj_3R_899() {
    if (jj_scan_token(NOW_)) return true;
    return false;
  }

  final private boolean jj_3R_898() {
    if (jj_scan_token(SUBSTRING_)) return true;
    return false;
  }

  final private boolean jj_3_312() {
    if (jj_3R_359()) return true;
    return false;
  }

  final private boolean jj_3R_897() {
    if (jj_scan_token(SECOND_)) return true;
    return false;
  }

  final private boolean jj_3R_628() {
    if (jj_scan_token(EXTERIORRING_)) return true;
    return false;
  }

  final private boolean jj_3_311() {
    if (jj_3R_358()) return true;
    return false;
  }

  final private boolean jj_3R_896() {
    if (jj_scan_token(MINUTE_)) return true;
    return false;
  }

  final private boolean jj_3R_627() {
    if (jj_scan_token(ST_EXTERIORRING_)) return true;
    return false;
  }

  final private boolean jj_3R_1649() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3_310() {
    if (jj_3R_357()) return true;
    return false;
  }

  final private boolean jj_3R_895() {
    if (jj_scan_token(HOUR_)) return true;
    return false;
  }

  final private boolean jj_3R_1435() {
    if (jj_scan_token(FLOAT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1649()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_894() {
    if (jj_scan_token(MONTH_)) return true;
    return false;
  }

  final private boolean jj_3_309() {
    if (jj_3R_356()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(DEGREE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_627()) {
    jj_scanpos = xsp;
    if (jj_3R_628()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_893() {
    if (jj_scan_token(LOWER_)) return true;
    return false;
  }

  final private boolean jj_3_308() {
    if (jj_3R_355()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(MINUTE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_892() {
    if (jj_scan_token(LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3_307() {
    if (jj_3R_354()) return true;
    return false;
  }

  final private boolean jj_3R_891() {
    if (jj_scan_token(YEAR_)) return true;
    return false;
  }

  final private boolean jj_3R_890() {
    if (jj_scan_token(USER_)) return true;
    return false;
  }

  final private boolean jj_3_306() {
    if (jj_3R_353()) return true;
    return false;
  }

  final private boolean jj_3R_708() {
    if (jj_scan_token(ROTATE_)) return true;
    return false;
  }

  final private boolean jj_3R_889() {
    if (jj_scan_token(TRUNCATE_)) return true;
    return false;
  }

  final private boolean jj_3_305() {
    if (jj_3R_352()) return true;
    return false;
  }

  final private boolean jj_3R_707() {
    if (jj_scan_token(ST_ROTATE_)) return true;
    return false;
  }

  final private boolean jj_3R_1648() {
    if (jj_scan_token(SERIAL_)) return true;
    return false;
  }

  final private boolean jj_3R_888() {
    if (jj_scan_token(TRUNC_)) return true;
    return false;
  }

  final private boolean jj_3R_706() {
    if (jj_scan_token(ROTATEZ_)) return true;
    return false;
  }

  final private boolean jj_3R_1492() {
    if (jj_scan_token(INT4_)) return true;
    return false;
  }

  final private boolean jj_3_304() {
    if (jj_3R_351()) return true;
    return false;
  }

  final private boolean jj_3R_887() {
    if (jj_scan_token(CURRENT_TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_705() {
    if (jj_scan_token(ST_ROTATEZ_)) return true;
    return false;
  }

  final private boolean jj_3R_1491() {
    if (jj_scan_token(INTEGER_)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(ACOS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_886() {
    if (jj_scan_token(CURRENT_TIME_)) return true;
    return false;
  }

  final private boolean jj_3_303() {
    if (jj_3R_350()) return true;
    return false;
  }

  final private boolean jj_3R_626() {
    if (jj_scan_token(EXTENT3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1490() {
    if (jj_scan_token(INT_)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(MONTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_885() {
    if (jj_scan_token(CURRENTDATE_)) return true;
    return false;
  }

  final private boolean jj_3_302() {
    if (jj_3R_349()) return true;
    return false;
  }

  final private boolean jj_3R_625() {
    if (jj_scan_token(ST_EXTENT3D_)) return true;
    return false;
  }

  final private boolean jj_3R_884() {
    if (jj_scan_token(MAX_)) return true;
    return false;
  }

  final private boolean jj_3R_427() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_705()) {
    jj_scanpos = xsp;
    if (jj_3R_706()) {
    jj_scanpos = xsp;
    if (jj_3R_707()) {
    jj_scanpos = xsp;
    if (jj_3R_708()) return true;
    }
    }
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_301() {
    if (jj_3R_348()) return true;
    return false;
  }

  final private boolean jj_3R_883() {
    if (jj_scan_token(EXTRACT_)) return true;
    return false;
  }

  final private boolean jj_3R_1432() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1490()) {
    jj_scanpos = xsp;
    if (jj_3R_1491()) {
    jj_scanpos = xsp;
    if (jj_3R_1492()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1648()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_882() {
    if (jj_scan_token(COUNT_)) return true;
    return false;
  }

  final private boolean jj_3_300() {
    if (jj_3R_347()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_625()) {
    jj_scanpos = xsp;
    if (jj_3R_626()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_881() {
    if (jj_scan_token(SQRT_)) return true;
    return false;
  }

  final private boolean jj_3_299() {
    if (jj_3R_346()) return true;
    return false;
  }

  final private boolean jj_3R_880() {
    if (jj_scan_token(AVERAGE_)) return true;
    return false;
  }

  final private boolean jj_3_298() {
    if (jj_3R_345()) return true;
    return false;
  }

  final private boolean jj_3R_879() {
    if (jj_scan_token(PASSWORD_)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(COT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_878() {
    if (jj_scan_token(SAMLLDATETIME_)) return true;
    return false;
  }

  final private boolean jj_3_297() {
    if (jj_3R_344()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(YEAR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_877() {
    if (jj_scan_token(DATETIME_)) return true;
    return false;
  }

  final private boolean jj_3_296() {
    if (jj_3R_343()) return true;
    return false;
  }

  final private boolean jj_3R_876() {
    if (jj_scan_token(WITHOUT_TIMEZONE_)) return true;
    return false;
  }

  final private boolean jj_3R_497() {
    if (jj_scan_token(FLOAT4_)) return true;
    return false;
  }

  final private boolean jj_3_295() {
    if (jj_3R_342()) return true;
    return false;
  }

  final private boolean jj_3R_875() {
    if (jj_scan_token(WITH_TIMEZONE_)) return true;
    return false;
  }

  final private boolean jj_3R_496() {
    if (jj_scan_token(SMALLFLOAT_)) return true;
    return false;
  }

  final private boolean jj_3R_624() {
    if (jj_scan_token(EXTENT_)) return true;
    return false;
  }

  final private boolean jj_3_294() {
    if (jj_3R_341()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(TIMESTAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_495() {
    if (jj_scan_token(REAL_)) return true;
    return false;
  }

  final private boolean jj_3R_623() {
    if (jj_scan_token(ST_EXTENT_)) return true;
    return false;
  }

  final private boolean jj_3R_704() {
    if (jj_scan_token(ROTATEY_)) return true;
    return false;
  }

  final private boolean jj_3_293() {
    if (jj_3R_340()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(TIME_)) return true;
    return false;
  }

  final private boolean jj_3R_703() {
    if (jj_scan_token(ST_ROTATEY_)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(COSH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_874() {
    if (jj_scan_token(QUARTER_)) return true;
    return false;
  }

  final private boolean jj_3_292() {
    if (jj_3R_339()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_495()) {
    jj_scanpos = xsp;
    if (jj_3R_496()) {
    jj_scanpos = xsp;
    if (jj_3R_497()) return true;
    }
    }
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_623()) {
    jj_scanpos = xsp;
    if (jj_3R_624()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_873() {
    if (jj_scan_token(DAY_)) return true;
    return false;
  }

  final private boolean jj_3_291() {
    if (jj_3R_338()) return true;
    return false;
  }

  final private boolean jj_3R_548() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_426() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_703()) {
    jj_scanpos = xsp;
    if (jj_3R_704()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DATE_)) return true;
    return false;
  }

  final private boolean jj_3_290() {
    if (jj_3R_337()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(CURRENT_TIMESTAMP_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_548()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_872() {
    if (jj_scan_token(POSITION_)) return true;
    return false;
  }

  final private boolean jj_3_289() {
    if (jj_3R_336()) return true;
    return false;
  }

  final private boolean jj_3R_847() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_872()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_873()) {
    jj_scanpos = xsp;
    if (jj_3R_874()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_875()) {
    jj_scanpos = xsp;
    if (jj_3R_876()) {
    jj_scanpos = xsp;
    if (jj_3R_877()) {
    jj_scanpos = xsp;
    if (jj_3R_878()) {
    jj_scanpos = xsp;
    if (jj_3R_879()) {
    jj_scanpos = xsp;
    if (jj_3R_880()) {
    jj_scanpos = xsp;
    if (jj_3R_881()) {
    jj_scanpos = xsp;
    if (jj_3R_882()) {
    jj_scanpos = xsp;
    if (jj_3R_883()) {
    jj_scanpos = xsp;
    if (jj_3R_884()) {
    jj_scanpos = xsp;
    if (jj_3R_885()) {
    jj_scanpos = xsp;
    if (jj_3R_886()) {
    jj_scanpos = xsp;
    if (jj_3R_887()) {
    jj_scanpos = xsp;
    if (jj_3R_888()) {
    jj_scanpos = xsp;
    if (jj_3R_889()) {
    jj_scanpos = xsp;
    if (jj_3R_890()) {
    jj_scanpos = xsp;
    if (jj_3R_891()) {
    jj_scanpos = xsp;
    if (jj_3R_892()) {
    jj_scanpos = xsp;
    if (jj_3R_893()) {
    jj_scanpos = xsp;
    if (jj_3R_894()) {
    jj_scanpos = xsp;
    if (jj_3R_895()) {
    jj_scanpos = xsp;
    if (jj_3R_896()) {
    jj_scanpos = xsp;
    if (jj_3R_897()) {
    jj_scanpos = xsp;
    if (jj_3R_898()) {
    jj_scanpos = xsp;
    if (jj_3R_899()) {
    jj_scanpos = xsp;
    if (jj_3R_900()) {
    jj_scanpos = xsp;
    if (jj_3R_901()) {
    jj_scanpos = xsp;
    if (jj_3R_902()) {
    jj_scanpos = xsp;
    if (jj_3R_903()) {
    jj_scanpos = xsp;
    if (jj_3R_904()) {
    jj_scanpos = xsp;
    if (jj_3R_905()) {
    jj_scanpos = xsp;
    if (jj_3R_906()) {
    jj_scanpos = xsp;
    if (jj_3R_907()) {
    jj_scanpos = xsp;
    if (jj_3R_908()) {
    jj_scanpos = xsp;
    if (jj_3R_909()) {
    jj_scanpos = xsp;
    if (jj_3R_910()) {
    jj_scanpos = xsp;
    if (jj_3R_911()) {
    jj_scanpos = xsp;
    if (jj_3R_912()) {
    jj_scanpos = xsp;
    if (jj_3R_913()) {
    jj_scanpos = xsp;
    if (jj_3R_914()) {
    jj_scanpos = xsp;
    if (jj_3R_915()) {
    jj_scanpos = xsp;
    if (jj_3R_916()) {
    jj_scanpos = xsp;
    if (jj_3R_917()) {
    jj_scanpos = xsp;
    if (jj_3R_918()) {
    jj_scanpos = xsp;
    if (jj_3R_919()) {
    jj_scanpos = xsp;
    if (jj_3R_920()) {
    jj_scanpos = xsp;
    if (jj_3R_921()) {
    jj_scanpos = xsp;
    if (jj_3R_922()) {
    jj_scanpos = xsp;
    if (jj_3R_923()) {
    jj_scanpos = xsp;
    if (jj_3R_924()) {
    jj_scanpos = xsp;
    if (jj_3R_925()) {
    jj_scanpos = xsp;
    if (jj_3R_926()) {
    jj_scanpos = xsp;
    if (jj_3R_927()) {
    jj_scanpos = xsp;
    if (jj_3R_928()) {
    jj_scanpos = xsp;
    if (jj_3R_929()) {
    jj_scanpos = xsp;
    if (jj_3R_930()) {
    jj_scanpos = xsp;
    if (jj_3R_931()) {
    jj_scanpos = xsp;
    if (jj_3R_932()) {
    jj_scanpos = xsp;
    if (jj_3R_933()) {
    jj_scanpos = xsp;
    if (jj_3R_934()) {
    jj_scanpos = xsp;
    if (jj_3R_935()) {
    jj_scanpos = xsp;
    if (jj_3R_936()) {
    jj_scanpos = xsp;
    if (jj_3R_937()) {
    jj_scanpos = xsp;
    if (jj_3R_938()) {
    jj_scanpos = xsp;
    if (jj_3R_939()) {
    jj_scanpos = xsp;
    if (jj_3R_940()) {
    jj_scanpos = xsp;
    if (jj_3R_941()) {
    jj_scanpos = xsp;
    if (jj_3R_942()) {
    jj_scanpos = xsp;
    if (jj_3R_943()) {
    jj_scanpos = xsp;
    if (jj_3R_944()) {
    jj_scanpos = xsp;
    if (jj_3R_945()) {
    jj_scanpos = xsp;
    if (jj_3R_946()) {
    jj_scanpos = xsp;
    if (jj_3R_947()) {
    jj_scanpos = xsp;
    if (jj_3R_948()) {
    jj_scanpos = xsp;
    if (jj_3R_949()) {
    jj_scanpos = xsp;
    if (jj_3R_950()) {
    jj_scanpos = xsp;
    if (jj_3R_951()) {
    jj_scanpos = xsp;
    if (jj_3R_952()) {
    jj_scanpos = xsp;
    if (jj_3R_953()) {
    jj_scanpos = xsp;
    if (jj_3R_954()) {
    jj_scanpos = xsp;
    if (jj_3R_955()) {
    jj_scanpos = xsp;
    if (jj_3R_956()) {
    jj_scanpos = xsp;
    if (jj_3R_957()) {
    jj_scanpos = xsp;
    if (jj_3R_958()) {
    jj_scanpos = xsp;
    if (jj_3R_959()) {
    jj_scanpos = xsp;
    if (jj_3R_960()) {
    jj_scanpos = xsp;
    if (jj_3R_961()) {
    jj_scanpos = xsp;
    if (jj_3R_962()) {
    jj_scanpos = xsp;
    if (jj_3R_963()) {
    jj_scanpos = xsp;
    if (jj_3R_964()) {
    jj_scanpos = xsp;
    if (jj_3R_965()) {
    jj_scanpos = xsp;
    if (jj_3R_966()) {
    jj_scanpos = xsp;
    if (jj_3R_967()) {
    jj_scanpos = xsp;
    if (jj_3R_968()) {
    jj_scanpos = xsp;
    if (jj_3R_969()) {
    jj_scanpos = xsp;
    if (jj_3R_970()) {
    jj_scanpos = xsp;
    if (jj_3R_971()) {
    jj_scanpos = xsp;
    if (jj_3R_972()) {
    jj_scanpos = xsp;
    if (jj_3R_973()) {
    jj_scanpos = xsp;
    if (jj_3R_974()) {
    jj_scanpos = xsp;
    if (jj_3R_975()) {
    jj_scanpos = xsp;
    if (jj_3R_976()) {
    jj_scanpos = xsp;
    if (jj_3R_977()) {
    jj_scanpos = xsp;
    if (jj_3R_978()) {
    jj_scanpos = xsp;
    if (jj_3R_979()) {
    jj_scanpos = xsp;
    if (jj_3R_980()) {
    jj_scanpos = xsp;
    if (jj_3R_981()) {
    jj_scanpos = xsp;
    if (jj_3R_982()) {
    jj_scanpos = xsp;
    if (jj_3R_983()) {
    jj_scanpos = xsp;
    if (jj_3R_984()) {
    jj_scanpos = xsp;
    if (jj_3R_985()) {
    jj_scanpos = xsp;
    if (jj_3R_986()) {
    jj_scanpos = xsp;
    if (jj_3R_987()) {
    jj_scanpos = xsp;
    if (jj_3R_988()) {
    jj_scanpos = xsp;
    if (jj_3R_989()) {
    jj_scanpos = xsp;
    if (jj_3R_990()) {
    jj_scanpos = xsp;
    if (jj_3R_991()) {
    jj_scanpos = xsp;
    if (jj_3R_992()) {
    jj_scanpos = xsp;
    if (jj_3R_993()) {
    jj_scanpos = xsp;
    if (jj_3R_994()) {
    jj_scanpos = xsp;
    if (jj_3R_995()) {
    jj_scanpos = xsp;
    if (jj_3R_996()) {
    jj_scanpos = xsp;
    if (jj_3R_997()) {
    jj_scanpos = xsp;
    if (jj_3R_998()) {
    jj_scanpos = xsp;
    if (jj_3R_999()) {
    jj_scanpos = xsp;
    if (jj_3R_1000()) {
    jj_scanpos = xsp;
    if (jj_3R_1001()) {
    jj_scanpos = xsp;
    if (jj_3R_1002()) {
    jj_scanpos = xsp;
    if (jj_3R_1003()) {
    jj_scanpos = xsp;
    if (jj_3R_1004()) {
    jj_scanpos = xsp;
    if (jj_3R_1005()) {
    jj_scanpos = xsp;
    if (jj_3R_1006()) {
    jj_scanpos = xsp;
    if (jj_3R_1007()) {
    jj_scanpos = xsp;
    if (jj_3R_1008()) {
    jj_scanpos = xsp;
    if (jj_3R_1009()) {
    jj_scanpos = xsp;
    if (jj_3R_1010()) {
    jj_scanpos = xsp;
    if (jj_3R_1011()) {
    jj_scanpos = xsp;
    if (jj_3R_1012()) {
    jj_scanpos = xsp;
    if (jj_3R_1013()) {
    jj_scanpos = xsp;
    if (jj_3R_1014()) {
    jj_scanpos = xsp;
    if (jj_3R_1015()) {
    jj_scanpos = xsp;
    if (jj_3R_1016()) {
    jj_scanpos = xsp;
    if (jj_3R_1017()) {
    jj_scanpos = xsp;
    if (jj_3R_1018()) {
    jj_scanpos = xsp;
    if (jj_3R_1019()) {
    jj_scanpos = xsp;
    if (jj_3R_1020()) {
    jj_scanpos = xsp;
    if (jj_3R_1021()) {
    jj_scanpos = xsp;
    if (jj_3R_1022()) {
    jj_scanpos = xsp;
    if (jj_3R_1023()) {
    jj_scanpos = xsp;
    if (jj_3R_1024()) {
    jj_scanpos = xsp;
    if (jj_3R_1025()) {
    jj_scanpos = xsp;
    if (jj_3R_1026()) {
    jj_scanpos = xsp;
    if (jj_3R_1027()) {
    jj_scanpos = xsp;
    if (jj_3R_1028()) {
    jj_scanpos = xsp;
    if (jj_3R_1029()) {
    jj_scanpos = xsp;
    if (jj_3R_1030()) {
    jj_scanpos = xsp;
    if (jj_3R_1031()) {
    jj_scanpos = xsp;
    if (jj_3R_1032()) {
    jj_scanpos = xsp;
    if (jj_3R_1033()) {
    jj_scanpos = xsp;
    if (jj_3R_1034()) {
    jj_scanpos = xsp;
    if (jj_3R_1035()) {
    jj_scanpos = xsp;
    if (jj_3R_1036()) {
    jj_scanpos = xsp;
    if (jj_3R_1037()) {
    jj_scanpos = xsp;
    if (jj_3R_1038()) {
    jj_scanpos = xsp;
    if (jj_3R_1039()) {
    jj_scanpos = xsp;
    if (jj_3R_1040()) {
    jj_scanpos = xsp;
    if (jj_3R_1041()) {
    jj_scanpos = xsp;
    if (jj_3R_1042()) {
    jj_scanpos = xsp;
    if (jj_3R_1043()) {
    jj_scanpos = xsp;
    if (jj_3R_1044()) {
    jj_scanpos = xsp;
    if (jj_3R_1045()) {
    jj_scanpos = xsp;
    if (jj_3R_1046()) {
    jj_scanpos = xsp;
    if (jj_3R_1047()) {
    jj_scanpos = xsp;
    if (jj_3R_1048()) {
    jj_scanpos = xsp;
    if (jj_3R_1049()) {
    jj_scanpos = xsp;
    if (jj_3R_1050()) {
    jj_scanpos = xsp;
    if (jj_3R_1051()) {
    jj_scanpos = xsp;
    if (jj_3R_1052()) {
    jj_scanpos = xsp;
    if (jj_3R_1053()) {
    jj_scanpos = xsp;
    if (jj_3R_1054()) {
    jj_scanpos = xsp;
    if (jj_3R_1055()) {
    jj_scanpos = xsp;
    if (jj_3R_1056()) {
    jj_scanpos = xsp;
    if (jj_3R_1057()) {
    jj_scanpos = xsp;
    if (jj_3R_1058()) {
    jj_scanpos = xsp;
    if (jj_3R_1059()) {
    jj_scanpos = xsp;
    if (jj_3R_1060()) {
    jj_scanpos = xsp;
    if (jj_3R_1061()) {
    jj_scanpos = xsp;
    if (jj_3R_1062()) {
    jj_scanpos = xsp;
    if (jj_3R_1063()) {
    jj_scanpos = xsp;
    if (jj_3R_1064()) {
    jj_scanpos = xsp;
    if (jj_3R_1065()) {
    jj_scanpos = xsp;
    if (jj_3R_1066()) {
    jj_scanpos = xsp;
    if (jj_3R_1067()) {
    jj_scanpos = xsp;
    if (jj_3R_1068()) {
    jj_scanpos = xsp;
    if (jj_3R_1069()) {
    jj_scanpos = xsp;
    if (jj_3R_1070()) {
    jj_scanpos = xsp;
    if (jj_3R_1071()) {
    jj_scanpos = xsp;
    if (jj_3R_1072()) {
    jj_scanpos = xsp;
    if (jj_3R_1073()) {
    jj_scanpos = xsp;
    if (jj_3R_1074()) {
    jj_scanpos = xsp;
    if (jj_3R_1075()) {
    jj_scanpos = xsp;
    if (jj_3R_1076()) {
    jj_scanpos = xsp;
    if (jj_3R_1077()) {
    jj_scanpos = xsp;
    if (jj_3R_1078()) {
    jj_scanpos = xsp;
    if (jj_3R_1079()) {
    jj_scanpos = xsp;
    if (jj_3R_1080()) {
    jj_scanpos = xsp;
    if (jj_3R_1081()) {
    jj_scanpos = xsp;
    if (jj_3R_1082()) {
    jj_scanpos = xsp;
    if (jj_3R_1083()) {
    jj_scanpos = xsp;
    if (jj_3R_1084()) {
    jj_scanpos = xsp;
    if (jj_3R_1085()) {
    jj_scanpos = xsp;
    if (jj_3R_1086()) {
    jj_scanpos = xsp;
    if (jj_3R_1087()) {
    jj_scanpos = xsp;
    if (jj_3R_1088()) {
    jj_scanpos = xsp;
    if (jj_3R_1089()) {
    jj_scanpos = xsp;
    if (jj_3R_1090()) {
    jj_scanpos = xsp;
    if (jj_3R_1091()) {
    jj_scanpos = xsp;
    if (jj_3R_1092()) {
    jj_scanpos = xsp;
    if (jj_3R_1093()) {
    jj_scanpos = xsp;
    if (jj_3R_1094()) {
    jj_scanpos = xsp;
    if (jj_3R_1095()) {
    jj_scanpos = xsp;
    if (jj_3R_1096()) {
    jj_scanpos = xsp;
    if (jj_3R_1097()) {
    jj_scanpos = xsp;
    if (jj_3R_1098()) {
    jj_scanpos = xsp;
    if (jj_3R_1099()) {
    jj_scanpos = xsp;
    if (jj_3R_1100()) {
    jj_scanpos = xsp;
    if (jj_3R_1101()) {
    jj_scanpos = xsp;
    if (jj_3R_1102()) {
    jj_scanpos = xsp;
    if (jj_3R_1103()) {
    jj_scanpos = xsp;
    if (jj_3R_1104()) {
    jj_scanpos = xsp;
    if (jj_3R_1105()) {
    jj_scanpos = xsp;
    if (jj_3R_1106()) {
    jj_scanpos = xsp;
    if (jj_3R_1107()) {
    jj_scanpos = xsp;
    if (jj_3R_1108()) {
    jj_scanpos = xsp;
    if (jj_3R_1109()) {
    jj_scanpos = xsp;
    if (jj_3R_1110()) {
    jj_scanpos = xsp;
    if (jj_3R_1111()) {
    jj_scanpos = xsp;
    if (jj_3R_1112()) {
    jj_scanpos = xsp;
    if (jj_3R_1113()) {
    jj_scanpos = xsp;
    if (jj_3R_1114()) {
    jj_scanpos = xsp;
    if (jj_3R_1115()) {
    jj_scanpos = xsp;
    if (jj_3R_1116()) {
    jj_scanpos = xsp;
    if (jj_3R_1117()) {
    jj_scanpos = xsp;
    if (jj_3R_1118()) {
    jj_scanpos = xsp;
    if (jj_3R_1119()) {
    jj_scanpos = xsp;
    if (jj_3R_1120()) {
    jj_scanpos = xsp;
    if (jj_3R_1121()) {
    jj_scanpos = xsp;
    if (jj_3R_1122()) {
    jj_scanpos = xsp;
    if (jj_3R_1123()) {
    jj_scanpos = xsp;
    if (jj_3R_1124()) {
    jj_scanpos = xsp;
    if (jj_3R_1125()) {
    jj_scanpos = xsp;
    if (jj_3R_1126()) {
    jj_scanpos = xsp;
    if (jj_3R_1127()) {
    jj_scanpos = xsp;
    if (jj_3R_1128()) {
    jj_scanpos = xsp;
    if (jj_3R_1129()) {
    jj_scanpos = xsp;
    if (jj_3R_1130()) {
    jj_scanpos = xsp;
    if (jj_3R_1131()) {
    jj_scanpos = xsp;
    if (jj_3R_1132()) {
    jj_scanpos = xsp;
    if (jj_3R_1133()) {
    jj_scanpos = xsp;
    if (jj_3R_1134()) {
    jj_scanpos = xsp;
    if (jj_3R_1135()) {
    jj_scanpos = xsp;
    if (jj_3R_1136()) {
    jj_scanpos = xsp;
    if (jj_3R_1137()) {
    jj_scanpos = xsp;
    if (jj_3R_1138()) {
    jj_scanpos = xsp;
    if (jj_3R_1139()) {
    jj_scanpos = xsp;
    if (jj_3R_1140()) {
    jj_scanpos = xsp;
    if (jj_3R_1141()) {
    jj_scanpos = xsp;
    if (jj_3R_1142()) {
    jj_scanpos = xsp;
    if (jj_3R_1143()) {
    jj_scanpos = xsp;
    if (jj_3R_1144()) {
    jj_scanpos = xsp;
    if (jj_3R_1145()) {
    jj_scanpos = xsp;
    if (jj_3R_1146()) {
    jj_scanpos = xsp;
    if (jj_3R_1147()) {
    jj_scanpos = xsp;
    if (jj_3R_1148()) {
    jj_scanpos = xsp;
    if (jj_3R_1149()) {
    jj_scanpos = xsp;
    if (jj_3R_1150()) {
    jj_scanpos = xsp;
    if (jj_3R_1151()) {
    jj_scanpos = xsp;
    if (jj_3R_1152()) {
    jj_scanpos = xsp;
    if (jj_3R_1153()) {
    jj_scanpos = xsp;
    if (jj_3R_1154()) {
    jj_scanpos = xsp;
    if (jj_3R_1155()) {
    jj_scanpos = xsp;
    if (jj_3R_1156()) {
    jj_scanpos = xsp;
    if (jj_3R_1157()) {
    jj_scanpos = xsp;
    if (jj_3R_1158()) {
    jj_scanpos = xsp;
    if (jj_3R_1159()) {
    jj_scanpos = xsp;
    if (jj_3R_1160()) {
    jj_scanpos = xsp;
    if (jj_3R_1161()) {
    jj_scanpos = xsp;
    if (jj_3R_1162()) {
    jj_scanpos = xsp;
    if (jj_3R_1163()) {
    jj_scanpos = xsp;
    if (jj_3R_1164()) {
    jj_scanpos = xsp;
    if (jj_3R_1165()) {
    jj_scanpos = xsp;
    if (jj_3R_1166()) {
    jj_scanpos = xsp;
    if (jj_3R_1167()) {
    jj_scanpos = xsp;
    if (jj_3R_1168()) {
    jj_scanpos = xsp;
    if (jj_3R_1169()) {
    jj_scanpos = xsp;
    if (jj_3R_1170()) {
    jj_scanpos = xsp;
    if (jj_3R_1171()) {
    jj_scanpos = xsp;
    if (jj_3R_1172()) {
    jj_scanpos = xsp;
    if (jj_3R_1173()) {
    jj_scanpos = xsp;
    if (jj_3R_1174()) {
    jj_scanpos = xsp;
    if (jj_3R_1175()) {
    jj_scanpos = xsp;
    if (jj_3R_1176()) {
    jj_scanpos = xsp;
    if (jj_3R_1177()) {
    jj_scanpos = xsp;
    if (jj_3R_1178()) {
    jj_scanpos = xsp;
    if (jj_3R_1179()) {
    jj_scanpos = xsp;
    if (jj_3R_1180()) {
    jj_scanpos = xsp;
    if (jj_3R_1181()) {
    jj_scanpos = xsp;
    if (jj_3R_1182()) {
    jj_scanpos = xsp;
    if (jj_3R_1183()) {
    jj_scanpos = xsp;
    if (jj_3R_1184()) {
    jj_scanpos = xsp;
    if (jj_3R_1185()) {
    jj_scanpos = xsp;
    if (jj_3R_1186()) {
    jj_scanpos = xsp;
    if (jj_3R_1187()) {
    jj_scanpos = xsp;
    if (jj_3R_1188()) {
    jj_scanpos = xsp;
    if (jj_3R_1189()) {
    jj_scanpos = xsp;
    if (jj_3R_1190()) {
    jj_scanpos = xsp;
    if (jj_3R_1191()) {
    jj_scanpos = xsp;
    if (jj_3R_1192()) {
    jj_scanpos = xsp;
    if (jj_3R_1193()) {
    jj_scanpos = xsp;
    if (jj_3R_1194()) {
    jj_scanpos = xsp;
    if (jj_3R_1195()) {
    jj_scanpos = xsp;
    if (jj_3R_1196()) {
    jj_scanpos = xsp;
    if (jj_3R_1197()) {
    jj_scanpos = xsp;
    if (jj_3R_1198()) {
    jj_scanpos = xsp;
    if (jj_3R_1199()) {
    jj_scanpos = xsp;
    if (jj_3R_1200()) {
    jj_scanpos = xsp;
    if (jj_3R_1201()) {
    jj_scanpos = xsp;
    if (jj_3R_1202()) {
    jj_scanpos = xsp;
    if (jj_3R_1203()) {
    jj_scanpos = xsp;
    if (jj_3R_1204()) {
    jj_scanpos = xsp;
    if (jj_3R_1205()) {
    jj_scanpos = xsp;
    if (jj_3R_1206()) {
    jj_scanpos = xsp;
    if (jj_3R_1207()) {
    jj_scanpos = xsp;
    if (jj_3R_1208()) {
    jj_scanpos = xsp;
    if (jj_3R_1209()) {
    jj_scanpos = xsp;
    if (jj_3R_1210()) {
    jj_scanpos = xsp;
    if (jj_3R_1211()) {
    jj_scanpos = xsp;
    if (jj_3R_1212()) {
    jj_scanpos = xsp;
    if (jj_3R_1213()) {
    jj_scanpos = xsp;
    if (jj_3R_1214()) {
    jj_scanpos = xsp;
    if (jj_3R_1215()) {
    jj_scanpos = xsp;
    if (jj_3R_1216()) {
    jj_scanpos = xsp;
    if (jj_3R_1217()) {
    jj_scanpos = xsp;
    if (jj_3R_1218()) {
    jj_scanpos = xsp;
    if (jj_3R_1219()) {
    jj_scanpos = xsp;
    if (jj_3R_1220()) {
    jj_scanpos = xsp;
    if (jj_3R_1221()) {
    jj_scanpos = xsp;
    if (jj_3R_1222()) {
    jj_scanpos = xsp;
    if (jj_3R_1223()) {
    jj_scanpos = xsp;
    if (jj_3R_1224()) {
    jj_scanpos = xsp;
    if (jj_3R_1225()) {
    jj_scanpos = xsp;
    if (jj_3R_1226()) {
    jj_scanpos = xsp;
    if (jj_3R_1227()) {
    jj_scanpos = xsp;
    if (jj_3R_1228()) {
    jj_scanpos = xsp;
    if (jj_3R_1229()) {
    jj_scanpos = xsp;
    if (jj_3R_1230()) {
    jj_scanpos = xsp;
    if (jj_3R_1231()) {
    jj_scanpos = xsp;
    if (jj_3R_1232()) {
    jj_scanpos = xsp;
    if (jj_3R_1233()) {
    jj_scanpos = xsp;
    if (jj_3R_1234()) {
    jj_scanpos = xsp;
    if (jj_3R_1235()) {
    jj_scanpos = xsp;
    if (jj_3R_1236()) {
    jj_scanpos = xsp;
    if (jj_3R_1237()) {
    jj_scanpos = xsp;
    if (jj_3R_1238()) {
    jj_scanpos = xsp;
    if (jj_3R_1239()) {
    jj_scanpos = xsp;
    if (jj_3R_1240()) {
    jj_scanpos = xsp;
    if (jj_3R_1241()) {
    jj_scanpos = xsp;
    if (jj_3R_1242()) {
    jj_scanpos = xsp;
    if (jj_3R_1243()) {
    jj_scanpos = xsp;
    if (jj_3R_1244()) {
    jj_scanpos = xsp;
    if (jj_3R_1245()) {
    jj_scanpos = xsp;
    if (jj_3R_1246()) {
    jj_scanpos = xsp;
    if (jj_3R_1247()) {
    jj_scanpos = xsp;
    if (jj_3R_1248()) {
    jj_scanpos = xsp;
    if (jj_3R_1249()) {
    jj_scanpos = xsp;
    if (jj_3R_1250()) {
    jj_scanpos = xsp;
    if (jj_3R_1251()) {
    jj_scanpos = xsp;
    if (jj_3R_1252()) {
    jj_scanpos = xsp;
    if (jj_3R_1253()) {
    jj_scanpos = xsp;
    if (jj_3R_1254()) {
    jj_scanpos = xsp;
    if (jj_3R_1255()) {
    jj_scanpos = xsp;
    if (jj_3R_1256()) {
    jj_scanpos = xsp;
    if (jj_3R_1257()) {
    jj_scanpos = xsp;
    if (jj_3R_1258()) {
    jj_scanpos = xsp;
    if (jj_3R_1259()) {
    jj_scanpos = xsp;
    if (jj_3R_1260()) {
    jj_scanpos = xsp;
    if (jj_3R_1261()) {
    jj_scanpos = xsp;
    if (jj_3R_1262()) {
    jj_scanpos = xsp;
    if (jj_3R_1263()) {
    jj_scanpos = xsp;
    if (jj_3R_1264()) {
    jj_scanpos = xsp;
    if (jj_3R_1265()) {
    jj_scanpos = xsp;
    if (jj_3R_1266()) {
    jj_scanpos = xsp;
    if (jj_3R_1267()) {
    jj_scanpos = xsp;
    if (jj_3R_1268()) {
    jj_scanpos = xsp;
    if (jj_3R_1269()) {
    jj_scanpos = xsp;
    if (jj_3R_1270()) {
    jj_scanpos = xsp;
    if (jj_3R_1271()) {
    jj_scanpos = xsp;
    if (jj_3R_1272()) {
    jj_scanpos = xsp;
    if (jj_3R_1273()) {
    jj_scanpos = xsp;
    if (jj_3R_1274()) {
    jj_scanpos = xsp;
    if (jj_3R_1275()) {
    jj_scanpos = xsp;
    if (jj_3R_1276()) {
    jj_scanpos = xsp;
    if (jj_3R_1277()) {
    jj_scanpos = xsp;
    if (jj_3R_1278()) {
    jj_scanpos = xsp;
    if (jj_3R_1279()) {
    jj_scanpos = xsp;
    if (jj_3R_1280()) {
    jj_scanpos = xsp;
    if (jj_3R_1281()) {
    jj_scanpos = xsp;
    if (jj_3R_1282()) {
    jj_scanpos = xsp;
    if (jj_3R_1283()) {
    jj_scanpos = xsp;
    if (jj_3R_1284()) {
    jj_scanpos = xsp;
    if (jj_3R_1285()) {
    jj_scanpos = xsp;
    if (jj_3R_1286()) {
    jj_scanpos = xsp;
    if (jj_3R_1287()) {
    jj_scanpos = xsp;
    if (jj_3R_1288()) {
    jj_scanpos = xsp;
    if (jj_3R_1289()) {
    jj_scanpos = xsp;
    if (jj_3R_1290()) {
    jj_scanpos = xsp;
    if (jj_3R_1291()) {
    jj_scanpos = xsp;
    if (jj_3R_1292()) {
    jj_scanpos = xsp;
    if (jj_3R_1293()) {
    jj_scanpos = xsp;
    if (jj_3R_1294()) {
    jj_scanpos = xsp;
    if (jj_3R_1295()) {
    jj_scanpos = xsp;
    if (jj_3R_1296()) {
    jj_scanpos = xsp;
    if (jj_3R_1297()) {
    jj_scanpos = xsp;
    if (jj_3R_1298()) {
    jj_scanpos = xsp;
    if (jj_3R_1299()) {
    jj_scanpos = xsp;
    if (jj_3R_1300()) {
    jj_scanpos = xsp;
    if (jj_3R_1301()) {
    jj_scanpos = xsp;
    if (jj_3R_1302()) {
    jj_scanpos = xsp;
    if (jj_3R_1303()) {
    jj_scanpos = xsp;
    if (jj_3R_1304()) {
    jj_scanpos = xsp;
    if (jj_3R_1305()) {
    jj_scanpos = xsp;
    if (jj_3R_1306()) {
    jj_scanpos = xsp;
    if (jj_3R_1307()) {
    jj_scanpos = xsp;
    if (jj_3R_1308()) {
    jj_scanpos = xsp;
    if (jj_3R_1309()) {
    jj_scanpos = xsp;
    if (jj_3R_1310()) {
    jj_scanpos = xsp;
    if (jj_3R_1311()) {
    jj_scanpos = xsp;
    if (jj_3R_1312()) {
    jj_scanpos = xsp;
    if (jj_3R_1313()) {
    jj_scanpos = xsp;
    if (jj_3R_1314()) {
    jj_scanpos = xsp;
    if (jj_3R_1315()) {
    jj_scanpos = xsp;
    if (jj_3R_1316()) {
    jj_scanpos = xsp;
    if (jj_3R_1317()) {
    jj_scanpos = xsp;
    if (jj_3R_1318()) {
    jj_scanpos = xsp;
    if (jj_3R_1319()) {
    jj_scanpos = xsp;
    if (jj_3R_1320()) {
    jj_scanpos = xsp;
    if (jj_3R_1321()) {
    jj_scanpos = xsp;
    if (jj_3R_1322()) {
    jj_scanpos = xsp;
    if (jj_3R_1323()) {
    jj_scanpos = xsp;
    if (jj_3R_1324()) {
    jj_scanpos = xsp;
    if (jj_3R_1325()) {
    jj_scanpos = xsp;
    if (jj_3R_1326()) {
    jj_scanpos = xsp;
    if (jj_3R_1327()) {
    jj_scanpos = xsp;
    if (jj_3R_1328()) {
    jj_scanpos = xsp;
    if (jj_3R_1329()) {
    jj_scanpos = xsp;
    if (jj_3R_1330()) {
    jj_scanpos = xsp;
    if (jj_3R_1331()) {
    jj_scanpos = xsp;
    if (jj_3R_1332()) {
    jj_scanpos = xsp;
    if (jj_3R_1333()) {
    jj_scanpos = xsp;
    if (jj_3R_1334()) {
    jj_scanpos = xsp;
    if (jj_3R_1335()) {
    jj_scanpos = xsp;
    if (jj_3R_1336()) {
    jj_scanpos = xsp;
    if (jj_3R_1337()) {
    jj_scanpos = xsp;
    if (jj_3R_1338()) {
    jj_scanpos = xsp;
    if (jj_3R_1339()) {
    jj_scanpos = xsp;
    if (jj_3R_1340()) {
    jj_scanpos = xsp;
    if (jj_3R_1341()) {
    jj_scanpos = xsp;
    if (jj_3R_1342()) {
    jj_scanpos = xsp;
    if (jj_3R_1343()) {
    jj_scanpos = xsp;
    if (jj_3R_1344()) {
    jj_scanpos = xsp;
    if (jj_3R_1345()) {
    jj_scanpos = xsp;
    if (jj_3R_1346()) {
    jj_scanpos = xsp;
    if (jj_3R_1347()) {
    jj_scanpos = xsp;
    if (jj_3R_1348()) {
    jj_scanpos = xsp;
    if (jj_3R_1349()) {
    jj_scanpos = xsp;
    if (jj_3R_1350()) {
    jj_scanpos = xsp;
    if (jj_3R_1351()) {
    jj_scanpos = xsp;
    if (jj_3R_1352()) {
    jj_scanpos = xsp;
    if (jj_3R_1353()) {
    jj_scanpos = xsp;
    if (jj_3R_1354()) {
    jj_scanpos = xsp;
    if (jj_3R_1355()) {
    jj_scanpos = xsp;
    if (jj_3R_1356()) {
    jj_scanpos = xsp;
    if (jj_3R_1357()) {
    jj_scanpos = xsp;
    if (jj_3R_1358()) {
    jj_scanpos = xsp;
    if (jj_3R_1359()) {
    jj_scanpos = xsp;
    if (jj_3R_1360()) {
    jj_scanpos = xsp;
    if (jj_3R_1361()) {
    jj_scanpos = xsp;
    if (jj_3R_1362()) {
    jj_scanpos = xsp;
    if (jj_3R_1363()) {
    jj_scanpos = xsp;
    if (jj_3R_1364()) {
    jj_scanpos = xsp;
    if (jj_3R_1365()) {
    jj_scanpos = xsp;
    if (jj_3R_1366()) {
    jj_scanpos = xsp;
    if (jj_3R_1367()) {
    jj_scanpos = xsp;
    if (jj_3R_1368()) {
    jj_scanpos = xsp;
    if (jj_3R_1369()) {
    jj_scanpos = xsp;
    if (jj_3R_1370()) {
    jj_scanpos = xsp;
    if (jj_3R_1371()) {
    jj_scanpos = xsp;
    if (jj_3R_1372()) {
    jj_scanpos = xsp;
    if (jj_3R_1373()) {
    jj_scanpos = xsp;
    if (jj_3R_1374()) {
    jj_scanpos = xsp;
    if (jj_3R_1375()) {
    jj_scanpos = xsp;
    if (jj_3R_1376()) {
    jj_scanpos = xsp;
    if (jj_3R_1377()) {
    jj_scanpos = xsp;
    if (jj_3R_1378()) {
    jj_scanpos = xsp;
    if (jj_3R_1379()) {
    jj_scanpos = xsp;
    if (jj_3R_1380()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_288() {
    if (jj_3R_335()) return true;
    return false;
  }

  final private boolean jj_3_287() {
    if (jj_3R_334()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(COS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1446() {
    if (jj_scan_token(BIGSERIAL_)) return true;
    return false;
  }

  final private boolean jj_3_286() {
    if (jj_3R_333()) return true;
    return false;
  }

  final private boolean jj_3R_622() {
    if (jj_scan_token(WORD_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3_285() {
    if (jj_3R_332()) return true;
    return false;
  }

  final private boolean jj_3R_621() {
    if (jj_scan_token(ST_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_546() {
    if (jj_scan_token(TIME_)) return true;
    return false;
  }

  final private boolean jj_3_284() {
    if (jj_3R_331()) return true;
    return false;
  }

  final private boolean jj_3R_702() {
    if (jj_scan_token(ROTATEX_)) return true;
    return false;
  }

  final private boolean jj_3R_545() {
    if (jj_scan_token(CURTIME_)) return true;
    return false;
  }

  final private boolean jj_3R_1445() {
    if (jj_scan_token(SERIAL_)) return true;
    return false;
  }

  final private boolean jj_3_283() {
    if (jj_3R_330()) return true;
    return false;
  }

  final private boolean jj_3R_701() {
    if (jj_scan_token(ST_ROTATEX_)) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_621()) {
    jj_scanpos = xsp;
    if (jj_3R_622()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_282() {
    if (jj_3R_329()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_545()) {
    jj_scanpos = xsp;
    if (jj_3R_546()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(ATAN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_281() {
    if (jj_3R_328()) return true;
    return false;
  }

  final private boolean jj_3R_425() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_701()) {
    jj_scanpos = xsp;
    if (jj_3R_702()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_280() {
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_1653() {
    if (jj_scan_token(SERIAL_)) return true;
    return false;
  }

  final private boolean jj_3_279() {
    if (jj_3R_326()) return true;
    return false;
  }

  final private boolean jj_3R_1511() {
    if (jj_scan_token(INT8_)) return true;
    return false;
  }

  final private boolean jj_3R_1510() {
    if (jj_scan_token(BIGINTEGER_)) return true;
    return false;
  }

  final private boolean jj_3_278() {
    if (jj_3R_325()) return true;
    return false;
  }

  final private boolean jj_3R_1509() {
    if (jj_scan_token(BIGINT_)) return true;
    return false;
  }

  final private boolean jj_3_277() {
    if (jj_3R_324()) return true;
    return false;
  }

  final private boolean jj_3_276() {
    if (jj_3R_323()) return true;
    return false;
  }

  final private boolean jj_3R_620() {
    if (jj_scan_token(ENVELOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_1447() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1509()) {
    jj_scanpos = xsp;
    if (jj_3R_1510()) {
    jj_scanpos = xsp;
    if (jj_3R_1511()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1653()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(ATN2_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_619() {
    if (jj_scan_token(ST_ENVELOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_547() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_275() {
    if (jj_3R_322()) return true;
    return false;
  }

  final private boolean jj_3_274() {
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_424() {
    if (jj_scan_token(ST_REVERSE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(CURRENT_TIME_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_547()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_316() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_619()) {
    jj_scanpos = xsp;
    if (jj_3R_620()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_273() {
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3_272() {
    if (jj_3R_319()) return true;
    return false;
  }

  final private boolean jj_3_271() {
    if (jj_3R_318()) return true;
    return false;
  }

  final private boolean jj_3_270() {
    if (jj_3R_317()) return true;
    return false;
  }

  final private boolean jj_3R_1494() {
    if (jj_scan_token(TINYINT_)) return true;
    return false;
  }

  final private boolean jj_3_269() {
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(CURRENTDATE_)) return true;
    return false;
  }

  final private boolean jj_3R_1664() {
    if (jj_scan_token(SERIAL_)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(ATAN2_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_700() {
    if (jj_scan_token(REMOVEPOINT_)) return true;
    return false;
  }

  final private boolean jj_3_268() {
    if (jj_3R_315()) return true;
    return false;
  }

  final private boolean jj_3R_699() {
    if (jj_scan_token(ST_REMOVEPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1541() {
    if (jj_scan_token(INT2_)) return true;
    return false;
  }

  final private boolean jj_3R_618() {
    if (jj_scan_token(ENDPOINT_)) return true;
    return false;
  }

  final private boolean jj_3_267() {
    if (jj_3R_314()) return true;
    return false;
  }

  final private boolean jj_3R_1540() {
    if (jj_scan_token(SMALLINT_)) return true;
    return false;
  }

  final private boolean jj_3R_617() {
    if (jj_scan_token(ST_ENDPOINT_)) return true;
    return false;
  }

  final private boolean jj_3_266() {
    if (jj_3R_313()) return true;
    return false;
  }

  final private boolean jj_3R_423() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_699()) {
    jj_scanpos = xsp;
    if (jj_3R_700()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_544() {
    if (jj_scan_token(DATE_)) return true;
    return false;
  }

  final private boolean jj_3_265() {
    if (jj_3R_312()) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_617()) {
    jj_scanpos = xsp;
    if (jj_3R_618()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1493() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1540()) {
    jj_scanpos = xsp;
    if (jj_3R_1541()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_1664()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_543() {
    if (jj_scan_token(CURDATE_)) return true;
    return false;
  }

  final private boolean jj_3_264() {
    if (jj_3R_311()) return true;
    return false;
  }

  final private boolean jj_3R_1433() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1493()) {
    jj_scanpos = xsp;
    if (jj_3R_1494()) return true;
    }
    return false;
  }

  final private boolean jj_3_263() {
    if (jj_3R_310()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_543()) {
    jj_scanpos = xsp;
    if (jj_3R_544()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(ASIN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_262() {
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3_261() {
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3_260() {
    if (jj_3R_307()) return true;
    return false;
  }

  final private boolean jj_3_259() {
    if (jj_3R_306()) return true;
    return false;
  }

  final private boolean jj_3R_1643() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(ST_DISTANCE_SPHEROID_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_258() {
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3R_1443() {
    if (jj_scan_token(BOOLEAN_)) return true;
    return false;
  }

  final private boolean jj_3_257() {
    if (jj_3R_304()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(SIGN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(TIME_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_422() {
    if (jj_scan_token(ST_RELATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1643()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_256() {
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3_255() {
    if (jj_3R_302()) return true;
    return false;
  }

  final private boolean jj_3_254() {
    if (jj_3R_301()) return true;
    return false;
  }

  final private boolean jj_3R_1460() {
    if (jj_scan_token(REGCLASS_)) return true;
    return false;
  }

  final private boolean jj_3_253() {
    if (jj_3R_300()) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(ST_DISTANCE_SPHERE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_252() {
    if (jj_3R_299()) return true;
    return false;
  }

  final private boolean jj_3_251() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(POWER_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(SUBTIME_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1459() {
    if (jj_scan_token(BOX3DEXTENT_)) return true;
    return false;
  }

  final private boolean jj_3_250() {
    if (jj_3R_297()) return true;
    return false;
  }

  final private boolean jj_3_249() {
    if (jj_3R_296()) return true;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_scan_token(ST_POSTGIS_GIST_SEL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_248() {
    if (jj_3R_295()) return true;
    return false;
  }

  final private boolean jj_3R_616() {
    if (jj_scan_token(DISJOINT_)) return true;
    return false;
  }

  final private boolean jj_3_247() {
    if (jj_3R_294()) return true;
    return false;
  }

  final private boolean jj_3R_1458() {
    if (jj_scan_token(BOX3D_)) return true;
    return false;
  }

  final private boolean jj_3R_615() {
    if (jj_scan_token(ST_DISJOINT_)) return true;
    return false;
  }

  final private boolean jj_3_246() {
    if (jj_3R_293()) return true;
    return false;
  }

  final private boolean jj_3_245() {
    if (jj_3R_292()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(PI_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_312() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_615()) {
    jj_scanpos = xsp;
    if (jj_3R_616()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_244() {
    if (jj_3R_291()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(SUBDATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1457() {
    if (jj_scan_token(BOX2D_)) return true;
    return false;
  }

  final private boolean jj_3R_420() {
    if (jj_scan_token(ST_POSTGIS_GIST_JOINSEL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_243() {
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3_242() {
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3_241() {
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3_240() {
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_1456() {
    if (jj_scan_token(GEOMETRY_)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(LOG10_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_239() {
    if (jj_3R_286()) return true;
    return false;
  }

  final private boolean jj_3R_614() {
    if (jj_scan_token(DIMENSION_)) return true;
    return false;
  }

  final private boolean jj_3_238() {
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_419() {
    if (jj_scan_token(ST_POLYGONFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_613() {
    if (jj_scan_token(ST_DIMENSION_)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(MONTHNAME_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_237() {
    if (jj_3R_284()) return true;
    return false;
  }

  final private boolean jj_3R_1455() {
    if (jj_scan_token(INET_)) return true;
    return false;
  }

  final private boolean jj_3_236() {
    if (jj_3R_283()) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_613()) {
    jj_scanpos = xsp;
    if (jj_3R_614()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_235() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3_234() {
    if (jj_3R_281()) return true;
    return false;
  }

  final private boolean jj_3R_1567() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_233() {
    if (jj_3R_280()) return true;
    return false;
  }

  final private boolean jj_3R_1454() {
    if (jj_scan_token(CIDR_)) return true;
    return false;
  }

  final private boolean jj_3R_418() {
    if (jj_scan_token(ST_POLYGONFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_232() {
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(LOG_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1567()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(DAYOFYEAR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_231() {
    if (jj_3R_278()) return true;
    return false;
  }

  final private boolean jj_3_230() {
    if (jj_3R_277()) return true;
    return false;
  }

  final private boolean jj_3R_1453() {
    if (jj_scan_token(MACADDR_)) return true;
    return false;
  }

  final private boolean jj_3R_612() {
    if (jj_scan_token(DIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3_229() {
    if (jj_3R_276()) return true;
    return false;
  }

  final private boolean jj_3R_611() {
    if (jj_scan_token(ST_DIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3_228() {
    if (jj_3R_275()) return true;
    return false;
  }

  final private boolean jj_3_227() {
    if (jj_3R_274()) return true;
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_scan_token(ST_POLYGON_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_611()) {
    jj_scanpos = xsp;
    if (jj_3R_612()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(DAYOFWEEK_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1655() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3_226() {
    if (jj_3R_273()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(LN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_225() {
    if (jj_3R_272()) return true;
    return false;
  }

  final private boolean jj_3R_1452() {
    if (jj_scan_token(VARBIT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1655()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_224() {
    if (jj_3R_271()) return true;
    return false;
  }

  final private boolean jj_3_223() {
    if (jj_3R_270()) return true;
    return false;
  }

  final private boolean jj_3_222() {
    if (jj_3R_269()) return true;
    return false;
  }

  final private boolean jj_3R_416() {
    if (jj_scan_token(ST_POLYFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1654() {
    if (jj_3R_1665()) return true;
    return false;
  }

  final private boolean jj_3_221() {
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(DAYOFMONTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_220() {
    if (jj_3R_267()) return true;
    return false;
  }

  final private boolean jj_3R_1451() {
    if (jj_scan_token(BIT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1654()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(FLOOR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(ST_DFULLYWITHIN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_219() {
    if (jj_3R_266()) return true;
    return false;
  }

  final private boolean jj_3_218() {
    if (jj_3R_265()) return true;
    return false;
  }

  final private boolean jj_3_217() {
    if (jj_3R_264()) return true;
    return false;
  }

  final private boolean jj_3R_1526() {
    if (jj_scan_token(VARBINARY_)) return true;
    return false;
  }

  final private boolean jj_3_216() {
    if (jj_3R_263()) return true;
    return false;
  }

  final private boolean jj_3R_415() {
    if (jj_scan_token(ST_POLYFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(DAYNAME_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1525() {
    if (jj_scan_token(RAW_)) return true;
    return false;
  }

  final private boolean jj_3_215() {
    if (jj_3R_262()) return true;
    return false;
  }

  final private boolean jj_3R_1524() {
    if (jj_scan_token(LONG_RAW_)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(EXP_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_214() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(ST_DATATYPE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1523() {
    if (jj_scan_token(IMAGE_)) return true;
    return false;
  }

  final private boolean jj_3R_1522() {
    if (jj_scan_token(BINARY_)) return true;
    return false;
  }

  final private boolean jj_3_213() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_1521() {
    if (jj_scan_token(BYTE_)) return true;
    return false;
  }

  final private boolean jj_3_212() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_1520() {
    if (jj_scan_token(BYTEA_)) return true;
    return false;
  }

  final private boolean jj_3_211() {
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_1519() {
    if (jj_scan_token(BLOB_)) return true;
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_scan_token(ST_POINT_INSIDE_CIRCLE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_210() {
    if (jj_3R_257()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(DAY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1450() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1519()) {
    jj_scanpos = xsp;
    if (jj_3R_1520()) {
    jj_scanpos = xsp;
    if (jj_3R_1521()) {
    jj_scanpos = xsp;
    if (jj_3R_1522()) {
    jj_scanpos = xsp;
    if (jj_3R_1523()) {
    jj_scanpos = xsp;
    if (jj_3R_1524()) {
    jj_scanpos = xsp;
    if (jj_3R_1525()) {
    jj_scanpos = xsp;
    if (jj_3R_1526()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_209() {
    if (jj_3R_256()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(CEILING_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1638() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_208() {
    if (jj_3R_255()) return true;
    return false;
  }

  final private boolean jj_3_207() {
    if (jj_3R_254()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_scan_token(ST_CURVETOLINE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1638()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_206() {
    if (jj_3R_253()) return true;
    return false;
  }

  final private boolean jj_3_205() {
    if (jj_3R_252()) return true;
    return false;
  }

  final private boolean jj_3R_413() {
    if (jj_scan_token(ST_POINTONSURFACE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_204() {
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(DATEDIFF_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(CEIL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_203() {
    if (jj_3R_250()) return true;
    return false;
  }

  final private boolean jj_3R_1518() {
    if (jj_scan_token(MEDIUMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1517() {
    if (jj_scan_token(LVARCHAR_)) return true;
    return false;
  }

  final private boolean jj_3_202() {
    if (jj_3R_249()) return true;
    return false;
  }

  final private boolean jj_3R_1516() {
    if (jj_scan_token(LONGTEXT_)) return true;
    return false;
  }

  final private boolean jj_3_201() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_1515() {
    if (jj_scan_token(LONG_VARCHAR_)) return true;
    return false;
  }

  final private boolean jj_3_200() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3R_1514() {
    if (jj_scan_token(LONG_)) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(ST_CROSSES_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_412() {
    if (jj_scan_token(ST_POINTN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1513() {
    if (jj_scan_token(CLOB_)) return true;
    return false;
  }

  final private boolean jj_3_199() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3R_1512() {
    if (jj_scan_token(TEXT_)) return true;
    return false;
  }

  final private boolean jj_3_198() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(ABS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(DATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1449() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1512()) {
    jj_scanpos = xsp;
    if (jj_3R_1513()) {
    jj_scanpos = xsp;
    if (jj_3R_1514()) {
    jj_scanpos = xsp;
    if (jj_3R_1515()) {
    jj_scanpos = xsp;
    if (jj_3R_1516()) {
    jj_scanpos = xsp;
    if (jj_3R_1517()) {
    jj_scanpos = xsp;
    if (jj_3R_1518()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_197() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3_196() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3_195() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3_194() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_411() {
    if (jj_scan_token(ST_POINTFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_193() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(ST_COVERS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_192() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_807() {
    if (jj_scan_token(ELSE_)) return true;
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(ADDTIME_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_191() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3_190() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_1448() {
    if (jj_scan_token(INTERVAL_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_189() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_806() {
    if (jj_scan_token(WHEN_)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(THEN_)) return true;
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_scan_token(ST_POINTFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_188() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3_187() {
    if (jj_3R_234()) return true;
    return false;
  }

  final private boolean jj_3R_559() {
    if (jj_scan_token(CASE_)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_806()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_807()) jj_scanpos = xsp;
    if (jj_scan_token(END_)) return true;
    return false;
  }

  final private boolean jj_3_186() {
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_scan_token(ST_COVEREDBY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_185() {
    if (jj_3R_232()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(ADDDATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_501()) return true;
    if (jj_scan_token(TO_)) return true;
    if (jj_3R_501()) return true;
    return false;
  }

  final private boolean jj_3R_1660() {
    if (jj_scan_token(ELSE_)) return true;
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3_184() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3_183() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_scan_token(ST_POINT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_182() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_802() {
    if (jj_scan_token(SECOND_)) return true;
    return false;
  }

  final private boolean jj_3_181() {
    if (jj_3R_228()) return true;
    return false;
  }

  final private boolean jj_3R_1659() {
    if (jj_scan_token(WHEN_)) return true;
    if (jj_3R_460()) return true;
    if (jj_scan_token(THEN_)) return true;
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_801() {
    if (jj_scan_token(MINUTE_)) return true;
    return false;
  }

  final private boolean jj_3_180() {
    if (jj_3R_227()) return true;
    return false;
  }

  final private boolean jj_3R_800() {
    if (jj_scan_token(HOUR_)) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(ST_COORDDIM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_179() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_799() {
    if (jj_scan_token(DAY_)) return true;
    return false;
  }

  final private boolean jj_3_416() {
    if (jj_scan_token(CASE_)) return true;
    if (jj_3R_460()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1659()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_1660()) jj_scanpos = xsp;
    if (jj_scan_token(END_)) return true;
    return false;
  }

  final private boolean jj_3R_798() {
    if (jj_scan_token(WEEK_)) return true;
    return false;
  }

  final private boolean jj_3_178() {
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_698() {
    if (jj_scan_token(PERIMETER3D_)) return true;
    return false;
  }

  final private boolean jj_3R_797() {
    if (jj_scan_token(MONTH_)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_416()) {
    jj_scanpos = xsp;
    if (jj_3R_559()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1381() {
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3_177() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_697() {
    if (jj_scan_token(ST_PERIMETER3D_)) return true;
    return false;
  }

  final private boolean jj_3R_796() {
    if (jj_scan_token(QUARTER_)) return true;
    return false;
  }

  final private boolean jj_3_176() {
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_795() {
    if (jj_scan_token(YEAR_)) return true;
    return false;
  }

  final private boolean jj_3_175() {
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3R_408() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_697()) {
    jj_scanpos = xsp;
    if (jj_3R_698()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_501() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_795()) {
    jj_scanpos = xsp;
    if (jj_3R_796()) {
    jj_scanpos = xsp;
    if (jj_3R_797()) {
    jj_scanpos = xsp;
    if (jj_3R_798()) {
    jj_scanpos = xsp;
    if (jj_3R_799()) {
    jj_scanpos = xsp;
    if (jj_3R_800()) {
    jj_scanpos = xsp;
    if (jj_3R_801()) {
    jj_scanpos = xsp;
    if (jj_3R_802()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_174() {
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(ST_CONVEXHULL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_173() {
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3R_852() {
    if (jj_scan_token(OFFSET_)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_172() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3_171() {
    if (jj_3R_218()) return true;
    return false;
  }

  final private boolean jj_3_170() {
    if (jj_3R_217()) return true;
    return false;
  }

  final private boolean jj_3R_696() {
    if (jj_scan_token(PERIMETER2D_)) return true;
    return false;
  }

  final private boolean jj_3_169() {
    if (jj_3R_216()) return true;
    return false;
  }

  final private boolean jj_3R_1383() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_scan_token(ST_CONTAINSPROPERLY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_695() {
    if (jj_scan_token(ST_PERIMETER2D_)) return true;
    return false;
  }

  final private boolean jj_3_168() {
    if (jj_3R_215()) return true;
    return false;
  }

  final private boolean jj_3R_1412() {
    if (jj_3R_1460()) return true;
    return false;
  }

  final private boolean jj_3R_1382() {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1411() {
    if (jj_3R_1459()) return true;
    return false;
  }

  final private boolean jj_3_167() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_407() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_695()) {
    jj_scanpos = xsp;
    if (jj_3R_696()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1410() {
    if (jj_3R_1458()) return true;
    return false;
  }

  final private boolean jj_3_166() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_1409() {
    if (jj_3R_1457()) return true;
    return false;
  }

  final private boolean jj_3R_851() {
    if (jj_scan_token(LIMIT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1382()) {
    jj_scanpos = xsp;
    if (jj_3R_1383()) return true;
    }
    return false;
  }

  final private boolean jj_3_165() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_1408() {
    if (jj_3R_1456()) return true;
    return false;
  }

  final private boolean jj_3R_1407() {
    if (jj_3R_1455()) return true;
    return false;
  }

  final private boolean jj_3_164() {
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(CONCAT_WORD)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1406() {
    if (jj_3R_1454()) return true;
    return false;
  }

  final private boolean jj_3_163() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_610() {
    if (jj_scan_token(CONTAINS_)) return true;
    return false;
  }

  final private boolean jj_3R_1405() {
    if (jj_3R_1453()) return true;
    return false;
  }

  final private boolean jj_3R_609() {
    if (jj_scan_token(ST_CONTAINS_)) return true;
    return false;
  }

  final private boolean jj_3_162() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_1404() {
    if (jj_3R_1452()) return true;
    return false;
  }

  final private boolean jj_3R_1403() {
    if (jj_3R_1451()) return true;
    return false;
  }

  final private boolean jj_3_161() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_1402() {
    if (jj_3R_1450()) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_609()) {
    jj_scanpos = xsp;
    if (jj_3R_610()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_scan_token(ST_PERIMETER_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_160() {
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_1401() {
    if (jj_3R_1449()) return true;
    return false;
  }

  final private boolean jj_3_159() {
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_1400() {
    if (jj_3R_1448()) return true;
    return false;
  }

  final private boolean jj_3R_850() {
    if (jj_scan_token(ORDER_BY_)) return true;
    if (jj_3R_1381()) return true;
    return false;
  }

  final private boolean jj_3R_1399() {
    if (jj_3R_1447()) return true;
    return false;
  }

  final private boolean jj_3_158() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_565() {
    if (jj_3R_808()) return true;
    return false;
  }

  final private boolean jj_3R_1398() {
    if (jj_3R_1446()) return true;
    return false;
  }

  final private boolean jj_3_157() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_1397() {
    if (jj_3R_1445()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_565()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_156() {
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_1396() {
    if (jj_3R_1444()) return true;
    return false;
  }

  final private boolean jj_3R_1395() {
    if (jj_3R_1443()) return true;
    return false;
  }

  final private boolean jj_3_155() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_694() {
    if (jj_scan_token(OVERLAPS_)) return true;
    return false;
  }

  final private boolean jj_3R_1394() {
    if (jj_3R_1442()) return true;
    return false;
  }

  final private boolean jj_3_154() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_693() {
    if (jj_scan_token(ST_OVERLAPS_)) return true;
    return false;
  }

  final private boolean jj_3R_1393() {
    if (jj_3R_1441()) return true;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_scan_token(ST_COMPRESSION_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1539() {
    if (jj_scan_token(HAVING_)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3_153() {
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_1392() {
    if (jj_3R_1440()) return true;
    return false;
  }

  final private boolean jj_3R_1391() {
    if (jj_3R_1439()) return true;
    return false;
  }

  final private boolean jj_3_152() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_405() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_693()) {
    jj_scanpos = xsp;
    if (jj_3R_694()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1390() {
    if (jj_3R_1438()) return true;
    return false;
  }

  final private boolean jj_3_151() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_564() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1389() {
    if (jj_3R_1437()) return true;
    return false;
  }

  final private boolean jj_3_150() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_563() {
    if (jj_scan_token(CURRENT_USER_)) return true;
    return false;
  }

  final private boolean jj_3R_1388() {
    if (jj_3R_1436()) return true;
    return false;
  }

  final private boolean jj_3R_562() {
    if (jj_scan_token(USER_)) return true;
    return false;
  }

  final private boolean jj_3R_472() {
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3_149() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_1387() {
    if (jj_3R_1435()) return true;
    return false;
  }

  final private boolean jj_3_148() {
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(ST_COMBINE_BBOX_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1386() {
    if (jj_3R_1434()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_562()) {
    jj_scanpos = xsp;
    if (jj_3R_563()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_564()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_446() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_472()) return true;
    return false;
  }

  final private boolean jj_3_147() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3_146() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_1385() {
    if (jj_3R_1433()) return true;
    return false;
  }

  final private boolean jj_3_145() {
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3R_1384() {
    if (jj_3R_1432()) return true;
    return false;
  }

  final private boolean jj_3R_862() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_472()) return true;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_scan_token(ST_ORDERINGEQUALS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_144() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_853() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1384()) {
    jj_scanpos = xsp;
    if (jj_3R_1385()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_1386()) {
    jj_scanpos = xsp;
    if (jj_3R_1387()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_1388()) {
    jj_scanpos = xsp;
    if (jj_3R_1389()) {
    jj_scanpos = xsp;
    if (jj_3R_1390()) {
    jj_scanpos = xsp;
    if (jj_3R_1391()) {
    jj_scanpos = xsp;
    if (jj_3R_1392()) {
    jj_scanpos = xsp;
    if (jj_3R_1393()) {
    jj_scanpos = xsp;
    if (jj_3R_1394()) {
    jj_scanpos = xsp;
    if (jj_3R_1395()) {
    jj_scanpos = xsp;
    if (jj_3R_1396()) {
    jj_scanpos = xsp;
    if (jj_3R_1397()) {
    jj_scanpos = xsp;
    if (jj_3R_1398()) {
    jj_scanpos = xsp;
    if (jj_3R_1399()) {
    jj_scanpos = xsp;
    if (jj_3R_1400()) {
    jj_scanpos = xsp;
    if (jj_3R_1401()) {
    jj_scanpos = xsp;
    if (jj_3R_1402()) {
    jj_scanpos = xsp;
    if (jj_3R_1403()) {
    jj_scanpos = xsp;
    if (jj_3R_1404()) {
    jj_scanpos = xsp;
    if (jj_3R_1405()) {
    jj_scanpos = xsp;
    if (jj_3R_1406()) {
    jj_scanpos = xsp;
    if (jj_3R_1407()) {
    jj_scanpos = xsp;
    if (jj_3R_1408()) {
    jj_scanpos = xsp;
    if (jj_3R_1409()) {
    jj_scanpos = xsp;
    if (jj_3R_1410()) {
    jj_scanpos = xsp;
    if (jj_3R_1411()) {
    jj_scanpos = xsp;
    if (jj_3R_1412()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_809() {
    if (jj_3R_472()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_862()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_143() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3_142() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_scan_token(ST_COLLECTIONEXTRACT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_141() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(TIMEOFDAY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_140() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3_139() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_1538() {
    if (jj_scan_token(GROUP_BY_)) return true;
    if (jj_3R_809()) return true;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_scan_token(ST_NUMPOINTS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_138() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3_137() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3_136() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(ISFINITE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1637() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_135() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_1537() {
    if (jj_scan_token(WHERE_)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3_134() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_608() {
    if (jj_scan_token(COLLECT_)) return true;
    return false;
  }

  final private boolean jj_3R_607() {
    if (jj_scan_token(ST_COLLECT_)) return true;
    return false;
  }

  final private boolean jj_3R_692() {
    if (jj_scan_token(NUMINTERIORRINGS_)) return true;
    return false;
  }

  final private boolean jj_3_133() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_691() {
    if (jj_scan_token(ST_NUMINTERIORRINGS_)) return true;
    return false;
  }

  final private boolean jj_3_132() {
    if (jj_3R_179()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(781)) return true;
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_607()) {
    jj_scanpos = xsp;
    if (jj_3R_608()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1637()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1606() {
    if (jj_scan_token(EPOCH_FROM)) return true;
    return false;
  }

  final private boolean jj_3_131() {
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_402() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_691()) {
    jj_scanpos = xsp;
    if (jj_3R_692()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1605() {
    if (jj_scan_token(MICROSECONDS_FROM)) return true;
    return false;
  }

  final private boolean jj_3_130() {
    if (jj_3R_177()) return true;
    return false;
  }

  final private boolean jj_3R_1604() {
    if (jj_scan_token(MILLENNIUM_FROM)) return true;
    return false;
  }

  final private boolean jj_3R_1695() {
    if (jj_scan_token(USING_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_129() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_1603() {
    if (jj_scan_token(MILLISECOND_FROM)) return true;
    return false;
  }

  final private boolean jj_3R_1602() {
    if (jj_scan_token(CENTURY_FROM)) return true;
    return false;
  }

  final private boolean jj_3_128() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_1694() {
    if (jj_scan_token(ON_)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_1601() {
    if (jj_scan_token(DECADE_FROM)) return true;
    return false;
  }

  final private boolean jj_3_127() {
    if (jj_3R_174()) return true;
    return false;
  }

  final private boolean jj_3R_1684() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1694()) {
    jj_scanpos = xsp;
    if (jj_3R_1695()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1600() {
    if (jj_scan_token(DOW_FROM)) return true;
    return false;
  }

  final private boolean jj_3_126() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_1599() {
    if (jj_scan_token(DOY_FROM)) return true;
    return false;
  }

  final private boolean jj_3R_1598() {
    if (jj_scan_token(SECOND_FROM)) return true;
    return false;
  }

  final private boolean jj_3_125() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_1597() {
    if (jj_scan_token(MINUTE_FROM)) return true;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_scan_token(ST_NUMINTERIORRING_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_124() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(ST_CLOSESTPOINT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1596() {
    if (jj_scan_token(HOUR_FROM)) return true;
    return false;
  }

  final private boolean jj_3_123() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_1595() {
    if (jj_scan_token(DAY_FROM)) return true;
    return false;
  }

  final private boolean jj_3R_1594() {
    if (jj_scan_token(WEEK_FROM)) return true;
    return false;
  }

  final private boolean jj_3_122() {
    if (jj_3R_169()) return true;
    return false;
  }

  final private boolean jj_3R_1593() {
    if (jj_scan_token(MONTH_FROM)) return true;
    return false;
  }

  final private boolean jj_3_121() {
    if (jj_3R_168()) return true;
    return false;
  }

  final private boolean jj_3R_1592() {
    if (jj_scan_token(QUARTER_FROM)) return true;
    return false;
  }

  final private boolean jj_3_120() {
    if (jj_3R_167()) return true;
    return false;
  }

  final private boolean jj_3R_1693() {
    if (jj_scan_token(OUTER_)) return true;
    return false;
  }

  final private boolean jj_3R_1591() {
    if (jj_scan_token(YEAR_FROM)) return true;
    return false;
  }

  final private boolean jj_3R_690() {
    if (jj_scan_token(NUMGEOMETRIES_)) return true;
    return false;
  }

  final private boolean jj_3_119() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_1692() {
    if (jj_scan_token(FULL_)) return true;
    return false;
  }

  final private boolean jj_3R_689() {
    if (jj_scan_token(ST_NUMGEOMETRIES_)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(ST_CHIP_OUT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1691() {
    if (jj_scan_token(RIGHT_)) return true;
    return false;
  }

  final private boolean jj_3_118() {
    if (jj_3R_165()) return true;
    return false;
  }

  final private boolean jj_3R_1690() {
    if (jj_scan_token(LEFT_)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(EXTRACT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1591()) {
    jj_scanpos = xsp;
    if (jj_3R_1592()) {
    jj_scanpos = xsp;
    if (jj_3R_1593()) {
    jj_scanpos = xsp;
    if (jj_3R_1594()) {
    jj_scanpos = xsp;
    if (jj_3R_1595()) {
    jj_scanpos = xsp;
    if (jj_3R_1596()) {
    jj_scanpos = xsp;
    if (jj_3R_1597()) {
    jj_scanpos = xsp;
    if (jj_3R_1598()) {
    jj_scanpos = xsp;
    if (jj_3R_1599()) {
    jj_scanpos = xsp;
    if (jj_3R_1600()) {
    jj_scanpos = xsp;
    if (jj_3R_1601()) {
    jj_scanpos = xsp;
    if (jj_3R_1602()) {
    jj_scanpos = xsp;
    if (jj_3R_1603()) {
    jj_scanpos = xsp;
    if (jj_3R_1604()) {
    jj_scanpos = xsp;
    if (jj_3R_1605()) {
    jj_scanpos = xsp;
    if (jj_3R_1606()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_117() {
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_400() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_689()) {
    jj_scanpos = xsp;
    if (jj_3R_690()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_116() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_1682() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1690()) {
    jj_scanpos = xsp;
    if (jj_3R_1691()) {
    jj_scanpos = xsp;
    if (jj_3R_1692()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1693()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN_)) return true;
    if (jj_3R_1656()) return true;
    return false;
  }

  final private boolean jj_3_115() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3_114() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_789() {
    if (jj_scan_token(ROUND_ROBIN_)) return true;
    if (jj_scan_token(ON_)) return true;
    return false;
  }

  final private boolean jj_3R_1689() {
    if (jj_scan_token(INNER_)) return true;
    return false;
  }

  final private boolean jj_3_113() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_860() {
    if (jj_scan_token(NODES_)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(ST_CHIP_IN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1681() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1689()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN_)) return true;
    if (jj_3R_1656()) return true;
    return false;
  }

  final private boolean jj_3R_859() {
    if (jj_scan_token(NODE_)) return true;
    return false;
  }

  final private boolean jj_3_112() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3_111() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_688() {
    if (jj_scan_token(NRINGS_)) return true;
    return false;
  }

  final private boolean jj_3_110() {
    if (jj_3R_157()) return true;
    return false;
  }

  final private boolean jj_3R_687() {
    if (jj_scan_token(ST_NRINGS_)) return true;
    return false;
  }

  final private boolean jj_3R_1675() {
    if (jj_scan_token(NATURAL_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1681()) {
    jj_scanpos = xsp;
    if (jj_3R_1682()) return true;
    }
    return false;
  }

  final private boolean jj_3R_788() {
    if (jj_scan_token(ON_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_859()) {
    jj_scanpos = xsp;
    if (jj_3R_860()) return true;
    }
    return false;
  }

  final private boolean jj_3_109() {
    if (jj_3R_156()) return true;
    return false;
  }

  final private boolean jj_3R_787() {
    if (jj_scan_token(REPLICATED_)) return true;
    return false;
  }

  final private boolean jj_3_108() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_687()) {
    jj_scanpos = xsp;
    if (jj_3R_688()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1688() {
    if (jj_scan_token(OUTER_)) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(ST_BYTEA_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_107() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_786() {
    if (jj_scan_token(PARTITION_WITH_)) return true;
    if (jj_scan_token(PARENT_)) return true;
    return false;
  }

  final private boolean jj_3R_1687() {
    if (jj_scan_token(FULL_)) return true;
    return false;
  }

  final private boolean jj_3_106() {
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_1686() {
    if (jj_scan_token(RIGHT_)) return true;
    return false;
  }

  final private boolean jj_3R_1685() {
    if (jj_scan_token(LEFT_)) return true;
    return false;
  }

  final private boolean jj_3R_858() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3_105() {
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3_104() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_785() {
    if (jj_scan_token(PARTITIONINGKEY_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_858()) jj_scanpos = xsp;
    if (jj_scan_token(ON_)) return true;
    return false;
  }

  final private boolean jj_3_103() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(DATETRUNC_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1680() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1685()) {
    jj_scanpos = xsp;
    if (jj_3R_1686()) {
    jj_scanpos = xsp;
    if (jj_3R_1687()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1688()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN_)) return true;
    if (jj_3R_1656()) return true;
    if (jj_3R_1684()) return true;
    return false;
  }

  final private boolean jj_3R_491() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_785()) {
    jj_scanpos = xsp;
    if (jj_3R_786()) {
    jj_scanpos = xsp;
    if (jj_3R_787()) {
    jj_scanpos = xsp;
    if (jj_3R_788()) {
    jj_scanpos = xsp;
    if (jj_3R_789()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_686() {
    if (jj_scan_token(NPOINTS_)) return true;
    return false;
  }

  final private boolean jj_3_102() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(ST_BUILDAREA_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_685() {
    if (jj_scan_token(ST_NPOINTS_)) return true;
    return false;
  }

  final private boolean jj_3_101() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_1683() {
    if (jj_scan_token(INNER_)) return true;
    return false;
  }

  final private boolean jj_3_100() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_685()) {
    jj_scanpos = xsp;
    if (jj_3R_686()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1679() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1683()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN_)) return true;
    if (jj_3R_1656()) return true;
    if (jj_3R_1684()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3_99() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3_98() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_1674() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1679()) {
    jj_scanpos = xsp;
    if (jj_3R_1680()) return true;
    }
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(DATEPART_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_96() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_scan_token(ST_BDPOLYFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1673() {
    if (jj_scan_token(CROSS_)) return true;
    if (jj_scan_token(JOIN_)) return true;
    if (jj_3R_1656()) return true;
    return false;
  }

  final private boolean jj_3_95() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_684() {
    if (jj_scan_token(NDIMS_)) return true;
    return false;
  }

  final private boolean jj_3R_1657() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1673()) {
    jj_scanpos = xsp;
    if (jj_3R_1674()) {
    jj_scanpos = xsp;
    if (jj_3R_1675()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_93() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_683() {
    if (jj_scan_token(ST_NDIMS_)) return true;
    return false;
  }

  final private boolean jj_3_92() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_1563() {
    if (jj_3R_1656()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1657()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_683()) {
    jj_scanpos = xsp;
    if (jj_3R_684()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_1607() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(ST_BDMPOLYFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_88() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(AGE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1607()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3_86() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_856() {
    if (jj_scan_token(FOREIGNKEY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    return false;
  }

  final private boolean jj_3_85() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_scan_token(ST_MULTIPOLYGONFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_84() {
    if (jj_3R_131()) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_83() {
    if (jj_3R_130()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_scan_token(ST_AZIMUTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_82() {
    if (jj_3R_129()) return true;
    return false;
  }

  final private boolean jj_3_81() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_567() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_3R_127()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(LOCALTIMESTAMP_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_567()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_scan_token(ST_MULTIPOLYFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_3R_126()) return true;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_3R_125()) return true;
    return false;
  }

  final private boolean jj_3R_1636() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3_76() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3_424() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_74() {
    if (jj_3R_121()) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_scan_token(ST_MULTIPOINTFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1564() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_1563()) return true;
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_3R_120()) return true;
    return false;
  }

  final private boolean jj_3R_566() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_scan_token(ST_ASSVG_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_424()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1636()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1556() {
    if (jj_3R_1563()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1564()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(LOCALTIME_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_566()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_780() {
    if (jj_3R_473()) return true;
    if (jj_3R_853()) return true;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_scan_token(ST_MULTIPOINTFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_1678() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(BIT_LENGTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_1635() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_445() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_scan_token(ST_MULTILINESTRINGFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3_423() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1672() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_767()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_445()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1678()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_606() {
    if (jj_scan_token(ASKML_)) return true;
    return false;
  }

  final private boolean jj_3R_784() {
    if (jj_3R_857()) return true;
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3_444() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_569() {
    if (jj_scan_token(CHARACTER_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3R_605() {
    if (jj_scan_token(ST_ASKML_)) return true;
    return false;
  }

  final private boolean jj_3R_783() {
    if (jj_3R_856()) return true;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_568() {
    if (jj_scan_token(CHAR_LENGTH_)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_782() {
    if (jj_3R_855()) return true;
    return false;
  }

  final private boolean jj_3R_1671() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_444()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_605()) {
    jj_scanpos = xsp;
    if (jj_3R_606()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3_423()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1635()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1656() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1671()) {
    jj_scanpos = xsp;
    if (jj_3R_1672()) return true;
    }
    return false;
  }

  final private boolean jj_3_58() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_568()) {
    jj_scanpos = xsp;
    if (jj_3R_569()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_781() {
    if (jj_3R_854()) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_scan_token(ST_MULTILINEFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) {
    jj_scanpos = xsp;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) {
    jj_scanpos = xsp;
    if (jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) {
    jj_scanpos = xsp;
    if (jj_3_128()) {
    jj_scanpos = xsp;
    if (jj_3_129()) {
    jj_scanpos = xsp;
    if (jj_3_130()) {
    jj_scanpos = xsp;
    if (jj_3_131()) {
    jj_scanpos = xsp;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) {
    jj_scanpos = xsp;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) {
    jj_scanpos = xsp;
    if (jj_3_138()) {
    jj_scanpos = xsp;
    if (jj_3_139()) {
    jj_scanpos = xsp;
    if (jj_3_140()) {
    jj_scanpos = xsp;
    if (jj_3_141()) {
    jj_scanpos = xsp;
    if (jj_3_142()) {
    jj_scanpos = xsp;
    if (jj_3_143()) {
    jj_scanpos = xsp;
    if (jj_3_144()) {
    jj_scanpos = xsp;
    if (jj_3_145()) {
    jj_scanpos = xsp;
    if (jj_3_146()) {
    jj_scanpos = xsp;
    if (jj_3_147()) {
    jj_scanpos = xsp;
    if (jj_3_148()) {
    jj_scanpos = xsp;
    if (jj_3_149()) {
    jj_scanpos = xsp;
    if (jj_3_150()) {
    jj_scanpos = xsp;
    if (jj_3_151()) {
    jj_scanpos = xsp;
    if (jj_3_152()) {
    jj_scanpos = xsp;
    if (jj_3_153()) {
    jj_scanpos = xsp;
    if (jj_3_154()) {
    jj_scanpos = xsp;
    if (jj_3_155()) {
    jj_scanpos = xsp;
    if (jj_3_156()) {
    jj_scanpos = xsp;
    if (jj_3_157()) {
    jj_scanpos = xsp;
    if (jj_3_158()) {
    jj_scanpos = xsp;
    if (jj_3_159()) {
    jj_scanpos = xsp;
    if (jj_3_160()) {
    jj_scanpos = xsp;
    if (jj_3_161()) {
    jj_scanpos = xsp;
    if (jj_3_162()) {
    jj_scanpos = xsp;
    if (jj_3_163()) {
    jj_scanpos = xsp;
    if (jj_3_164()) {
    jj_scanpos = xsp;
    if (jj_3_165()) {
    jj_scanpos = xsp;
    if (jj_3_166()) {
    jj_scanpos = xsp;
    if (jj_3_167()) {
    jj_scanpos = xsp;
    if (jj_3_168()) {
    jj_scanpos = xsp;
    if (jj_3_169()) {
    jj_scanpos = xsp;
    if (jj_3_170()) {
    jj_scanpos = xsp;
    if (jj_3_171()) {
    jj_scanpos = xsp;
    if (jj_3_172()) {
    jj_scanpos = xsp;
    if (jj_3_173()) {
    jj_scanpos = xsp;
    if (jj_3_174()) {
    jj_scanpos = xsp;
    if (jj_3_175()) {
    jj_scanpos = xsp;
    if (jj_3_176()) {
    jj_scanpos = xsp;
    if (jj_3_177()) {
    jj_scanpos = xsp;
    if (jj_3_178()) {
    jj_scanpos = xsp;
    if (jj_3_179()) {
    jj_scanpos = xsp;
    if (jj_3_180()) {
    jj_scanpos = xsp;
    if (jj_3_181()) {
    jj_scanpos = xsp;
    if (jj_3_182()) {
    jj_scanpos = xsp;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) {
    jj_scanpos = xsp;
    if (jj_3_185()) {
    jj_scanpos = xsp;
    if (jj_3_186()) {
    jj_scanpos = xsp;
    if (jj_3_187()) {
    jj_scanpos = xsp;
    if (jj_3_188()) {
    jj_scanpos = xsp;
    if (jj_3_189()) {
    jj_scanpos = xsp;
    if (jj_3_190()) {
    jj_scanpos = xsp;
    if (jj_3_191()) {
    jj_scanpos = xsp;
    if (jj_3_192()) {
    jj_scanpos = xsp;
    if (jj_3_193()) {
    jj_scanpos = xsp;
    if (jj_3_194()) {
    jj_scanpos = xsp;
    if (jj_3_195()) {
    jj_scanpos = xsp;
    if (jj_3_196()) {
    jj_scanpos = xsp;
    if (jj_3_197()) {
    jj_scanpos = xsp;
    if (jj_3_198()) {
    jj_scanpos = xsp;
    if (jj_3_199()) {
    jj_scanpos = xsp;
    if (jj_3_200()) {
    jj_scanpos = xsp;
    if (jj_3_201()) {
    jj_scanpos = xsp;
    if (jj_3_202()) {
    jj_scanpos = xsp;
    if (jj_3_203()) {
    jj_scanpos = xsp;
    if (jj_3_204()) {
    jj_scanpos = xsp;
    if (jj_3_205()) {
    jj_scanpos = xsp;
    if (jj_3_206()) {
    jj_scanpos = xsp;
    if (jj_3_207()) {
    jj_scanpos = xsp;
    if (jj_3_208()) {
    jj_scanpos = xsp;
    if (jj_3_209()) {
    jj_scanpos = xsp;
    if (jj_3_210()) {
    jj_scanpos = xsp;
    if (jj_3_211()) {
    jj_scanpos = xsp;
    if (jj_3_212()) {
    jj_scanpos = xsp;
    if (jj_3_213()) {
    jj_scanpos = xsp;
    if (jj_3_214()) {
    jj_scanpos = xsp;
    if (jj_3_215()) {
    jj_scanpos = xsp;
    if (jj_3_216()) {
    jj_scanpos = xsp;
    if (jj_3_217()) {
    jj_scanpos = xsp;
    if (jj_3_218()) {
    jj_scanpos = xsp;
    if (jj_3_219()) {
    jj_scanpos = xsp;
    if (jj_3_220()) {
    jj_scanpos = xsp;
    if (jj_3_221()) {
    jj_scanpos = xsp;
    if (jj_3_222()) {
    jj_scanpos = xsp;
    if (jj_3_223()) {
    jj_scanpos = xsp;
    if (jj_3_224()) {
    jj_scanpos = xsp;
    if (jj_3_225()) {
    jj_scanpos = xsp;
    if (jj_3_226()) {
    jj_scanpos = xsp;
    if (jj_3_227()) {
    jj_scanpos = xsp;
    if (jj_3_228()) {
    jj_scanpos = xsp;
    if (jj_3_229()) {
    jj_scanpos = xsp;
    if (jj_3_230()) {
    jj_scanpos = xsp;
    if (jj_3_231()) {
    jj_scanpos = xsp;
    if (jj_3_232()) {
    jj_scanpos = xsp;
    if (jj_3_233()) {
    jj_scanpos = xsp;
    if (jj_3_234()) {
    jj_scanpos = xsp;
    if (jj_3_235()) {
    jj_scanpos = xsp;
    if (jj_3_236()) {
    jj_scanpos = xsp;
    if (jj_3_237()) {
    jj_scanpos = xsp;
    if (jj_3_238()) {
    jj_scanpos = xsp;
    if (jj_3_239()) {
    jj_scanpos = xsp;
    if (jj_3_240()) {
    jj_scanpos = xsp;
    if (jj_3_241()) {
    jj_scanpos = xsp;
    if (jj_3_242()) {
    jj_scanpos = xsp;
    if (jj_3_243()) {
    jj_scanpos = xsp;
    if (jj_3_244()) {
    jj_scanpos = xsp;
    if (jj_3_245()) {
    jj_scanpos = xsp;
    if (jj_3_246()) {
    jj_scanpos = xsp;
    if (jj_3_247()) {
    jj_scanpos = xsp;
    if (jj_3_248()) {
    jj_scanpos = xsp;
    if (jj_3_249()) {
    jj_scanpos = xsp;
    if (jj_3_250()) {
    jj_scanpos = xsp;
    if (jj_3_251()) {
    jj_scanpos = xsp;
    if (jj_3_252()) {
    jj_scanpos = xsp;
    if (jj_3_253()) {
    jj_scanpos = xsp;
    if (jj_3_254()) {
    jj_scanpos = xsp;
    if (jj_3_255()) {
    jj_scanpos = xsp;
    if (jj_3_256()) {
    jj_scanpos = xsp;
    if (jj_3_257()) {
    jj_scanpos = xsp;
    if (jj_3_258()) {
    jj_scanpos = xsp;
    if (jj_3_259()) {
    jj_scanpos = xsp;
    if (jj_3_260()) {
    jj_scanpos = xsp;
    if (jj_3_261()) {
    jj_scanpos = xsp;
    if (jj_3_262()) {
    jj_scanpos = xsp;
    if (jj_3_263()) {
    jj_scanpos = xsp;
    if (jj_3_264()) {
    jj_scanpos = xsp;
    if (jj_3_265()) {
    jj_scanpos = xsp;
    if (jj_3_266()) {
    jj_scanpos = xsp;
    if (jj_3_267()) {
    jj_scanpos = xsp;
    if (jj_3_268()) {
    jj_scanpos = xsp;
    if (jj_3_269()) {
    jj_scanpos = xsp;
    if (jj_3_270()) {
    jj_scanpos = xsp;
    if (jj_3_271()) {
    jj_scanpos = xsp;
    if (jj_3_272()) {
    jj_scanpos = xsp;
    if (jj_3_273()) {
    jj_scanpos = xsp;
    if (jj_3_274()) {
    jj_scanpos = xsp;
    if (jj_3_275()) {
    jj_scanpos = xsp;
    if (jj_3_276()) {
    jj_scanpos = xsp;
    if (jj_3_277()) {
    jj_scanpos = xsp;
    if (jj_3_278()) {
    jj_scanpos = xsp;
    if (jj_3_279()) {
    jj_scanpos = xsp;
    if (jj_3_280()) {
    jj_scanpos = xsp;
    if (jj_3_281()) {
    jj_scanpos = xsp;
    if (jj_3_282()) {
    jj_scanpos = xsp;
    if (jj_3_283()) {
    jj_scanpos = xsp;
    if (jj_3_284()) {
    jj_scanpos = xsp;
    if (jj_3_285()) {
    jj_scanpos = xsp;
    if (jj_3_286()) {
    jj_scanpos = xsp;
    if (jj_3_287()) {
    jj_scanpos = xsp;
    if (jj_3_288()) {
    jj_scanpos = xsp;
    if (jj_3_289()) {
    jj_scanpos = xsp;
    if (jj_3_290()) {
    jj_scanpos = xsp;
    if (jj_3_291()) {
    jj_scanpos = xsp;
    if (jj_3_292()) {
    jj_scanpos = xsp;
    if (jj_3_293()) {
    jj_scanpos = xsp;
    if (jj_3_294()) {
    jj_scanpos = xsp;
    if (jj_3_295()) {
    jj_scanpos = xsp;
    if (jj_3_296()) {
    jj_scanpos = xsp;
    if (jj_3_297()) {
    jj_scanpos = xsp;
    if (jj_3_298()) {
    jj_scanpos = xsp;
    if (jj_3_299()) {
    jj_scanpos = xsp;
    if (jj_3_300()) {
    jj_scanpos = xsp;
    if (jj_3_301()) {
    jj_scanpos = xsp;
    if (jj_3_302()) {
    jj_scanpos = xsp;
    if (jj_3_303()) {
    jj_scanpos = xsp;
    if (jj_3_304()) {
    jj_scanpos = xsp;
    if (jj_3_305()) {
    jj_scanpos = xsp;
    if (jj_3_306()) {
    jj_scanpos = xsp;
    if (jj_3_307()) {
    jj_scanpos = xsp;
    if (jj_3_308()) {
    jj_scanpos = xsp;
    if (jj_3_309()) {
    jj_scanpos = xsp;
    if (jj_3_310()) {
    jj_scanpos = xsp;
    if (jj_3_311()) {
    jj_scanpos = xsp;
    if (jj_3_312()) {
    jj_scanpos = xsp;
    if (jj_3_313()) {
    jj_scanpos = xsp;
    if (jj_3_314()) {
    jj_scanpos = xsp;
    if (jj_3_315()) {
    jj_scanpos = xsp;
    if (jj_3_316()) {
    jj_scanpos = xsp;
    if (jj_3_317()) {
    jj_scanpos = xsp;
    if (jj_3_318()) {
    jj_scanpos = xsp;
    if (jj_3_319()) {
    jj_scanpos = xsp;
    if (jj_3_320()) {
    jj_scanpos = xsp;
    if (jj_3_321()) {
    jj_scanpos = xsp;
    if (jj_3_322()) {
    jj_scanpos = xsp;
    if (jj_3_323()) {
    jj_scanpos = xsp;
    if (jj_3_324()) {
    jj_scanpos = xsp;
    if (jj_3_325()) {
    jj_scanpos = xsp;
    if (jj_3_326()) {
    jj_scanpos = xsp;
    if (jj_3_327()) {
    jj_scanpos = xsp;
    if (jj_3_328()) {
    jj_scanpos = xsp;
    if (jj_3_329()) {
    jj_scanpos = xsp;
    if (jj_3_330()) {
    jj_scanpos = xsp;
    if (jj_3_331()) {
    jj_scanpos = xsp;
    if (jj_3_332()) {
    jj_scanpos = xsp;
    if (jj_3_333()) {
    jj_scanpos = xsp;
    if (jj_3_334()) {
    jj_scanpos = xsp;
    if (jj_3_335()) {
    jj_scanpos = xsp;
    if (jj_3_336()) {
    jj_scanpos = xsp;
    if (jj_3_337()) {
    jj_scanpos = xsp;
    if (jj_3_338()) {
    jj_scanpos = xsp;
    if (jj_3_339()) {
    jj_scanpos = xsp;
    if (jj_3_340()) {
    jj_scanpos = xsp;
    if (jj_3_341()) {
    jj_scanpos = xsp;
    if (jj_3_342()) {
    jj_scanpos = xsp;
    if (jj_3_343()) {
    jj_scanpos = xsp;
    if (jj_3_344()) {
    jj_scanpos = xsp;
    if (jj_3_345()) {
    jj_scanpos = xsp;
    if (jj_3_346()) {
    jj_scanpos = xsp;
    if (jj_3_347()) {
    jj_scanpos = xsp;
    if (jj_3_348()) {
    jj_scanpos = xsp;
    if (jj_3_349()) {
    jj_scanpos = xsp;
    if (jj_3_350()) {
    jj_scanpos = xsp;
    if (jj_3_351()) {
    jj_scanpos = xsp;
    if (jj_3_352()) {
    jj_scanpos = xsp;
    if (jj_3_353()) {
    jj_scanpos = xsp;
    if (jj_3_354()) {
    jj_scanpos = xsp;
    if (jj_3_355()) {
    jj_scanpos = xsp;
    if (jj_3_356()) {
    jj_scanpos = xsp;
    if (jj_3_357()) {
    jj_scanpos = xsp;
    if (jj_3_358()) {
    jj_scanpos = xsp;
    if (jj_3_359()) {
    jj_scanpos = xsp;
    if (jj_3_360()) {
    jj_scanpos = xsp;
    if (jj_3_361()) {
    jj_scanpos = xsp;
    if (jj_3_362()) {
    jj_scanpos = xsp;
    if (jj_3_363()) {
    jj_scanpos = xsp;
    if (jj_3_364()) {
    jj_scanpos = xsp;
    if (jj_3_365()) {
    jj_scanpos = xsp;
    if (jj_3_366()) {
    jj_scanpos = xsp;
    if (jj_3_367()) {
    jj_scanpos = xsp;
    if (jj_3_368()) {
    jj_scanpos = xsp;
    if (jj_3_369()) {
    jj_scanpos = xsp;
    if (jj_3_370()) {
    jj_scanpos = xsp;
    if (jj_3_371()) {
    jj_scanpos = xsp;
    if (jj_3_372()) {
    jj_scanpos = xsp;
    if (jj_3_373()) {
    jj_scanpos = xsp;
    if (jj_3_374()) {
    jj_scanpos = xsp;
    if (jj_3_375()) {
    jj_scanpos = xsp;
    if (jj_3_376()) {
    jj_scanpos = xsp;
    if (jj_3_377()) {
    jj_scanpos = xsp;
    if (jj_3_378()) {
    jj_scanpos = xsp;
    if (jj_3_379()) {
    jj_scanpos = xsp;
    if (jj_3_380()) {
    jj_scanpos = xsp;
    if (jj_3_381()) {
    jj_scanpos = xsp;
    if (jj_3_382()) {
    jj_scanpos = xsp;
    if (jj_3_383()) {
    jj_scanpos = xsp;
    if (jj_3_384()) {
    jj_scanpos = xsp;
    if (jj_3_385()) {
    jj_scanpos = xsp;
    if (jj_3_386()) {
    jj_scanpos = xsp;
    if (jj_3_387()) {
    jj_scanpos = xsp;
    if (jj_3_388()) {
    jj_scanpos = xsp;
    if (jj_3_389()) {
    jj_scanpos = xsp;
    if (jj_3_390()) {
    jj_scanpos = xsp;
    if (jj_3_391()) {
    jj_scanpos = xsp;
    if (jj_3_392()) {
    jj_scanpos = xsp;
    if (jj_3_393()) {
    jj_scanpos = xsp;
    if (jj_3_394()) {
    jj_scanpos = xsp;
    if (jj_3_395()) {
    jj_scanpos = xsp;
    if (jj_3_396()) {
    jj_scanpos = xsp;
    if (jj_3_397()) {
    jj_scanpos = xsp;
    if (jj_3_398()) {
    jj_scanpos = xsp;
    if (jj_3_399()) {
    jj_scanpos = xsp;
    if (jj_3_400()) {
    jj_scanpos = xsp;
    if (jj_3_401()) {
    jj_scanpos = xsp;
    if (jj_3_402()) {
    jj_scanpos = xsp;
    if (jj_3_403()) {
    jj_scanpos = xsp;
    if (jj_3_404()) {
    jj_scanpos = xsp;
    if (jj_3_405()) {
    jj_scanpos = xsp;
    if (jj_3_406()) {
    jj_scanpos = xsp;
    if (jj_3_407()) {
    jj_scanpos = xsp;
    if (jj_3_408()) {
    jj_scanpos = xsp;
    if (jj_3_409()) {
    jj_scanpos = xsp;
    if (jj_3_410()) {
    jj_scanpos = xsp;
    if (jj_3_411()) {
    jj_scanpos = xsp;
    if (jj_3_412()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_490() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_781()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_782()) {
    jj_scanpos = xsp;
    if (jj_3R_783()) {
    jj_scanpos = xsp;
    if (jj_3R_784()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_489() {
    if (jj_3R_780()) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_489()) {
    jj_scanpos = xsp;
    if (jj_3R_490()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1663() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_682() {
    if (jj_scan_token(MULTI_)) return true;
    return false;
  }

  final private boolean jj_3R_1662() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_681() {
    if (jj_scan_token(ST_MULTI_)) return true;
    return false;
  }

  final private boolean jj_3R_1536() {
    if (jj_scan_token(FROM_)) return true;
    if (jj_3R_1556()) return true;
    return false;
  }

  final private boolean jj_3R_1634() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_390() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_681()) {
    jj_scanpos = xsp;
    if (jj_3R_682()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1612() {
    if (jj_scan_token(781)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1662()) {
    jj_scanpos = xsp;
    if (jj_3R_1663()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1611() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_604() {
    if (jj_scan_token(ASHEXEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1610() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_603() {
    if (jj_scan_token(ST_ASHEXEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1555() {
    if (jj_scan_token(TABLE_)) return true;
    return false;
  }

  final private boolean jj_3R_1609() {
    if (jj_scan_token(781)) return true;
    return false;
  }

  final private boolean jj_3R_1562() {
    if (jj_scan_token(TEMP_)) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_603()) {
    jj_scanpos = xsp;
    if (jj_3R_604()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1634()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1608() {
    if (jj_scan_token(USING_)) return true;
    return false;
  }

  final private boolean jj_3R_1561() {
    if (jj_scan_token(TEMPORARY_)) return true;
    return false;
  }

  final private boolean jj_3R_1554() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1561()) {
    jj_scanpos = xsp;
    if (jj_3R_1562()) return true;
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(ST_MPOLYFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1535() {
    if (jj_scan_token(INTO_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1554()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1555()) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_857() {
    if (jj_scan_token(CHECK_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(CONVERT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1608()) {
    jj_scanpos = xsp;
    if (jj_3R_1609()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_1610()) {
    jj_scanpos = xsp;
    if (jj_3R_1611()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_1612()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_1633() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    if (jj_scan_token(ST_MPOLYFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1697() {
    if (jj_scan_token(FALSE_)) return true;
    return false;
  }

  final private boolean jj_3R_855() {
    if (jj_scan_token(PRIMARYKEY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    return false;
  }

  final private boolean jj_3R_1696() {
    if (jj_scan_token(TRUE_)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_422() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_1430() {
    if (jj_scan_token(NOT_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1429() {
    if (jj_scan_token(EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_421() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1698() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(OCTET_LENGTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_scan_token(ST_MPOINTFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_scan_token(ST_ASGML_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_421()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_422()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1633()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1428() {
    if (jj_scan_token(IS_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1698()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_863() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1428()) {
    jj_scanpos = xsp;
    if (jj_3R_1429()) {
    jj_scanpos = xsp;
    if (jj_3R_1430()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1696()) {
    jj_scanpos = xsp;
    if (jj_3R_1697()) return true;
    }
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_1613() {
    if (jj_scan_token(FOR_)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_scan_token(ST_MPOINTFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1470() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(OVERLAY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PLACING_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(FROM_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1613()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1468() {
    if (jj_3R_1527()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_766() {
    if (jj_scan_token(NOT_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1632() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_765() {
    if (jj_scan_token(EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_scan_token(ST_MLINEFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_844() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_420() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_764() {
    if (jj_scan_token(IS_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_844()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_419() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(UPDATE_)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(SET_)) return true;
    return false;
  }

  final private boolean jj_3R_470() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_764()) {
    jj_scanpos = xsp;
    if (jj_3R_765()) {
    jj_scanpos = xsp;
    if (jj_3R_766()) return true;
    }
    }
    if (jj_scan_token(NULL_)) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_scan_token(ST_ASGEOJSON_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_419()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_420()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1632()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_scan_token(ST_MLINEFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(POSITION_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(IN_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(DROP_)) return true;
    if (jj_scan_token(TABLE_)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(SEMICOLON_)) return true;
    return false;
  }

  final private boolean jj_3R_471() {
    if (jj_3R_767()) return true;
    return false;
  }

  final private boolean jj_3R_383() {
    if (jj_scan_token(ST_MINIMUMBOUNDINGCIRCLE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1615() {
    if (jj_scan_token(FOR_)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_820() {
    if (jj_scan_token(OVERLAPS_)) return true;
    return false;
  }

  final private boolean jj_3R_819() {
    if (jj_scan_token(REGEX_NOT_MATCHES_CASE_INSTV_)) return true;
    return false;
  }

  final private boolean jj_3R_1614() {
    if (jj_scan_token(FROM_)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_602() {
    if (jj_scan_token(ASEWKT_)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_818() {
    if (jj_scan_token(REGEX_MATCHES_CASE_INSTV_)) return true;
    return false;
  }

  final private boolean jj_3R_601() {
    if (jj_scan_token(ST_ASEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_817() {
    if (jj_scan_token(REGEX_NOT_MATCHES_)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(SUBSTRING_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1614()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1615()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_680() {
    if (jj_scan_token(MEM_SIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_816() {
    if (jj_scan_token(NOT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_679() {
    if (jj_scan_token(ST_MEM_SIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_601()) {
    jj_scanpos = xsp;
    if (jj_3R_602()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_760() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_816()) {
    jj_scanpos = xsp;
    if (jj_3R_817()) {
    jj_scanpos = xsp;
    if (jj_3R_818()) {
    jj_scanpos = xsp;
    if (jj_3R_819()) {
    jj_scanpos = xsp;
    if (jj_3R_820()) return true;
    }
    }
    }
    }
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_679()) {
    jj_scanpos = xsp;
    if (jj_3R_680()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_1699() {
    if (jj_scan_token(ESCAPE_)) return true;
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_815() {
    if (jj_scan_token(SIMILAR_TO_)) return true;
    return false;
  }

  final private boolean jj_3R_814() {
    if (jj_scan_token(ILIKE_)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_813() {
    if (jj_scan_token(LIKE_)) return true;
    return false;
  }

  final private boolean jj_3R_1631() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(TO_HEX_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_600() {
    if (jj_scan_token(ASEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_scan_token(ST_MEMCOLLECT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_812() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_599() {
    if (jj_scan_token(ST_ASEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_759() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_812()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_813()) {
    jj_scanpos = xsp;
    if (jj_3R_814()) {
    jj_scanpos = xsp;
    if (jj_3R_815()) return true;
    }
    }
    if (jj_3R_460()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1699()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_599()) {
    jj_scanpos = xsp;
    if (jj_3R_600()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1631()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_468() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_759()) {
    jj_scanpos = xsp;
    if (jj_3R_760()) return true;
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(QUOTE_LITERAL_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_scan_token(ST_MAXDISTANCE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_598() {
    if (jj_scan_token(AREA2D_)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(QUOTE_IDENT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_597() {
    if (jj_scan_token(ST_AREA2D_)) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_597()) {
    jj_scanpos = xsp;
    if (jj_3R_598()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1642() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_scan_token(ST_MAKEPOLYGON_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1642()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_758() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(MD5_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_467() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_758()) jj_scanpos = xsp;
    if (jj_scan_token(BETWEEN_)) return true;
    if (jj_3R_460()) return true;
    if (jj_scan_token(AND_)) return true;
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(ST_AFFINE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_494() {
    if (jj_scan_token(TABLESPACE_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(CHR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_443() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_471()) return true;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(ST_MAKEPOINTM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_791() {
    if (jj_scan_token(WITHOUT_XROWID_)) return true;
    return false;
  }

  final private boolean jj_3R_757() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_809()) return true;
    return false;
  }

  final private boolean jj_3R_790() {
    if (jj_scan_token(WITH_XROWID_)) return true;
    return false;
  }

  final private boolean jj_3R_492() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_790()) {
    jj_scanpos = xsp;
    if (jj_3R_791()) return true;
    }
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(ST_ADDPOINT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_756() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_471()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(PG_CLIENT_ENCODING_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_755() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3R_466() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_755()) jj_scanpos = xsp;
    if (jj_scan_token(IN_)) return true;
    xsp = jj_scanpos;
    if (jj_3R_756()) {
    jj_scanpos = xsp;
    if (jj_3R_757()) return true;
    }
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_794() {
    if (jj_scan_token(DROP_)) return true;
    return false;
  }

  final private boolean jj_3R_793() {
    if (jj_scan_token(DELETE_ROWS_)) return true;
    return false;
  }

  final private boolean jj_3R_1641() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_792() {
    if (jj_scan_token(PRESERVE_ROWS_)) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(ST_ADDMEASURE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_493() {
    if (jj_scan_token(ON_COMMIT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_792()) {
    jj_scanpos = xsp;
    if (jj_3R_793()) {
    jj_scanpos = xsp;
    if (jj_3R_794()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_425() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1616() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_scan_token(ST_MAKEPOINT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_425()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1641()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_840() {
    if (jj_scan_token(GIS_SAME_)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(TRANSLATE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1616()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_839() {
    if (jj_scan_token(NOT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(ST_CENTROID_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_838() {
    if (jj_scan_token(GIS_STRICT_ABOVE_)) return true;
    return false;
  }

  final private boolean jj_3R_837() {
    if (jj_scan_token(GIS_OVERLAPS_ABOVE_)) return true;
    return false;
  }

  final private boolean jj_3R_836() {
    if (jj_scan_token(ABSOLUTE_)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_494()) return true;
    return false;
  }

  final private boolean jj_3R_835() {
    if (jj_scan_token(SHIFT_RIGHT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_834() {
    if (jj_scan_token(GIS_STRICT_BELOW_)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_493()) return true;
    return false;
  }

  final private boolean jj_3R_1661() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_833() {
    if (jj_scan_token(SHIFT_LEFT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_492()) return true;
    return false;
  }

  final private boolean jj_3R_832() {
    if (jj_scan_token(GIS_OVERLAPS_RIGHT_)) return true;
    return false;
  }

  final private boolean jj_3R_808() {
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1661()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1629() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_831() {
    if (jj_scan_token(GIS_OVERLAPS_BELOW_)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_491()) return true;
    return false;
  }

  final private boolean jj_3R_830() {
    if (jj_scan_token(GIS_OVERLAPS_LEFT_)) return true;
    return false;
  }

  final private boolean jj_3R_829() {
    if (jj_scan_token(GIS_OVERLAPS_)) return true;
    return false;
  }

  final private boolean jj_3R_1617() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_828() {
    if (jj_scan_token(LESS_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(ST_BUFFER_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1629()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_827() {
    if (jj_scan_token(LESS_)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_1549() {
    if (jj_3R_851()) return true;
    return false;
  }

  final private boolean jj_3R_826() {
    if (jj_scan_token(GREATER_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_scan_token(ST_MAKEENVELOPE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(TO_ASCII_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1617()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_825() {
    if (jj_scan_token(GREATER_)) return true;
    return false;
  }

  final private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_scan_token(AS_)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_1548() {
    if (jj_3R_1537()) return true;
    return false;
  }

  final private boolean jj_3R_824() {
    if (jj_scan_token(NOT_EQUALS_2_)) return true;
    return false;
  }

  final private boolean jj_3R_1547() {
    if (jj_3R_1536()) return true;
    return false;
  }

  final private boolean jj_3R_823() {
    if (jj_scan_token(XOR_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_1558() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_822() {
    if (jj_scan_token(NOT_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1557() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3R_821() {
    if (jj_scan_token(EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_1546() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1557()) {
    jj_scanpos = xsp;
    if (jj_3R_1558()) return true;
    }
    return false;
  }

  final private boolean jj_3R_761() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_821()) {
    jj_scanpos = xsp;
    if (jj_3R_822()) {
    jj_scanpos = xsp;
    if (jj_3R_823()) {
    jj_scanpos = xsp;
    if (jj_3R_824()) {
    jj_scanpos = xsp;
    if (jj_3R_825()) {
    jj_scanpos = xsp;
    if (jj_3R_826()) {
    jj_scanpos = xsp;
    if (jj_3R_827()) {
    jj_scanpos = xsp;
    if (jj_3R_828()) {
    jj_scanpos = xsp;
    if (jj_3R_829()) {
    jj_scanpos = xsp;
    if (jj_3R_830()) {
    jj_scanpos = xsp;
    if (jj_3R_831()) {
    jj_scanpos = xsp;
    if (jj_3R_832()) {
    jj_scanpos = xsp;
    if (jj_3R_833()) {
    jj_scanpos = xsp;
    if (jj_3R_834()) {
    jj_scanpos = xsp;
    if (jj_3R_835()) {
    jj_scanpos = xsp;
    if (jj_3R_836()) {
    jj_scanpos = xsp;
    if (jj_3R_837()) {
    jj_scanpos = xsp;
    if (jj_3R_838()) {
    jj_scanpos = xsp;
    if (jj_3R_839()) {
    jj_scanpos = xsp;
    if (jj_3R_840()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(ST_BOUNDARY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(SELECT_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1546()) jj_scanpos = xsp;
    if (jj_3R_1484()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1547()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1548()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1549()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(STRPOS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(ST_M_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1630() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_596() {
    if (jj_scan_token(ASBINARY_)) return true;
    return false;
  }

  final private boolean jj_3R_595() {
    if (jj_scan_token(ST_ASBINARY_)) return true;
    return false;
  }

  final private boolean jj_3R_773() {
    if (jj_scan_token(TEMPORARY_)) return true;
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(ST_LONGESTLINE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(SPLIT_PART_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_772() {
    if (jj_scan_token(TEMP_)) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_595()) {
    jj_scanpos = xsp;
    if (jj_3R_596()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_1630()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_849() {
    if (jj_scan_token(GLOBAL_)) return true;
    return false;
  }

  final private boolean jj_3R_1480() {
    if (jj_scan_token(INET_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_848() {
    if (jj_scan_token(LOCAL_)) return true;
    return false;
  }

  final private boolean jj_3R_763() {
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_771() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_848()) {
    jj_scanpos = xsp;
    if (jj_3R_849()) return true;
    }
    return false;
  }

  final private boolean jj_3R_474() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_771()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_772()) {
    jj_scanpos = xsp;
    if (jj_3R_773()) return true;
    }
    return false;
  }

  final private boolean jj_3R_843() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_809()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_441() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_471()) return true;
    return false;
  }

  final private boolean jj_3R_1479() {
    if (jj_scan_token(CIDR_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_678() {
    if (jj_scan_token(LOCATE_BETWEEN_MEASURES_)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(CREATE_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_474()) jj_scanpos = xsp;
    if (jj_scan_token(TABLE_)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_677() {
    if (jj_scan_token(ST_LOCATE_BETWEEN_MEASURES_)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(REPEAT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_842() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_471()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1628() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_677()) {
    jj_scanpos = xsp;
    if (jj_3R_678()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1478() {
    if (jj_scan_token(MACADDR_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_866() {
    if (jj_scan_token(SOME_)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_scan_token(ST_AREA_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1628()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_865() {
    if (jj_scan_token(ANY_)) return true;
    return false;
  }

  final private boolean jj_3R_864() {
    if (jj_scan_token(ALL_)) return true;
    return false;
  }

  final private boolean jj_3_442() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_841() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_864()) {
    jj_scanpos = xsp;
    if (jj_3R_865()) {
    jj_scanpos = xsp;
    if (jj_3R_866()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_1477() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_762() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_841()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_842()) {
    jj_scanpos = xsp;
    if (jj_3R_843()) return true;
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(ENCODE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_469() {
    if (jj_3R_761()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_762()) {
    jj_scanpos = xsp;
    if (jj_3R_763()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1476() {
    if (jj_scan_token(HEXDECIMAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_676() {
    if (jj_scan_token(LOCATE_ALONG_MEASURE_)) return true;
    return false;
  }

  final private boolean jj_3R_1627() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_675() {
    if (jj_scan_token(ST_LOCATE_ALONG_MEASURE_)) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(ST_LENGTH_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1627()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_372() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_675()) {
    jj_scanpos = xsp;
    if (jj_3R_676()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1475() {
    if (jj_scan_token(BINARY_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1618() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(DECODE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1618()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1529() {
    if (jj_scan_token(FALSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1528() {
    if (jj_scan_token(TRUE_)) return true;
    return false;
  }

  final private boolean jj_3R_770() {
    if (jj_3R_847()) return true;
    return false;
  }

  final private boolean jj_3R_1469() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1528()) {
    jj_scanpos = xsp;
    if (jj_3R_1529()) return true;
    }
    return false;
  }

  final private boolean jj_3R_811() {
    if (jj_3R_863()) return true;
    return false;
  }

  final private boolean jj_3R_769() {
    if (jj_scan_token(QUOTED_IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_768() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_440() {
    if (jj_3R_470()) return true;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_scan_token(ST_LOCATEBETWEENELEVATIONS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_438() {
    if (jj_3R_468()) return true;
    return false;
  }

  final private boolean jj_3R_473() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_768()) {
    jj_scanpos = xsp;
    if (jj_3R_769()) {
    jj_scanpos = xsp;
    if (jj_3R_770()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(ST_DWITHIN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3_437() {
    if (jj_3R_467()) return true;
    return false;
  }

  final private boolean jj_3_436() {
    if (jj_3R_466()) return true;
    return false;
  }

  final private boolean jj_3R_1471() {
    if (jj_scan_token(NULL_)) return true;
    return false;
  }

  final private boolean jj_3R_810() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_436()) {
    jj_scanpos = xsp;
    if (jj_3_437()) {
    jj_scanpos = xsp;
    if (jj_3_438()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_1619() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1380() {
    if (jj_scan_token(PORT_)) return true;
    return false;
  }

  final private boolean jj_3_439() {
    if (jj_3R_469()) return true;
    return false;
  }

  final private boolean jj_3R_1379() {
    if (jj_scan_token(SPATIAL_)) return true;
    return false;
  }

  final private boolean jj_3_435() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_460()) return true;
    if (jj_scan_token(781)) return true;
    return false;
  }

  final private boolean jj_3R_1378() {
    if (jj_scan_token(Z_)) return true;
    return false;
  }

  final private boolean jj_3R_754() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_439()) {
    jj_scanpos = xsp;
    if (jj_3R_810()) {
    jj_scanpos = xsp;
    if (jj_3_440()) {
    jj_scanpos = xsp;
    if (jj_3R_811()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_scan_token(BTRIM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1619()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_674() {
    if (jj_scan_token(LINE_SUBSTRING_)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(TEXT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1377() {
    if (jj_scan_token(Y_)) return true;
    return false;
  }

  final private boolean jj_3R_753() {
    if (jj_3R_460()) return true;
    return false;
  }

  final private boolean jj_3R_673() {
    if (jj_scan_token(ST_LINE_SUBSTRING_)) return true;
    return false;
  }

  final private boolean jj_3R_594() {
    if (jj_scan_token(DISTANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1376() {
    if (jj_scan_token(X_)) return true;
    return false;
  }

  final private boolean jj_3R_752() {
    if (jj_3R_809()) return true;
    return false;
  }

  final private boolean jj_3R_593() {
    if (jj_scan_token(ST_DISTANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1375() {
    if (jj_scan_token(TRANSFORM_)) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_673()) {
    jj_scanpos = xsp;
    if (jj_3R_674()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1374() {
    if (jj_scan_token(INTERIORRINGN_)) return true;
    return false;
  }

  final private boolean jj_3R_1373() {
    if (jj_scan_token(NUMINTERIORRINGS_)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(INTERVAL_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_465() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_752()) {
    jj_scanpos = xsp;
    if (jj_3R_753()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_754()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_593()) {
    jj_scanpos = xsp;
    if (jj_3R_594()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1372() {
    if (jj_scan_token(EXTERIORRING_)) return true;
    return false;
  }

  final private boolean jj_3R_1371() {
    if (jj_scan_token(ENDPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1370() {
    if (jj_scan_token(STARTPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1369() {
    if (jj_scan_token(ISEMPTY_)) return true;
    return false;
  }

  final private boolean jj_3R_1474() {
    if (jj_scan_token(DATE_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1368() {
    if (jj_scan_token(ENVELOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_1367() {
    if (jj_scan_token(WORD_EQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(WIDTH_BUCKET_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1366() {
    if (jj_scan_token(SYMDIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1365() {
    if (jj_scan_token(INTERSECTION_)) return true;
    return false;
  }

  final private boolean jj_3R_1364() {
    if (jj_scan_token(LINEMERGE_)) return true;
    return false;
  }

  final private boolean jj_3R_749() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3R_672() {
    if (jj_scan_token(LINE_LOCATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1473() {
    if (jj_scan_token(TIME_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_592() {
    if (jj_scan_token(TRANSFORM_)) return true;
    return false;
  }

  final private boolean jj_3R_1363() {
    if (jj_scan_token(DIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_671() {
    if (jj_scan_token(ST_LINE_LOCATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_461() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_749()) jj_scanpos = xsp;
    if (jj_scan_token(EXISTS_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_471()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_591() {
    if (jj_scan_token(ST_TRANSFORM_)) return true;
    return false;
  }

  final private boolean jj_3R_1362() {
    if (jj_scan_token(ISRING_)) return true;
    return false;
  }

  final private boolean jj_3R_1361() {
    if (jj_scan_token(ISSIMPLE_)) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_671()) {
    jj_scanpos = xsp;
    if (jj_3R_672()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1360() {
    if (jj_scan_token(ISCLOSED_)) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_591()) {
    jj_scanpos = xsp;
    if (jj_3R_592()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1472() {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_1359() {
    if (jj_scan_token(ASHEXEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1358() {
    if (jj_scan_token(GEOMETRYN_)) return true;
    return false;
  }

  final private boolean jj_3R_1357() {
    if (jj_scan_token(DIMENSION_)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(SETSEED_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1356() {
    if (jj_scan_token(ISVALID_)) return true;
    return false;
  }

  final private boolean jj_3R_751() {
    if (jj_scan_token(FALSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1355() {
    if (jj_scan_token(NDIMS_)) return true;
    return false;
  }

  final private boolean jj_3R_750() {
    if (jj_scan_token(TRUE_)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(PARAM_PLACE_HOLDER)) return true;
    return false;
  }

  final private boolean jj_3R_1354() {
    if (jj_scan_token(ASKML_)) return true;
    return false;
  }

  final private boolean jj_3R_463() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_750()) {
    jj_scanpos = xsp;
    if (jj_3R_751()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1353() {
    if (jj_scan_token(CONTAINS_)) return true;
    return false;
  }

  final private boolean jj_3R_1352() {
    if (jj_scan_token(INTERSECTS_)) return true;
    return false;
  }

  final private boolean jj_3R_1351() {
    if (jj_scan_token(DISJOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_590() {
    if (jj_scan_token(ASTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_670() {
    if (jj_scan_token(LINE_INTERPOLATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1350() {
    if (jj_scan_token(WITHIN_)) return true;
    return false;
  }

  final private boolean jj_3R_589() {
    if (jj_scan_token(ST_ASTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_669() {
    if (jj_scan_token(ST_LINE_INTERPOLATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(RANDOM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1349() {
    if (jj_scan_token(SRID_)) return true;
    return false;
  }

  final private boolean jj_3R_1348() {
    if (jj_scan_token(DISTANCE_)) return true;
    return false;
  }

  final private boolean jj_3R_464() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_589()) {
    jj_scanpos = xsp;
    if (jj_3R_590()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_669()) {
    jj_scanpos = xsp;
    if (jj_3R_670()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1347() {
    if (jj_scan_token(LENGTH3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1346() {
    if (jj_scan_token(LENGTH2D_)) return true;
    return false;
  }

  final private boolean jj_3_434() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_464()) jj_scanpos = xsp;
    if (jj_3R_465()) return true;
    return false;
  }

  final private boolean jj_3R_1345() {
    if (jj_scan_token(PERIMETER3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1344() {
    if (jj_scan_token(PERIMETER2D_)) return true;
    return false;
  }

  final private boolean jj_3R_475() {
    if (jj_scan_token(UNIQUE_)) return true;
    return false;
  }

  final private boolean jj_3R_462() {
    if (jj_scan_token(NOT_)) return true;
    return false;
  }

  final private boolean jj_3R_1343() {
    if (jj_scan_token(AREA2D_)) return true;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(COALESCE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_808()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(CREATE_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_475()) jj_scanpos = xsp;
    if (jj_scan_token(INDEX_)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1342() {
    if (jj_scan_token(TRANSSCALE_)) return true;
    return false;
  }

  final private boolean jj_3_433() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_462()) jj_scanpos = xsp;
    if (jj_3R_463()) return true;
    return false;
  }

  final private boolean jj_3R_1341() {
    if (jj_scan_token(ROTATEY_)) return true;
    return false;
  }

  final private boolean jj_3_432() {
    if (jj_3R_461()) return true;
    return false;
  }

  final private boolean jj_3R_1340() {
    if (jj_scan_token(ROTATEX_)) return true;
    return false;
  }

  final private boolean jj_3R_1339() {
    if (jj_scan_token(ROTATE_)) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(TEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1338() {
    if (jj_scan_token(ROTATEZ_)) return true;
    return false;
  }

  final private boolean jj_3R_805() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_432()) {
    jj_scanpos = xsp;
    if (jj_3_433()) {
    jj_scanpos = xsp;
    if (jj_3_434()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(ST_LINETOCURVE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1337() {
    if (jj_scan_token(SCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_1336() {
    if (jj_scan_token(SNAPTOGRID_)) return true;
    return false;
  }

  final private boolean jj_3R_1626() {
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_1335() {
    if (jj_scan_token(ASEWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_1334() {
    if (jj_scan_token(ZMFLAG_)) return true;
    return false;
  }

  final private boolean jj_3R_1333() {
    if (jj_scan_token(GEOMETRYTYPE_)) return true;
    return false;
  }

  final private boolean jj_3R_1482() {
    if (jj_scan_token(783)) return true;
    if (jj_3R_853()) return true;
    return false;
  }

  final private boolean jj_3R_1332() {
    if (jj_scan_token(ADDGEOMETRYCOLUMN_)) return true;
    return false;
  }

  final private boolean jj_3R_1481() {
    if (jj_scan_token(FACTORIAL_)) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(REGEXP_REPLACE_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1626()) jj_scanpos = xsp;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1331() {
    if (jj_scan_token(GEOMFROMEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(SET_MASKLEN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(ST_LINESTRINGFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1427() {
    if (jj_3R_1480()) return true;
    return false;
  }

  final private boolean jj_3R_1330() {
    if (jj_scan_token(GEOMFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3_431() {
    if (jj_scan_token(LEFTOUTER_)) return true;
    return false;
  }

  final private boolean jj_3R_1426() {
    if (jj_3R_1479()) return true;
    return false;
  }

  final private boolean jj_3R_1329() {
    if (jj_scan_token(LINE_INTERPOLATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1425() {
    if (jj_3R_1478()) return true;
    return false;
  }

  final private boolean jj_3R_1647() {
    if (jj_scan_token(AND_)) return true;
    if (jj_3R_805()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_431()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_1328() {
    if (jj_scan_token(LINE_SUBSTRING_)) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(782)) return true;
    return false;
  }

  final private boolean jj_3R_1424() {
    if (jj_3R_1477()) return true;
    return false;
  }

  final private boolean jj_3R_1327() {
    if (jj_scan_token(LINE_LOCATE_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1423() {
    if (jj_3R_1476()) return true;
    return false;
  }

  final private boolean jj_3R_1326() {
    if (jj_scan_token(LOCATE_BETWEEN_MEASURES_)) return true;
    return false;
  }

  final private boolean jj_3R_1422() {
    if (jj_3R_1475()) return true;
    return false;
  }

  final private boolean jj_3R_1325() {
    if (jj_scan_token(LOCATE_ALONG_MEASURE_)) return true;
    return false;
  }

  final private boolean jj_3R_1421() {
    if (jj_3R_1474()) return true;
    return false;
  }

  final private boolean jj_3R_1324() {
    if (jj_scan_token(COLLECT_)) return true;
    return false;
  }

  final private boolean jj_3R_668() {
    if (jj_scan_token(LINEMERGE_)) return true;
    return false;
  }

  final private boolean jj_3R_1420() {
    if (jj_3R_1473()) return true;
    return false;
  }

  final private boolean jj_3R_1323() {
    if (jj_scan_token(EXTENT3D_)) return true;
    return false;
  }

  final private boolean jj_3R_667() {
    if (jj_scan_token(ST_LINEMERGE_)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(NETWORK_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1419() {
    if (jj_3R_1472()) return true;
    return false;
  }

  final private boolean jj_3R_1322() {
    if (jj_scan_token(EXTENT_)) return true;
    return false;
  }

  final private boolean jj_3R_1560() {
    if (jj_scan_token(OR_)) return true;
    if (jj_3R_542()) return true;
    return false;
  }

  final private boolean jj_3R_1321() {
    if (jj_scan_token(ASBINARY_)) return true;
    return false;
  }

  final private boolean jj_3_57() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_588() {
    if (jj_scan_token(REGR_SYY_)) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_667()) {
    jj_scanpos = xsp;
    if (jj_3R_668()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1320() {
    if (jj_scan_token(FORCE_COLLECTION_)) return true;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_587() {
    if (jj_scan_token(REGR_SXY_)) return true;
    return false;
  }

  final private boolean jj_3R_1319() {
    if (jj_scan_token(SEGMENTIZE_)) return true;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_586() {
    if (jj_scan_token(REGR_SXX_)) return true;
    return false;
  }

  final private boolean jj_3R_1318() {
    if (jj_scan_token(FORCE_4D_)) return true;
    return false;
  }

  final private boolean jj_3R_1418() {
    if (jj_3R_1471()) return true;
    return false;
  }

  final private boolean jj_3R_585() {
    if (jj_scan_token(REGR_SLOPE_)) return true;
    return false;
  }

  final private boolean jj_3R_1317() {
    if (jj_scan_token(FORCE_3DZ_)) return true;
    return false;
  }

  final private boolean jj_3R_1559() {
    if (jj_3R_1647()) return true;
    return false;
  }

  final private boolean jj_3R_1417() {
    if (jj_3R_1470()) return true;
    return false;
  }

  final private boolean jj_3R_584() {
    if (jj_scan_token(REGR_R2_)) return true;
    return false;
  }

  final private boolean jj_3R_1316() {
    if (jj_scan_token(FORCE_3DM_)) return true;
    return false;
  }

  final private boolean jj_3R_1416() {
    if (jj_3R_1469()) return true;
    return false;
  }

  final private boolean jj_3R_583() {
    if (jj_scan_token(REGR_INTERCEPT_)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(NETMASK_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1315() {
    if (jj_scan_token(FORCE_3D_)) return true;
    return false;
  }

  final private boolean jj_3_430() {
    if (jj_scan_token(LEFTOUTER_)) return true;
    return false;
  }

  final private boolean jj_3R_582() {
    if (jj_scan_token(REGR_COUNT_)) return true;
    return false;
  }

  final private boolean jj_3R_1314() {
    if (jj_scan_token(FORCE_2D_)) return true;
    return false;
  }

  final private boolean jj_3R_581() {
    if (jj_scan_token(REGR_AVGY_)) return true;
    return false;
  }

  final private boolean jj_3R_542() {
    if (jj_3R_805()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_430()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1559()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1313() {
    if (jj_scan_token(MULTI_)) return true;
    return false;
  }

  final private boolean jj_3R_580() {
    if (jj_scan_token(REGR_AVGX_)) return true;
    return false;
  }

  final private boolean jj_3R_1312() {
    if (jj_scan_token(SETSRID_)) return true;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(ST_LINEFROMWKB_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1415() {
    if (jj_3R_1468()) return true;
    return false;
  }

  final private boolean jj_3R_1311() {
    if (jj_scan_token(DROPBBOX_)) return true;
    return false;
  }

  final private boolean jj_3R_1310() {
    if (jj_scan_token(POSTGIS_DROPBBOX_)) return true;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_580()) {
    jj_scanpos = xsp;
    if (jj_3R_581()) {
    jj_scanpos = xsp;
    if (jj_3R_582()) {
    jj_scanpos = xsp;
    if (jj_3R_583()) {
    jj_scanpos = xsp;
    if (jj_3R_584()) {
    jj_scanpos = xsp;
    if (jj_3R_585()) {
    jj_scanpos = xsp;
    if (jj_3R_586()) {
    jj_scanpos = xsp;
    if (jj_3R_587()) {
    jj_scanpos = xsp;
    if (jj_3R_588()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1309() {
    if (jj_scan_token(NUMGEOMETRIES_)) return true;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_1308() {
    if (jj_scan_token(MEM_SIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(MASKLEN_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1550() {
    if (jj_3R_1560()) return true;
    return false;
  }

  final private boolean jj_3R_1307() {
    if (jj_scan_token(NRINGS_)) return true;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_1306() {
    if (jj_scan_token(NPOINTS_)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_542()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_1550()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_1305() {
    if (jj_scan_token(REMOVEPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1467() {
    if (jj_scan_token(MINUS_)) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_scan_token(ST_LINEFROMTEXT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1304() {
    if (jj_scan_token(ASTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1466() {
    if (jj_scan_token(PLUS_)) return true;
    return false;
  }

  final private boolean jj_3R_1303() {
    if (jj_scan_token(SIMPLIFY_)) return true;
    return false;
  }

  final private boolean jj_3R_1414() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1466()) {
    jj_scanpos = xsp;
    if (jj_3R_1467()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1302() {
    if (jj_scan_token(ASEWKT_)) return true;
    return false;
  }

  final private boolean jj_3R_1465() {
    if (jj_scan_token(NOT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_1301() {
    if (jj_scan_token(SETPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(HOSTMASK_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1464() {
    if (jj_scan_token(ABSOLUTE_)) return true;
    return false;
  }

  final private boolean jj_3R_506() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1300() {
    if (jj_scan_token(ST_GEOMETRYN_)) return true;
    return false;
  }

  final private boolean jj_3R_1463() {
    if (jj_scan_token(FACTORIAL_PREFIX_)) return true;
    return false;
  }

  final private boolean jj_3R_1299() {
    if (jj_scan_token(ST_GEOMETRY_)) return true;
    return false;
  }

  final private boolean jj_3R_1462() {
    if (jj_scan_token(CUBE_ROOT_)) return true;
    return false;
  }

  final private boolean jj_3R_1298() {
    if (jj_scan_token(ST_BOX3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1461() {
    if (jj_scan_token(SQUARE_ROOT_)) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(ST_LINEFROMMULTIPOINT_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1297() {
    if (jj_scan_token(ST_BOX2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1413() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1461()) {
    jj_scanpos = xsp;
    if (jj_3R_1462()) {
    jj_scanpos = xsp;
    if (jj_3R_1463()) {
    jj_scanpos = xsp;
    if (jj_3R_1464()) {
    jj_scanpos = xsp;
    if (jj_3R_1465()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_1296() {
    if (jj_scan_token(ST_ZMFLAG_)) return true;
    return false;
  }

  final private boolean jj_3R_505() {
    if (jj_scan_token(AS_)) return true;
    return false;
  }

  final private boolean jj_3R_579() {
    if (jj_scan_token(COVAR_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_1295() {
    if (jj_scan_token(ST_Z_)) return true;
    return false;
  }

  final private boolean jj_3R_861() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1413()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1414()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3R_1415()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3R_1416()) {
    jj_scanpos = xsp;
    if (jj_3R_1417()) {
    jj_scanpos = xsp;
    if (jj_3R_1418()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3R_1419()) {
    jj_scanpos = xsp;
    if (jj_3R_1420()) {
    jj_scanpos = xsp;
    if (jj_3R_1421()) {
    jj_scanpos = xsp;
    if (jj_3R_1422()) {
    jj_scanpos = xsp;
    if (jj_3R_1423()) {
    jj_scanpos = xsp;
    if (jj_3R_1424()) {
    jj_scanpos = xsp;
    if (jj_3R_1425()) {
    jj_scanpos = xsp;
    if (jj_3R_1426()) {
    jj_scanpos = xsp;
    if (jj_3R_1427()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_1481()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_1482()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_578() {
    if (jj_scan_token(COVAR_POP_)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_505()) jj_scanpos = xsp;
    if (jj_3R_506()) return true;
    return false;
  }

  final private boolean jj_3R_1294() {
    if (jj_scan_token(ST_Y_)) return true;
    return false;
  }

  final private boolean jj_3R_577() {
    if (jj_scan_token(CORR_)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(HOST_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1293() {
    if (jj_scan_token(ST_X_)) return true;
    return false;
  }

  final private boolean jj_3R_1292() {
    if (jj_scan_token(ST_WKTTOSQL_)) return true;
    return false;
  }

  final private boolean jj_3R_1291() {
    if (jj_scan_token(ST_WKBTOSQL_)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_577()) {
    jj_scanpos = xsp;
    if (jj_3R_578()) {
    jj_scanpos = xsp;
    if (jj_3R_579()) return true;
    }
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1290() {
    if (jj_scan_token(ST_WITHIN_)) return true;
    return false;
  }

  final private boolean jj_3R_804() {
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_scan_token(ST_LINECROSSINGDIRECTION_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1289() {
    if (jj_scan_token(ST_WIDTH_)) return true;
    return false;
  }

  final private boolean jj_3R_1288() {
    if (jj_scan_token(ST_TRANSSCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_1287() {
    if (jj_scan_token(ST_TRANSLATE_)) return true;
    return false;
  }

  final private boolean jj_3_429() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(782)) return true;
    if (jj_3R_473()) return true;
    return false;
  }

  final private boolean jj_3R_1286() {
    if (jj_scan_token(ST_TOUCHES_)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(FAMILY_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1285() {
    if (jj_scan_token(ST_TEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1284() {
    if (jj_scan_token(ST_SYMMETRICDIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_541() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_429()) {
    jj_scanpos = xsp;
    if (jj_3R_804()) return true;
    }
    return false;
  }

  final private boolean jj_3R_1283() {
    if (jj_scan_token(ST_SYMDIFFERENCE_)) return true;
    return false;
  }

  final private boolean jj_3R_1282() {
    if (jj_scan_token(ST_SUMMARY_)) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(ST_LENGTH_SPHEROID_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1625() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1281() {
    if (jj_scan_token(ST_STARTPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1280() {
    if (jj_scan_token(ST_SRID_)) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(BOOL_OR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1625()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1279() {
    if (jj_scan_token(ST_SNAPTOGRID_)) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(BROADCAST_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1278() {
    if (jj_scan_token(ST_SIMPLIFYPRESERVETOPOLOGY_)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_541()) return true;
    return false;
  }

  final private boolean jj_3R_1277() {
    if (jj_scan_token(ST_SIMPLIFY_)) return true;
    return false;
  }

  final private boolean jj_3R_1276() {
    if (jj_scan_token(ST_SHORTESTLINE_)) return true;
    return false;
  }

  final private boolean jj_3R_1275() {
    if (jj_scan_token(ST_SHIFT_LONGITUDE_)) return true;
    return false;
  }

  final private boolean jj_3R_1274() {
    if (jj_scan_token(ST_SETSRID_)) return true;
    return false;
  }

  final private boolean jj_3R_539() {
    if (jj_scan_token(SHIFT_RIGHT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_scan_token(ST_LENGTH3D_SPHEROID_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1273() {
    if (jj_scan_token(ST_SETPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_538() {
    if (jj_scan_token(SHIFT_LEFT_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_1624() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1272() {
    if (jj_scan_token(ST_SETFACTOR_)) return true;
    return false;
  }

  final private boolean jj_3R_537() {
    if (jj_scan_token(XOR_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(ABBREV_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1271() {
    if (jj_scan_token(ST_SEGMENTIZE_)) return true;
    return false;
  }

  final private boolean jj_3R_536() {
    if (jj_scan_token(OR_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_576() {
    if (jj_scan_token(EVERY_)) return true;
    return false;
  }

  final private boolean jj_3R_1270() {
    if (jj_scan_token(ST_SCALE_)) return true;
    return false;
  }

  final private boolean jj_3R_535() {
    if (jj_scan_token(AND_BITWISE_)) return true;
    return false;
  }

  final private boolean jj_3R_575() {
    if (jj_scan_token(BOOL_AND_)) return true;
    return false;
  }

  final private boolean jj_3R_1269() {
    if (jj_scan_token(ST_ROTATEZ_)) return true;
    return false;
  }

  final private boolean jj_3R_534() {
    if (jj_scan_token(MODULO_)) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_1268() {
    if (jj_scan_token(ST_ROTATEY_)) return true;
    return false;
  }

  final private boolean jj_3R_533() {
    if (jj_scan_token(DIV_)) return true;
    return false;
  }

  final private boolean jj_3R_1267() {
    if (jj_scan_token(ST_ROTATEX_)) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_575()) {
    jj_scanpos = xsp;
    if (jj_3R_576()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    xsp = jj_scanpos;
    if (jj_3R_1624()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_666() {
    if (jj_scan_token(LENGTH3D_)) return true;
    return false;
  }

  final private boolean jj_3R_532() {
    if (jj_scan_token(MOD_)) return true;
    return false;
  }

  final private boolean jj_3R_1266() {
    if (jj_scan_token(ST_ROTATE_)) return true;
    return false;
  }

  final private boolean jj_3R_665() {
    if (jj_scan_token(ST_LENGTH3D_)) return true;
    return false;
  }

  final private boolean jj_3R_531() {
    if (jj_scan_token(DIVIDE_)) return true;
    return false;
  }

  final private boolean jj_3R_1265() {
    if (jj_scan_token(ST_REVERSE_)) return true;
    return false;
  }

  final private boolean jj_3R_530() {
    if (jj_scan_token(STAR_)) return true;
    return false;
  }

  final private boolean jj_3R_1264() {
    if (jj_scan_token(ST_REMOVEPOINT_)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(UPPER_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_748() {
    if (jj_scan_token(DROPBBOX_)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_665()) {
    jj_scanpos = xsp;
    if (jj_3R_666()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1263() {
    if (jj_scan_token(ST_RELATE_)) return true;
    return false;
  }

  final private boolean jj_3R_747() {
    if (jj_scan_token(POSTGIS_DROPBBOX_)) return true;
    return false;
  }

  final private boolean jj_3R_1262() {
    if (jj_scan_token(ST_POSTGIS_GIST_SEL_)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_530()) {
    jj_scanpos = xsp;
    if (jj_3R_531()) {
    jj_scanpos = xsp;
    if (jj_3R_532()) {
    jj_scanpos = xsp;
    if (jj_3R_533()) {
    jj_scanpos = xsp;
    if (jj_3R_534()) {
    jj_scanpos = xsp;
    if (jj_3R_535()) {
    jj_scanpos = xsp;
    if (jj_3R_536()) {
    jj_scanpos = xsp;
    if (jj_3R_537()) {
    jj_scanpos = xsp;
    if (jj_3R_538()) {
    jj_scanpos = xsp;
    if (jj_3R_539()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_540()) return true;
    return false;
  }

  final private boolean jj_3R_1261() {
    if (jj_scan_token(ST_POSTGIS_GIST_JOINSEL_)) return true;
    return false;
  }

  final private boolean jj_3R_1260() {
    if (jj_scan_token(ST_POLYGONFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_459() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_747()) {
    jj_scanpos = xsp;
    if (jj_3R_748()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1259() {
    if (jj_scan_token(ST_POLYGONFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_1623() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1258() {
    if (jj_scan_token(ST_POLYGON_)) return true;
    return false;
  }

  final private boolean jj_3R_1575() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_1257() {
    if (jj_scan_token(ST_POLYFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(BIT_OR_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1623()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1256() {
    if (jj_scan_token(ST_POLYFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(SUM_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1575()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1255() {
    if (jj_scan_token(ST_POINT_INSIDE_CIRCLE_)) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_scan_token(ST_LENGTH2D_SPHEROID_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1254() {
    if (jj_scan_token(ST_POINTONSURFACE_)) return true;
    return false;
  }

  final private boolean jj_3R_1253() {
    if (jj_scan_token(ST_POINTN_)) return true;
    return false;
  }

  final private boolean jj_3R_1252() {
    if (jj_scan_token(ST_POINTFROMWKB_)) return true;
    return false;
  }

  final private boolean jj_3R_746() {
    if (jj_scan_token(GEOMETRYN_)) return true;
    return false;
  }

  final private boolean jj_3R_1251() {
    if (jj_scan_token(ST_POINTFROMTEXT_)) return true;
    return false;
  }

  final private boolean jj_3R_803() {
    if (jj_3R_861()) return true;
    return false;
  }

  final private boolean jj_3R_745() {
    if (jj_scan_token(ST_GEOMETRYN_)) return true;
    return false;
  }

  final private boolean jj_3R_1250() {
    if (jj_scan_token(ST_POINT_)) return true;
    return false;
  }

  final private boolean jj_3R_1249() {
    if (jj_scan_token(ST_PERIMETER3D_)) return true;
    return false;
  }

  final private boolean jj_3R_1622() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_664() {
    if (jj_scan_token(LENGTH2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1248() {
    if (jj_scan_token(ST_PERIMETER2D_)) return true;
    return false;
  }

  final private boolean jj_3R_458() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_745()) {
    jj_scanpos = xsp;
    if (jj_3R_746()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(781)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_1576() {
    if (jj_scan_token(DISTINCT_)) return true;
    return false;
  }

  final private boolean jj_3R_663() {
    if (jj_scan_token(ST_LENGTH2D_)) return true;
    return false;
  }

  final private boolean jj_3R_1247() {
    if (jj_scan_token(ST_PERIMETER_)) return true;
    return false;
  }

  final private boolean jj_3R_528() {
    if (jj_scan_token(CONCAT_)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(BIT_AND_)) return true;
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_1622()) jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_556() {
    if (jj_scan_token(VAR_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_1246() {
    if (jj_scan_token(ST_OVERLAPS_)) return true;
    return false;
  }

  final private boolean jj_3R_527() {
    if (jj_scan_token(MINUS_)) return true;
    return false;
  }

  final private boolean jj_3R_555() {
    if (jj_scan_token(VAR_POP_)) return true;
    return false;
  }

  final private boolean jj_3R_1245() {
    if (jj_scan_token(ST_ORDERINGEQUALS_)) return true;
    return false;
  }

  final private boolean jj_3R_526() {
    if (jj_scan_token(PLUS_)) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_663()) {
    jj_scanpos = xsp;
    if (jj_3R_664()) return true;
    }
    if (jj_scan_token(PARENTHESIS_START_)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(PARENTHESIS_CLOSE_)) return true;
    return false;
  }

  final private boolean jj_3R_554() {
    if (jj_scan_token(VARIANCE_SAMP_)) return true;
    return false;
  }

  final private boolean jj_3R_1244() {
    if (jj_scan_token(ST_NUMPOINTS_)) return true;
    return false;
  }

  final private boolean jj_3R_553() {
    if (jj_scan_token(VARIANCE_POP_)) return true;
    return false;
  }

  public CSQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[530];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static private int[] jj_la1_11;
  static private int[] jj_la1_12;
  static private int[] jj_la1_13;
  static private int[] jj_la1_14;
  static private int[] jj_la1_15;
  static private int[] jj_la1_16;
  static private int[] jj_la1_17;
  static private int[] jj_la1_18;
  static private int[] jj_la1_19;
  static private int[] jj_la1_20;
  static private int[] jj_la1_21;
  static private int[] jj_la1_22;
  static private int[] jj_la1_23;
  static private int[] jj_la1_24;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
      jj_la1_6();
      jj_la1_7();
      jj_la1_8();
      jj_la1_9();
      jj_la1_10();
      jj_la1_11();
      jj_la1_12();
      jj_la1_13();
      jj_la1_14();
      jj_la1_15();
      jj_la1_16();
      jj_la1_17();
      jj_la1_18();
      jj_la1_19();
      jj_la1_20();
      jj_la1_21();
      jj_la1_22();
      jj_la1_23();
      jj_la1_24();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0xe000000,0xe000000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0xe020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0xe000000,0x20000,0xe000000,0x0,0x0,0x0,0x20000,0xe100000,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0xe000000,0xe000000,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0xe000000,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe020000,0xe000000,0xe000000,0x0,0xe020000,0xe000000,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0xf0a1080,0x90080780,0x1001000,0x40f08800,0x80080,0x80080,0x1001000,0x1001000,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0xe000000,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x20000,0xf0a1080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0a1080,0x0,0x0,0x0,0x0,0x0,0x0,0xf1a1080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x4000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf0a1080,0x20000080,0x200,0xf0480780,0x0,0x0,0x20000,0xf0a1080,0xd0480780,0x0,0x20000,0x0,0x0,0x0,0x0,0x20000080,0x20000080,0x0,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x20000,0xe020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x20000,0xf0a1080,0x0,0x0,0xe000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0x0,0x0,0xe100000,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0x0,0xe100000,0xe100000,0xe000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0xa0044000,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0xa0044000,0x0,0xa0044000,0x0,0x0,0x0,0x0,0xa0044000,0x10000,0x0,0x0,0x40008000,0x8000,0x80000,0x80000,0xa0054000,0xa0044000,0x0,0x0,0xa0044000,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x0,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0xa0044000,0xa0044000,0x0,0xa0044000,0xa0044000,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa1044090,0x12f00743,0x8,0x4,0x1000090,0x1000090,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa1044090,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa1044090,0x0,0x0,0x0,0x0,0x0,0x0,0xa1044090,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x800,0x20000,0x0,0x0,0x0,0x0,0x0,0xa1044090,0x4001020,0x2040,0x16a03767,0x0,0x0,0x0,0xa1044090,0x12a00747,0x0,0x0,0x0,0x0,0x0,0x0,0x4000020,0x4000020,0x0,0x2040,0x0,0x2040,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa1044090,0x0,0x0,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0044000,0x0,0x0,0xa0044000,0x0,0x0,0x0,0x0,0x0,0x10000,0xa0044000,0x0,0xa0044000,0xa0044000,0xa0044000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x400,0xf73e91d0,0xf73e95d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0xf73e95d0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0xf73e95d0,0xf73e95d0,0x0,0xf73e95d0,0x0,0x0,0x1,0x0,0xf73e95d0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0xf73e95d0,0xf73e95d0,0x0,0x1,0xf73e95d0,0x0,0x0,0x0,0x0,0x0,0xf73e95d0,0x0,0xf73e95d0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf73e95d0,0xf73e95d8,0xf73e95d8,0x0,0xf73e95d0,0xf73e95d8,0xf73e95d8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf73e95d0,0x800000,0x800000,0x0,0x0,0x0,0xf73e95d0,0x0,0x0,0x0,0x1,0x20000,0x0,0x4000020,0x400,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf77e95d0,0x0,0x0,0x402000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0xf73e95d0,0xf73e95d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf77e95d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf77e95d0,0x0,0x0,0x0,0x0,0x1,0x1,0xf77e95d1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf73e95d0,0x0,0x0,0x2,0x800000,0x800000,0x0,0x800000,0xf77e95d0,0x800000,0x0,0x800000,0x5,0x5,0x0,0xf77e95d0,0x0,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x800000,0x800000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0xf73e95d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x8,0x8,0x0,0x0,0x0,0x0,0xf77e95d0,0x0,0x4021020,0xf73e95d0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x0,0x800,0x800,0xf73e95d0,0x0,0x0,0xf73e95d0,0x0,0x0,0x1,0x0,0x0,0x0,0xf73e95d0,0x0,0xf73e95d0,0xf73e95d0,0xf73e95d1,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0xec1d72f,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x40002000,0x0,0xec1d72f,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0xec1d72f,0xec1d72f,0x0,0xec1d72f,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0xec1d72f,0xec1d72f,0x0,0x0,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0xec1d72f,0x0,0x0,0x0,0x40000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0xec3d72f,0xec3d72f,0x0,0xec1d72f,0xec3d72f,0xec3d72f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0x0,0x0,0x0,0x6000000,0x0,0x9011c28,0x800000,0x1000,0x28,0x0,0x0,0x2000000,0x0,0x2000000,0x8000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x100000,0x0,0x0,0x0,0x0,0x0,0x8ec1d7ef,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0xec1d72f,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8ec1d7ef,0x0,0x80000,0x0,0x80000,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x8ec1d7ef,0x0,0x0,0x0,0x0,0x0,0x0,0x8ec1d7ef,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8ec1d7ef,0x0,0x0,0x0,0x0,0x0,0x0,0x8ec1d7ef,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0xa0200000,0x0,0x80200000,0x0,0xa0200000,0x0,0x80200000,0x0,0xa0200000,0xa0200000,0x0,0x0,0x0,0x20000,0x20000,0x10000,0x0,0x0,0x0,0x8ec1d7ef,0x0,0xf011c28,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0x0,0xec1d72f,0x0,0x0,0x0,0x0,0x0,0x0,0xec1d72f,0x0,0xec1d72f,0xec1d72f,0xec1d72f,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x16abf5c6,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x0,0x0,0x0,0x40000000,0x30,0x30,0x40000030,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40000000,0x0,0x8,0x0,0x0,0x40000000,0x4000040,0x4000040,0x44000040,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x16abf5c6,0x16abf5c6,0x0,0x16abf5c6,0x0,0x8,0x8,0x0,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17abf5c6,0x16abf5c6,0x0,0x0,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x0,0x16abf5c6,0x0,0x0,0x0,0x2000000,0x200010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x16abf5c6,0x16abf5c6,0x0,0x16abf5c6,0x16abf5c6,0x16abf5c6,0x0,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x10,0x10,0x0,0x0,0x0,0x16abf5c6,0x8,0x0,0x8,0x8,0x0,0x0,0x280002,0x10000000,0x80002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17abf5d6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000010,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x17abf5d6,0x20000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17abf5d6,0x0,0x0,0x0,0x0,0x0,0x0,0x17abf5d6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x8000,0x10000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x17abf5d6,0x1,0x0,0x1,0x800,0x800,0x0,0x17abf5d6,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1000000,0x40000,0x40000,0x0,0x0,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x17abf5d6,0x0,0x280092,0x16abf5c6,0x0,0x80400000,0x80400000,0x0,0x80400000,0x80400000,0x80400000,0x80400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x0,0x0,0x16abf5c6,0x0,0x0,0x0,0x0,0x0,0x0,0x16abf5c6,0x0,0x16abf5c6,0x16abf5c6,0x16abf5c6,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x7238a7b9,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x800000,0x0,0x21000,0x0,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7238a7b9,0x7238a7b9,0x0,0x7238a7b9,0x0,0x0,0x0,0x0,0x7238a7b9,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x7239a7b9,0x7238a7b9,0x0,0x0,0x7238a7b9,0x0,0x40002,0x40002,0x0,0x800,0x7238afb9,0x0,0x7238a7b9,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7238a7b9,0x7238a7b9,0x7238a7b9,0x0,0x7238a7b9,0x7238a7b9,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x7238afb9,0x0,0x0,0x0,0x0,0x800,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x100000,0x2080581,0x1,0x0,0x2000400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7639a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7238a7b9,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7639a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14000000,0x0,0x0,0x0,0x0,0x0,0x0,0x7639a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x7639a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x100,0x0,0x0,0x0,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x7639a7b9,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x7639a7b9,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x7238a7b9,0x0,0x8004000,0x8000000,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x8000000,0x8004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7639a7b9,0x0,0x2180581,0x7238a7b9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7238a7b9,0x0,0x0,0x7238a7b9,0x4000004,0x0,0x4000004,0x0,0x0,0x0,0x7238a7b9,0x0,0x7238a7b9,0x7238a7b9,0x7238a7b9,};
   }
   private static void jj_la1_6() {
      jj_la1_6 = new int[] {0x0,0x0,0xfaa391fe,0xfaa391fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfab391fe,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x800,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x200,0x0,0x0,0x0,0xfab391fe,0xfab391fe,0x0,0xfab391fe,0x0,0x200,0x200,0x0,0xfab391fe,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0xfaa391fe,0xfaa391fe,0x0,0x0,0xfaa391fe,0x0,0x0,0x0,0x0,0x0,0xfaa391fe,0x0,0xfaa391fe,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x4000000,0x0,0x4000000,0x0,0x1000000,0x0,0x4000000,0xfaa391fe,0xfaa391fe,0xfaa391fe,0x0,0xfaa391fe,0xfaa391fe,0xfaa391fe,0x1,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfaa391fe,0x0,0x0,0x0,0x0,0x0,0xfaa391fe,0x200,0x0,0x200,0x200,0x0,0x0,0x90,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0xfaa391fe,0xfaa391fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x0,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x20000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfaa391fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x0,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0xfab391fe,0x0,0x4000,0x0,0x4000,0x400,0x4000,0x0,0x4000,0x400,0x4000,0x4000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfab3d1fe,0x0,0x90,0xfab391fe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfaa391fe,0x0,0x0,0xfaa391fe,0x0,0x0,0x0,0x80000,0x80000,0x0,0xfaa391fe,0x80000,0xfaa391fe,0xfaa391fe,0xfaa391fe,};
   }
   private static void jj_la1_7() {
      jj_la1_7 = new int[] {0x0,0x0,0xe5879927,0xe5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x200,0x0,0x10,0x40,0x0,0x0,0x0,0xe5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0xe5879927,0xe5879927,0x0,0xe5879927,0x0,0x0,0x0,0x0,0xe587992f,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0xe5879927,0xe5879927,0x0,0x0,0xe5879927,0x8,0x0,0x0,0x0,0x0,0xe587992f,0x8,0xe587992f,0x8,0x8000000,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5879927,0xe5879927,0xe5879927,0x0,0xe5879927,0xe5879927,0xe5879927,0x100000,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0xe5879927,0x0,0x0,0x0,0x0,0x0,0xe5879927,0x0,0x0,0x0,0x0,0x0,0x40000,0x80000003,0x4000000,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0xf5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5879927,0xe5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf5879927,0x0,0x0,0x0,0x0,0x0,0x0,0xf5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf5879927,0x0,0x0,0x0,0x0,0x0,0x0,0xf5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5879927,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf5879927,0x0,0x80060003,0xe5879927,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe5879927,0x0,0x0,0xe5879927,0x400200,0x0,0x400200,0x0,0x0,0x0,0xe5879927,0x0,0xe5879927,0xe5879927,0xe5879927,};
   }
   private static void jj_la1_8() {
      jj_la1_8 = new int[] {0x0,0x0,0xfcf0e9a8,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1040000,0x0,0x0,0x10,0x0,0x40,0x20000000,0x0,0x0,0xfcf0e9a8,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfdf0e9a8,0xfdf0e9a8,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0xfcf0e9a8,0xfcf0e9a8,0x0,0x0,0xfcf0e9ac,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0xfcf0e9a8,0xfcf0e9a8,0xfcf0e9a8,0x0,0xfcf0e9a8,0xfcf0e9a8,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x80400,0x100,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x200,0x200,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9a8,0x0,0x80400,0xfcf0e9a8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfcf0e9ac,0x0,0x0,0xfcf0e9a8,0x20200,0x0,0x20200,0x0,0x0,0x0,0xfcf0e9a8,0x0,0xfcf0e9a8,0xfcf0e9a8,0xfcf0e9a8,};
   }
   private static void jj_la1_9() {
      jj_la1_9 = new int[] {0x0,0x10000000,0xe3f67b4f,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80,0x10,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0xfbf67b4f,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0xf3f67b4f,0xf3f67b4f,0x0,0x0,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0x0,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0xf3f67b4f,0xf3f67b4f,0x0,0xf3f67b4f,0xf3f67b4f,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0x0,0x0,0x20,0x0,0x0,0xf3f67b4f,0x0,0x0,0x0,0x0,0x1000,0x0,0x810000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfbf67b4f,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x0,0xfbf67b4f,0x0,0x811008,0xfbf67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0x0,0x0,0xf3f67b4f,0x0,0x0,0x0,0x0,0x0,0x0,0xf3f67b4f,0x0,0xf3f67b4f,0xf3f67b4f,0xf3f67b4f,};
   }
   private static void jj_la1_10() {
      jj_la1_10 = new int[] {0x0,0x0,0xbdafffff,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x400000,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0xbdafffff,0xbdafffff,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0xbdafffff,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0xbdafffff,0xbdafffff,0x0,0xbdafffff,0xbdafffff,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x4000,0x0,0x20020000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x4,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xbfafffff,0x0,0x20024000,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0x0,0xbdafffff,0x0,0x0,0x0,0x0,0x0,0x0,0xbdafffff,0x0,0xbdafffff,0xbdafffff,0xbdafffff,};
   }
   private static void jj_la1_11() {
      jj_la1_11 = new int[] {0x0,0x0,0xefdfdffd,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0xefdfdffd,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0xefdfdffd,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0xefdfdffd,0xefdfdffd,0x0,0xefdfdffd,0xefdfdffd,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x45c04200,0x0,0x1800000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x2,0x2,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffdfdffd,0x0,0x0,0x0,0x2,0x2,0x2,0xffdfdfff,0x2,0x2,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x10,0x0,0x0,0x20,0x0,0x40,0x80,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x20000,0x0,0x80000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x4,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffdfdffd,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0xffdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffdfdffd,0x0,0x45c04200,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0xefdfdffd,0x0,0x0,0xefdfdffd,0x0,0x0,0x0,0x0,0x0,0x0,0xefdfdffd,0x0,0xefdfdffd,0xefdfdffd,0xefdfdffd,};
   }
   private static void jj_la1_12() {
      jj_la1_12 = new int[] {0x0,0x0,0xb97ffdb3,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x1000000,0x2000040,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0xb97ffdb3,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0xb97ffdb3,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0xb97ffdb3,0xb97ffdb3,0x0,0xb97ffdb3,0xb97ffdb3,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x100,0x0,0x8200000,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x20,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x4000,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0x8200100,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x204,0x204,0x0,0x204,0x204,0xb97ffdb3,0x0,0x0,0xb97ffdb3,0x0,0x0,0x0,0x0,0x0,0x0,0xb97ffdb3,0x0,0xb97ffdb3,0xb97ffdb3,0xb97ffdb3,};
   }
   private static void jj_la1_13() {
      jj_la1_13 = new int[] {0x0,0x0,0xfffefd7e,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0xfffffd7e,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0xfffefd7e,0x0,0x0,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0x0,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0xfffefd7e,0xfffefd7e,0x0,0xfffefd7e,0xfffefd7e,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x200000,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x4000000,0x8000000,0x0,0x0,0x0,0x0,0x400,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffd7e,0x0,0x5,0xfffffd7e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0x0,0x0,0xfffefd7e,0x0,0x0,0x0,0x0,0x0,0x0,0xfffefd7e,0x0,0xfffefd7e,0xfffefd7e,0xfffefd7e,};
   }
   private static void jj_la1_14() {
      jj_la1_14 = new int[] {0x0,0x0,0xb773feff,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0xb773feff,0x0,0xb773feff,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0xb773feff,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x80000,0x0,0xb77bfeff,0x0,0xb77bfeff,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0xb773feff,0xb773feff,0x0,0xb773feff,0xb773feff,0xb773feff,0x0,0x0,0x100,0x100,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0xb77bfeff,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x40000000,0x0,0x0,0x0,0x0,0x4014400,0x0,0x4000000,0x4000,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x4014400,0xb773feff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb773feff,0x0,0x0,0xb773feff,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0xb773feff,0x0,0xb773feff,0xb773feff,0xb773feff,};
   }
   private static void jj_la1_15() {
      jj_la1_15 = new int[] {0x0,0x0,0xfeffffdf,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0xfeffffdf,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0xfeffffdf,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0xfeffffdf,0xfeffffdf,0xfeffffdf,0x0,0xfeffffdf,0xfeffffdf,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x8000002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0xfeffffdf,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x20000000,0x40000000,0x0,0x0,0x40000,0x80000,0x100000,0x0,0x0,0x0,0x0,0x200000,0x0,0x4,0x0,0x0,0x10,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x8000003,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0x0,0xfeffffdf,0x0,0x0,0x0,0x0,0x0,0x0,0xfeffffdf,0x0,0xfeffffdf,0xfeffffdf,0xfeffffdf,};
   }
   private static void jj_la1_16() {
      jj_la1_16 = new int[] {0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x800,0x2000,0x4000,0x0,0x0,0x8000,0x0,0x10000,0x20000,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x800000,0x0,0x1000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,};
   }
   private static void jj_la1_17() {
      jj_la1_17 = new int[] {0x0,0x0,0xffffeffe,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0xffffeffe,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0xffffefff,0x1000,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0xffffeffe,0xffffeffe,0x0,0xffffeffe,0xffffeffe,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x40000,0x80000,0x0,0x0,0x20,0x40,0x80,0x0,0x0,0x80000000,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x400,0xffffeffe,0x0,0x1,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0x0,0xffffeffe,0x0,0x0,0x0,0x0,0x0,0x0,0xffffeffe,0x0,0xffffeffe,0xffffeffe,0xffffeffe,};
   }
   private static void jj_la1_18() {
      jj_la1_18 = new int[] {0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x800,0x0,0x0,0x1000,0x4000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x8,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,};
   }
   private static void jj_la1_19() {
      jj_la1_19 = new int[] {0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x4000000,0x1000,0x4000,0x8000,0x0,0x0,0x40000000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x4,0x8,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,};
   }
   private static void jj_la1_20() {
      jj_la1_20 = new int[] {0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x400,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,};
   }
   private static void jj_la1_21() {
      jj_la1_21 = new int[] {0x0,0x0,0x3ffffff,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x60000000,0x63ffffff,0x0,0x23ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x3ffffff,0x0,0x3ffffff,0x3ffffff,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60000000,0x63ffffff,0x0,0x0,0x0,0x20000000,0x0,0x3ffffff,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x201000,0x40,0x0,0x10000,0x808000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x3ffffff,0x3ffffff,0x3ffffff,};
   }
   private static void jj_la1_22() {
      jj_la1_22 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x0,0x80000000,0x2d0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x38000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x6,0x8000000,0x0,0x0,0x9,0x6,0x8000000,0x0,0x30000000,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_23() {
      jj_la1_23 = new int[] {0x400000,0x0,0x3c,0x40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x40003c,0x0,0x40003c,0x0,0x0,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1040003c,0x40003c,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x40003c,0x0,0x40003c,0x0,0x0,0x0,0x0,0x16000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x40003c,0x40003c,0x0,0x40003c,0x40003c,0x40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x10,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc,0x0,0x0,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe000000,0x10000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1040003c,0x1040003c,0x0,0x0,0x0,0x0,0x0,0x3fffc0,0x0,0x0,0xfe40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe40003c,0x0,0x0,0x0,0x0,0x0,0x0,0xfe40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfe40003c,0x1,0x0,0x1,0x0,0x0,0x0,0xfe40003c,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0xfe40003c,0x0,0x30,0x40003c,0xa000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x0,0x0,0x40003c,0x0,0x0,0x0,0x0,0x0,0x0,0x40003c,0x0,0x40003c,0x40003c,0x40003c,};
   }
   private static void jj_la1_24() {
      jj_la1_24 = new int[] {0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x1800,0x1800,0x0,0x1800,0x2000,0x0,0x0,0x0,0x1800,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x1800,0x1800,0x0,0x1800,0x1800,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x1800,0x1800,0x1800,0x2000,0x1800,0x1800,0x1800,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x1b7f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x37b,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x2000,0x1800,0x1800,0x2000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x1b7f,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x2000,0x2000,0x2000,0x2000,0x2000,0x0,0x1b7f,0x2000,0x2000,0x2000,0x0,0x0,0x0,0x1b7f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x0,0x2000,0x0,0x2000,0x2000,0x0,0x2000,0x0,0x2000,0x2000,0x0,0x2000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1b7f,0x0,0x0,0x0,0x0,0x0,0x0,0x1b7f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1b7f,0x2000,0x0,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800,0x2000,0x2000,0x1800,0x0,0x2000,0x0,0x0,0x0,0x0,0x1800,0x0,0x1800,0x1800,0x1800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[450];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CSQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public CSQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CSQLParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 530; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 530; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CSQLParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 530; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 530; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSQLParser(CSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 530; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CSQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 530; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[784];
    for (int i = 0; i < 784; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 530; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
          if ((jj_la1_11[i] & (1<<j)) != 0) {
            la1tokens[352+j] = true;
          }
          if ((jj_la1_12[i] & (1<<j)) != 0) {
            la1tokens[384+j] = true;
          }
          if ((jj_la1_13[i] & (1<<j)) != 0) {
            la1tokens[416+j] = true;
          }
          if ((jj_la1_14[i] & (1<<j)) != 0) {
            la1tokens[448+j] = true;
          }
          if ((jj_la1_15[i] & (1<<j)) != 0) {
            la1tokens[480+j] = true;
          }
          if ((jj_la1_16[i] & (1<<j)) != 0) {
            la1tokens[512+j] = true;
          }
          if ((jj_la1_17[i] & (1<<j)) != 0) {
            la1tokens[544+j] = true;
          }
          if ((jj_la1_18[i] & (1<<j)) != 0) {
            la1tokens[576+j] = true;
          }
          if ((jj_la1_19[i] & (1<<j)) != 0) {
            la1tokens[608+j] = true;
          }
          if ((jj_la1_20[i] & (1<<j)) != 0) {
            la1tokens[640+j] = true;
          }
          if ((jj_la1_21[i] & (1<<j)) != 0) {
            la1tokens[672+j] = true;
          }
          if ((jj_la1_22[i] & (1<<j)) != 0) {
            la1tokens[704+j] = true;
          }
          if ((jj_la1_23[i] & (1<<j)) != 0) {
            la1tokens[736+j] = true;
          }
          if ((jj_la1_24[i] & (1<<j)) != 0) {
            la1tokens[768+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 784; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 450; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
            case 140: jj_3_141(); break;
            case 141: jj_3_142(); break;
            case 142: jj_3_143(); break;
            case 143: jj_3_144(); break;
            case 144: jj_3_145(); break;
            case 145: jj_3_146(); break;
            case 146: jj_3_147(); break;
            case 147: jj_3_148(); break;
            case 148: jj_3_149(); break;
            case 149: jj_3_150(); break;
            case 150: jj_3_151(); break;
            case 151: jj_3_152(); break;
            case 152: jj_3_153(); break;
            case 153: jj_3_154(); break;
            case 154: jj_3_155(); break;
            case 155: jj_3_156(); break;
            case 156: jj_3_157(); break;
            case 157: jj_3_158(); break;
            case 158: jj_3_159(); break;
            case 159: jj_3_160(); break;
            case 160: jj_3_161(); break;
            case 161: jj_3_162(); break;
            case 162: jj_3_163(); break;
            case 163: jj_3_164(); break;
            case 164: jj_3_165(); break;
            case 165: jj_3_166(); break;
            case 166: jj_3_167(); break;
            case 167: jj_3_168(); break;
            case 168: jj_3_169(); break;
            case 169: jj_3_170(); break;
            case 170: jj_3_171(); break;
            case 171: jj_3_172(); break;
            case 172: jj_3_173(); break;
            case 173: jj_3_174(); break;
            case 174: jj_3_175(); break;
            case 175: jj_3_176(); break;
            case 176: jj_3_177(); break;
            case 177: jj_3_178(); break;
            case 178: jj_3_179(); break;
            case 179: jj_3_180(); break;
            case 180: jj_3_181(); break;
            case 181: jj_3_182(); break;
            case 182: jj_3_183(); break;
            case 183: jj_3_184(); break;
            case 184: jj_3_185(); break;
            case 185: jj_3_186(); break;
            case 186: jj_3_187(); break;
            case 187: jj_3_188(); break;
            case 188: jj_3_189(); break;
            case 189: jj_3_190(); break;
            case 190: jj_3_191(); break;
            case 191: jj_3_192(); break;
            case 192: jj_3_193(); break;
            case 193: jj_3_194(); break;
            case 194: jj_3_195(); break;
            case 195: jj_3_196(); break;
            case 196: jj_3_197(); break;
            case 197: jj_3_198(); break;
            case 198: jj_3_199(); break;
            case 199: jj_3_200(); break;
            case 200: jj_3_201(); break;
            case 201: jj_3_202(); break;
            case 202: jj_3_203(); break;
            case 203: jj_3_204(); break;
            case 204: jj_3_205(); break;
            case 205: jj_3_206(); break;
            case 206: jj_3_207(); break;
            case 207: jj_3_208(); break;
            case 208: jj_3_209(); break;
            case 209: jj_3_210(); break;
            case 210: jj_3_211(); break;
            case 211: jj_3_212(); break;
            case 212: jj_3_213(); break;
            case 213: jj_3_214(); break;
            case 214: jj_3_215(); break;
            case 215: jj_3_216(); break;
            case 216: jj_3_217(); break;
            case 217: jj_3_218(); break;
            case 218: jj_3_219(); break;
            case 219: jj_3_220(); break;
            case 220: jj_3_221(); break;
            case 221: jj_3_222(); break;
            case 222: jj_3_223(); break;
            case 223: jj_3_224(); break;
            case 224: jj_3_225(); break;
            case 225: jj_3_226(); break;
            case 226: jj_3_227(); break;
            case 227: jj_3_228(); break;
            case 228: jj_3_229(); break;
            case 229: jj_3_230(); break;
            case 230: jj_3_231(); break;
            case 231: jj_3_232(); break;
            case 232: jj_3_233(); break;
            case 233: jj_3_234(); break;
            case 234: jj_3_235(); break;
            case 235: jj_3_236(); break;
            case 236: jj_3_237(); break;
            case 237: jj_3_238(); break;
            case 238: jj_3_239(); break;
            case 239: jj_3_240(); break;
            case 240: jj_3_241(); break;
            case 241: jj_3_242(); break;
            case 242: jj_3_243(); break;
            case 243: jj_3_244(); break;
            case 244: jj_3_245(); break;
            case 245: jj_3_246(); break;
            case 246: jj_3_247(); break;
            case 247: jj_3_248(); break;
            case 248: jj_3_249(); break;
            case 249: jj_3_250(); break;
            case 250: jj_3_251(); break;
            case 251: jj_3_252(); break;
            case 252: jj_3_253(); break;
            case 253: jj_3_254(); break;
            case 254: jj_3_255(); break;
            case 255: jj_3_256(); break;
            case 256: jj_3_257(); break;
            case 257: jj_3_258(); break;
            case 258: jj_3_259(); break;
            case 259: jj_3_260(); break;
            case 260: jj_3_261(); break;
            case 261: jj_3_262(); break;
            case 262: jj_3_263(); break;
            case 263: jj_3_264(); break;
            case 264: jj_3_265(); break;
            case 265: jj_3_266(); break;
            case 266: jj_3_267(); break;
            case 267: jj_3_268(); break;
            case 268: jj_3_269(); break;
            case 269: jj_3_270(); break;
            case 270: jj_3_271(); break;
            case 271: jj_3_272(); break;
            case 272: jj_3_273(); break;
            case 273: jj_3_274(); break;
            case 274: jj_3_275(); break;
            case 275: jj_3_276(); break;
            case 276: jj_3_277(); break;
            case 277: jj_3_278(); break;
            case 278: jj_3_279(); break;
            case 279: jj_3_280(); break;
            case 280: jj_3_281(); break;
            case 281: jj_3_282(); break;
            case 282: jj_3_283(); break;
            case 283: jj_3_284(); break;
            case 284: jj_3_285(); break;
            case 285: jj_3_286(); break;
            case 286: jj_3_287(); break;
            case 287: jj_3_288(); break;
            case 288: jj_3_289(); break;
            case 289: jj_3_290(); break;
            case 290: jj_3_291(); break;
            case 291: jj_3_292(); break;
            case 292: jj_3_293(); break;
            case 293: jj_3_294(); break;
            case 294: jj_3_295(); break;
            case 295: jj_3_296(); break;
            case 296: jj_3_297(); break;
            case 297: jj_3_298(); break;
            case 298: jj_3_299(); break;
            case 299: jj_3_300(); break;
            case 300: jj_3_301(); break;
            case 301: jj_3_302(); break;
            case 302: jj_3_303(); break;
            case 303: jj_3_304(); break;
            case 304: jj_3_305(); break;
            case 305: jj_3_306(); break;
            case 306: jj_3_307(); break;
            case 307: jj_3_308(); break;
            case 308: jj_3_309(); break;
            case 309: jj_3_310(); break;
            case 310: jj_3_311(); break;
            case 311: jj_3_312(); break;
            case 312: jj_3_313(); break;
            case 313: jj_3_314(); break;
            case 314: jj_3_315(); break;
            case 315: jj_3_316(); break;
            case 316: jj_3_317(); break;
            case 317: jj_3_318(); break;
            case 318: jj_3_319(); break;
            case 319: jj_3_320(); break;
            case 320: jj_3_321(); break;
            case 321: jj_3_322(); break;
            case 322: jj_3_323(); break;
            case 323: jj_3_324(); break;
            case 324: jj_3_325(); break;
            case 325: jj_3_326(); break;
            case 326: jj_3_327(); break;
            case 327: jj_3_328(); break;
            case 328: jj_3_329(); break;
            case 329: jj_3_330(); break;
            case 330: jj_3_331(); break;
            case 331: jj_3_332(); break;
            case 332: jj_3_333(); break;
            case 333: jj_3_334(); break;
            case 334: jj_3_335(); break;
            case 335: jj_3_336(); break;
            case 336: jj_3_337(); break;
            case 337: jj_3_338(); break;
            case 338: jj_3_339(); break;
            case 339: jj_3_340(); break;
            case 340: jj_3_341(); break;
            case 341: jj_3_342(); break;
            case 342: jj_3_343(); break;
            case 343: jj_3_344(); break;
            case 344: jj_3_345(); break;
            case 345: jj_3_346(); break;
            case 346: jj_3_347(); break;
            case 347: jj_3_348(); break;
            case 348: jj_3_349(); break;
            case 349: jj_3_350(); break;
            case 350: jj_3_351(); break;
            case 351: jj_3_352(); break;
            case 352: jj_3_353(); break;
            case 353: jj_3_354(); break;
            case 354: jj_3_355(); break;
            case 355: jj_3_356(); break;
            case 356: jj_3_357(); break;
            case 357: jj_3_358(); break;
            case 358: jj_3_359(); break;
            case 359: jj_3_360(); break;
            case 360: jj_3_361(); break;
            case 361: jj_3_362(); break;
            case 362: jj_3_363(); break;
            case 363: jj_3_364(); break;
            case 364: jj_3_365(); break;
            case 365: jj_3_366(); break;
            case 366: jj_3_367(); break;
            case 367: jj_3_368(); break;
            case 368: jj_3_369(); break;
            case 369: jj_3_370(); break;
            case 370: jj_3_371(); break;
            case 371: jj_3_372(); break;
            case 372: jj_3_373(); break;
            case 373: jj_3_374(); break;
            case 374: jj_3_375(); break;
            case 375: jj_3_376(); break;
            case 376: jj_3_377(); break;
            case 377: jj_3_378(); break;
            case 378: jj_3_379(); break;
            case 379: jj_3_380(); break;
            case 380: jj_3_381(); break;
            case 381: jj_3_382(); break;
            case 382: jj_3_383(); break;
            case 383: jj_3_384(); break;
            case 384: jj_3_385(); break;
            case 385: jj_3_386(); break;
            case 386: jj_3_387(); break;
            case 387: jj_3_388(); break;
            case 388: jj_3_389(); break;
            case 389: jj_3_390(); break;
            case 390: jj_3_391(); break;
            case 391: jj_3_392(); break;
            case 392: jj_3_393(); break;
            case 393: jj_3_394(); break;
            case 394: jj_3_395(); break;
            case 395: jj_3_396(); break;
            case 396: jj_3_397(); break;
            case 397: jj_3_398(); break;
            case 398: jj_3_399(); break;
            case 399: jj_3_400(); break;
            case 400: jj_3_401(); break;
            case 401: jj_3_402(); break;
            case 402: jj_3_403(); break;
            case 403: jj_3_404(); break;
            case 404: jj_3_405(); break;
            case 405: jj_3_406(); break;
            case 406: jj_3_407(); break;
            case 407: jj_3_408(); break;
            case 408: jj_3_409(); break;
            case 409: jj_3_410(); break;
            case 410: jj_3_411(); break;
            case 411: jj_3_412(); break;
            case 412: jj_3_413(); break;
            case 413: jj_3_414(); break;
            case 414: jj_3_415(); break;
            case 415: jj_3_416(); break;
            case 416: jj_3_417(); break;
            case 417: jj_3_418(); break;
            case 418: jj_3_419(); break;
            case 419: jj_3_420(); break;
            case 420: jj_3_421(); break;
            case 421: jj_3_422(); break;
            case 422: jj_3_423(); break;
            case 423: jj_3_424(); break;
            case 424: jj_3_425(); break;
            case 425: jj_3_426(); break;
            case 426: jj_3_427(); break;
            case 427: jj_3_428(); break;
            case 428: jj_3_429(); break;
            case 429: jj_3_430(); break;
            case 430: jj_3_431(); break;
            case 431: jj_3_432(); break;
            case 432: jj_3_433(); break;
            case 433: jj_3_434(); break;
            case 434: jj_3_435(); break;
            case 435: jj_3_436(); break;
            case 436: jj_3_437(); break;
            case 437: jj_3_438(); break;
            case 438: jj_3_439(); break;
            case 439: jj_3_440(); break;
            case 440: jj_3_441(); break;
            case 441: jj_3_442(); break;
            case 442: jj_3_443(); break;
            case 443: jj_3_444(); break;
            case 444: jj_3_445(); break;
            case 445: jj_3_446(); break;
            case 446: jj_3_447(); break;
            case 447: jj_3_448(); break;
            case 448: jj_3_449(); break;
            case 449: jj_3_450(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
