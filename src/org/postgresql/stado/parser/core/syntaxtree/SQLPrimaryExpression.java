//
// Generated by JTB 1.2.2
//

package org.postgresql.stado.parser.core.syntaxtree;

/**
 * Grammar production:
 * f0 -> [ <SQUARE_ROOT_> | <CUBE_ROOT_> | <FACTORIAL_PREFIX_> | <ABSOLUTE_> | <NOT_BITWISE_> ]
 * f1 -> [ <PLUS_> | <MINUS_> ]
 * f2 -> ( FunctionCall(prn) | TableColumn(prn) | PseudoColumn(prn) | numberValue(prn) | <PARENTHESIS_START_> SQLComplexExpression(prn) <PARENTHESIS_CLOSE_> | booleanLiteral(prn) | stringLiteral(prn) | NullLiterals(prn) | IntervalLiterals(prn) | TextLiterals(prn) | PreparedStmtParameter(prn) | TimeStampLiteral(prn) | TimeLiteral(prn) | DateLiteral(prn) | binaryLiteral(prn) | hex_decimalLiteral(prn) | IntegerLiteral(prn) | MacaddrLiteral(prn) | CidrLiteral(prn) | InetLiteral(prn) )
 * f3 -> [ <FACTORIAL_> ]
 * f4 -> [ "::" types() ]
 */
public class SQLPrimaryExpression implements Node {
   public NodeOptional f0;
   public NodeOptional f1;
   public NodeChoice f2;
   public NodeOptional f3;
   public NodeOptional f4;

   public SQLPrimaryExpression(NodeOptional n0, NodeOptional n1, NodeChoice n2, NodeOptional n3, NodeOptional n4) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
   }

   public void accept(org.postgresql.stado.parser.core.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(org.postgresql.stado.parser.core.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
}

