//
// Generated by JTB 1.2.2
//

package org.postgresql.stado.parser.core.syntaxtree;

/**
 * Grammar production:
 * f0 -> <CREATE_DB_>
 * f1 -> Identifier(prn)
 * f2 -> [ [ <WITH_> ] ( <OWNER_> [ "=" ] Identifier(prn) | <SPATIAL_> )+ ]
 * f3 -> [ <MANUAL_> ]
 * f4 -> <ON_>
 * f5 -> ( <NODE_> | <NODES_> )
 * f6 -> <INT_LITERAL>
 * f7 -> ( "," <INT_LITERAL> )*
 */
public class CreateDatabase implements Node {
   public NodeToken f0;
   public Identifier f1;
   public NodeOptional f2;
   public NodeOptional f3;
   public NodeToken f4;
   public NodeChoice f5;
   public NodeToken f6;
   public NodeListOptional f7;

   public CreateDatabase(NodeToken n0, Identifier n1, NodeOptional n2, NodeOptional n3, NodeToken n4, NodeChoice n5, NodeToken n6, NodeListOptional n7) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
   }

   public CreateDatabase(Identifier n0, NodeOptional n1, NodeOptional n2, NodeChoice n3, NodeToken n4, NodeListOptional n5) {
      f0 = new NodeToken("DATABASE");
      f1 = n0;
      f2 = n1;
      f3 = n2;
      f4 = new NodeToken("ON");
      f5 = n3;
      f6 = n4;
      f7 = n5;
   }

   public void accept(org.postgresql.stado.parser.core.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(org.postgresql.stado.parser.core.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
}

