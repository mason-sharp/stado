//
// Generated by JTB 1.2.2
//

package org.postgresql.stado.parser.core.syntaxtree;

/**
 * Grammar production:
 * f0 -> <CREATE_>
 * f1 -> [ [ <LOCAL_> | <GLOBAL_> ] ( <TEMP_> | <TEMPORARY_> ) ]
 * f2 -> <TABLE_>
 * f3 -> TableName(prn)
 * f4 -> ( <PARENTHESIS_START_> CreateDefinition(prn) ( "," CreateDefinition(prn) )* <PARENTHESIS_CLOSE_> [ PartitionDeclare(prn) ] [ inheritsDef(prn) ] [ WithXRowID(prn) ] [ OnCommitClause(prn) ] [ tablespaceDef(prn) ] | [ <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_> ] [ PartitionDeclare(prn) ] [ WithXRowID(prn) ] [ OnCommitClause(prn) ] [ tablespaceDef(prn) ] <AS_> SelectWithoutOrderAndSet(prn) )
 */
public class createTable implements Node {
   public NodeToken f0;
   public NodeOptional f1;
   public NodeToken f2;
   public TableName f3;
   public NodeChoice f4;

   public createTable(NodeToken n0, NodeOptional n1, NodeToken n2, TableName n3, NodeChoice n4) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
   }

   public createTable(NodeOptional n0, TableName n1, NodeChoice n2) {
      f0 = new NodeToken("CREATE");
      f1 = n0;
      f2 = new NodeToken("TABLE");
      f3 = n1;
      f4 = n2;
   }

   public void accept(org.postgresql.stado.parser.core.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(org.postgresql.stado.parser.core.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
}

