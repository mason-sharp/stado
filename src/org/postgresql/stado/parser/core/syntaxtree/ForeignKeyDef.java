//
// Generated by JTB 1.2.2
//

package org.postgresql.stado.parser.core.syntaxtree;

/**
 * Grammar production:
 * f0 -> <FOREIGNKEY_>
 * f1 -> <PARENTHESIS_START_>
 * f2 -> ColumnNameList(prn)
 * f3 -> <PARENTHESIS_CLOSE_>
 * f4 -> <REFERENCES_>
 * f5 -> TableName(prn)
 * f6 -> <PARENTHESIS_START_>
 * f7 -> ColumnNameList(prn)
 * f8 -> <PARENTHESIS_CLOSE_>
 */
public class ForeignKeyDef implements Node {
   public NodeToken f0;
   public NodeToken f1;
   public ColumnNameList f2;
   public NodeToken f3;
   public NodeToken f4;
   public TableName f5;
   public NodeToken f6;
   public ColumnNameList f7;
   public NodeToken f8;

   public ForeignKeyDef(NodeToken n0, NodeToken n1, ColumnNameList n2, NodeToken n3, NodeToken n4, TableName n5, NodeToken n6, ColumnNameList n7, NodeToken n8) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
      f4 = n4;
      f5 = n5;
      f6 = n6;
      f7 = n7;
      f8 = n8;
   }

   public ForeignKeyDef(ColumnNameList n0, TableName n1, ColumnNameList n2) {
      f0 = new NodeToken("KEY");
      f1 = new NodeToken("(");
      f2 = n0;
      f3 = new NodeToken(")");
      f4 = new NodeToken("REFERENCES");
      f5 = n1;
      f6 = new NodeToken("(");
      f7 = n2;
      f8 = new NodeToken(")");
   }

   public void accept(org.postgresql.stado.parser.core.visitor.Visitor v) {
      v.visit(this);
   }
   public Object accept(org.postgresql.stado.parser.core.visitor.ObjectVisitor v, Object argu) {
      return v.visit(this,argu);
   }
}

