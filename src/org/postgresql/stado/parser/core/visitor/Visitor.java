//
// Generated by JTB 1.2.2
//

package org.postgresql.stado.parser.core.visitor;
import org.postgresql.stado.parser.core.syntaxtree.*;
import java.util.*;

/**
 * All void visitors must implement this interface.
 */
public interface Visitor {
   //
   // void Auto class visitors
   //
   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> FloatingPointNumber(prn)
    */
   public void visit(numberValue n);

   /**
    * f0 -> <STRING_LITERAL>
    */
   public void visit(stringLiteral n);

   /**
    * f0 -> <POSITION_>
    *       | <DATE_>
    *       | <DAY_>
    *       | <QUARTER_>
    *       | <TIME_>
    *       | <TIMESTAMP_>
    *       | <WITH_TIMEZONE_>
    *       | <WITHOUT_TIMEZONE_>
    *       | <DATETIME_>
    *       | <SAMLLDATETIME_>
    *       | <PASSWORD_>
    *       | <AVERAGE_>
    *       | <SQRT_>
    *       | <COUNT_>
    *       | <EXTRACT_>
    *       | <MAX_>
    *       | <CURRENTDATE_>
    *       | <CURRENT_TIME_>
    *       | <CURRENT_TIMESTAMP_>
    *       | <TRUNC_>
    *       | <TRUNCATE_>
    *       | <USER_>
    *       | <YEAR_>
    *       | <LENGTH_>
    *       | <LOWER_>
    *       | <MONTH_>
    *       | <HOUR_>
    *       | <MINUTE_>
    *       | <SECOND_>
    *       | <SUBSTRING_>
    *       | <NOW_>
    *       | <ADDDATE_>
    *       | <ADDTIME_>
    *       | <DAYNAME_>
    *       | <SUBDATE_>
    *       | <SUBTIME_>
    *       | <DATEDIFF_>
    *       | <MONTHNAME_>
    *       | <DAYOFWEEK_>
    *       | <DAYOFYEAR_>
    *       | <DAYOFMONTH_>
    *       | <WEEKOFYEAR_>
    *       | <WEEK_>
    *       | <ABS_>
    *       | <CEIL_>
    *       | <CEILING_>
    *       | <EXP_>
    *       | <FLOOR_>
    *       | <LN_>
    *       | <LOG_>
    *       | <LOG10_>
    *       | <PI_>
    *       | <POWER_>
    *       | <ROUND_>
    *       | <SIGN_>
    *       | <ASIN_>
    *       | <ATAN_>
    *       | <ATAN2_>
    *       | <ATN2_>
    *       | <COS_>
    *       | <ACOS_>
    *       | <COSH_>
    *       | <COT_>
    *       | <DEGREE_>
    *       | <RADIANS_>
    *       | <SIN_>
    *       | <TAN_>
    *       | <DATABASE_>
    *       | <VALUE_>
    *       | <VERSION_>
    *       | <MIN_>
    *       | <STDDEV_>
    *       | <STDDEV_POP_>
    *       | <STDDEV_SAMP_>
    *       | <SUM_>
    *       | <VARIANCE_>
    *       | <VARIANCE_POP_>
    *       | <VARIANCE_SAMP_>
    *       | <VAR_POP_>
    *       | <VAR_SAMP_>
    *       | <ASCII_>
    *       | <LPAD_>
    *       | <RPAD_>
    *       | <LTRIM_>
    *       | <REPLACE_>
    *       | <RTRIM_>
    *       | <SUBSTR_>
    *       | <TRIM_>
    *       | <UPPER_>
    *       | <FIXED_>
    *       | <GREATEST_>
    *       | <LEAST_>
    *       | <INSTR_>
    *       | <SOUNDEX_>
    *       | <INITCAP_>
    *       | <LFILL_>
    *       | <MAPCHAR_>
    *       | <NUM_>
    *       | <CONCAT_WORD>
    *       | <CURTIME_>
    *       | <CURDATE_>
    *       | <TIMEOFDAY_>
    *       | <ISFINITE_>
    *       | <DATETRUNC_>
    *       | <DATEPART_>
    *       | <AGE_>
    *       | <LOCALTIME_>
    *       | <LOCALTIMESTAMP_>
    *       | <BIT_LENGTH_>
    *       | <CHAR_LENGTH_>
    *       | <CHARACTER_LENGTH_>
    *       | <CONVERT_>
    *       | <OCTET_LENGTH_>
    *       | <OVERLAY_>
    *       | <PLACING_>
    *       | <STORAGE_>
    *       | <TYPE_>
    *       | <BTRIM_>
    *       | <CHR_>
    *       | <DECODE_>
    *       | <ENCODE_>
    *       | <MD5_>
    *       | <PG_CLIENT_ENCODING_>
    *       | <QUOTE_IDENT_>
    *       | <QUOTE_LITERAL_>
    *       | <REPEAT_>
    *       | <SPLIT_PART_>
    *       | <STRPOS_>
    *       | <TO_ASCII_>
    *       | <TO_HEX_>
    *       | <TRANSLATE_>
    *       | <WIDTH_BUCKET_>
    *       | <SETSEED_>
    *       | <RANDOM_>
    *       | <CBRT_>
    *       | <GET_BIT_>
    *       | <GET_BYTE_>
    *       | <TO_DATE_>
    *       | <CLOCK_TIMESTAMP_>
    *       | <STATEMENT_TIMESTAMP_>
    *       | <TRANSACTION_TIMESTAMP_>
    *       | <SMALLINT_>
    *       | <TINYINT_>
    *       | <INT2_>
    *       | <BYTEA_>
    *       | <BIGINT_>
    *       | <INT8_>
    *       | <BIGINTEGER_>
    *       | <INT_>
    *       | <INTEGER_>
    *       | <INT4_>
    *       | <REAL_>
    *       | <SMALLFLOAT_>
    *       | <FLOAT_>
    *       | <FLOAT4_>
    *       | <FLOAT8_>
    *       | <DECIMAL_>
    *       | <NUMERIC_>
    *       | <SMALLMONEY_>
    *       | <MONEY_>
    *       | <NUMBER_>
    *       | <CHAR_>
    *       | <CHARACHTER_>
    *       | <VARCHAR_>
    *       | <TINYTEXT_>
    *       | <VARCHAR2_>
    *       | <DATE_>
    *       | <TIME_>
    *       | <TIMESTAMP_>
    *       | <DEC_>
    *       | <DOUBLE_PRECISION_>
    *       | <NCHAR_>
    *       | <NATIONAL_>
    *       | <VARYING_>
    *       | <BOOLEAN_>
    *       | <INTERVAL_>
    *       | <TEXT_>
    *       | <MEDIUMTEXT_>
    *       | <LVARCHAR_>
    *       | <LONGTEXT_>
    *       | <LONG_VARCHAR_>
    *       | <LONG_>
    *       | <CLOB_>
    *       | <BLOB_>
    *       | <BINARY_>
    *       | <VARBINARY_>
    *       | <RAW_>
    *       | <LONG_RAW_>
    *       | <IMAGE_>
    *       | <BYTE_>
    *       | <CLUSTER_>
    *       | <CURRENT_USER_>
    *       | <NULLIF_>
    *       | <SET_BIT_>
    *       | <SET_BYTE_>
    *       | <TO_CHAR_>
    *       | <TO_NUMBER_>
    *       | <TO_TIMESTAMP_>
    *       | <ADD_MONTHS_>
    *       | <JUSTIFY_DAYS_>
    *       | <JUSTIFY_HOURS_>
    *       | <JUSTIFY_INTERVAL_>
    *       | <LAST_DAY_>
    *       | <MONTHS_BETWEEN_>
    *       | <NEXT_DAY_>
    *       | <CURRENT_DATABASE_>
    *       | <CURRENT_SCHEMA_>
    *       | <BIT_AND_>
    *       | <BIT_OR_>
    *       | <BOOL_AND_>
    *       | <BOOL_OR_>
    *       | <EVERY_>
    *       | <CORR_>
    *       | <COVAR_POP_>
    *       | <COVAR_SAMP_>
    *       | <REGR_AVGX_>
    *       | <REGR_AVGY_>
    *       | <REGR_COUNT_>
    *       | <REGR_INTERCEPT_>
    *       | <REGR_R2_>
    *       | <REGR_SLOPE_>
    *       | <REGR_SXX_>
    *       | <REGR_SXY_>
    *       | <REGR_SYY_>
    *       | <REGEXP_REPLACE_>
    *       | <ABBREV_>
    *       | <BROADCAST_>
    *       | <FAMILY_>
    *       | <HOST_>
    *       | <HOSTMASK_>
    *       | <MASKLEN_>
    *       | <NETMASK_>
    *       | <NETWORK_>
    *       | <SET_MASKLEN_>
    *       | <GEOMETRY_>
    *       | <BOX2D_>
    *       | <BOX3D_>
    *       | <BOX3DEXTENT_>
    *       | <REGCLASS_>
    *       | <ST_ASTEXT_>
    *       | <ST_TRANSFORM_>
    *       | <ST_DISTANCE_>
    *       | <ST_DWITHIN_>
    *       | <ST_LENGTH_>
    *       | <ST_AREA_>
    *       | <ST_ASBINARY_>
    *       | <ST_BOUNDARY_>
    *       | <ST_BUFFER_>
    *       | <ST_CENTROID_>
    *       | <ST_ADDMEASURE_>
    *       | <ST_ADDPOINT_>
    *       | <ST_AFFINE_>
    *       | <ST_AREA2D_>
    *       | <ST_ASEWKB_>
    *       | <ST_ASEWKT_>
    *       | <ST_ASGEOJSON_>
    *       | <ST_ASGML_>
    *       | <ST_ASHEXEWKB_>
    *       | <ST_ASKML_>
    *       | <ST_ASSVG_>
    *       | <ST_AZIMUTH_>
    *       | <ST_BDMPOLYFROMTEXT_>
    *       | <ST_BDPOLYFROMTEXT_>
    *       | <ST_BUILDAREA_>
    *       | <ST_BYTEA_>
    *       | <ST_CHIP_IN_>
    *       | <ST_CHIP_OUT_>
    *       | <ST_CLOSESTPOINT_>
    *       | <ST_COLLECT_>
    *       | <ST_COLLECTIONEXTRACT_>
    *       | <ST_COMBINE_BBOX_>
    *       | <ST_COMPRESSION_>
    *       | <ST_CONTAINS_>
    *       | <ST_CONTAINSPROPERLY_>
    *       | <ST_CONVEXHULL_>
    *       | <ST_COORDDIM_>
    *       | <ST_COVEREDBY_>
    *       | <ST_COVERS_>
    *       | <ST_CROSSES_>
    *       | <ST_CURVETOLINE_>
    *       | <ST_DATATYPE_>
    *       | <ST_DFULLYWITHIN_>
    *       | <ST_DIFFERENCE_>
    *       | <ST_DIMENSION_>
    *       | <ST_DISJOINT_>
    *       | <ST_DISTANCE_SPHERE_>
    *       | <ST_DISTANCE_SPHEROID_>
    *       | <ST_ENDPOINT_>
    *       | <ST_ENVELOPE_>
    *       | <ST_EQUALS_>
    *       | <ST_EXTERIORRING_>
    *       | <ST_EXTENT_>
    *       | <ST_EXTENT3D_>
    *       | <ST_FACTOR_>
    *       | <ST_FIND_EXTENT_>
    *       | <ST_FORCERHR_>
    *       | <ST_FORCE_2D_>
    *       | <ST_FORCE_3D_>
    *       | <ST_FORCE_3DM_>
    *       | <ST_FORCE_3DZ_>
    *       | <ST_FORCE_4D_>
    *       | <ST_FORCE_COLLECTION_>
    *       | <ST_GEOGFROMTEXT_>
    *       | <ST_GEOGFROMWKB_>
    *       | <ST_GEOGRAPHYFROMTEXT_>
    *       | <ST_GEOHASH_>
    *       | <ST_GEOMCOLLFROMTEXT_>
    *       | <ST_GEOMCOLLFROMWKB_>
    *       | <ST_GEOMETRYTYPE_>
    *       | <ST_GEOMFROMEWKB_>
    *       | <ST_GEOMFROMEWKT_>
    *       | <ST_GEOMFROMGML_>
    *       | <ST_GEOMFROMKML_>
    *       | <ST_GEOMFROMTEXT_>
    *       | <ST_GEOMFROMWKB_>
    *       | <ST_GMLTOSQL_>
    *       | <ST_HASARC_>
    *       | <ST_HAUSDORFFDISTANCE_>
    *       | <ST_HEIGHT_>
    *       | <ST_INTERIORRINGN_>
    *       | <ST_INTERSECTION_>
    *       | <ST_INTERSECTS_>
    *       | <ST_ISCLOSED_>
    *       | <ST_ISEMPTY_>
    *       | <ST_ISRING_>
    *       | <ST_ISSIMPLE_>
    *       | <ST_ISVALID_>
    *       | <ST_ISVALIDREASON_>
    *       | <ST_LENGTH2D_>
    *       | <ST_LENGTH2D_SPHEROID_>
    *       | <ST_LENGTH3D_>
    *       | <ST_LENGTH3D_SPHEROID_>
    *       | <ST_LENGTH_SPHEROID_>
    *       | <ST_LINECROSSINGDIRECTION_>
    *       | <ST_LINEFROMMULTIPOINT_>
    *       | <ST_LINEFROMTEXT_>
    *       | <ST_LINEFROMWKB_>
    *       | <ST_LINEMERGE_>
    *       | <ST_LINESTRINGFROMWKB_>
    *       | <ST_LINETOCURVE_>
    *       | <ST_LINE_INTERPOLATE_POINT_>
    *       | <ST_LINE_LOCATE_POINT_>
    *       | <ST_LINE_SUBSTRING_>
    *       | <ST_LOCATEBETWEENELEVATIONS_>
    *       | <ST_LOCATE_ALONG_MEASURE_>
    *       | <ST_LOCATE_BETWEEN_MEASURES_>
    *       | <ST_LONGESTLINE_>
    *       | <ST_M_>
    *       | <ST_MAKEENVELOPE_>
    *       | <ST_MAKEPOINT_>
    *       | <ST_MAKEPOINTM_>
    *       | <ST_MAKEPOLYGON_>
    *       | <ST_MAXDISTANCE_>
    *       | <ST_MEMCOLLECT_>
    *       | <ST_MEM_SIZE_>
    *       | <ST_MINIMUMBOUNDINGCIRCLE_>
    *       | <ST_MLINEFROMTEXT_>
    *       | <ST_MLINEFROMWKB_>
    *       | <ST_MPOINTFROMTEXT_>
    *       | <ST_MPOINTFROMWKB_>
    *       | <ST_MPOLYFROMTEXT_>
    *       | <ST_MPOLYFROMWKB_>
    *       | <ST_MULTI_>
    *       | <ST_MULTILINEFROMWKB_>
    *       | <ST_MULTILINESTRINGFROMTEXT_>
    *       | <ST_MULTIPOINTFROMTEXT_>
    *       | <ST_MULTIPOINTFROMWKB_>
    *       | <ST_MULTIPOLYFROMWKB_>
    *       | <ST_MULTIPOLYGONFROMTEXT_>
    *       | <ST_NDIMS_>
    *       | <ST_NPOINTS_>
    *       | <ST_NRINGS_>
    *       | <ST_NUMGEOMETRIES_>
    *       | <ST_NUMINTERIORRING_>
    *       | <ST_NUMINTERIORRINGS_>
    *       | <ST_NUMPOINTS_>
    *       | <ST_ORDERINGEQUALS_>
    *       | <ST_OVERLAPS_>
    *       | <ST_PERIMETER_>
    *       | <ST_PERIMETER2D_>
    *       | <ST_PERIMETER3D_>
    *       | <ST_POINT_>
    *       | <ST_POINTFROMTEXT_>
    *       | <ST_POINTFROMWKB_>
    *       | <ST_POINTN_>
    *       | <ST_POINTONSURFACE_>
    *       | <ST_POINT_INSIDE_CIRCLE_>
    *       | <ST_POLYFROMTEXT_>
    *       | <ST_POLYFROMWKB_>
    *       | <ST_POLYGON_>
    *       | <ST_POLYGONFROMTEXT_>
    *       | <ST_POLYGONFROMWKB_>
    *       | <ST_POSTGIS_GIST_JOINSEL_>
    *       | <ST_POSTGIS_GIST_SEL_>
    *       | <ST_RELATE_>
    *       | <ST_REMOVEPOINT_>
    *       | <ST_REVERSE_>
    *       | <ST_ROTATE_>
    *       | <ST_ROTATEX_>
    *       | <ST_ROTATEY_>
    *       | <ST_ROTATEZ_>
    *       | <ST_SCALE_>
    *       | <ST_SEGMENTIZE_>
    *       | <ST_SETFACTOR_>
    *       | <ST_SETPOINT_>
    *       | <ST_SETSRID_>
    *       | <ST_SHIFT_LONGITUDE_>
    *       | <ST_SHORTESTLINE_>
    *       | <ST_SIMPLIFY_>
    *       | <ST_SIMPLIFYPRESERVETOPOLOGY_>
    *       | <ST_SNAPTOGRID_>
    *       | <ST_SRID_>
    *       | <ST_STARTPOINT_>
    *       | <ST_SUMMARY_>
    *       | <ST_SYMDIFFERENCE_>
    *       | <ST_SYMMETRICDIFFERENCE_>
    *       | <ST_TEXT_>
    *       | <ST_TOUCHES_>
    *       | <ST_TRANSLATE_>
    *       | <ST_TRANSSCALE_>
    *       | <ST_WIDTH_>
    *       | <ST_WITHIN_>
    *       | <ST_WKBTOSQL_>
    *       | <ST_WKTTOSQL_>
    *       | <ST_X_>
    *       | <ST_Y_>
    *       | <ST_Z_>
    *       | <ST_ZMFLAG_>
    *       | <ST_BOX2D_>
    *       | <ST_BOX3D_>
    *       | <ST_GEOMETRY_>
    *       | <ST_GEOMETRYN_>
    *       | <SETPOINT_>
    *       | <ASEWKT_>
    *       | <SIMPLIFY_>
    *       | <ASTEXT_>
    *       | <REMOVEPOINT_>
    *       | <NPOINTS_>
    *       | <NRINGS_>
    *       | <MEM_SIZE_>
    *       | <NUMGEOMETRIES_>
    *       | <POSTGIS_DROPBBOX_>
    *       | <DROPBBOX_>
    *       | <SETSRID_>
    *       | <MULTI_>
    *       | <FORCE_2D_>
    *       | <FORCE_3D_>
    *       | <FORCE_3DM_>
    *       | <FORCE_3DZ_>
    *       | <FORCE_4D_>
    *       | <SEGMENTIZE_>
    *       | <FORCE_COLLECTION_>
    *       | <ASBINARY_>
    *       | <EXTENT_>
    *       | <EXTENT3D_>
    *       | <COLLECT_>
    *       | <LOCATE_ALONG_MEASURE_>
    *       | <LOCATE_BETWEEN_MEASURES_>
    *       | <LINE_LOCATE_POINT_>
    *       | <LINE_SUBSTRING_>
    *       | <LINE_INTERPOLATE_POINT_>
    *       | <GEOMFROMTEXT_>
    *       | <GEOMFROMEWKT_>
    *       | <ADDGEOMETRYCOLUMN_>
    *       | <GEOMETRYTYPE_>
    *       | <ZMFLAG_>
    *       | <ASEWKB_>
    *       | <SNAPTOGRID_>
    *       | <SCALE_>
    *       | <ROTATEZ_>
    *       | <ROTATE_>
    *       | <ROTATEX_>
    *       | <ROTATEY_>
    *       | <TRANSSCALE_>
    *       | <AREA2D_>
    *       | <PERIMETER2D_>
    *       | <PERIMETER3D_>
    *       | <LENGTH2D_>
    *       | <LENGTH3D_>
    *       | <DISTANCE_>
    *       | <SRID_>
    *       | <WITHIN_>
    *       | <DISJOINT_>
    *       | <INTERSECTS_>
    *       | <CONTAINS_>
    *       | <ASKML_>
    *       | <NDIMS_>
    *       | <ISVALID_>
    *       | <DIMENSION_>
    *       | <GEOMETRYN_>
    *       | <ASHEXEWKB_>
    *       | <ISCLOSED_>
    *       | <ISSIMPLE_>
    *       | <ISRING_>
    *       | <DIFFERENCE_>
    *       | <LINEMERGE_>
    *       | <INTERSECTION_>
    *       | <SYMDIFFERENCE_>
    *       | <WORD_EQUALS_>
    *       | <ENVELOPE_>
    *       | <ISEMPTY_>
    *       | <STARTPOINT_>
    *       | <ENDPOINT_>
    *       | <EXTERIORRING_>
    *       | <NUMINTERIORRINGS_>
    *       | <INTERIORRINGN_>
    *       | <TRANSFORM_>
    *       | <X_>
    *       | <Y_>
    *       | <Z_>
    *       | <SPATIAL_>
    *       | <PORT_>
    */
   public void visit(UnreservedWords n);

   /**
    * f0 -> <IDENTIFIER>
    *       | <QUOTED_IDENTIFIER>
    *       | UnreservedWords(prn)
    */
   public void visit(Identifier n);

   /**
    * f0 -> ( VacuumDatabase(prn) [ <SEMICOLON_> ] | AnalyzeDatabase(prn) [ <SEMICOLON_> ] | createTable(prn) [ <SEMICOLON_> ] | CreateTablespace(prn) [ <SEMICOLON_> ] | createIndex(prn) [ <SEMICOLON_> ] | dropTable(prn) [ <SEMICOLON_> ] | DropTablespace(prn) [ <SEMICOLON_> ] | SelectAddGeometryColumn(prn) [ <SEMICOLON_> ] | SelectWithParenthesis(prn) [ <SEMICOLON_> ] | InsertTable(prn) [ <SEMICOLON_> ] | UpdateTable(prn) [ <SEMICOLON_> ] | Delete(prn) [ <SEMICOLON_> ] | Alter(prn) [ <SEMICOLON_> ] | DropIndex(prn) [ <SEMICOLON_> ] | RenameTable(prn) [ <SEMICOLON_> ] | UpdateStats(prn) [ <SEMICOLON_> ] | ShowAgents() [ <SEMICOLON_> ] | ShowDatabases() [ <SEMICOLON_> ] | ShowStatements() [ <SEMICOLON_> ] | ShowTables() [ <SEMICOLON_> ] | ShowTranIsolation() [ <SEMICOLON_> ] | BeginTransaction() [ <SEMICOLON_> ] | CommitTransaction() [ <SEMICOLON_> ] | RollbackTransaction() [ <SEMICOLON_> ] | DescribeTable(prn) [ <SEMICOLON_> ] | ShowConstraints(prn) [ <SEMICOLON_> ] | ShowIndexes(prn) [ <SEMICOLON_> ] | Deallocate(prn) [ <SEMICOLON_> ] | CreateUser(prn) [ <SEMICOLON_> ] | DropUser(prn) [ <SEMICOLON_> ] | AlterUser(prn) [ <SEMICOLON_> ] | Grant(prn) [ <SEMICOLON_> ] | Revoke(prn) [ <SEMICOLON_> ] | createView(prn) [ <SEMICOLON_> ] | DropView(prn) [ <SEMICOLON_> ] | ShowUsers(prn) [ <SEMICOLON_> ] | ShowViews(prn) [ <SEMICOLON_> ] | Cluster(prn) [ <SEMICOLON_> ] | Truncate(prn) [ <SEMICOLON_> ] | ExecDirect(prn) [ <SEMICOLON_> ] | Explain(prn) [ <SEMICOLON_> ] | SetProperty(prn) [ <SEMICOLON_> ] | ShowProperty(prn) [ <SEMICOLON_> ] | AddNodeToDB(prn) [ <SEMICOLON_> ] | DropNodeFromDB(prn) [ <SEMICOLON_> ] | StartDatabase(prn) [ <SEMICOLON_> ] | StopDatabase(prn) [ <SEMICOLON_> ] | ShutdownXDB(prn) [ <SEMICOLON_> ] | CreateDatabase(prn) [ <SEMICOLON_> ] | DropDatabase(prn) [ <SEMICOLON_> ] | CopyData(prn) [ <SEMICOLON_> ] | Kill(prn) [ <SEMICOLON_> ] | Unlisten(prn) [ <SEMICOLON_> ] | DeclareCursor(prn) [ <SEMICOLON_> ] | CloseCursor(prn) [ <SEMICOLON_> ] | FetchCursor(prn) [ <SEMICOLON_> ] )
    * f1 -> <EOF>
    */
   public void visit(process n);

   /**
    * f0 -> <COPY_>
    * f1 -> ( TableName(prn) [ ColumnNameListWithParenthesis(prn) ] | <PARENTHESIS_START_> Select(prn) <PARENTHESIS_CLOSE_> )
    * f2 -> ( <FROM_> ( <STDIN_> | <STRING_LITERAL> ) | <TO_> ( <STDOUT_> | <STRING_LITERAL> ) )
    * f3 -> [ [ <WITH_> ] ( FormatDefOIDS(prn) | FormatDefDelimiter(prn) | FormatDefNull(prn) | FormatDefCSV(prn) )+ ]
    */
   public void visit(CopyData n);

   /**
    * f0 -> <OIDS_>
    */
   public void visit(FormatDefOIDS n);

   /**
    * f0 -> <DELIMITER_>
    * f1 -> [ <AS_> ]
    * f2 -> <STRING_LITERAL>
    */
   public void visit(FormatDefDelimiter n);

   /**
    * f0 -> <NULL_>
    * f1 -> [ <AS_> ]
    * f2 -> <STRING_LITERAL>
    */
   public void visit(FormatDefNull n);

   /**
    * f0 -> <CSV_>
    * f1 -> ( <QUOTE_STRING_> [ <AS_> ] <STRING_LITERAL> | <ESCAPE_> [ <AS_> ] <STRING_LITERAL> | <FORCE_QUOTE_> ColumnNameList(prn) | <FORCE_NOT_NULL_> ColumnNameList(prn) )*
    */
   public void visit(FormatDefCSV n);

   /**
    * f0 -> <ADD_NODE_>
    * f1 -> <INT_LITERAL>
    * f2 -> ( "," <INT_LITERAL> )*
    * f3 -> [ <MANUAL_> ]
    */
   public void visit(AddNodeToDB n);

   /**
    * f0 -> <DROP_NODE_>
    * f1 -> <INT_LITERAL>
    * f2 -> ( "," <INT_LITERAL> )*
    * f3 -> [ <FORCE_> ]
    */
   public void visit(DropNodeFromDB n);

   /**
    * f0 -> <START_DB_>
    * f1 -> Identifier(prn)
    * f2 -> ( "," Identifier(prn) )*
    * f3 -> [ <WAIT_TIMEOUT_> <INT_LITERAL> ]
    */
   public void visit(StartDatabase n);

   /**
    * f0 -> <STOP_DB_>
    * f1 -> Identifier(prn)
    * f2 -> ( "," Identifier(prn) )*
    */
   public void visit(StopDatabase n);

   /**
    * f0 -> <SHUT_DOWN_>
    * f1 -> [ <FORCE_> ]
    */
   public void visit(ShutdownXDB n);

   /**
    * f0 -> <CREATE_DB_>
    * f1 -> Identifier(prn)
    * f2 -> [ [ <WITH_> ] ( <OWNER_> [ "=" ] Identifier(prn) | <SPATIAL_> )+ ]
    * f3 -> [ <MANUAL_> ]
    * f4 -> <ON_>
    * f5 -> ( <NODE_> | <NODES_> )
    * f6 -> <INT_LITERAL>
    * f7 -> ( "," <INT_LITERAL> )*
    */
   public void visit(CreateDatabase n);

   /**
    * f0 -> <DROP_DB_>
    * f1 -> Identifier(prn)
    * f2 -> [ <FORCE_> ]
    */
   public void visit(DropDatabase n);

   /**
    * f0 -> <CREATE_NODE_>
    * f1 -> <FOR_>
    * f2 -> Identifier(prn)
    * f3 -> [ [ <WITH_> ] ( FormatDefPort(prn) | FormatDefUser(prn) | FormatDefPassword(prn) )+ ]
    */
   public void visit(CreateNode n);

   /**
    * f0 -> <PORT_>
    * f1 -> [ "=" ]
    * f2 -> <INT_LITERAL>
    */
   public void visit(FormatDefPort n);

   /**
    * f0 -> <USER_>
    * f1 -> [ "=" ]
    * f2 -> Identifier(prn)
    */
   public void visit(FormatDefUser n);

   /**
    * f0 -> <PASSWORD_>
    * f1 -> [ "=" ]
    * f2 -> Identifier(prn)
    */
   public void visit(FormatDefPassword n);

   /**
    * f0 -> <EXEC_>
    * f1 -> <DIRECT_>
    * f2 -> <ON_>
    * f3 -> ( <ALL_> | ( <NODE_> | <NODES_> ) <INT_LITERAL> ( "," <INT_LITERAL> )* )
    * f4 -> <STRING_LITERAL>
    */
   public void visit(ExecDirect n);

   /**
    * f0 -> <EXPLAIN_>
    * f1 -> [ <VERBOSE_> ]
    * f2 -> Select(prn)
    */
   public void visit(Explain n);

   /**
    * f0 -> <VACUUM_>
    * f1 -> [ <FULL_> | <FREEZE_> ]
    * f2 -> [ TableName(prn) | AnalyzeDatabase(prn) ]
    */
   public void visit(VacuumDatabase n);

   /**
    * f0 -> <ANALYZE_>
    * f1 -> [ TableName(prn) [ <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_> ] ]
    */
   public void visit(AnalyzeDatabase n);

   /**
    * f0 -> <CREATE_>
    * f1 -> <TABLESPACE_>
    * f2 -> Identifier(prn)
    * f3 -> TablespaceLocation(prn)
    * f4 -> ( "," TablespaceLocation(prn) )*
    */
   public void visit(CreateTablespace n);

   /**
    * f0 -> <DROP_>
    * f1 -> <TABLESPACE_>
    * f2 -> Identifier(prn)
    */
   public void visit(DropTablespace n);

   /**
    * f0 -> <LOCATION_>
    * f1 -> stringLiteral(prn)
    * f2 -> <ON_>
    * f3 -> ( <ALL_> | ( <NODE_> | <NODES_> ) <INT_LITERAL> ( "," <INT_LITERAL> )* )
    */
   public void visit(TablespaceLocation n);

   /**
    * f0 -> <UPDATE_STAT_>
    * f1 -> ( <COLUMN_> ( <PARENTHESIS_START_> <STAR_> <PARENTHESIS_CLOSE_> | <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_> ) <FOR_> TableName(prn) | TableName(prn) | <STAR_> )
    */
   public void visit(UpdateStats n);

   /**
    * f0 -> <RENAME_>
    * f1 -> <TABLE_>
    * f2 -> TableName(prn)
    * f3 -> <TO_>
    * f4 -> TableName(prn)
    */
   public void visit(RenameTable n);

   /**
    * f0 -> <DROP_>
    * f1 -> <INDEX_>
    * f2 -> Identifier(prn)
    * f3 -> [ <ON_> TableName(prn) ]
    */
   public void visit(DropIndex n);

   /**
    * f0 -> <ALTER_>
    * f1 -> ( AlterTable(prn) | AlterTableSpace(prn) )
    */
   public void visit(Alter n);

   /**
    * f0 -> <TABLESPACE_>
    * f1 -> Identifier(prn)
    * f2 -> <RENAME_>
    * f3 -> <TO_>
    * f4 -> Identifier(prn)
    */
   public void visit(AlterTableSpace n);

   /**
    * f0 -> <TABLE_>
    * f1 -> TableName(prn)
    * f2 -> AlterTableActon(prn)
    * f3 -> ( "," AlterTableActon(prn) )*
    */
   public void visit(AlterTable n);

   /**
    * f0 -> AddDef(prn)
    *       | DropDef(prn)
    *       | AlterDef(prn)
    *       | RenameDef(prn)
    *       | OwnerDef(prn)
    *       | SetTablespace(prn)
    *       | Inherit(prn)
    */
   public void visit(AlterTableActon n);

   /**
    * f0 -> [ <NO_> ]
    * f1 -> <INHERIT_>
    * f2 -> TableName(prn)
    */
   public void visit(Inherit n);

   /**
    * f0 -> <SET_>
    * f1 -> <TABLESPACE_>
    * f2 -> Identifier(prn)
    */
   public void visit(SetTablespace n);

   /**
    * f0 -> <SET_>
    * f1 -> ( Identifier(prn) [ <TO_> | "=" ] ( <STRING_LITERAL> | Identifier(prn) | <ON_> | <TRUE_> | <FALSE_> ) | <TRANSACTION_> <ISOLATION_LEVEL_> IsolationLevel(prn) )
    */
   public void visit(SetProperty n);

   /**
    * f0 -> ( <SERIALIZABLE_> | <REPEATABLE_READ_> | <READ_COMMITTED_> | <READ_UNCOMMITTED_> )
    */
   public void visit(IsolationLevel n);

   /**
    * f0 -> <SHOW_>
    * f1 -> ( <IDENTIFIER> | <ALL_> | <QUOTED_IDENTIFIER> )
    */
   public void visit(ShowProperty n);

   /**
    * f0 -> <OWNER_TO_>
    * f1 -> ( <PUBLIC_> | Identifier(prn) )
    */
   public void visit(OwnerDef n);

   /**
    * f0 -> <CONSTRAINT_>
    * f1 -> Identifier(prn)
    */
   public void visit(Constraint n);

   /**
    * f0 -> <ADD_>
    * f1 -> ( [ <COLUMN_> ] ColumnDeclare(prn) [ <FIRST_> | <AFTER_> Identifier(prn) ] | [ Constraint(prn) ] ( PrimaryKeyDef(prn) | ForeignKeyDef(prn) | CheckDef(prn) ) )
    */
   public void visit(AddDef n);

   /**
    * f0 -> <DROP_>
    * f1 -> ( [ <COLUMN_> ] Identifier(prn) | Constraint(prn) | <PRIMARYKEY_> )
    */
   public void visit(DropDef n);

   /**
    * f0 -> <RENAME_>
    * f1 -> [ <COLUMN_> ]
    * f2 -> Identifier(prn)
    * f3 -> <TO_>
    * f4 -> Identifier(prn)
    */
   public void visit(RenameDef n);

   /**
    * f0 -> ( <MODIFY_> | <ALTER_> )
    * f1 -> [ <COLUMN_> ]
    * f2 -> AlterDefOperation(prn)
    */
   public void visit(AlterDef n);

   /**
    * f0 -> Identifier(prn)
    * f1 -> ( AlterDefOperationType(prn) | AlterDefOperationSet(prn) | DropDefaultNotNull(prn) )
    */
   public void visit(AlterDefOperation n);

   /**
    * f0 -> <TYPE_>
    * f1 -> types()
    * f2 -> [ <USING_> ( <STRING_LITERAL> | <NULL_> | <DATE_> | <TIME_> | <TIMESTAMP_> | <INT_LITERAL> | <DECIMAL_LITERAL> | IntervalLiterals(prn) ) ]
    */
   public void visit(AlterDefOperationType n);

   /**
    * f0 -> <SET_>
    * f1 -> ( DefaultSpec(prn) | <NOT_> <NULL_> | <STATISTICS_> <INT_LITERAL> | <STORAGE_> )
    */
   public void visit(AlterDefOperationSet n);

   /**
    * f0 -> <DROP_>
    * f1 -> ( <DEFAULT_> | <NOT_> <NULL_> )
    */
   public void visit(DropDefaultNotNull n);

   /**
    * f0 -> <DELETE_>
    * f1 -> <FROM_>
    * f2 -> TableName(prn)
    * f3 -> [ WhereClause(prn) ]
    */
   public void visit(Delete n);

   /**
    * f0 -> <UPDATE_>
    * f1 -> TableName(prn)
    * f2 -> <SET_>
    * f3 -> SetUpdateClause(prn)
    * f4 -> ( "," SetUpdateClause(prn) )*
    * f5 -> [ WhereClause(prn) ]
    */
   public void visit(UpdateTable n);

   /**
    * f0 -> [ TableName(prn) "." ]
    * f1 -> Identifier(prn)
    * f2 -> "="
    * f3 -> SQLSimpleExpression(prn)
    */
   public void visit(SetUpdateClause n);

   /**
    * f0 -> <CREATE_>
    * f1 -> [ <UNIQUE_> ]
    * f2 -> <INDEX_>
    * f3 -> Identifier(prn)
    * f4 -> <ON_>
    * f5 -> TableName(prn)
    * f6 -> [ <USING_> Identifier(prn) ]
    * f7 -> <PARENTHESIS_START_>
    * f8 -> columnListIndexSpec(prn)
    * f9 -> <PARENTHESIS_CLOSE_>
    * f10 -> [ tablespaceDef(prn) ]
    * f11 -> [ WhereClause(prn) ]
    */
   public void visit(createIndex n);

   /**
    * f0 -> ( Identifier(prn) | <PARENTHESIS_START_> SQLSimpleExpression(prn) <PARENTHESIS_CLOSE_> )
    * f1 -> [ <ASC_> | <DESC_> | Identifier(prn) ]
    * f2 -> ( "," ( Identifier(prn) | <PARENTHESIS_START_> SQLSimpleExpression(prn) <PARENTHESIS_CLOSE_> ) [ <ASC_> | <DESC_> | Identifier(prn) ] )*
    */
   public void visit(columnListIndexSpec n);

   /**
    * f0 -> <CREATE_>
    * f1 -> [ [ <LOCAL_> | <GLOBAL_> ] ( <TEMP_> | <TEMPORARY_> ) ]
    * f2 -> <TABLE_>
    * f3 -> TableName(prn)
    * f4 -> ( <PARENTHESIS_START_> CreateDefinition(prn) ( "," CreateDefinition(prn) )* <PARENTHESIS_CLOSE_> [ PartitionDeclare(prn) ] [ inheritsDef(prn) ] [ WithXRowID(prn) ] [ OnCommitClause(prn) ] [ tablespaceDef(prn) ] | [ <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_> ] [ PartitionDeclare(prn) ] [ WithXRowID(prn) ] [ OnCommitClause(prn) ] [ tablespaceDef(prn) ] <AS_> SelectWithoutOrderAndSet(prn) )
    */
   public void visit(createTable n);

   /**
    * f0 -> <ON_COMMIT_>
    * f1 -> ( <PRESERVE_ROWS_> | <DELETE_ROWS_> | <DROP_> )
    */
   public void visit(OnCommitClause n);

   /**
    * f0 -> <WITH_XROWID_>
    *       | <WITHOUT_XROWID_>
    */
   public void visit(WithXRowID n);

   /**
    * f0 -> <TABLESPACE_>
    * f1 -> Identifier(prn)
    */
   public void visit(tablespaceDef n);

   /**
    * f0 -> <INHERITS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> TableName(prn)
    * f3 -> ( "," TableName(prn) )*
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(inheritsDef n);

   /**
    * f0 -> ( <CREATE_> | <REPLACE_> )
    * f1 -> <VIEW_>
    * f2 -> TableName(prn)
    * f3 -> [ ColumnNameListWithParenthesis(prn) ]
    * f4 -> <AS_>
    * f5 -> SelectWithoutOrder(prn)
    */
   public void visit(createView n);

   /**
    * f0 -> <PARENTHESIS_START_>
    * f1 -> ColumnNameList(prn)
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(ColumnNameListWithParenthesis n);

   /**
    * f0 -> <DROP_>
    * f1 -> <VIEW_>
    * f2 -> TableName(prn)
    */
   public void visit(DropView n);

   /**
    * f0 -> <DROP_>
    * f1 -> <TABLE_>
    * f2 -> TableName(prn)
    * f3 -> ( "," TableName(prn) )*
    */
   public void visit(dropTable n);

   /**
    * f0 -> <INSERT_>
    * f1 -> [ <INTO_> ]
    * f2 -> TableName(prn)
    * f3 -> [ <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_> ]
    * f4 -> ( <VALUES_> <PARENTHESIS_START_> SQLExpressionList(prn) <PARENTHESIS_CLOSE_> | SelectWithoutOrderWithParenthesis(prn) )
    */
   public void visit(InsertTable n);

   /**
    * f0 -> <PRIMARYKEY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> ColumnNameList(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(PrimaryKeyDef n);

   /**
    * f0 -> <CHECK_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> skip_to_matching_brace(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(CheckDef n);

   /**
    * f0 -> ColumnDeclare(prn)
    *       | [ Constraint(prn) ] ( PrimaryKeyDef(prn) | ForeignKeyDef(prn) | CheckDef(prn) )
    */
   public void visit(CreateDefinition n);

   /**
    * f0 -> Identifier(prn)
    * f1 -> types()
    * f2 -> [ <NOT_> <NULL_> | <NULL_> ]
    * f3 -> [ DefaultSpec(prn) ]
    * f4 -> [ <PRIMARYKEY_> ]
    * f5 -> [ <CHECK_> <PARENTHESIS_START_> SQLComplexExpression(prn) <PARENTHESIS_CLOSE_> ]
    */
   public void visit(ColumnDeclare n);

   /**
    * f0 -> <FOREIGNKEY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> ColumnNameList(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    * f4 -> <REFERENCES_>
    * f5 -> TableName(prn)
    * f6 -> <PARENTHESIS_START_>
    * f7 -> ColumnNameList(prn)
    * f8 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(ForeignKeyDef n);

   /**
    * f0 -> <DEFAULT_>
    * f1 -> SQLSimpleExpression(prn)
    */
   public void visit(DefaultSpec n);

   /**
    * f0 -> <PARTITIONINGKEY_> [ Identifier(prn) ] <ON_> PartitionChoice(prn)
    *       | <PARTITION_WITH_> <PARENT_>
    *       | <REPLICATED_>
    *       | <ON_> ( <NODE_> | <NODES_> ) <INT_LITERAL>
    *       | <ROUND_ROBIN_> <ON_> PartitionChoice(prn)
    */
   public void visit(PartitionDeclare n);

   /**
    * f0 -> <ALL_>
    *       | ( <NODE_> | <NODES_> ) NodePartitionList(prn)
    */
   public void visit(PartitionChoice n);

   /**
    * f0 -> <INT_LITERAL>
    * f1 -> ( "," <INT_LITERAL> )+
    */
   public void visit(NodePartitionList n);

   /**
    * f0 -> IntegerDataType()
    *       | SmallIntDataType()
    *       | RealDataType()
    *       | DoublePrecision()
    *       | FloatDataType()
    *       | DecimalDataType()
    *       | NumericDataType()
    *       | FixedDataType()
    *       | CharachterDataType()
    *       | VarCharDataType()
    *       | DateDataType()
    *       | TimeDataType()
    *       | TimeStampDataType()
    *       | BooleanDataType()
    *       | NationalCharDataType()
    *       | SerialDataType()
    *       | BigSerialDataType()
    *       | BigIntDataType()
    *       | IntervalDataType()
    *       | TextDataType()
    *       | BLOBDataType()
    *       | BitDataType()
    *       | VarBitDataType()
    *       | MacAddrDataType()
    *       | CidrDataType()
    *       | InetDataType()
    *       | GeometryDataType()
    *       | Box2DDataType()
    *       | Box3DDataType()
    *       | Box3DExtentDataType()
    *       | RegClassDataType()
    */
   public void visit(types n);

   /**
    * f0 -> <YEAR_>
    *       | <QUARTER_>
    *       | <MONTH_>
    *       | <WEEK_>
    *       | <DAY_>
    *       | <HOUR_>
    *       | <MINUTE_>
    *       | <SECOND_>
    */
   public void visit(DatetimeField n);

   /**
    * f0 -> DatetimeField()
    * f1 -> <TO_>
    * f2 -> DatetimeField()
    */
   public void visit(IntervalQualifier n);

   /**
    * f0 -> <INTERVAL_>
    * f1 -> [ IntervalQualifier() ]
    */
   public void visit(IntervalDataType n);

   /**
    * f0 -> <TEXT_>
    *       | <CLOB_>
    *       | <LONG_>
    *       | <LONG_VARCHAR_>
    *       | <LONGTEXT_>
    *       | <LVARCHAR_>
    *       | <MEDIUMTEXT_>
    */
   public void visit(TextDataType n);

   /**
    * f0 -> <BLOB_>
    *       | <BYTEA_>
    *       | <BYTE_>
    *       | <BINARY_>
    *       | <IMAGE_>
    *       | <LONG_RAW_>
    *       | <RAW_>
    *       | <VARBINARY_>
    */
   public void visit(BLOBDataType n);

   /**
    * f0 -> <BIT_>
    * f1 -> [ LengthSpec() ]
    */
   public void visit(BitDataType n);

   /**
    * f0 -> <VARBIT_>
    * f1 -> [ LengthSpec() ]
    */
   public void visit(VarBitDataType n);

   /**
    * f0 -> <MACADDR_>
    */
   public void visit(MacAddrDataType n);

   /**
    * f0 -> <CIDR_>
    */
   public void visit(CidrDataType n);

   /**
    * f0 -> <INET_>
    */
   public void visit(InetDataType n);

   /**
    * f0 -> <GEOMETRY_>
    */
   public void visit(GeometryDataType n);

   /**
    * f0 -> <BOX2D_>
    */
   public void visit(Box2DDataType n);

   /**
    * f0 -> <BOX3D_>
    */
   public void visit(Box3DDataType n);

   /**
    * f0 -> <BOX3DEXTENT_>
    */
   public void visit(Box3DExtentDataType n);

   /**
    * f0 -> <REGCLASS_>
    */
   public void visit(RegClassDataType n);

   /**
    * f0 -> <BOOLEAN_>
    */
   public void visit(BooleanDataType n);

   /**
    * f0 -> ( <SMALLINT_> | <INT2_> ) [ <SERIAL_> ] UnsignedZeroFillSpecs()
    *       | <TINYINT_>
    */
   public void visit(SmallIntDataType n);

   /**
    * f0 -> ( <BIGINT_> | <BIGINTEGER_> | <INT8_> )
    * f1 -> [ <SERIAL_> ]
    * f2 -> UnsignedZeroFillSpecs()
    */
   public void visit(BigIntDataType n);

   /**
    * f0 -> <SERIAL_>
    */
   public void visit(SerialDataType n);

   /**
    * f0 -> <BIGSERIAL_>
    */
   public void visit(BigSerialDataType n);

   /**
    * f0 -> ( <REAL_> | <SMALLFLOAT_> | <FLOAT4_> )
    * f1 -> UnsignedZeroFillSpecs()
    */
   public void visit(RealDataType n);

   /**
    * f0 -> ( <INT_> | <INTEGER_> | <INT4_> )
    * f1 -> [ <SERIAL_> ]
    * f2 -> UnsignedZeroFillSpecs()
    */
   public void visit(IntegerDataType n);

   /**
    * f0 -> <FLOAT_>
    * f1 -> [ LengthSpec() ]
    * f2 -> UnsignedZeroFillSpecs()
    */
   public void visit(FloatDataType n);

   /**
    * f0 -> <TIMESTAMP_> [ LengthSpec() ] [ ( <WITH_TIMEZONE_> | <WITHOUT_TIMEZONE_> ) ]
    *       | <DATETIME_>
    *       | <SAMLLDATETIME_>
    */
   public void visit(TimeStampDataType n);

   /**
    * f0 -> <TIME_>
    * f1 -> [ LengthSpec() ]
    * f2 -> [ ( <WITH_TIMEZONE_> | <WITHOUT_TIMEZONE_> ) ]
    */
   public void visit(TimeDataType n);

   /**
    * f0 -> <DATE_>
    */
   public void visit(DateDataType n);

   /**
    * f0 -> ( <VARCHAR_> | <VARCHAR2_> ) [ LengthSpec() ]
    *       | <TINYTEXT_>
    */
   public void visit(VarCharDataType n);

   /**
    * f0 -> ( <NUMERIC_> | <NUMBER_> ) [ PrecisionSpec() ] UnsignedZeroFillSpecs()
    *       | <MONEY_>
    *       | <SMALLMONEY_>
    *       | <YEAR_>
    */
   public void visit(NumericDataType n);

   /**
    * f0 -> ( <DECIMAL_> | <DEC_> )
    * f1 -> [ PrecisionSpec() ]
    * f2 -> UnsignedZeroFillSpecs()
    */
   public void visit(DecimalDataType n);

   /**
    * f0 -> <FIXED_>
    * f1 -> PrecisionSpec()
    * f2 -> UnsignedZeroFillSpecs()
    */
   public void visit(FixedDataType n);

   /**
    * f0 -> ( <NCHAR_> | <NATIONAL_> ( <CHAR_> | <CHARACHTER_> ) )
    * f1 -> [ <VARYING_> ]
    * f2 -> [ LengthSpec() ]
    */
   public void visit(NationalCharDataType n);

   /**
    * f0 -> <DOUBLE_PRECISION_>
    *       | <FLOAT8_>
    */
   public void visit(DoublePrecision n);

   /**
    * f0 -> ( <CHARACHTER_> | <CHAR_> )
    * f1 -> [ <VARYING_> ]
    * f2 -> [ LengthSpec() ]
    */
   public void visit(CharachterDataType n);

   /**
    * f0 -> <PARENTHESIS_START_>
    * f1 -> <INT_LITERAL>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(LengthSpec n);

   /**
    * f0 -> [ <UNSIGNED_> ]
    * f1 -> [ <ZEROFILL_> ]
    */
   public void visit(UnsignedZeroFillSpecs n);

   /**
    * f0 -> <PARENTHESIS_START_>
    * f1 -> <INT_LITERAL>
    * f2 -> [ "," <INT_LITERAL> ]
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(PrecisionSpec n);

   /**
    * f0 -> <SELECT_>
    * f1 -> <ADDGEOMETRYCOLUMN_>
    * f2 -> <PARENTHESIS_START_>
    * f3 -> SQLArgument(prn)
    * f4 -> ","
    * f5 -> SQLArgument(prn)
    * f6 -> ","
    * f7 -> SQLArgument(prn)
    * f8 -> ","
    * f9 -> SQLArgument(prn)
    * f10 -> ","
    * f11 -> SQLArgument(prn)
    * f12 -> [ "," SQLArgument(prn) ]
    * f13 -> [ "," SQLArgument(prn) ]
    * f14 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(SelectAddGeometryColumn n);

   /**
    * f0 -> Select(prn)
    */
   public void visit(SelectWithParenthesis n);

   /**
    * f0 -> SelectWithoutOrderWithParenthesis(prn)
    * f1 -> [ OrderByClause(prn) ]
    * f2 -> [ LimitClause(prn) ]
    * f3 -> [ OffsetClause(prn) ]
    */
   public void visit(Select n);

   /**
    * f0 -> SelectWithoutOrder(prn)
    */
   public void visit(SelectWithoutOrderWithParenthesis n);

   /**
    * f0 -> SelectWithoutOrderAndSetWithParenthesis(prn)
    * f1 -> ( <UNION_> [ <ALL_> ] ( SelectWithoutOrderAndSet(prn) | UnionSpec(prn) ) )*
    */
   public void visit(SelectWithoutOrder n);

   /**
    * f0 -> SelectWithoutOrderAndSet(prn)
    *       | <PARENTHESIS_START_> SelectWithoutOrderAndSetWithParenthesis(prn) <PARENTHESIS_CLOSE_>
    */
   public void visit(SelectWithoutOrderAndSetWithParenthesis n);

   /**
    * f0 -> <PARENTHESIS_START_>
    * f1 -> SelectWithoutOrder(prn)
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(UnionSpec n);

   /**
    * f0 -> <SELECT_>
    * f1 -> [ <ALL_> | <DISTINCT_> | <UNIQUE_> ]
    * f2 -> SelectList(prn)
    * f3 -> [ IntoClause(prn) ]
    * f4 -> [ FromClause(prn) ]
    * f5 -> [ WhereClause(prn) ]
    * f6 -> [ GroupByClause(prn) ]
    * f7 -> [ HavingClause(prn) ]
    */
   public void visit(SelectWithoutOrderAndSet n);

   /**
    * f0 -> SelectTupleSpec(prn)
    * f1 -> ( "," SelectTupleSpec(prn) )*
    */
   public void visit(SelectList n);

   /**
    * f0 -> ( <STAR_> | TableName(prn) "." <STAR_> | SQLSimpleExpression(prn) [ SelectAliasSpec(prn) ] )
    */
   public void visit(SelectTupleSpec n);

   /**
    * f0 -> SQLPrecedenceLevel1Expression(prn)
    * f1 -> ( SQLPrecedenceLevel1Operand(prn) )*
    */
   public void visit(SQLSimpleExpression n);

   /**
    * f0 -> SQLPrecedenceLevel2Expression(prn)
    * f1 -> ( SQLPrecedenceLevel2Operand(prn) )*
    */
   public void visit(SQLPrecedenceLevel1Expression n);

   /**
    * f0 -> ( <CONTAINED_WITHIN_OR_EQUALS_> | <CONTAINS_OR_EQUALS_> | <GREATER_> | <GREATER_EQUALS_> | <LESS_> | <LESS_EQUALS_> | <EQUALS_> | <NOT_EQUALS_> | <NOT_EQUALS_2_> | <GIS_OVERLAPS_> | <GIS_OVERLAPS_RIGHT_> | <GIS_OVERLAPS_LEFT_> | <GIS_OVERLAPS_BELOW_> | <GIS_OVERLAPS_ABOVE_> | <GIS_SAME_> | <GIS_STRICT_BELOW_> | <GIS_STRICT_ABOVE_> | <NOT_BITWISE_> | <ABSOLUTE_> )
    * f1 -> SQLSimpleExpression(prn)
    */
   public void visit(SQLPrecedenceLevel1Operand n);

   /**
    * f0 -> SQLPrecedenceLevel3Expression(prn)
    * f1 -> ( SQLPrecedenceLevel3Operand(prn) )*
    */
   public void visit(SQLPrecedenceLevel2Expression n);

   /**
    * f0 -> ( <PLUS_> | <MINUS_> | <CONCAT_> )
    * f1 -> SQLPrecedenceLevel1Expression(prn)
    */
   public void visit(SQLPrecedenceLevel2Operand n);

   /**
    * f0 -> SQLPrimaryExpression(prn)
    */
   public void visit(SQLPrecedenceLevel3Expression n);

   /**
    * f0 -> ( <STAR_> | <DIVIDE_> | <MOD_> | <DIV_> | <MODULO_> | <AND_BITWISE_> | <OR_BITWISE_> | <XOR_BITWISE_> | <SHIFT_LEFT_BITWISE_> | <SHIFT_RIGHT_BITWISE_> )
    * f1 -> SQLPrecedenceLevel2Expression(prn)
    */
   public void visit(SQLPrecedenceLevel3Operand n);

   /**
    * f0 -> [ <SQUARE_ROOT_> | <CUBE_ROOT_> | <FACTORIAL_PREFIX_> | <ABSOLUTE_> | <NOT_BITWISE_> ]
    * f1 -> [ <PLUS_> | <MINUS_> ]
    * f2 -> ( FunctionCall(prn) | TableColumn(prn) | PseudoColumn(prn) | numberValue(prn) | <PARENTHESIS_START_> SQLComplexExpression(prn) <PARENTHESIS_CLOSE_> | booleanLiteral(prn) | stringLiteral(prn) | NullLiterals(prn) | IntervalLiterals(prn) | TextLiterals(prn) | PreparedStmtParameter(prn) | TimeStampLiteral(prn) | TimeLiteral(prn) | DateLiteral(prn) | binaryLiteral(prn) | hex_decimalLiteral(prn) | IntegerLiteral(prn) | MacaddrLiteral(prn) | CidrLiteral(prn) | InetLiteral(prn) )
    * f3 -> [ <FACTORIAL_> ]
    * f4 -> [ "::" types() ]
    */
   public void visit(SQLPrimaryExpression n);

   /**
    * f0 -> <IS_>
    * f1 -> [ <NOT_> ]
    * f2 -> <NULL_>
    */
   public void visit(IsNullExpression n);

   /**
    * f0 -> <IS_>
    * f1 -> [ <NOT_> ]
    * f2 -> <BINARY_LITERAL>
    */
   public void visit(IsBooleanExpression n);

   /**
    * f0 -> <PARAM_PLACE_HOLDER>
    */
   public void visit(PreparedStmtParameter n);

   /**
    * f0 -> <TIMESTAMP_LITERAL>
    */
   public void visit(TimeStampLiteral n);

   /**
    * f0 -> <TIME_LITERAL>
    */
   public void visit(TimeLiteral n);

   /**
    * f0 -> <DATE_LITERAL>
    */
   public void visit(DateLiteral n);

   /**
    * f0 -> <INTERVAL_LITERAL>
    */
   public void visit(IntervalLiterals n);

   /**
    * f0 -> <TEXT_LITERAL>
    */
   public void visit(TextLiterals n);

   /**
    * f0 -> <NULL_>
    */
   public void visit(NullLiterals n);

   /**
    * f0 -> <TRUE_>
    *       | <FALSE_>
    */
   public void visit(booleanLiteral n);

   /**
    * f0 -> <BINARY_LITERAL>
    */
   public void visit(binaryLiteral n);

   /**
    * f0 -> <HEXDECIMAL_LITERAL>
    */
   public void visit(hex_decimalLiteral n);

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n);

   /**
    * f0 -> <MACADDR_LITERAL>
    */
   public void visit(MacaddrLiteral n);

   /**
    * f0 -> <CIDR_LITERAL>
    */
   public void visit(CidrLiteral n);

   /**
    * f0 -> <INET_LITERAL>
    */
   public void visit(InetLiteral n);

   /**
    * f0 -> <GEOMETRY_LITERAL>
    */
   public void visit(GeometryLiteral n);

   /**
    * f0 -> <PARENTHESIS_START_>
    * f1 -> <SELECT_>
    * f2 -> [ <ALL_> | <DISTINCT_> ]
    * f3 -> SelectList(prn)
    * f4 -> [ FromClause(prn) ]
    * f5 -> [ WhereClause(prn) ]
    * f6 -> [ LimitClause(prn) ]
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(PseudoColumn n);

   /**
    * f0 -> SQLArgument(prn)
    * f1 -> ( "," SQLArgument(prn) )*
    */
   public void visit(SQLArgumentList n);

   /**
    * f0 -> SQLSimpleExpression(prn)
    */
   public void visit(SQLArgument n);

   /**
    * f0 -> extendbObject(prn)
    */
   public void visit(CharString n);

   /**
    * f0 -> Func_Trunc(prn)
    *       | Func_Date(prn)
    *       | Func_Time(prn)
    *       | Func_TimeStamp(prn)
    *       | Func_CurrentDate(prn)
    *       | Func_PgCurrentDate(prn)
    *       | Func_CurrentTime(prn)
    *       | Func_PgCurrentTime(prn)
    *       | Func_PgCurrentTimeStamp(prn)
    *       | Func_Year(prn)
    *       | Func_Month(prn)
    *       | Func_Hour(prn)
    *       | Func_Minute(prn)
    *       | Func_Second(prn)
    *       | Func_AddDate(prn)
    *       | Func_AddTime(prn)
    *       | Func_DateDiff(prn)
    *       | Func_Day(prn)
    *       | Func_DayName(prn)
    *       | Func_DayOfMonth(prn)
    *       | Func_DayOfWeek(prn)
    *       | Func_DayOfYear(prn)
    *       | Func_MonthName(prn)
    *       | Func_SubDate(prn)
    *       | Func_SubTime(prn)
    *       | Func_WeekOfYear(prn)
    *       | Func_Now(prn)
    *       | Func_Abs(prn)
    *       | Func_Ceil(prn)
    *       | Func_Ceiling(prn)
    *       | Func_Exp(prn)
    *       | Func_Floor(prn)
    *       | Func_LN(prn)
    *       | Func_Log(prn)
    *       | Func_PI(prn)
    *       | Func_Power(prn)
    *       | Func_Round(prn)
    *       | Func_Sign(prn)
    *       | Func_TAsin(prn)
    *       | Func_TAtan(prn)
    *       | Func_TCos(prn)
    *       | Func_TCot(prn)
    *       | Func_TDegree(prn)
    *       | Func_Radians(prn)
    *       | Func_Sin(prn)
    *       | Func_Tan(prn)
    *       | Func_Avg(prn)
    *       | Func_Count(prn)
    *       | Func_Max(prn)
    *       | Func_Min(prn)
    *       | Func_Stdev(prn)
    *       | Func_Sum(prn)
    *       | Func_Variance(prn)
    *       | Func_Ascii(prn)
    *       | Func_Index(prn)
    *       | Func_Left(prn)
    *       | Func_Length(prn)
    *       | Func_Lower(prn)
    *       | Func_Lpad(prn)
    *       | Func_Rpad(prn)
    *       | Func_Ltrim(prn)
    *       | Func_Replace(prn)
    *       | Func_Right(prn)
    *       | Func_Rtrim(prn)
    *       | Func_SubStr(prn)
    *       | Func_Trim(prn)
    *       | Func_Upper(prn)
    *       | Func_Database(prn)
    *       | Func_Value(prn)
    *       | Func_Version(prn)
    *       | Func_Case(prn)
    *       | Func_TACos(prn)
    *       | Func_Log10(prn)
    *       | Func_Mod(prn)
    *       | Func_Sqrt(prn)
    *       | Func_Least(prn)
    *       | Func_TCosh(prn)
    *       | Func_Float(prn)
    *       | Func_Greatest(prn)
    *       | Func_TATan2(prn)
    *       | Func_TATn2(prn)
    *       | Func_SoundEx(prn)
    *       | Func_InitCap(prn)
    *       | Func_LFill(prn)
    *       | Func_MapChar(prn)
    *       | Func_NUM(prn)
    *       | Func_Concat(prn)
    *       | Func_User(prn)
    *       | Func_Cast(prn)
    *       | Func_TimeOfDay(prn)
    *       | Func_Custom(prn)
    *       | Func_IsFinite(prn)
    *       | Func_Extract(prn)
    *       | Func_DateTrunc(prn)
    *       | Func_DatePart(prn)
    *       | Func_Age(prn)
    *       | Func_LocalTime(prn)
    *       | Func_LocalTimeStamp(prn)
    *       | Func_BitLength(prn)
    *       | Func_CharLength(prn)
    *       | Func_Convert(prn)
    *       | Func_OctetLength(prn)
    *       | Func_Overlay(prn)
    *       | Func_Position(prn)
    *       | Func_Substring(prn)
    *       | Func_ToHex(prn)
    *       | Func_QuoteLiteral(prn)
    *       | Func_QuoteIdent(prn)
    *       | Func_Md5(prn)
    *       | Func_Chr(prn)
    *       | Func_PgClientEncoding(prn)
    *       | Func_Translate(prn)
    *       | Func_ToAscii(prn)
    *       | Func_StrPos(prn)
    *       | Func_SplitPart(prn)
    *       | Func_Repeat(prn)
    *       | Func_Encode(prn)
    *       | Func_Decode(prn)
    *       | Func_Btrim(prn)
    *       | Func_Width_bucket(prn)
    *       | Func_Setseed(prn)
    *       | Func_Random(prn)
    *       | Func_Cbrt(prn)
    *       | Func_GetBit(prn)
    *       | Func_GetByte(prn)
    *       | Func_ToDate(prn)
    *       | Func_ClockTimeStamp(prn)
    *       | Func_StatementTimeStamp(prn)
    *       | Func_TransactionTimeStamp(prn)
    *       | Func_NullIf(prn)
    *       | Func_SetBit(prn)
    *       | Func_SetByte(prn)
    *       | Func_ToChar(prn)
    *       | Func_ToNumber(prn)
    *       | Func_ToTimestamp(prn)
    *       | Func_AddMonths(prn)
    *       | Func_JustifyDays(prn)
    *       | Func_JustifyHours(prn)
    *       | Func_JustifyInterval(prn)
    *       | Func_LastDay(prn)
    *       | Func_MonthsBetween(prn)
    *       | Func_NextDay(prn)
    *       | Func_CurrentDatabase(prn)
    *       | Func_CurrentSchema(prn)
    *       | Func_BitAnd(prn)
    *       | Func_BitOr(prn)
    *       | Func_BoolAnd(prn)
    *       | Func_BoolOr(prn)
    *       | Func_CorrCov(prn)
    *       | Func_Regr(prn)
    *       | Func_RegexReplace(prn)
    *       | Func_Coalesce(prn)
    *       | Func_Abbrev(prn)
    *       | Func_Broadcast(prn)
    *       | Func_Family(prn)
    *       | Func_Host(prn)
    *       | Func_Hostmask(prn)
    *       | Func_Masklen(prn)
    *       | Func_Netmask(prn)
    *       | Func_Network(prn)
    *       | Func_Set_Masklen(prn)
    *       | Func_Text(prn)
    *       | Func_ST_AsText(prn)
    *       | Func_ST_Transform(prn)
    *       | Func_ST_Distance(prn)
    *       | Func_ST_DWithin(prn)
    *       | Func_ST_Length(prn)
    *       | Func_ST_Area(prn)
    *       | Func_ST_Boundary(prn)
    *       | Func_ST_Buffer(prn)
    *       | Func_ST_Centroid(prn)
    *       | Func_ST_AsBinary(prn)
    *       | Func_ST_ADDMEASURE(prn)
    *       | Func_ST_ADDPOINT(prn)
    *       | Func_ST_AFFINE(prn)
    *       | Func_ST_AREA2D(prn)
    *       | Func_ST_ASEWKB(prn)
    *       | Func_ST_ASEWKT(prn)
    *       | Func_ST_ASGEOJSON(prn)
    *       | Func_ST_ASGML(prn)
    *       | Func_ST_ASHEXEWKB(prn)
    *       | Func_ST_ASKML(prn)
    *       | Func_ST_ASSVG(prn)
    *       | Func_ST_AZIMUTH(prn)
    *       | Func_ST_BDMPOLYFROMTEXT(prn)
    *       | Func_ST_BDPOLYFROMTEXT(prn)
    *       | Func_ST_BUILDAREA(prn)
    *       | Func_ST_BYTEA(prn)
    *       | Func_ST_CHIP_IN(prn)
    *       | Func_ST_CHIP_OUT(prn)
    *       | Func_ST_CLOSESTPOINT(prn)
    *       | Func_ST_COLLECT(prn)
    *       | Func_ST_COLLECTIONEXTRACT(prn)
    *       | Func_ST_COMBINE_BBOX(prn)
    *       | Func_ST_COMPRESSION(prn)
    *       | Func_ST_CONTAINS(prn)
    *       | Func_ST_CONTAINSPROPERLY(prn)
    *       | Func_ST_CONVEXHULL(prn)
    *       | Func_ST_COORDDIM(prn)
    *       | Func_ST_COVEREDBY(prn)
    *       | Func_ST_COVERS(prn)
    *       | Func_ST_CROSSES(prn)
    *       | Func_ST_CURVETOLINE(prn)
    *       | Func_ST_DATATYPE(prn)
    *       | Func_ST_DFULLYWITHIN(prn)
    *       | Func_ST_DIFFERENCE(prn)
    *       | Func_ST_DIMENSION(prn)
    *       | Func_ST_DISJOINT(prn)
    *       | Func_ST_DISTANCE_SPHERE(prn)
    *       | Func_ST_DISTANCE_SPHEROID(prn)
    *       | Func_ST_ENDPOINT(prn)
    *       | Func_ST_ENVELOPE(prn)
    *       | Func_ST_EQUALS(prn)
    *       | Func_ST_EXTENT(prn)
    *       | Func_ST_EXTENT3D(prn)
    *       | Func_ST_EXTERIORRING(prn)
    *       | Func_ST_FACTOR(prn)
    *       | Func_ST_FIND_EXTENT(prn)
    *       | Func_ST_FORCERHR(prn)
    *       | Func_ST_FORCE_2D(prn)
    *       | Func_ST_FORCE_3D(prn)
    *       | Func_ST_FORCE_3DM(prn)
    *       | Func_ST_FORCE_3DZ(prn)
    *       | Func_ST_FORCE_4D(prn)
    *       | Func_ST_FORCE_COLLECTION(prn)
    *       | Func_ST_GEOMETRYTYPE(prn)
    *       | Func_ST_GEOGFROMTEXT(prn)
    *       | Func_ST_GEOGFROMWKB(prn)
    *       | Func_ST_GEOGRAPHYFROMTEXT(prn)
    *       | Func_ST_GEOHASH(prn)
    *       | Func_ST_GEOMCOLLFROMTEXT(prn)
    *       | Func_ST_GEOMCOLLFROMWKB(prn)
    *       | Func_ST_GEOMFROMEWKB(prn)
    *       | Func_ST_GEOMFROMEWKT(prn)
    *       | Func_ST_GEOMFROMGML(prn)
    *       | Func_ST_GEOMFROMKML(prn)
    *       | Func_ST_GEOMFROMTEXT(prn)
    *       | Func_ST_GEOMFROMWKB(prn)
    *       | Func_ST_GMLTOSQL(prn)
    *       | Func_ST_HASARC(prn)
    *       | Func_ST_HAUSDORFFDISTANCE(prn)
    *       | Func_ST_HEIGHT(prn)
    *       | Func_ST_INTERIORRINGN(prn)
    *       | Func_ST_INTERSECTION(prn)
    *       | Func_ST_INTERSECTS(prn)
    *       | Func_ST_ISCLOSED(prn)
    *       | Func_ST_ISEMPTY(prn)
    *       | Func_ST_ISRING(prn)
    *       | Func_ST_ISSIMPLE(prn)
    *       | Func_ST_ISVALID(prn)
    *       | Func_ST_ISVALIDREASON(prn)
    *       | Func_ST_LENGTH2D(prn)
    *       | Func_ST_LENGTH2D_SPHEROID(prn)
    *       | Func_ST_LENGTH3D(prn)
    *       | Func_ST_LENGTH3D_SPHEROID(prn)
    *       | Func_ST_LENGTH_SPHEROID(prn)
    *       | Func_ST_LINECROSSINGDIRECTION(prn)
    *       | Func_ST_LINEFROMMULTIPOINT(prn)
    *       | Func_ST_LINEFROMTEXT(prn)
    *       | Func_ST_LINEFROMWKB(prn)
    *       | Func_ST_LINEMERGE(prn)
    *       | Func_ST_LINESTRINGFROMWKB(prn)
    *       | Func_ST_LINETOCURVE(prn)
    *       | Func_ST_LINE_INTERPOLATE_POINT(prn)
    *       | Func_ST_LINE_LOCATE_POINT(prn)
    *       | Func_ST_LINE_SUBSTRING(prn)
    *       | Func_ST_LOCATEBETWEENELEVATIONS(prn)
    *       | Func_ST_LOCATE_ALONG_MEASURE(prn)
    *       | Func_ST_LOCATE_BETWEEN_MEASURES(prn)
    *       | Func_ST_LONGESTLINE(prn)
    *       | Func_ST_M(prn)
    *       | Func_ST_MAKEENVELOPE(prn)
    *       | Func_ST_MAKEPOINT(prn)
    *       | Func_ST_MAKEPOINTM(prn)
    *       | Func_ST_MAKEPOLYGON(prn)
    *       | Func_ST_MAXDISTANCE(prn)
    *       | Func_ST_MEMCOLLECT(prn)
    *       | Func_ST_MEM_SIZE(prn)
    *       | Func_ST_MINIMUMBOUNDINGCIRCLE(prn)
    *       | Func_ST_MLINEFROMTEXT(prn)
    *       | Func_ST_MLINEFROMWKB(prn)
    *       | Func_ST_MPOINTFROMTEXT(prn)
    *       | Func_ST_MPOINTFROMWKB(prn)
    *       | Func_ST_MPOLYFROMTEXT(prn)
    *       | Func_ST_MPOLYFROMWKB(prn)
    *       | Func_ST_MULTI(prn)
    *       | Func_ST_MULTILINEFROMWKB(prn)
    *       | Func_ST_MULTILINESTRINGFROMTEXT(prn)
    *       | Func_ST_MULTIPOINTFROMTEXT(prn)
    *       | Func_ST_MULTIPOINTFROMWKB(prn)
    *       | Func_ST_MULTIPOLYFROMWKB(prn)
    *       | Func_ST_MULTIPOLYGONFROMTEXT(prn)
    *       | Func_ST_NDIMS(prn)
    *       | Func_ST_NPOINTS(prn)
    *       | Func_ST_NRINGS(prn)
    *       | Func_ST_NUMGEOMETRIES(prn)
    *       | Func_ST_NUMINTERIORRING(prn)
    *       | Func_ST_NUMINTERIORRINGS(prn)
    *       | Func_ST_NUMPOINTS(prn)
    *       | Func_ST_ORDERINGEQUALS(prn)
    *       | Func_ST_OVERLAPS(prn)
    *       | Func_ST_PERIMETER(prn)
    *       | Func_ST_PERIMETER2D(prn)
    *       | Func_ST_PERIMETER3D(prn)
    *       | Func_ST_POINT(prn)
    *       | Func_ST_POINTFROMTEXT(prn)
    *       | Func_ST_POINTFROMWKB(prn)
    *       | Func_ST_POINTN(prn)
    *       | Func_ST_POINTONSURFACE(prn)
    *       | Func_ST_POINT_INSIDE_CIRCLE(prn)
    *       | Func_ST_POLYFROMTEXT(prn)
    *       | Func_ST_POLYFROMWKB(prn)
    *       | Func_ST_POLYGON(prn)
    *       | Func_ST_POLYGONFROMTEXT(prn)
    *       | Func_ST_POLYGONFROMWKB(prn)
    *       | Func_ST_POSTGIS_GIST_JOINSEL(prn)
    *       | Func_ST_POSTGIS_GIST_SEL(prn)
    *       | Func_ST_RELATE(prn)
    *       | Func_ST_REMOVEPOINT(prn)
    *       | Func_ST_REVERSE(prn)
    *       | Func_ST_ROTATEX(prn)
    *       | Func_ST_ROTATEY(prn)
    *       | Func_ST_ROTATEZ(prn)
    *       | Func_ST_SCALE(prn)
    *       | Func_ST_SEGMENTIZE(prn)
    *       | Func_ST_SETFACTOR(prn)
    *       | Func_ST_SETPOINT(prn)
    *       | Func_ST_SETSRID(prn)
    *       | Func_ST_SHIFT_LONGITUDE(prn)
    *       | Func_ST_SHORTESTLINE(prn)
    *       | Func_ST_SIMPLIFY(prn)
    *       | Func_ST_SIMPLIFYPRESERVETOPOLOGY(prn)
    *       | Func_ST_SNAPTOGRID(prn)
    *       | Func_ST_SRID(prn)
    *       | Func_ST_STARTPOINT(prn)
    *       | Func_ST_SUMMARY(prn)
    *       | Func_ST_SYMDIFFERENCE(prn)
    *       | Func_ST_SYMMETRICDIFFERENCE(prn)
    *       | Func_ST_TEXT(prn)
    *       | Func_ST_TOUCHES(prn)
    *       | Func_ST_TRANSLATE(prn)
    *       | Func_ST_TRANSSCALE(prn)
    *       | Func_ST_WIDTH(prn)
    *       | Func_ST_WITHIN(prn)
    *       | Func_ST_WKBTOSQL(prn)
    *       | Func_ST_WKTTOSQL(prn)
    *       | Func_ST_X(prn)
    *       | Func_ST_Y(prn)
    *       | Func_ST_Z(prn)
    *       | Func_ST_ZMFLAG(prn)
    *       | Func_ST_BOX2D(prn)
    *       | Func_ST_BOX3D(prn)
    *       | Func_ST_GEOMETRY(prn)
    *       | Func_ST_GEOMETRYN(prn)
    *       | Func_POSTGIS_DROPBBOX(prn)
    */
   public void visit(FunctionCall n);

   /**
    * f0 -> <CBRT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Cbrt n);

   /**
    * f0 -> <GET_BIT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_GetBit n);

   /**
    * f0 -> <GET_BYTE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_GetByte n);

   /**
    * f0 -> <TO_DATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ToDate n);

   /**
    * f0 -> <CLOCK_TIMESTAMP_>
    * f1 -> [ <PARENTHESIS_START_> <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_ClockTimeStamp n);

   /**
    * f0 -> <STATEMENT_TIMESTAMP_>
    * f1 -> [ <PARENTHESIS_START_> <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_StatementTimeStamp n);

   /**
    * f0 -> <TRANSACTION_TIMESTAMP_>
    * f1 -> [ <PARENTHESIS_START_> <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_TransactionTimeStamp n);

   /**
    * f0 -> <NULLIF_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_NullIf n);

   /**
    * f0 -> <SET_BIT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SetBit n);

   /**
    * f0 -> <SET_BYTE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SetByte n);

   /**
    * f0 -> <TO_CHAR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ToChar n);

   /**
    * f0 -> <TO_NUMBER_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ToNumber n);

   /**
    * f0 -> <TO_TIMESTAMP_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ToTimestamp n);

   /**
    * f0 -> <ADD_MONTHS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_AddMonths n);

   /**
    * f0 -> <JUSTIFY_DAYS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <INTERVAL_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_JustifyDays n);

   /**
    * f0 -> <JUSTIFY_HOURS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <INTERVAL_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_JustifyHours n);

   /**
    * f0 -> <JUSTIFY_INTERVAL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <INTERVAL_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_JustifyInterval n);

   /**
    * f0 -> <LAST_DAY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_LastDay n);

   /**
    * f0 -> <MONTHS_BETWEEN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_MonthsBetween n);

   /**
    * f0 -> <NEXT_DAY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_NextDay n);

   /**
    * f0 -> <CURRENT_DATABASE_>
    * f1 -> [ <PARENTHESIS_START_> <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_CurrentDatabase n);

   /**
    * f0 -> <CURRENT_SCHEMA_>
    * f1 -> [ <PARENTHESIS_START_> <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_CurrentSchema n);

   /**
    * f0 -> <BIT_AND_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_BitAnd n);

   /**
    * f0 -> <BIT_OR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_BitOr n);

   /**
    * f0 -> ( <BOOL_AND_> | <EVERY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_BoolAnd n);

   /**
    * f0 -> <BOOL_OR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_BoolOr n);

   /**
    * f0 -> ( <CORR_> | <COVAR_POP_> | <COVAR_SAMP_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_CorrCov n);

   /**
    * f0 -> ( <REGR_AVGX_> | <REGR_AVGY_> | <REGR_COUNT_> | <REGR_INTERCEPT_> | <REGR_R2_> | <REGR_SLOPE_> | <REGR_SXX_> | <REGR_SXY_> | <REGR_SYY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Regr n);

   /**
    * f0 -> <REGEXP_REPLACE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> [ "," SQLArgument(prn) ]
    * f8 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_RegexReplace n);

   /**
    * f0 -> <COALESCE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgumentList(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Coalesce n);

   /**
    * f0 -> <RANDOM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Random n);

   /**
    * f0 -> <SETSEED_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Setseed n);

   /**
    * f0 -> <WIDTH_BUCKET_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> ","
    * f8 -> SQLArgument(prn)
    * f9 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Width_bucket n);

   /**
    * f0 -> <BTRIM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Btrim n);

   /**
    * f0 -> <DECODE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ( "," SQLArgument(prn) )*
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Decode n);

   /**
    * f0 -> <ENCODE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Encode n);

   /**
    * f0 -> <REPEAT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Repeat n);

   /**
    * f0 -> <SPLIT_PART_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SplitPart n);

   /**
    * f0 -> <STRPOS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_StrPos n);

   /**
    * f0 -> <TO_ASCII_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ToAscii n);

   /**
    * f0 -> <TRANSLATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> [ "," SQLArgument(prn) ]
    * f8 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Translate n);

   /**
    * f0 -> <PG_CLIENT_ENCODING_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_PgClientEncoding n);

   /**
    * f0 -> <CHR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Chr n);

   /**
    * f0 -> <MD5_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Md5 n);

   /**
    * f0 -> <QUOTE_IDENT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_QuoteIdent n);

   /**
    * f0 -> <QUOTE_LITERAL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_QuoteLiteral n);

   /**
    * f0 -> <TO_HEX_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ToHex n);

   /**
    * f0 -> <SUBSTRING_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ <FROM_> SQLArgument(prn) ]
    * f4 -> [ <FOR_> SQLArgument(prn) ]
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Substring n);

   /**
    * f0 -> <POSITION_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <IN_>
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Position n);

   /**
    * f0 -> <OVERLAY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PLACING_>
    * f4 -> SQLArgument(prn)
    * f5 -> <FROM_>
    * f6 -> SQLArgument(prn)
    * f7 -> [ <FOR_> SQLArgument(prn) ]
    * f8 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Overlay n);

   /**
    * f0 -> <OCTET_LENGTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_OctetLength n);

   /**
    * f0 -> <CONVERT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ( <USING_> | "," )
    * f4 -> ( <STRING_LITERAL> | Identifier(prn) )
    * f5 -> [ "," ( <STRING_LITERAL> | Identifier(prn) ) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Convert n);

   /**
    * f0 -> ( <CHAR_LENGTH_> | <CHARACTER_LENGTH_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_CharLength n);

   /**
    * f0 -> <BIT_LENGTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_BitLength n);

   /**
    * f0 -> <LOCALTIME_>
    * f1 -> [ <PARENTHESIS_START_> SQLArgument(prn) <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_LocalTime n);

   /**
    * f0 -> <LOCALTIMESTAMP_>
    * f1 -> [ <PARENTHESIS_START_> SQLArgument(prn) <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_LocalTimeStamp n);

   /**
    * f0 -> <AGE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Age n);

   /**
    * f0 -> <DATEPART_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DatePart n);

   /**
    * f0 -> <DATETRUNC_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DateTrunc n);

   /**
    * f0 -> <EXTRACT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> ( <YEAR_FROM> | <QUARTER_FROM> | <MONTH_FROM> | <WEEK_FROM> | <DAY_FROM> | <HOUR_FROM> | <MINUTE_FROM> | <SECOND_FROM> | <DOY_FROM> | <DOW_FROM> | <DECADE_FROM> | <CENTURY_FROM> | <MILLISECOND_FROM> | <MILLENNIUM_FROM> | <MICROSECONDS_FROM> | <EPOCH_FROM> )
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Extract n);

   /**
    * f0 -> <ISFINITE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_IsFinite n);

   /**
    * f0 -> <TIMEOFDAY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TimeOfDay n);

   /**
    * f0 -> ( <USER_> | <CURRENT_USER_> )
    * f1 -> [ <PARENTHESIS_START_> <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_User n);

   /**
    * f0 -> <IDENTIFIER>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ SQLArgumentList(prn) ]
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Custom n);

   /**
    * f0 -> <CONCAT_WORD>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Concat n);

   /**
    * f0 -> <CASE_> SQLSimpleExpression(prn) ( <WHEN_> SQLSimpleExpression(prn) <THEN_> SQLSimpleExpression(prn) )* [ <ELSE_> SQLSimpleExpression(prn) ] <END_>
    *       | <CASE_> ( <WHEN_> SQLComplexExpression(prn) <THEN_> SQLSimpleExpression(prn) )* [ <ELSE_> SQLSimpleExpression(prn) ] <END_>
    */
   public void visit(Func_Case n);

   /**
    * f0 -> <ABS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Abs n);

   /**
    * f0 -> <CEIL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Ceil n);

   /**
    * f0 -> <CEILING_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Ceiling n);

   /**
    * f0 -> <EXP_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Exp n);

   /**
    * f0 -> <FLOOR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Floor n);

   /**
    * f0 -> <LN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_LN n);

   /**
    * f0 -> <LOG_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Log n);

   /**
    * f0 -> <LOG10_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Log10 n);

   /**
    * f0 -> <PI_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_PI n);

   /**
    * f0 -> <POWER_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Power n);

   /**
    * f0 -> <SIGN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Sign n);

   /**
    * f0 -> <ASIN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TAsin n);

   /**
    * f0 -> <ATAN2_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TATan2 n);

   /**
    * f0 -> <ATN2_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TATn2 n);

   /**
    * f0 -> <ATAN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TAtan n);

   /**
    * f0 -> <COS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TCos n);

   /**
    * f0 -> <COSH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TCosh n);

   /**
    * f0 -> <COT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TCot n);

   /**
    * f0 -> <ACOS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TACos n);

   /**
    * f0 -> <DEGREE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TDegree n);

   /**
    * f0 -> <RADIANS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Radians n);

   /**
    * f0 -> <SIN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Sin n);

   /**
    * f0 -> <TAN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Tan n);

   /**
    * f0 -> <ROUND_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Round n);

   /**
    * f0 -> ( <MOD_> | <MODULE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Mod n);

   /**
    * f0 -> <FLOAT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Float n);

   /**
    * f0 -> <GREATEST_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgumentList(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Greatest n);

   /**
    * f0 -> <SQRT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Sqrt n);

   /**
    * f0 -> <LEAST_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgumentList(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Least n);

   /**
    * f0 -> <ASCII_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Ascii n);

   /**
    * f0 -> ( <INDEX_> | <INSTR_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> [ "," SQLArgument(prn) ]
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Index n);

   /**
    * f0 -> <LEFT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Left n);

   /**
    * f0 -> <RIGHT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Right n);

   /**
    * f0 -> <LENGTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Length n);

   /**
    * f0 -> <LOWER_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Lower n);

   /**
    * f0 -> <LPAD_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Lpad n);

   /**
    * f0 -> <LTRIM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Ltrim n);

   /**
    * f0 -> <REPLACE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Replace n);

   /**
    * f0 -> <TRUNC_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Trunc n);

   /**
    * f0 -> <TRIM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> ( <BOTH> | <LEADING> | <TRAILING> )
    * f3 -> [ SQLArgument(prn) ]
    * f4 -> <FROM_>
    * f5 -> SQLArgument(prn)
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Trim n);

   /**
    * f0 -> <RPAD_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Rpad n);

   /**
    * f0 -> <RTRIM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Rtrim n);

   /**
    * f0 -> <SUBSTR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SubStr n);

   /**
    * f0 -> <DATABASE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Database n);

   /**
    * f0 -> <VERSION_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Version n);

   /**
    * f0 -> <VALUE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ( "," SQLArgument(prn) )*
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Value n);

   /**
    * f0 -> <AVERAGE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Avg n);

   /**
    * f0 -> <COUNT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> ( <STAR_> | [ <DISTINCT_> | <ALL_> ] SQLArgument(prn) )
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Count n);

   /**
    * f0 -> <MAX_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Max n);

   /**
    * f0 -> <MIN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Min n);

   /**
    * f0 -> ( <STDDEV_> | <STDDEV_POP_> | <STDDEV_SAMP_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Stdev n);

   /**
    * f0 -> ( <VARIANCE_> | <VARIANCE_POP_> | <VARIANCE_SAMP_> | <VAR_POP_> | <VAR_SAMP_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Variance n);

   /**
    * f0 -> <SUM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ <DISTINCT_> ]
    * f3 -> SQLArgument(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Sum n);

   /**
    * f0 -> <UPPER_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Upper n);

   /**
    * f0 -> <ABBREV_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Abbrev n);

   /**
    * f0 -> <BROADCAST_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Broadcast n);

   /**
    * f0 -> <FAMILY_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Family n);

   /**
    * f0 -> <HOST_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Host n);

   /**
    * f0 -> <HOSTMASK_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Hostmask n);

   /**
    * f0 -> <MASKLEN_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Masklen n);

   /**
    * f0 -> <NETMASK_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Netmask n);

   /**
    * f0 -> <NETWORK_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Network n);

   /**
    * f0 -> <SET_MASKLEN_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ")"
    */
   public void visit(Func_Set_Masklen n);

   /**
    * f0 -> <TEXT_>
    * f1 -> "("
    * f2 -> SQLArgument(prn)
    * f3 -> ")"
    */
   public void visit(Func_Text n);

   /**
    * f0 -> ( <ST_ASTEXT_> | <ASTEXT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_AsText n);

   /**
    * f0 -> ( <ST_TRANSFORM_> | <TRANSFORM_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Transform n);

   /**
    * f0 -> ( <ST_DISTANCE_> | <DISTANCE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Distance n);

   /**
    * f0 -> <ST_DWITHIN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DWithin n);

   /**
    * f0 -> <ST_LENGTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Length n);

   /**
    * f0 -> <ST_AREA_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Area n);

   /**
    * f0 -> ( <ST_ASBINARY_> | <ASBINARY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_AsBinary n);

   /**
    * f0 -> <ST_BOUNDARY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Boundary n);

   /**
    * f0 -> <ST_BUFFER_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Buffer n);

   /**
    * f0 -> <ST_CENTROID_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Centroid n);

   /**
    * f0 -> <ST_ADDMEASURE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ADDMEASURE n);

   /**
    * f0 -> <ST_ADDPOINT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ADDPOINT n);

   /**
    * f0 -> <ST_AFFINE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_AFFINE n);

   /**
    * f0 -> ( <ST_AREA2D_> | <AREA2D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_AREA2D n);

   /**
    * f0 -> ( <ST_ASEWKB_> | <ASEWKB_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASEWKB n);

   /**
    * f0 -> ( <ST_ASEWKT_> | <ASEWKT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASEWKT n);

   /**
    * f0 -> <ST_ASGEOJSON_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> [ "," SQLArgument(prn) ]
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASGEOJSON n);

   /**
    * f0 -> <ST_ASGML_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> [ "," SQLArgument(prn) ]
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASGML n);

   /**
    * f0 -> ( <ST_ASHEXEWKB_> | <ASHEXEWKB_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASHEXEWKB n);

   /**
    * f0 -> ( <ST_ASKML_> | <ASKML_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> [ "," SQLArgument(prn) ]
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASKML n);

   /**
    * f0 -> <ST_ASSVG_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> [ "," SQLArgument(prn) ]
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ASSVG n);

   /**
    * f0 -> <ST_AZIMUTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_AZIMUTH n);

   /**
    * f0 -> <ST_BDMPOLYFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_BDMPOLYFROMTEXT n);

   /**
    * f0 -> <ST_BDPOLYFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_BDPOLYFROMTEXT n);

   /**
    * f0 -> <ST_BUILDAREA_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_BUILDAREA n);

   /**
    * f0 -> <ST_BYTEA_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_BYTEA n);

   /**
    * f0 -> <ST_CHIP_IN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CHIP_IN n);

   /**
    * f0 -> <ST_CHIP_OUT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CHIP_OUT n);

   /**
    * f0 -> <ST_CLOSESTPOINT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CLOSESTPOINT n);

   /**
    * f0 -> ( <ST_COLLECT_> | <COLLECT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COLLECT n);

   /**
    * f0 -> <ST_COLLECTIONEXTRACT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COLLECTIONEXTRACT n);

   /**
    * f0 -> <ST_COMBINE_BBOX_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COMBINE_BBOX n);

   /**
    * f0 -> <ST_COMPRESSION_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COMPRESSION n);

   /**
    * f0 -> ( <ST_CONTAINS_> | <CONTAINS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CONTAINS n);

   /**
    * f0 -> <ST_CONTAINSPROPERLY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CONTAINSPROPERLY n);

   /**
    * f0 -> <ST_CONVEXHULL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CONVEXHULL n);

   /**
    * f0 -> <ST_COORDDIM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COORDDIM n);

   /**
    * f0 -> <ST_COVEREDBY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COVEREDBY n);

   /**
    * f0 -> <ST_COVERS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_COVERS n);

   /**
    * f0 -> <ST_CROSSES_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CROSSES n);

   /**
    * f0 -> <ST_CURVETOLINE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_CURVETOLINE n);

   /**
    * f0 -> <ST_DATATYPE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DATATYPE n);

   /**
    * f0 -> <ST_DFULLYWITHIN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DFULLYWITHIN n);

   /**
    * f0 -> ( <ST_DIFFERENCE_> | <DIFFERENCE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DIFFERENCE n);

   /**
    * f0 -> ( <ST_DIMENSION_> | <DIMENSION_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DIMENSION n);

   /**
    * f0 -> ( <ST_DISJOINT_> | <DISJOINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DISJOINT n);

   /**
    * f0 -> <ST_DISTANCE_SPHERE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DISTANCE_SPHERE n);

   /**
    * f0 -> <ST_DISTANCE_SPHEROID_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_DISTANCE_SPHEROID n);

   /**
    * f0 -> ( <ST_ENDPOINT_> | <ENDPOINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ENDPOINT n);

   /**
    * f0 -> ( <ST_ENVELOPE_> | <ENVELOPE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ENVELOPE n);

   /**
    * f0 -> ( <ST_EQUALS_> | <WORD_EQUALS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_EQUALS n);

   /**
    * f0 -> ( <ST_EXTENT_> | <EXTENT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_EXTENT n);

   /**
    * f0 -> ( <ST_EXTENT3D_> | <EXTENT3D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_EXTENT3D n);

   /**
    * f0 -> ( <ST_EXTERIORRING_> | <EXTERIORRING_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_EXTERIORRING n);

   /**
    * f0 -> <ST_FACTOR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FACTOR n);

   /**
    * f0 -> <ST_FIND_EXTENT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FIND_EXTENT n);

   /**
    * f0 -> <ST_FORCERHR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCERHR n);

   /**
    * f0 -> ( <ST_FORCE_2D_> | <FORCE_2D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCE_2D n);

   /**
    * f0 -> ( <ST_FORCE_3D_> | <FORCE_3D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCE_3D n);

   /**
    * f0 -> ( <ST_FORCE_3DM_> | <FORCE_3DM_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCE_3DM n);

   /**
    * f0 -> ( <ST_FORCE_3DZ_> | <FORCE_3DZ_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCE_3DZ n);

   /**
    * f0 -> ( <ST_FORCE_4D_> | <FORCE_4D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCE_4D n);

   /**
    * f0 -> ( <ST_FORCE_COLLECTION_> | <FORCE_COLLECTION_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_FORCE_COLLECTION n);

   /**
    * f0 -> ( <ST_GEOMETRYTYPE_> | <GEOMETRYTYPE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMETRYTYPE n);

   /**
    * f0 -> <ST_GEOGFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOGFROMTEXT n);

   /**
    * f0 -> <ST_GEOGFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOGFROMWKB n);

   /**
    * f0 -> <ST_GEOGRAPHYFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOGRAPHYFROMTEXT n);

   /**
    * f0 -> <ST_GEOHASH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOHASH n);

   /**
    * f0 -> <ST_GEOMCOLLFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMCOLLFROMTEXT n);

   /**
    * f0 -> <ST_GEOMCOLLFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMCOLLFROMWKB n);

   /**
    * f0 -> <ST_GEOMFROMEWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMFROMEWKB n);

   /**
    * f0 -> ( <ST_GEOMFROMEWKT_> | <GEOMFROMEWKT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMFROMEWKT n);

   /**
    * f0 -> <ST_GEOMFROMGML_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMFROMGML n);

   /**
    * f0 -> <ST_GEOMFROMKML_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMFROMKML n);

   /**
    * f0 -> ( <ST_GEOMFROMTEXT_> | <GEOMFROMTEXT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMFROMTEXT n);

   /**
    * f0 -> <ST_GEOMFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMFROMWKB n);

   /**
    * f0 -> <ST_GMLTOSQL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GMLTOSQL n);

   /**
    * f0 -> <ST_HASARC_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_HASARC n);

   /**
    * f0 -> <ST_HAUSDORFFDISTANCE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_HAUSDORFFDISTANCE n);

   /**
    * f0 -> <ST_HEIGHT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_HEIGHT n);

   /**
    * f0 -> ( <ST_INTERIORRINGN_> | <INTERIORRINGN_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_INTERIORRINGN n);

   /**
    * f0 -> ( <ST_INTERSECTION_> | <INTERSECTION_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_INTERSECTION n);

   /**
    * f0 -> ( <ST_INTERSECTS_> | <INTERSECTS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_INTERSECTS n);

   /**
    * f0 -> ( <ST_ISCLOSED_> | <ISCLOSED_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ISCLOSED n);

   /**
    * f0 -> ( <ST_ISEMPTY_> | <ISEMPTY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ISEMPTY n);

   /**
    * f0 -> ( <ST_ISRING_> | <ISRING_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ISRING n);

   /**
    * f0 -> ( <ST_ISSIMPLE_> | <ISSIMPLE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ISSIMPLE n);

   /**
    * f0 -> ( <ST_ISVALID_> | <ISVALID_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ISVALID n);

   /**
    * f0 -> <ST_ISVALIDREASON_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ISVALIDREASON n);

   /**
    * f0 -> ( <ST_LENGTH2D_> | <LENGTH2D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LENGTH2D n);

   /**
    * f0 -> <ST_LENGTH2D_SPHEROID_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LENGTH2D_SPHEROID n);

   /**
    * f0 -> ( <ST_LENGTH3D_> | <LENGTH3D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LENGTH3D n);

   /**
    * f0 -> <ST_LENGTH3D_SPHEROID_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LENGTH3D_SPHEROID n);

   /**
    * f0 -> <ST_LENGTH_SPHEROID_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LENGTH_SPHEROID n);

   /**
    * f0 -> <ST_LINECROSSINGDIRECTION_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINECROSSINGDIRECTION n);

   /**
    * f0 -> <ST_LINEFROMMULTIPOINT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINEFROMMULTIPOINT n);

   /**
    * f0 -> <ST_LINEFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINEFROMTEXT n);

   /**
    * f0 -> <ST_LINEFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINEFROMWKB n);

   /**
    * f0 -> ( <ST_LINEMERGE_> | <LINEMERGE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINEMERGE n);

   /**
    * f0 -> <ST_LINESTRINGFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINESTRINGFROMWKB n);

   /**
    * f0 -> <ST_LINETOCURVE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINETOCURVE n);

   /**
    * f0 -> ( <ST_LINE_INTERPOLATE_POINT_> | <LINE_INTERPOLATE_POINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINE_INTERPOLATE_POINT n);

   /**
    * f0 -> ( <ST_LINE_LOCATE_POINT_> | <LINE_LOCATE_POINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINE_LOCATE_POINT n);

   /**
    * f0 -> ( <ST_LINE_SUBSTRING_> | <LINE_SUBSTRING_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LINE_SUBSTRING n);

   /**
    * f0 -> <ST_LOCATEBETWEENELEVATIONS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LOCATEBETWEENELEVATIONS n);

   /**
    * f0 -> ( <ST_LOCATE_ALONG_MEASURE_> | <LOCATE_ALONG_MEASURE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LOCATE_ALONG_MEASURE n);

   /**
    * f0 -> ( <ST_LOCATE_BETWEEN_MEASURES_> | <LOCATE_BETWEEN_MEASURES_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LOCATE_BETWEEN_MEASURES n);

   /**
    * f0 -> <ST_LONGESTLINE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_LONGESTLINE n);

   /**
    * f0 -> <ST_M_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_M n);

   /**
    * f0 -> <ST_MAKEENVELOPE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> ","
    * f8 -> SQLArgument(prn)
    * f9 -> ","
    * f10 -> SQLArgument(prn)
    * f11 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MAKEENVELOPE n);

   /**
    * f0 -> <ST_MAKEPOINT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> [ "," SQLArgument(prn) ]
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MAKEPOINT n);

   /**
    * f0 -> <ST_MAKEPOINTM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MAKEPOINTM n);

   /**
    * f0 -> <ST_MAKEPOLYGON_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," SQLArgument(prn) ]
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MAKEPOLYGON n);

   /**
    * f0 -> <ST_MAXDISTANCE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MAXDISTANCE n);

   /**
    * f0 -> <ST_MEMCOLLECT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MEMCOLLECT n);

   /**
    * f0 -> ( <ST_MEM_SIZE_> | <MEM_SIZE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MEM_SIZE n);

   /**
    * f0 -> <ST_MINIMUMBOUNDINGCIRCLE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MINIMUMBOUNDINGCIRCLE n);

   /**
    * f0 -> <ST_MLINEFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MLINEFROMTEXT n);

   /**
    * f0 -> <ST_MLINEFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MLINEFROMWKB n);

   /**
    * f0 -> <ST_MPOINTFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MPOINTFROMTEXT n);

   /**
    * f0 -> <ST_MPOINTFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MPOINTFROMWKB n);

   /**
    * f0 -> <ST_MPOLYFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MPOLYFROMTEXT n);

   /**
    * f0 -> <ST_MPOLYFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MPOLYFROMWKB n);

   /**
    * f0 -> ( <ST_MULTI_> | <MULTI_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTI n);

   /**
    * f0 -> <ST_MULTILINEFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTILINEFROMWKB n);

   /**
    * f0 -> <ST_MULTILINESTRINGFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTILINESTRINGFROMTEXT n);

   /**
    * f0 -> <ST_MULTIPOINTFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTIPOINTFROMTEXT n);

   /**
    * f0 -> <ST_MULTIPOINTFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTIPOINTFROMWKB n);

   /**
    * f0 -> <ST_MULTIPOLYFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTIPOLYFROMWKB n);

   /**
    * f0 -> <ST_MULTIPOLYGONFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_MULTIPOLYGONFROMTEXT n);

   /**
    * f0 -> ( <ST_NDIMS_> | <NDIMS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NDIMS n);

   /**
    * f0 -> ( <ST_NPOINTS_> | <NPOINTS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NPOINTS n);

   /**
    * f0 -> ( <ST_NRINGS_> | <NRINGS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NRINGS n);

   /**
    * f0 -> ( <ST_NUMGEOMETRIES_> | <NUMGEOMETRIES_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NUMGEOMETRIES n);

   /**
    * f0 -> <ST_NUMINTERIORRING_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NUMINTERIORRING n);

   /**
    * f0 -> ( <ST_NUMINTERIORRINGS_> | <NUMINTERIORRINGS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NUMINTERIORRINGS n);

   /**
    * f0 -> <ST_NUMPOINTS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_NUMPOINTS n);

   /**
    * f0 -> <ST_ORDERINGEQUALS_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ORDERINGEQUALS n);

   /**
    * f0 -> ( <ST_OVERLAPS_> | <OVERLAPS_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_OVERLAPS n);

   /**
    * f0 -> <ST_PERIMETER_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_PERIMETER n);

   /**
    * f0 -> ( <ST_PERIMETER2D_> | <PERIMETER2D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_PERIMETER2D n);

   /**
    * f0 -> ( <ST_PERIMETER3D_> | <PERIMETER3D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_PERIMETER3D n);

   /**
    * f0 -> <ST_POINT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POINT n);

   /**
    * f0 -> <ST_POINTFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POINTFROMTEXT n);

   /**
    * f0 -> <ST_POINTFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POINTFROMWKB n);

   /**
    * f0 -> <ST_POINTN_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POINTN n);

   /**
    * f0 -> <ST_POINTONSURFACE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POINTONSURFACE n);

   /**
    * f0 -> <ST_POINT_INSIDE_CIRCLE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POINT_INSIDE_CIRCLE n);

   /**
    * f0 -> <ST_POLYFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POLYFROMTEXT n);

   /**
    * f0 -> <ST_POLYFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POLYFROMWKB n);

   /**
    * f0 -> <ST_POLYGON_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POLYGON n);

   /**
    * f0 -> <ST_POLYGONFROMTEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POLYGONFROMTEXT n);

   /**
    * f0 -> <ST_POLYGONFROMWKB_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POLYGONFROMWKB n);

   /**
    * f0 -> <ST_POSTGIS_GIST_JOINSEL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POSTGIS_GIST_JOINSEL n);

   /**
    * f0 -> <ST_POSTGIS_GIST_SEL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_POSTGIS_GIST_SEL n);

   /**
    * f0 -> <ST_RELATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_RELATE n);

   /**
    * f0 -> ( <ST_REMOVEPOINT_> | <REMOVEPOINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_REMOVEPOINT n);

   /**
    * f0 -> <ST_REVERSE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_REVERSE n);

   /**
    * f0 -> ( <ST_ROTATEX_> | <ROTATEX_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ROTATEX n);

   /**
    * f0 -> ( <ST_ROTATEY_> | <ROTATEY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ROTATEY n);

   /**
    * f0 -> ( <ST_ROTATEZ_> | <ROTATEZ_> | <ST_ROTATE_> | <ROTATE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ROTATEZ n);

   /**
    * f0 -> ( <ST_SCALE_> | <SCALE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> [ "," SQLArgument(prn) ]
    * f8 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SCALE n);

   /**
    * f0 -> ( <ST_SEGMENTIZE_> | <SEGMENTIZE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SEGMENTIZE n);

   /**
    * f0 -> <ST_SETFACTOR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SETFACTOR n);

   /**
    * f0 -> ( <ST_SETPOINT_> | <SETPOINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SETPOINT n);

   /**
    * f0 -> ( <ST_SETSRID_> | <SETSRID_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SETSRID n);

   /**
    * f0 -> <ST_SHIFT_LONGITUDE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SHIFT_LONGITUDE n);

   /**
    * f0 -> <ST_SHORTESTLINE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SHORTESTLINE n);

   /**
    * f0 -> ( <ST_SIMPLIFY_> | <SIMPLIFY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SIMPLIFY n);

   /**
    * f0 -> <ST_SIMPLIFYPRESERVETOPOLOGY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SIMPLIFYPRESERVETOPOLOGY n);

   /**
    * f0 -> ( <ST_SNAPTOGRID_> | <SNAPTOGRID_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> [ "," SQLArgument(prn) ]
    * f7 -> [ "," SQLArgument(prn) ]
    * f8 -> [ "," SQLArgument(prn) ]
    * f9 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SNAPTOGRID n);

   /**
    * f0 -> ( <ST_SRID_> | <SRID_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SRID n);

   /**
    * f0 -> ( <ST_STARTPOINT_> | <STARTPOINT_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_STARTPOINT n);

   /**
    * f0 -> <ST_SUMMARY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SUMMARY n);

   /**
    * f0 -> ( <ST_SYMDIFFERENCE_> | <SYMDIFFERENCE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SYMDIFFERENCE n);

   /**
    * f0 -> <ST_SYMMETRICDIFFERENCE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_SYMMETRICDIFFERENCE n);

   /**
    * f0 -> <ST_TEXT_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_TEXT n);

   /**
    * f0 -> <ST_TOUCHES_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_TOUCHES n);

   /**
    * f0 -> <ST_TRANSLATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> [ "," SQLArgument(prn) ]
    * f8 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_TRANSLATE n);

   /**
    * f0 -> ( <ST_TRANSSCALE_> | <TRANSSCALE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> ","
    * f6 -> SQLArgument(prn)
    * f7 -> ","
    * f8 -> SQLArgument(prn)
    * f9 -> ","
    * f10 -> SQLArgument(prn)
    * f11 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_TRANSSCALE n);

   /**
    * f0 -> <ST_WIDTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_WIDTH n);

   /**
    * f0 -> ( <ST_WITHIN_> | <WITHIN_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_WITHIN n);

   /**
    * f0 -> <ST_WKBTOSQL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_WKBTOSQL n);

   /**
    * f0 -> <ST_WKTTOSQL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_WKTTOSQL n);

   /**
    * f0 -> ( <ST_X_> | <X_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_X n);

   /**
    * f0 -> ( <ST_Y_> | <Y_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Y n);

   /**
    * f0 -> ( <ST_Z_> | <Z_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_Z n);

   /**
    * f0 -> ( <ST_ZMFLAG_> | <ZMFLAG_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_ZMFLAG n);

   /**
    * f0 -> ( <ST_BOX2D_> | <BOX2D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_BOX2D n);

   /**
    * f0 -> ( <ST_BOX3D_> | <BOX3D_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_BOX3D n);

   /**
    * f0 -> ( <ST_GEOMETRY_> | <GEOMETRY_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMETRY n);

   /**
    * f0 -> ( <ST_GEOMETRYN_> | <GEOMETRYN_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_ST_GEOMETRYN n);

   /**
    * f0 -> ( <POSTGIS_DROPBBOX_> | <DROPBBOX_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_POSTGIS_DROPBBOX n);

   /**
    * f0 -> <INT_LITERAL>
    */
   public void visit(length n);

   /**
    * f0 -> <INT_LITERAL>
    */
   public void visit(position n);

   /**
    * f0 -> extendbObject(prn)
    */
   public void visit(TableColumn n);

   /**
    * f0 -> ( TableName(prn) "." Identifier(prn) | Identifier(prn) )
    */
   public void visit(extendbObject n);

   /**
    * f0 -> [ <AS_> ]
    * f1 -> AliasName(prn)
    */
   public void visit(SelectAliasSpec n);

   /**
    * f0 -> Identifier(prn)
    */
   public void visit(AliasName n);

   /**
    * f0 -> SQLAndExpression(prn)
    * f1 -> ( SQLORExpression(prn) )*
    */
   public void visit(SQLComplexExpression n);

   /**
    * f0 -> SQLUnaryLogicalExpression(prn)
    * f1 -> [ <LEFTOUTER_> ]
    * f2 -> ( SQLAndExp(prn) )*
    */
   public void visit(SQLAndExpression n);

   /**
    * f0 -> <OR_>
    * f1 -> SQLAndExpression(prn)
    */
   public void visit(SQLORExpression n);

   /**
    * f0 -> <AND_>
    * f1 -> SQLUnaryLogicalExpression(prn)
    * f2 -> [ <LEFTOUTER_> ]
    */
   public void visit(SQLAndExp n);

   /**
    * f0 -> ( ExistsClause(prn) | [ <NOT_> ] SQLCondResult(prn) | [ <NOT_> ] SQLRelationalExpression(prn) )
    */
   public void visit(SQLUnaryLogicalExpression n);

   /**
    * f0 -> <TRUE_>
    *       | <FALSE_>
    */
   public void visit(SQLCondResult n);

   /**
    * f0 -> [ <NOT_> ]
    * f1 -> "EXISTS"
    * f2 -> <PARENTHESIS_START_>
    * f3 -> SubQuery(prn)
    * f4 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(ExistsClause n);

   /**
    * f0 -> ( SQLExpressionList(prn) | SQLSimpleExpression(prn) )
    * f1 -> ( SQLRelationalOperatorExpression(prn) | ( SQLInClause(prn) | SQLBetweenClause(prn) | SQLLikeClause(prn) ) | IsNullClause(prn) | IsBooleanClause(prn) )?
    */
   public void visit(SQLRelationalExpression n);

   /**
    * f0 -> Relop(prn)
    * f1 -> ( [ "ALL" | "ANY" | "SOME" ] ( <PARENTHESIS_START_> SubQuery(prn) <PARENTHESIS_CLOSE_> | <PARENTHESIS_START_> SQLExpressionList(prn) <PARENTHESIS_CLOSE_> ) | SQLSimpleExpression(prn) )
    */
   public void visit(SQLRelationalOperatorExpression n);

   /**
    * f0 -> ( "=" | "!=" | "#" | "<>" | ">" | ">=" | "<" | "<=" | "&&" | "&<" | "&<|" | "&>" | "<<" | "<<|" | ">>" | "@" | "|&>" | "|>>" | "~" | "~=" )
    */
   public void visit(Relop n);

   /**
    * f0 -> [ <NOT_> ]
    * f1 -> <IN_>
    * f2 -> ( <PARENTHESIS_START_> SubQuery(prn) | <PARENTHESIS_START_> SQLExpressionList(prn) )
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(SQLInClause n);

   /**
    * f0 -> [ <NOT_> ]
    * f1 -> <BETWEEN_>
    * f2 -> SQLSimpleExpression(prn)
    * f3 -> "AND"
    * f4 -> SQLSimpleExpression(prn)
    */
   public void visit(SQLBetweenClause n);

   /**
    * f0 -> ( [ <NOT_> ] ( <LIKE_> | <ILIKE_> | <SIMILAR_TO_> ) SQLSimpleExpression(prn) [ <ESCAPE_> SQLSimpleExpression(prn) ] | ( <NOT_BITWISE_> | <REGEX_NOT_MATCHES_> | <REGEX_MATCHES_CASE_INSTV_> | <REGEX_NOT_MATCHES_CASE_INSTV_> | <OVERLAPS_> ) SQLSimpleExpression(prn) )
    */
   public void visit(SQLLikeClause n);

   /**
    * f0 -> SelectWithoutOrder(prn)
    */
   public void visit(SubQuery n);

   /**
    * f0 -> ( "IS" [ <NOT_> ] | "=" | "!=" )
    * f1 -> "NULL"
    */
   public void visit(IsNullClause n);

   /**
    * f0 -> ( "IS" [ <NOT_> ] | "=" | "!=" )
    * f1 -> ( "TRUE" | "FALSE" )
    */
   public void visit(IsBooleanClause n);

   /**
    * f0 -> <INTO_>
    * f1 -> [ <TEMPORARY_> | <TEMP_> ]
    * f2 -> [ <TABLE_> ]
    * f3 -> TableName(prn)
    */
   public void visit(IntoClause n);

   /**
    * f0 -> <FROM_>
    * f1 -> TableList(prn)
    */
   public void visit(FromClause n);

   /**
    * f0 -> TableName(prn) [ SelectAliasSpec(prn) ]
    *       | <PARENTHESIS_START_> SelectWithoutOrder(prn) <PARENTHESIS_CLOSE_> [ SelectAliasSpec(prn) ] [ <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_> ]
    */
   public void visit(TableSpec n);

   /**
    * f0 -> FromTableSpec(prn)
    * f1 -> ( "," FromTableSpec(prn) )*
    */
   public void visit(TableList n);

   /**
    * f0 -> TableSpec(prn)
    * f1 -> ( <CROSS_> <JOIN_> TableSpec(prn) | ( [ <INNER_> ] <JOIN_> TableSpec(prn) JoinSpec(prn) | ( <LEFT_> | <RIGHT_> | <FULL_> ) [ <OUTER_> ] <JOIN_> TableSpec(prn) JoinSpec(prn) ) | <NATURAL_> ( [ <INNER_> ] <JOIN_> TableSpec(prn) | ( <LEFT_> | <RIGHT_> | <FULL_> ) [ <OUTER_> ] <JOIN_> TableSpec(prn) ) )*
    */
   public void visit(FromTableSpec n);

   /**
    * f0 -> "ON" SQLComplexExpression(prn)
    *       | <USING_> <PARENTHESIS_START_> ColumnNameList(prn) <PARENTHESIS_CLOSE_>
    */
   public void visit(JoinSpec n);

   /**
    * f0 -> <WHERE_>
    * f1 -> SQLComplexExpression(prn)
    */
   public void visit(WhereClause n);

   /**
    * f0 -> <GROUP_BY_>
    * f1 -> SQLExpressionList(prn)
    */
   public void visit(GroupByClause n);

   /**
    * f0 -> SQLExpressionListItem(prn)
    * f1 -> ( "," SQLExpressionListItem(prn) )*
    */
   public void visit(SQLExpressionList n);

   /**
    * f0 -> SQLSimpleExpression(prn)
    */
   public void visit(SQLExpressionListItem n);

   /**
    * f0 -> "HAVING"
    * f1 -> SQLComplexExpression(prn)
    */
   public void visit(HavingClause n);

   /**
    * f0 -> <ORDER_BY_>
    * f1 -> OrderByItem(prn)
    * f2 -> ( "," OrderByItem(prn) )*
    */
   public void visit(OrderByClause n);

   /**
    * f0 -> <LIMIT_>
    * f1 -> ( <INT_LITERAL> | <ALL_> )
    */
   public void visit(LimitClause n);

   /**
    * f0 -> <OFFSET_>
    * f1 -> <INT_LITERAL>
    */
   public void visit(OffsetClause n);

   /**
    * f0 -> SQLSimpleExpression(prn)
    * f1 -> [ "ASC" | "DESC" ]
    */
   public void visit(OrderByItem n);

   /**
    * f0 -> <ADDDATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_AddDate n);

   /**
    * f0 -> <ADDTIME_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_AddTime n);

   /**
    * f0 -> <DATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Date n);

   /**
    * f0 -> <DATEDIFF_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DateDiff n);

   /**
    * f0 -> <DAY_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Day n);

   /**
    * f0 -> <DAYNAME_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DayName n);

   /**
    * f0 -> <DAYOFMONTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DayOfMonth n);

   /**
    * f0 -> <DAYOFWEEK_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DayOfWeek n);

   /**
    * f0 -> <DAYOFYEAR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_DayOfYear n);

   /**
    * f0 -> <MONTHNAME_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_MonthName n);

   /**
    * f0 -> <SUBDATE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SubDate n);

   /**
    * f0 -> "SUBTIME"
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SubTime n);

   /**
    * f0 -> <TIME_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Time n);

   /**
    * f0 -> ( <CURDATE_> | <DATE_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_CurrentDate n);

   /**
    * f0 -> <CURRENTDATE_>
    */
   public void visit(Func_PgCurrentDate n);

   /**
    * f0 -> <CURRENT_TIME_>
    * f1 -> [ <PARENTHESIS_START_> SQLArgument(prn) <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_PgCurrentTime n);

   /**
    * f0 -> ( <CURTIME_> | <TIME_> )
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_CurrentTime n);

   /**
    * f0 -> <CURRENT_TIMESTAMP_>
    * f1 -> [ <PARENTHESIS_START_> SQLArgument(prn) <PARENTHESIS_CLOSE_> ]
    */
   public void visit(Func_PgCurrentTimeStamp n);

   /**
    * f0 -> <YEAR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Year n);

   /**
    * f0 -> <MONTH_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Month n);

   /**
    * f0 -> <MINUTE_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Minute n);

   /**
    * f0 -> <HOUR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Hour n);

   /**
    * f0 -> <SECOND_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Second n);

   /**
    * f0 -> <TIMESTAMP_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> [ SQLArgument(prn) ]
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_TimeStamp n);

   /**
    * f0 -> <WEEKOFYEAR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_WeekOfYear n);

   /**
    * f0 -> <NOW_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Now n);

   /**
    * f0 -> <SOUNDEX_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_SoundEx n);

   /**
    * f0 -> <INITCAP_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_InitCap n);

   /**
    * f0 -> <LFILL_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> ","
    * f4 -> SQLArgument(prn)
    * f5 -> [ "," SQLArgument(prn) ]
    * f6 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_LFill n);

   /**
    * f0 -> <MAPCHAR_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> [ "," <INT_LITERAL> ]
    * f4 -> [ "," Identifier(prn) ]
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_MapChar n);

   /**
    * f0 -> <NUM_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_NUM n);

   /**
    * f0 -> <CAST_>
    * f1 -> <PARENTHESIS_START_>
    * f2 -> SQLArgument(prn)
    * f3 -> <AS_>
    * f4 -> ( types() | <NULL_> )
    * f5 -> <PARENTHESIS_CLOSE_>
    */
   public void visit(Func_Cast n);

   /**
    * f0 -> Identifier(prn)
    * f1 -> ( "," Identifier(prn) )*
    */
   public void visit(ColumnNameList n);

   /**
    * f0 -> ( Identifier(prn) | <TEMPDOT_> Identifier(prn) | <PUBLICDOT_> Identifier(prn) | <QPUBLICDOT_> Identifier(prn) )
    */
   public void visit(TableName n);

   /**
    * f0 -> <DECIMAL_LITERAL>
    *       | <INT_LITERAL>
    *       | <SCIENTIFIC_LITERAL>
    */
   public void visit(FloatingPointNumber n);

   /**
    * f0 -> <SHOW_AGENTS_>
    */
   public void visit(ShowAgents n);

   /**
    * f0 -> <SHOW_DATABASES_>
    */
   public void visit(ShowDatabases n);

   /**
    * f0 -> <SHOW_STATEMENTS_>
    */
   public void visit(ShowStatements n);

   /**
    * f0 -> <SHOW_TABLES_>
    */
   public void visit(ShowTables n);

   /**
    * f0 -> <SHOW_TRAN_ISOLATION_>
    */
   public void visit(ShowTranIsolation n);

   /**
    * f0 -> <BEGIN_>
    * f1 -> [ ( <TRANSACTION_> | <TRAN_> | <WORK_> ) ]
    */
   public void visit(BeginTransaction n);

   /**
    * f0 -> ( <COMMIT_> | <END_> )
    * f1 -> [ ( <TRANSACTION_> | <TRAN_> | <WORK_> ) ]
    */
   public void visit(CommitTransaction n);

   /**
    * f0 -> <ROLLBACK_>
    * f1 -> [ ( <TRANSACTION_> | <TRAN_> | <WORK_> ) ]
    */
   public void visit(RollbackTransaction n);

   /**
    * f0 -> ( <DESCRIBE_> | <SHOW_TABLE_> | <SHOW_VIEW_> )
    * f1 -> TableName(prn)
    */
   public void visit(DescribeTable n);

   /**
    * f0 -> <SHOW_CONSTRAINTS_>
    * f1 -> <ON_>
    * f2 -> TableName(prn)
    */
   public void visit(ShowConstraints n);

   /**
    * f0 -> <SHOW_INDEXES_>
    * f1 -> <ON_>
    * f2 -> TableName(prn)
    */
   public void visit(ShowIndexes n);

   /**
    * f0 -> <SHOW_USERS_>
    */
   public void visit(ShowUsers n);

   /**
    * f0 -> <SHOW_VIEWS_>
    */
   public void visit(ShowViews n);

   /**
    * f0 -> <DEALLOCATE_>
    * f1 -> [ <PREPARE_> ]
    * f2 -> Identifier(prn)
    */
   public void visit(Deallocate n);

   /**
    * f0 -> <CREATE_>
    * f1 -> <USER_>
    * f2 -> Identifier(prn)
    * f3 -> <PASSWORD_>
    * f4 -> Identifier(prn)
    * f5 -> [ <DBA_> | <RESOURCE_> | <STANDARD_> ]
    */
   public void visit(CreateUser n);

   /**
    * f0 -> <DROP_>
    * f1 -> <USER_>
    * f2 -> Identifier(prn)
    */
   public void visit(DropUser n);

   /**
    * f0 -> <ALTER_>
    * f1 -> <USER_>
    * f2 -> Identifier(prn)
    * f3 -> [ <PASSWORD_> Identifier(prn) ]
    * f4 -> [ <DBA_> | <RESOURCE_> | <STANDARD_> ]
    */
   public void visit(AlterUser n);

   /**
    * f0 -> <PUBLIC_>
    *       | Identifier(prn)
    */
   public void visit(Grantee n);

   /**
    * f0 -> Grantee(prn)
    * f1 -> ( "," Grantee(prn) )*
    */
   public void visit(GranteeList n);

   /**
    * f0 -> <STAR_>
    *       | Identifier(prn) ( "," Identifier(prn) )*
    */
   public void visit(TableListForGrant n);

   /**
    * f0 -> <SELECT_>
    *       | <INSERT_>
    *       | <UPDATE_>
    *       | <DELETE_>
    *       | <REFERENCES_>
    *       | <INDEX_>
    *       | <ALTER_>
    */
   public void visit(Privilege n);

   /**
    * f0 -> <ALL_>
    *       | Privilege(prn) ( "," Privilege(prn) )*
    */
   public void visit(PrivilegeList n);

   /**
    * f0 -> <GRANT_>
    * f1 -> PrivilegeList(prn)
    * f2 -> <ON_>
    * f3 -> [ <TABLE_> ]
    * f4 -> TableListForGrant(prn)
    * f5 -> <TO_>
    * f6 -> GranteeList(prn)
    */
   public void visit(Grant n);

   /**
    * f0 -> <REVOKE_>
    * f1 -> PrivilegeList(prn)
    * f2 -> <ON_>
    * f3 -> [ <TABLE_> ]
    * f4 -> TableListForGrant(prn)
    * f5 -> <FROM_>
    * f6 -> GranteeList(prn)
    */
   public void visit(Revoke n);

   /**
    * f0 -> <CLUSTER_>
    * f1 -> [ Identifier(prn) [ <ON_> Identifier(prn) ] ]
    */
   public void visit(Cluster n);

   /**
    * f0 -> <TRUNCATE_>
    * f1 -> [ <TABLE_> ]
    * f2 -> TableName(prn)
    */
   public void visit(Truncate n);

   /**
    * f0 -> <KILL_>
    * f1 -> <INT_LITERAL>
    */
   public void visit(Kill n);

   /**
    * f0 -> <UNLISTEN_>
    * f1 -> [ Identifier(prn) | <STAR_> ]
    */
   public void visit(Unlisten n);

   /**
    * f0 -> <DECLARE_>
    * f1 -> Identifier(prn)
    * f2 -> <CURSOR_>
    * f3 -> <FOR_>
    * f4 -> Select(prn)
    */
   public void visit(DeclareCursor n);

   /**
    * f0 -> <CLOSE_>
    * f1 -> ( Identifier(prn) | <ALL_> )
    */
   public void visit(CloseCursor n);

   /**
    * f0 -> <FETCH_>
    * f1 -> <INT_LITERAL>
    * f2 -> <FROM_>
    * f3 -> Identifier(prn)
    */
   public void visit(FetchCursor n);

}

